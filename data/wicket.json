{
    "wicket_0431d5b": {
        "bug_id": "wicket_0431d5b",
        "commit": "https://github.com/apache/wicket/commit/0431d5bcccb0def666eebfb822acbd93c6b1fe2d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/0431d5bcccb0def666eebfb822acbd93c6b1fe2d/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java?ref=0431d5bcccb0def666eebfb822acbd93c6b1fe2d",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java",
                "patch": "@@ -343,7 +343,8 @@ public synchronized void unbind()\n \t\tpublic synchronized boolean exists(String pageMapName, int pageId, int versionNumber)\r\n \t\t{\r\n \t\t\tPageMapEntry entry = getPageMapEntry(pageMapName, false);\r\n-\t\t\treturn entry.getManager().getPageWindow(pageId, versionNumber, -1) != null;\r\n+\t\t\treturn entry != null &&\r\n+\t\t\t\t\tentry.getManager().getPageWindow(pageId, versionNumber, -1) != null;\r\n \t\t}\r\n \t}\r\n \r",
                "raw_url": "https://github.com/apache/wicket/raw/0431d5bcccb0def666eebfb822acbd93c6b1fe2d/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java",
                "sha": "79ec04bb18e01b289170b9ed86829c848d596f61",
                "status": "modified"
            }
        ],
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@567320 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/5f6248ab5846c3e2c6ea6d0a7d4a347c576a0780",
        "repo": "wicket",
        "unit_tests": [
            "DiskPageStoreTest.java"
        ]
    },
    "wicket_046c766": {
        "bug_id": "wicket_046c766",
        "commit": "https://github.com/apache/wicket/commit/046c766581b8291edf1ece12ea3116edbe3fef89",
        "file": [
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/wicket/blob/046c766581b8291edf1ece12ea3116edbe3fef89/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java?ref=046c766581b8291edf1ece12ea3116edbe3fef89",
                "deletions": 4,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.wicket.markup.html.WicketEventReference;\n import org.apache.wicket.response.NullResponse;\n import org.apache.wicket.util.string.JavascriptUtils;\n+import org.apache.wicket.util.string.Strings;\n \n \n /**\n@@ -69,6 +70,10 @@ public final void markRendered(Object object)\n \t */\n \tpublic void renderCSSReference(ResourceReference reference)\n \t{\n+\t\tif (reference == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"reference cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tCharSequence url = RequestCycle.get().urlFor(reference);\n@@ -82,6 +87,10 @@ public void renderCSSReference(ResourceReference reference)\n \t */\n \tpublic void renderCSSReference(ResourceReference reference, String media)\n \t{\n+\t\tif (reference == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"reference cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tCharSequence url = RequestCycle.get().urlFor(reference);\n@@ -94,6 +103,10 @@ public void renderCSSReference(ResourceReference reference, String media)\n \t */\n \tpublic void renderCSSReference(String url)\n \t{\n+\t\tif (Strings.isEmpty(url))\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"url cannot be empty or null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\trenderCSSReference(url, null);\n@@ -106,6 +119,10 @@ public void renderCSSReference(String url)\n \t */\n \tpublic void renderCSSReference(String url, String media)\n \t{\n+\t\tif (Strings.isEmpty(url))\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"url cannot be empty or null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tList token = Arrays.asList(new Object[] { \"css\", url, media });\n@@ -131,6 +148,10 @@ public void renderCSSReference(String url, String media)\n \t */\n \tpublic void renderJavascriptReference(ResourceReference reference)\n \t{\n+\t\tif (reference == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"reference cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tCharSequence url = RequestCycle.get().urlFor(reference);\n@@ -144,6 +165,10 @@ public void renderJavascriptReference(ResourceReference reference)\n \t */\n \tpublic void renderJavascriptReference(ResourceReference reference, String id)\n \t{\n+\t\tif (reference == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"reference cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tCharSequence url = RequestCycle.get().urlFor(reference);\n@@ -156,6 +181,10 @@ public void renderJavascriptReference(ResourceReference reference, String id)\n \t */\n \tpublic void renderJavascriptReference(String url)\n \t{\n+\t\tif (Strings.isEmpty(url))\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"url cannot be empty or null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tList token = Arrays.asList(new Object[] { \"javascript\", url });\n@@ -173,6 +202,10 @@ public void renderJavascriptReference(String url)\n \t */\n \tpublic void renderJavascriptReference(String url, String id)\n \t{\n+\t\tif (Strings.isEmpty(url))\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"url cannot be empty or null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tList token1 = Arrays.asList(new Object[] { \"javascript\", url });\n@@ -192,6 +225,10 @@ public void renderJavascriptReference(String url, String id)\n \t */\n \tpublic void renderJavascript(CharSequence javascript, String id)\n \t{\n+\t\tif (javascript == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"javascript cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tList token = Arrays.asList(new Object[] { javascript.toString(), id });\n@@ -208,6 +245,10 @@ public void renderJavascript(CharSequence javascript, String id)\n \t */\n \tpublic void renderString(CharSequence string)\n \t{\n+\t\tif (string == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"string cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tString token = string.toString();\n@@ -232,6 +273,10 @@ public final boolean wasRendered(Object object)\n \t */\n \tpublic void renderOnDomReadyJavascript(String javascript)\n \t{\n+\t\tif (javascript == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"javascript cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\trenderOnEventJavacript(\"window\", \"domready\", javascript);\n@@ -243,6 +288,10 @@ public void renderOnDomReadyJavascript(String javascript)\n \t */\n \tpublic void renderOnLoadJavascript(String javascript)\n \t{\n+\t\tif (javascript == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"javascript cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\trenderOnEventJavacript(\"window\", \"load\", javascript);\n@@ -258,13 +307,12 @@ public void renderOnEventJavacript(String target, String event, String javascrip\n \t{\n \t\tif (!closed)\n \t\t{\n-\t\t\tList token = Arrays\n-\t\t\t\t\t.asList(new Object[] { \"javascript-event\", target, event, javascript });\n+\t\t\tList token = Arrays.asList(new Object[] { \"javascript-event\", target, event, javascript });\n \t\t\tif (wasRendered(token) == false)\n \t\t\t{\n \t\t\t\trenderJavascriptReference(WicketEventReference.INSTANCE);\n \t\t\t\tJavascriptUtils.writeJavascript(getResponse(), \"Wicket.Event.add(\" + target +\n-\t\t\t\t\t\t\", \\\"\" + event + \"\\\", function() { \" + javascript + \";});\");\n+\t\t\t\t\t\", \\\"\" + event + \"\\\", function() { \" + javascript + \";});\");\n \t\t\t\tmarkRendered(token);\n \t\t\t}\n \t\t}\n@@ -275,7 +323,7 @@ public void renderOnEventJavacript(String target, String event, String javascrip\n \t */\n \tpublic void close()\n \t{\n-\t\tthis.closed = true;\n+\t\tclosed = true;\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/046c766581b8291edf1ece12ea3116edbe3fef89/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java",
                "sha": "3dbdcd4d18bddc05de20058996225c6a677b8a90",
                "status": "modified"
            }
        ],
        "message": "WICKET-1396: Add more explicit exception for NPE in HeaderResponse.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@635053 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/d09448e754f57eb0cce6127047560a66e6560c04",
        "repo": "wicket",
        "unit_tests": [
            "HeaderResponseTest.java",
            "TestHeaderResponse.java"
        ]
    },
    "wicket_145b9f0": {
        "bug_id": "wicket_145b9f0",
        "commit": "https://github.com/apache/wicket/commit/145b9f00b17e143c12a26527213e3eddc62026fc",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/145b9f00b17e143c12a26527213e3eddc62026fc/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java?ref=145b9f00b17e143c12a26527213e3eddc62026fc",
                "deletions": 13,
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "patch": "@@ -577,29 +577,35 @@ public String toString()\n \t{\n \t\tStringBuilder str = new StringBuilder();\n \n-\t\tfor (int i = 0; i < indexedParameters.size(); i++)\n+\t\tif (indexedParameters != null)\n \t\t{\n-\t\t\tif (i > 0)\n-\t\t\t\tstr.append(\", \");\n+\t\t\tfor (int i = 0; i < indexedParameters.size(); i++)\n+\t\t\t{\n+\t\t\t\tif (i > 0)\n+\t\t\t\t\tstr.append(\", \");\n \n-\t\t\tstr.append(i);\n-\t\t\tstr.append('=');\n-\t\t\tstr.append('[').append(indexedParameters.get(i)).append(']');\n+\t\t\t\tstr.append(i);\n+\t\t\t\tstr.append('=');\n+\t\t\t\tstr.append('[').append(indexedParameters.get(i)).append(']');\n+\t\t\t}\n \t\t}\n \n \t\tif (str.length() > 0)\n \t\t\tstr.append(\", \");\n \n-\t\tfor (int i = 0; i < namedParameters.size(); i++)\n+\t\tif (namedParameters != null)\n \t\t{\n-\t\t\tEntry entry = namedParameters.get(i);\n+\t\t\tfor (int i = 0; i < namedParameters.size(); i++)\n+\t\t\t{\n+\t\t\t\tEntry entry = namedParameters.get(i);\n \n-\t\t\tif (i > 0)\n-\t\t\t\tstr.append(\", \");\n+\t\t\t\tif (i > 0)\n+\t\t\t\t\tstr.append(\", \");\n \n-\t\t\tstr.append(entry.key);\n-\t\t\tstr.append('=');\n-\t\t\tstr.append('[').append(entry.value).append(']');\n+\t\t\t\tstr.append(entry.key);\n+\t\t\t\tstr.append('=');\n+\t\t\t\tstr.append('[').append(entry.value).append(']');\n+\t\t\t}\n \t\t}\n \t\treturn str.toString();\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/145b9f00b17e143c12a26527213e3eddc62026fc/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "sha": "190c4f2f88667d52327ef10adde854aa21505a32",
                "status": "modified"
            }
        ],
        "message": "WICKET-3270  NPE in PageParameters toString method\n\nAdd a check for null for indexed and named parameters before iterating on them\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1050689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/d6033493518adcddc3e28171b8ebd9d329d127c7",
        "repo": "wicket",
        "unit_tests": [
            "PageParametersTest.java"
        ]
    },
    "wicket_20316d5": {
        "bug_id": "wicket_20316d5",
        "commit": "https://github.com/apache/wicket/commit/20316d5f06ca46eb047e1471baf06d29c6ccd309",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/20316d5f06ca46eb047e1471baf06d29c6ccd309/wicket/src/java/wicket/markup/html/link/BookmarkablePageLink.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/link/BookmarkablePageLink.java?ref=20316d5f06ca46eb047e1471baf06d29c6ccd309",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/link/BookmarkablePageLink.java",
                "patch": "@@ -220,7 +220,7 @@ protected CharSequence getURL()\n \n \t\tif (getPopupSettings() != null)\n \t\t{\n-\t\t\treturn urlFor(getPopupSettings().getPageMap(), pageClass, parameters);\n+\t\t\treturn urlFor(getPopupSettings().getPageMap(this), pageClass, parameters);\n \t\t}\n \t\telse\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/20316d5f06ca46eb047e1471baf06d29c6ccd309/wicket/src/java/wicket/markup/html/link/BookmarkablePageLink.java",
                "sha": "8e1d959678a4bcceb64780795ee201f581ccfaf8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/20316d5f06ca46eb047e1471baf06d29c6ccd309/wicket/src/java/wicket/markup/html/link/Link.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/link/Link.java?ref=20316d5f06ca46eb047e1471baf06d29c6ccd309",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/link/Link.java",
                "patch": "@@ -260,7 +260,7 @@ public final void onLinkClicked()\n \t\tif (popupSettings != null)\n \t\t{\n \t\t\tRequestCycle.get().getRequest().getRequestParameters().setPageMapName(\n-\t\t\t\t\tpopupSettings.getPageMap().getName());\n+\t\t\t\t\tpopupSettings.getPageMap(this).getName());\n \t\t}\n \t\t// Invoke subclass handler\n \t\tonClick();",
                "raw_url": "https://github.com/apache/wicket/raw/20316d5f06ca46eb047e1471baf06d29c6ccd309/wicket/src/java/wicket/markup/html/link/Link.java",
                "sha": "2b15662283c34c8762be874408457ce8ead89ea3",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/wicket/blob/20316d5f06ca46eb047e1471baf06d29c6ccd309/wicket/src/java/wicket/markup/html/link/PopupSettings.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/link/PopupSettings.java?ref=20316d5f06ca46eb047e1471baf06d29c6ccd309",
                "deletions": 6,
                "filename": "wicket/src/java/wicket/markup/html/link/PopupSettings.java",
                "patch": "@@ -20,8 +20,11 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import wicket.Component;\n import wicket.PageMap;\n-import wicket.RequestCycle;\n \n /**\n  * A popup specification can be used as a property of the {@link Link}classes\n@@ -41,6 +44,9 @@\n  */\n public class PopupSettings implements Serializable\n {\n+\t/** The log. */\n+\tprivate static final Log log = LogFactory.getLog(PopupSettings.class);\n+\n \tprivate static final long serialVersionUID = 1L;\n \n \t/** Flag to include location bar */\n@@ -136,6 +142,7 @@ public PopupSettings(final int displayFlags)\n \tpublic PopupSettings(PageMap pagemap)\n \t{\n \t\tthis.pageMapName = pagemap.getName();\n+\t\tthis.windowName = pageMapName;\n \t}\n \n \t/**\n@@ -155,6 +162,7 @@ public PopupSettings(PageMap pagemap, final int displayFlags)\n \t{\n \t\tthis.displayFlags = displayFlags;\n \t\tthis.pageMapName = pagemap.getName();\n+\t\tthis.windowName = pageMapName;\n \t}\n \n \t/**\n@@ -281,15 +289,30 @@ public PopupSettings setWidth(int popupWidth)\n \t * anything you want, although you should use alphanumeric characters only\n \t * (no spaces or punctuation). If you have a window already open and call\n \t * window.open a second time using the same windowName, the first window\n-\t * will be reused rather than opening a second window\n+\t * will be reused rather than opening a second window.\n+\t * <p>\n+\t * The window name and the name of the page map should have the same value.\n+\t * If it is different, the page map will be set to the value of the\n+\t * popupWindowName argument.\n+\t * </p>\n \t * \n \t * @param popupWindowName\n \t *            window name.\n \t * @return This\n \t */\n \tpublic PopupSettings setWindowName(String popupWindowName)\n \t{\n-\t\tthis.windowName = popupWindowName;\n+\t\tif (popupWindowName != null)\n+\t\t{\n+\t\t\tthis.windowName = popupWindowName;\n+\t\t\tif (pageMapName != null && (!pageMapName.equals(popupWindowName)))\n+\t\t\t{\n+\t\t\t\tlog.warn(\"the page map and window name should be the same. The page map was \"\n+\t\t\t\t\t\t+ pageMapName + \", and the requested window name is \" + popupWindowName\n+\t\t\t\t\t\t+ \"; changing the page map to \" + popupWindowName);\n+\t\t\t}\n+\t\t\tthis.pageMapName = popupWindowName;\n+\t\t}\n \t\treturn this;\n \t}\n \n@@ -306,18 +329,19 @@ private String flagToString(final int flag)\n \t/**\n \t * Gets the pagemap where the popup page must be created in.\n \t * \n+\t * @param callee\n+\t *            Calling component\n \t * @return The pagemap where the popup page must be created in\n \t */\n-\tpublic PageMap getPageMap()\n+\tpublic PageMap getPageMap(Component callee)\n \t{\n \t\tif (pageMapName != null)\n \t\t{\n \t\t\treturn PageMap.forName(pageMapName);\n \t\t}\n \t\telse\n \t\t{\n-\t\t\t// fallback on the current page map\n-\t\t\treturn RequestCycle.get().getRequest().getPage().getPageMap();\n+\t\t\treturn callee.getPage().getPageMap();\n \t\t}\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/20316d5f06ca46eb047e1471baf06d29c6ccd309/wicket/src/java/wicket/markup/html/link/PopupSettings.java",
                "sha": "0b25b1de810ba3ede09e6f456384da2e1afc1d4d",
                "status": "modified"
            }
        ],
        "message": "popup settings synced the window name and page map name and doesn't throw a NPE anymore when no page map was set\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@461810 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/07b20b4ee2e6e1fe4264b5cdf7eeb879cfed8e44",
        "repo": "wicket",
        "unit_tests": [
            "BookmarkablePageLinkTest.java"
        ]
    },
    "wicket_26bd939": {
        "bug_id": "wicket_26bd939",
        "commit": "https://github.com/apache/wicket/commit/26bd939daeac5bfbea2d267c5d43ec2a1f73e8ff",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/26bd939daeac5bfbea2d267c5d43ec2a1f73e8ff/wicket/src/java/wicket/markup/MarkupCache.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/MarkupCache.java?ref=26bd939daeac5bfbea2d267c5d43ec2a1f73e8ff",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/markup/MarkupCache.java",
                "patch": "@@ -227,7 +227,10 @@ public final IMarkup getMarkup(final MarkupContainer<?> container,\n \t\t{\n \t\t\tsynchronized (markupCache)\n \t\t\t{\n-\t\t\t\tmarkup = markupCache.get(cacheKey);\n+\t\t\t\tif (cacheKey != null)\n+\t\t\t\t{\n+\t\t\t\t\tmarkup = markupCache.get(cacheKey);\n+\t\t\t\t}\n \n \t\t\t\t// Must Markup be loaded?\n \t\t\t\tif (markup == null)\n@@ -267,7 +270,10 @@ public final IMarkup getMarkup(final MarkupContainer<?> container,\n \n \t\t\t\t\t\t// Save any markup list (or absence of one) for next\n \t\t\t\t\t\t// time\n-\t\t\t\t\t\tmarkupCache.put(cacheKey, markup);\n+\t\t\t\t\t\tif (cacheKey != null)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tmarkupCache.put(cacheKey, markup);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/26bd939daeac5bfbea2d267c5d43ec2a1f73e8ff/wicket/src/java/wicket/markup/MarkupCache.java",
                "sha": "c5cf8bbab00c5cd9ec22b0bf0c8ec788299d6ae0",
                "status": "modified"
            }
        ],
        "message": "fix NPE if cache key == null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@461864 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/0cbbfbf457fd9185f70df60179a0a7029d8a31d7",
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_28583a2": {
        "bug_id": "wicket_28583a2",
        "commit": "https://github.com/apache/wicket/commit/28583a29c3e8367d93105c097f9826302809a477",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/wicket/blob/28583a29c3e8367d93105c097f9826302809a477/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java?ref=28583a29c3e8367d93105c097f9826302809a477",
                "deletions": 7,
                "filename": "wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java",
                "patch": "@@ -40,7 +40,11 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n-\tprivate Form<?> form;\n+\t/**\n+\t * should never be accessed directly (thus the __ cause its overkil to create a super class),\n+\t * instead always use #getForm()\n+\t */\n+\tprivate Form<?> __form;\n \n \t/**\n \t * Constructor. This constructor can only be used when the component this behavior is attached\n@@ -65,7 +69,7 @@ public AjaxFormSubmitBehavior(String event)\n \tpublic AjaxFormSubmitBehavior(Form<?> form, String event)\n \t{\n \t\tsuper(event);\n-\t\tthis.form = form;\n+\t\t__form = form;\n \n \t\tif (form != null)\n \t\t{\n@@ -79,20 +83,20 @@ public AjaxFormSubmitBehavior(Form<?> form, String event)\n \t */\n \tprotected Form<?> getForm()\n \t{\n-\t\tif (form == null)\n+\t\tif (__form == null)\n \t\t{\n \t\t\t// try to find form in the hierarchy of owning component\n \t\t\tComponent component = getComponent();\n-\t\t\tform = component.findParent(Form.class);\n-\t\t\tif (form == null)\n+\t\t\t__form = component.findParent(Form.class);\n+\t\t\tif (__form == null)\n \t\t\t{\n \t\t\t\tthrow new IllegalStateException(\n \t\t\t\t\t\"form was not specified in the constructor and cannot \"\n \t\t\t\t\t\t+ \"be found in the hierarchy of the component this behavior \"\n \t\t\t\t\t\t+ \"is attached to\");\n \t\t\t}\n \t\t}\n-\t\treturn form;\n+\t\treturn __form;\n \t}\n \n \t/**\n@@ -139,7 +143,7 @@ protected void onEvent(AjaxRequestTarget target)\n \t\t{\n \t\t\tonSubmit(target);\n \t\t}\n-\t\tif (form.findParent(Page.class) != null)\n+\t\tif (getForm().findParent(Page.class) != null)\n \t\t{\n \t\t\t/*\n \t\t\t * there can be cases when a form is replaced with another component in the onsubmit()",
                "raw_url": "https://github.com/apache/wicket/raw/28583a29c3e8367d93105c097f9826302809a477/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java",
                "sha": "3e7cd63946b080b671a32656f32cadf62d56fee4",
                "status": "modified"
            }
        ],
        "message": "WICKET-2330 fixed npe in ajaxformsubmitbehavior\nIssue: WICKET-2330\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@785696 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/8ee095bf725cacd450d72411e609f007404df3f4",
        "repo": "wicket",
        "unit_tests": [
            "AjaxFormSubmitBehaviorTest.java"
        ]
    },
    "wicket_2b59506": {
        "bug_id": "wicket_2b59506",
        "commit": "https://github.com/apache/wicket/commit/2b5950625e73ad1ae56e346a0d250445f9c1ae9b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/2b5950625e73ad1ae56e346a0d250445f9c1ae9b/wicket/src/main/java/wicket/protocol/http/WebApplication.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/protocol/http/WebApplication.java?ref=2b5950625e73ad1ae56e346a0d250445f9c1ae9b",
                "deletions": 2,
                "filename": "wicket/src/main/java/wicket/protocol/http/WebApplication.java",
                "patch": "@@ -270,12 +270,11 @@ public final WicketFilter getWicketFilter()\n \t */\n \tpublic final void mount(IRequestTargetUrlCodingStrategy encoder)\n \t{\n-\t\tcheckMountPath(encoder.getMountPath());\n-\n \t\tif (encoder == null)\n \t\t{\n \t\t\tthrow new IllegalArgumentException(\"Encoder must be not null\");\n \t\t}\n+\t\tcheckMountPath(encoder.getMountPath());\n \n \t\tgetRequestCycleProcessor().getRequestCodingStrategy().mount(encoder);\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/2b5950625e73ad1ae56e346a0d250445f9c1ae9b/wicket/src/main/java/wicket/protocol/http/WebApplication.java",
                "sha": "0a578372ac45fe7bbeded20e5c9ff7cb42448500",
                "status": "modified"
            }
        ],
        "message": "do NPE check where it makes sense\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@529103 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/ec80b3c774b9ed113fe694484dd6d14dbc5a3a7f",
        "repo": "wicket",
        "unit_tests": [
            "WebApplicationTest.java"
        ]
    },
    "wicket_2bc1b27": {
        "bug_id": "wicket_2bc1b27",
        "commit": "https://github.com/apache/wicket/commit/2bc1b27ed93d3a53dbd15c9fab706eb71481151e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/2bc1b27ed93d3a53dbd15c9fab706eb71481151e/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java?ref=2bc1b27ed93d3a53dbd15c9fab706eb71481151e",
                "deletions": 2,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "patch": "@@ -97,8 +97,11 @@\n \t */\n \tpublic void destroy()\n \t{\n-\t\tthis.webApplication.internalDestroy();\n-\t\tthis.webApplication = null;\n+\t\tif (this.webApplication != null)\n+\t\t{\n+\t\t\tthis.webApplication.internalDestroy();\n+\t\t\tthis.webApplication = null;\n+\t\t}\n \t}\n \n \t/**\n@@ -211,6 +214,7 @@ public final void doGet(final HttpServletRequest servletRequest,\n \t\t\t\t\t// Try to see if there is a redirect stored\n \t\t\t\t\tISessionStore sessionStore = webApplication.getSessionStore();\n \t\t\t\t\tString sessionId = sessionStore.getSessionId(request, false);\n+\t\t\t\t\tSystem.out.println(\"THOOF-WICKET: Redirect to buffer for session id \" + sessionId);\n \t\t\t\t\tif (sessionId != null)\n \t\t\t\t\t{\n \t\t\t\t\t\tBufferedHttpServletResponse bufferedResponse = webApplication",
                "raw_url": "https://github.com/apache/wicket/raw/2bc1b27ed93d3a53dbd15c9fab706eb71481151e/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "sha": "2f2f5c100910d8fcd5d53c1ee322e8427e4b4eda",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on destroying when filter did not fully set up.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@541377 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/58e5c44174ace7106d4afe5cdd847dc4bbcbe3cf",
        "repo": "wicket",
        "unit_tests": [
            "WicketFilterTest.java"
        ]
    },
    "wicket_2c19418": {
        "bug_id": "wicket_2c19418",
        "commit": "https://github.com/apache/wicket/commit/2c194180a5c2660a70ae1121cd12ce355afebc52",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/2c194180a5c2660a70ae1121cd12ce355afebc52/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java?ref=2c194180a5c2660a70ae1121cd12ce355afebc52",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "patch": "@@ -1979,7 +1979,8 @@ public final void render(final MarkupStream markupStream)\n \t\t\t\tlog.debug(\"End render \" + this);\n \t\t\t}\n \t\t}\n-\t\telse\n+\t\t// markupStream is null when rendering a page\n+\t\telse if (markupStream != null)\n \t\t{\n \t\t\tif (getFlag(FLAG_PLACEHOLDER))\n \t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/2c194180a5c2660a70ae1121cd12ce355afebc52/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "sha": "8dc71e8c5edd275c83f2ab196f363adc5c3d7bdc",
                "status": "modified"
            }
        ],
        "message": "WICKET-738 setVisible(false) on Page throws NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@555407 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/cd6e324a6751689013539f14d55085f3efc9c2ba",
        "repo": "wicket",
        "unit_tests": [
            "ComponentTest.java",
            "TestComponent.java"
        ]
    },
    "wicket_2e5daa6": {
        "bug_id": "wicket_2e5daa6",
        "commit": "https://github.com/apache/wicket/commit/2e5daa658a8be6467bb922180ce8167e205a95d9",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/main/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleAuthorizationStrategy.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-auth-roles/src/main/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleAuthorizationStrategy.java?ref=2e5daa658a8be6467bb922180ce8167e205a95d9",
                "deletions": 3,
                "filename": "wicket-auth-roles/src/main/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleAuthorizationStrategy.java",
                "patch": "@@ -116,11 +116,14 @@ public boolean isActionAuthorized(final Component component, final Action action\n \t */\n \tprivate boolean check(final Action action, final AuthorizeAction authorizeActionAnnotation)\n \t{\n-\t\tif (action.getName().equals(authorizeActionAnnotation.action()))\n+\t\tif (authorizeActionAnnotation != null)\n \t\t{\n-\t\t\tif (!hasAny(new Roles(authorizeActionAnnotation.roles())))\n+\t\t\tif (action.getName().equals(authorizeActionAnnotation.action()))\n \t\t\t{\n-\t\t\t\treturn false;\n+\t\t\t\tif (!hasAny(new Roles(authorizeActionAnnotation.roles())))\n+\t\t\t\t{\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn true;",
                "raw_url": "https://github.com/apache/wicket/raw/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/main/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleAuthorizationStrategy.java",
                "sha": "d1196680f64a08a1940079004dfa5216c9d10e27",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/wicket/blob/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleTest.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleTest.java?ref=2e5daa658a8be6467bb922180ce8167e205a95d9",
                "deletions": 0,
                "filename": "wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleTest.java",
                "patch": "@@ -18,9 +18,12 @@\n package wicket.authorization.strategies.role.annotations;\n \n import java.io.Serializable;\n+import java.lang.reflect.InvocationTargetException;\n \n import junit.framework.TestCase;\n import wicket.Page;\n+import wicket.WicketRuntimeException;\n+import wicket.authorization.UnauthorizedInstantiationException;\n import wicket.authorization.strategies.role.IRoleCheckingStrategy;\n import wicket.authorization.strategies.role.RoleAuthorizationStrategy;\n import wicket.authorization.strategies.role.Roles;\n@@ -52,6 +55,24 @@ public AnnotationsRoleTest(String arg0)\n \t\tsuper(arg0);\n \t}\n \n+\t/**\n+\t * @throws Exception\n+\t */\n+\tpublic void testClear() throws Exception\n+\t{\n+\t\tWicketTester tester = new WicketTester();\n+\t\ttester.getSecuritySettings().setAuthorizationStrategy(\n+\t\t\t\tnew RoleAuthorizationStrategy(new UserRolesAuthorizer(\"FOO\")));\n+\t\ttester.startPage(new ITestPageSource()\n+\t\t{\n+\t\t\tpublic Page getTestPage()\n+\t\t\t{\n+\t\t\t\treturn new NormalPage();\n+\t\t\t}\n+\t\t});\n+\t\ttester.assertRenderedPage(NormalPage.class);\n+\t}\n+\n \t/**\n \t * @throws Exception\n \t */\n@@ -91,6 +112,11 @@ public Page getTestPage()\n \t\t}\n \t\tcatch (Exception e)\n \t\t{\n+\t\t\tif (!(e.getCause() instanceof InvocationTargetException && ((InvocationTargetException)e\n+\t\t\t\t\t.getCause()).getTargetException() instanceof UnauthorizedInstantiationException))\n+\t\t\t{\n+\t\t\t\tthrow e;\n+\t\t\t}\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/AnnotationsRoleTest.java",
                "sha": "944c16fccccdbe2178683514e20917ba88e4a320",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.html",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.html?ref=2e5daa658a8be6467bb922180ce8167e205a95d9",
                "deletions": 0,
                "filename": "wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.html",
                "patch": "@@ -0,0 +1,7 @@\n+<html>\n+\t<head>\n+\t</head>\n+\t<body>\n+\t\tHELLO\n+\t</body>\n+</html>",
                "raw_url": "https://github.com/apache/wicket/raw/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.html",
                "sha": "07f9c7051a2b7176e850668b351f451adfe730e4",
                "status": "added"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/wicket/blob/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.java?ref=2e5daa658a8be6467bb922180ce8167e205a95d9",
                "deletions": 0,
                "filename": "wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * $Id$ $Revision$\n+ * $Date$\n+ * \n+ * ==============================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package wicket.authorization.strategies.role.annotations;\n+\n+import wicket.markup.html.WebPage;\n+\n+/**\n+ * Test page that has no annotation and should thus be available.\n+ * \n+ * @author Eelco Hillenius\n+ */\n+public class NormalPage extends WebPage\n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Construct.\n+\t */\n+\tpublic NormalPage()\n+\t{\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/2e5daa658a8be6467bb922180ce8167e205a95d9/wicket-auth-roles/src/test/java/wicket/authorization/strategies/role/annotations/NormalPage.java",
                "sha": "11f4f087cfda0c249c42a91a6d237e0d26307546",
                "status": "added"
            }
        ],
        "message": "NPE fix & unit test for fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459301 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/1d9e3f86003812b0e963e2334c831949898ea9b4",
        "repo": "wicket",
        "unit_tests": [
            "AnnotationsRoleAuthorizationStrategyTest.java"
        ]
    },
    "wicket_2f0d105": {
        "bug_id": "wicket_2f0d105",
        "commit": "https://github.com/apache/wicket/commit/2f0d10586617093046cf60909622f2c8f5be8d6a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/2f0d10586617093046cf60909622f2c8f5be8d6a/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java?ref=2f0d10586617093046cf60909622f2c8f5be8d6a",
                "deletions": 1,
                "filename": "wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java",
                "patch": "@@ -326,7 +326,8 @@ protected FeedbackMessagesModel newFeedbackMessagesModel()\n \t */\n \tprotected Component newMessageDisplayComponent(String id, FeedbackMessage message)\n \t{\n-\t\tLabel label = new Label(id, message.getMessage().toString());\n+\t\tSerializable serializable = message.getMessage();\n+\t\tLabel label = new Label(id, (serializable == null) ? \"\" : serializable.toString());\n \t\tlabel.setEscapeModelStrings(FeedbackPanel.this.getEscapeModelStrings());\n \t\treturn label;\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/2f0d10586617093046cf60909622f2c8f5be8d6a/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java",
                "sha": "7182eaeb2ce712193137b77aef7869d323feeae0",
                "status": "modified"
            }
        ],
        "message": "WICKET-1780 NPE in feedback panel\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@683906 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/8cd64ee40d1ac5444d7136e9a68c71010085f65a",
        "repo": "wicket",
        "unit_tests": [
            "FeedbackPanelTest.java"
        ]
    },
    "wicket_32a40bc": {
        "bug_id": "wicket_32a40bc",
        "commit": "https://github.com/apache/wicket/commit/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "patch": "@@ -17,14 +17,17 @@\n package org.apache.wicket.markup.parser;\n \n import java.text.ParseException;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.wicket.MetaDataKey;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.HtmlSpecialTag;\n import org.apache.wicket.markup.Markup;\n import org.apache.wicket.markup.MarkupElement;\n import org.apache.wicket.markup.MarkupParser;\n import org.apache.wicket.markup.MarkupResourceStream;\n import org.apache.wicket.markup.MarkupStream;\n+import org.apache.wicket.request.cycle.RequestCycle;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,7 +48,12 @@\n \n \t/** The next MarkupFilter in the chain */\n \tprivate IMarkupFilter parent;\n-\n+\t\n+\t/** A key for a request-relative counter (see {@link #getRequestUniqueId()}) **/\n+\tprivate final static MetaDataKey<AtomicLong> REQUEST_COUNTER_KEY = new MetaDataKey<AtomicLong>()\n+\t{\n+\t};\n+\t\t\n \t/**\n \t * Construct.\n \t */\n@@ -190,4 +198,25 @@ else if (markupResourceStream != null)\n \t\t}\n \t\treturn wicketNamespace;\n \t}\n+\t\n+\t/**\n+\t * Returns an id using a request-relative counter. This can be\n+\t * useful for autocomponent tags that needs to get tag id.\n+\t * \n+\t * @return\n+\t * \t\tthe request-relative id\n+\t */\n+\tprotected long getRequestUniqueId()\n+\t{\n+\t\tAtomicLong counter = RequestCycle.get().getMetaData(REQUEST_COUNTER_KEY);\n+\t\t\n+\t\tif (counter == null)\n+\t\t{\n+\t\t\tcounter = new AtomicLong();\n+\t\t\t\n+\t\t\tRequestCycle.get().setMetaData(REQUEST_COUNTER_KEY, counter);\n+\t\t}\n+\t\t\n+\t\treturn counter.getAndIncrement();\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "sha": "6478da26547d265dbe05a1edea4f5749e4c42d8c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "patch": "@@ -19,7 +19,6 @@\n import java.text.ParseException;\n import java.util.ArrayDeque;\n import java.util.Deque;\n-import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -73,14 +72,6 @@ public Component newComponent(MarkupContainer container, ComponentTag tag)\n \t/** Stack of <wicket:enclosure> tags */\n \tprivate Deque<ComponentTag> stack;\n \n-\t/**\n-\t * Used to assign unique ids to enclosures\n-\t * \n-\t * TODO queueing: there has to be a better way of doing this, perhaps some merged-markup-unique\n-\t * counter\n-\t */\n-\tprivate static final AtomicLong index = new AtomicLong();\n-\n \t/** The id of the first wicket tag inside the enclosure */\n \tprivate String childId;\n \n@@ -109,7 +100,7 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\t\t// If open tag, than put the tag onto the stack\n \t\t\tif (tag.isOpen())\n \t\t\t{\n-\t\t\t\ttag.setId(tag.getId() + index.getAndIncrement());\n+\t\t\t\ttag.setId(tag.getId() + getRequestUniqueId());\n \t\t\t\ttag.setModified(true);\n \t\t\t\ttag.setAutoComponentFactory(FACTORY);\n ",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "sha": "b29da3bef70a4499a7c830f2b446d40c5f4e4453",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import java.text.ParseException;\n import java.util.Iterator;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -109,14 +108,6 @@ public Component newComponent(MarkupContainer container, ComponentTag tag)\n \t\t}\n \t};\n \n-\t\n-\t/** \n-\t * https://issues.apache.org/jira/browse/WICKET-5724\n-\t * \n-\t * Unique index to generate new tag ids.\n-\t * */\n-\tprivate final AtomicInteger componentIndex = new AtomicInteger();\n-\n \t/**\n \t * Constructor for the IComponentResolver role.\n \t */\n@@ -164,7 +155,7 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\t\t\tif (tag.getId() == null)\n \t\t\t\t{\n \t\t\t\t\ttag.setId(getWicketRelativePathPrefix(null)\n-\t\t\t\t\t\t+ componentIndex.getAndIncrement());\n+\t\t\t\t\t\t+ getRequestUniqueId());\n \t\t\t\t\ttag.setAutoComponentTag(true);\n \t\t\t\t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "sha": "554df3edb071d8a2de01aebbf1fe95e8d5a371b1",
                "status": "modified"
            }
        ],
        "message": "WICKET-5904 NPE after editing a markup file in debug mode",
        "parent": "https://github.com/apache/wicket/commit/52d99f303bea3994a28d2f08c878909ef56044f1",
        "repo": "wicket",
        "unit_tests": [
            "RelativePathPrefixHandlerTest.java"
        ]
    },
    "wicket_35e9a11": {
        "bug_id": "wicket_35e9a11",
        "commit": "https://github.com/apache/wicket/commit/35e9a11b577db1cd427bc893fb4d95f091ead2b1",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/35e9a11b577db1cd427bc893fb4d95f091ead2b1/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java?ref=35e9a11b577db1cd427bc893fb4d95f091ead2b1",
                "deletions": 16,
                "filename": "wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "patch": "@@ -218,26 +218,29 @@ private void writeObject(final ObjectOutputStream s) throws IOException\n \t\t\ts.defaultWriteObject();\n \n \t\t\t// prepare for serialization and store the pages\n-\t\t\tList<Serializable> l = new ArrayList<Serializable>();\n-\t\t\tIPageStore pageStore = getPageStore();\n-\t\t\tfor (IManageablePage p : pages)\n+\t\t\tList<Serializable> serializedPages = new ArrayList<Serializable>();\n+\t\t\tif (pages != null)\n \t\t\t{\n-\t\t\t\tSerializable preparedPage;\n-\t\t\t\tif (pageStore != null)\n-\t\t\t\t{\n-\t\t\t\t\tpreparedPage = pageStore.prepareForSerialization(sessionId, p);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tpreparedPage = p;\n-\t\t\t\t}\n-\n-\t\t\t\tif (preparedPage != null)\n+\t\t\t\tIPageStore pageStore = getPageStore();\n+\t\t\t\tfor (IManageablePage p : pages)\n \t\t\t\t{\n-\t\t\t\t\tl.add(preparedPage);\n+\t\t\t\t\tSerializable preparedPage;\n+\t\t\t\t\tif (pageStore != null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpreparedPage = pageStore.prepareForSerialization(sessionId, p);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpreparedPage = p;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (preparedPage != null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tserializedPages.add(preparedPage);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\ts.writeObject(l);\n+\t\t\ts.writeObject(serializedPages);\n \t\t}\n \n \t\t/**",
                "raw_url": "https://github.com/apache/wicket/raw/35e9a11b577db1cd427bc893fb4d95f091ead2b1/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "sha": "c9fd4731e98007ad423cb7d7783425725c8e1033",
                "status": "modified"
            }
        ],
        "message": "WICKET-3691 NPE in PersistentPageManager.SessionEntry.writeObject(ObjectOutputStream) when using embedded Tomcat\n\nAdd check for pages == null.\nRename local variable to have more meaningful name (l -> serializedPages).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1101019 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/af9cae20fa58d20fd8e833e0366ad99f4207bb9c",
        "repo": "wicket",
        "unit_tests": [
            "PersistentPageManagerTest.java"
        ]
    },
    "wicket_3b14566": {
        "bug_id": "wicket_3b14566",
        "commit": "https://github.com/apache/wicket/commit/3b1456662e3c75aa492921157c989e63e40f2a79",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/3b1456662e3c75aa492921157c989e63e40f2a79/wicket/src/java/wicket/Localizer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Localizer.java?ref=3b1456662e3c75aa492921157c989e63e40f2a79",
                "deletions": 4,
                "filename": "wicket/src/java/wicket/Localizer.java",
                "patch": "@@ -93,7 +93,7 @@ public void propertiesLoaded(final String key)\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @return The string resource\n \t * @throws MissingResourceException\n \t *             If resource not found and configuration dictates that\n@@ -111,7 +111,7 @@ public String getString(final String key, final Component component)\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param model\n \t *            The model to use for OGNL substitutions in the strings\n \t *            (optional)\n@@ -132,7 +132,7 @@ public String getString(final String key, final Component component, final IMode\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param model\n \t *            The model to use for OGNL substitutions in the strings\n \t *            (optional)\n@@ -156,7 +156,7 @@ public String getString(final String key, final Component component, final IMode\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param defaultValue\n \t *            The default value (optional)\n \t * @return The string resource",
                "raw_url": "https://github.com/apache/wicket/raw/3b1456662e3c75aa492921157c989e63e40f2a79/wicket/src/java/wicket/Localizer.java",
                "sha": "f83752067143e8814b52d383e016053ec7a10462",
                "status": "modified"
            }
        ],
        "message": "fixed: javadoc changed: [ 1350108 ] NPE in wicket.Localizer.getString()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458241 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c2cde5946a27fdaf3904545871ce776f27958748",
        "repo": "wicket",
        "unit_tests": [
            "LocalizerTest.java"
        ]
    },
    "wicket_3dd37b3": {
        "bug_id": "wicket_3dd37b3",
        "commit": "https://github.com/apache/wicket/commit/3dd37b3fb67a44cc44390848d18a96ebd3db220e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/3dd37b3fb67a44cc44390848d18a96ebd3db220e/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java?ref=3dd37b3fb67a44cc44390848d18a96ebd3db220e",
                "deletions": 3,
                "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -727,8 +727,8 @@ public MarkupContainer replace(final Component child)\n \n \t\tif (child.getParent() != this)\n \t\t{\n-\t\t\t// Add to map\n-\t\t\tfinal Component replaced = put(child);\n+\t\t\t// Get the child component to replace\n+\t\t\tfinal Component replaced = children_get(child.getId());\n \n \t\t\t// Look up to make sure it was already in the map\n \t\t\tif (replaced == null)\n@@ -737,7 +737,10 @@ public MarkupContainer replace(final Component child)\n \t\t\t\t\texceptionMessage(\"Cannot replace a component which has not been added: id='\" +\n \t\t\t\t\t\tchild.getId() + \"', component=\" + child));\n \t\t\t}\n-\n+\t\t\t\n+\t\t\t// Add to map\n+\t\t\tput(child);\n+\t\t\t\n \t\t\t// first remove the component.\n \t\t\tremovedComponent(replaced);\n ",
                "raw_url": "https://github.com/apache/wicket/raw/3dd37b3fb67a44cc44390848d18a96ebd3db220e/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "c01b90e4e56a54735917313c4c0ce8cc91a77dfa",
                "status": "modified"
            }
        ],
        "message": "WICKET-5912 NPE in Page#hasInvisibleTransparentChild",
        "parent": "https://github.com/apache/wicket/commit/5c5490dafbc29748abfda0441e002fe456c1ff31",
        "repo": "wicket",
        "unit_tests": [
            "MarkupContainerTest.java"
        ]
    },
    "wicket_40790b6": {
        "bug_id": "wicket_40790b6",
        "commit": "https://github.com/apache/wicket/commit/40790b6e424b74008247900402c80ce1201c0806",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/40790b6e424b74008247900402c80ce1201c0806/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java?ref=40790b6e424b74008247900402c80ce1201c0806",
                "deletions": 1,
                "filename": "jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "patch": "@@ -81,11 +81,19 @@ public VelocityPanel(final String name, final IModel/* <Map> */model)\n \t */\n \tprivate Reader getTemplateReader()\n \t{\n-\t\tfinal String template = getTemplateResource().asString();\n+\t\tfinal IStringResourceStream resource = getTemplateResource();\n+\t\tif (resource == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"getTemplateResource must return a resource\");\n+\t\t}\n+\n+\t\tfinal String template = resource.asString();\n \t\tif (template != null)\n \t\t{\n \t\t\treturn new StringReader(template);\n \t\t}\n+\n \t\treturn null;\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/40790b6e424b74008247900402c80ce1201c0806/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "sha": "64eef4ce7670002f4dfccd1e0d74b67a7283e4a0",
                "status": "modified"
            }
        ],
        "message": "throw exception with message rather than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@535928 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/e6f106f7abb5bc78aa1634ff57e212acdd9588c0",
        "repo": "wicket",
        "unit_tests": [
            "VelocityPanelTest.java"
        ]
    },
    "wicket_42a640a": {
        "bug_id": "wicket_42a640a",
        "commit": "https://github.com/apache/wicket/commit/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java?ref=42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "patch": "@@ -174,19 +174,15 @@ protected void onComponentTag(final ComponentTag tag)\n \t\t\t\t\"] contains a null model object, must be an object of type java.util.Collection\");\n \t\t}\n \n-\t\tif (group.hasRawInput())\n+\t\tfinal String raw = group.getRawInput();\n+\t\tif (!Strings.isEmpty(raw))\n \t\t{\n-\t\t\t// Wicket-2949 getInputAsArray() might not be the raw input\n-\t\t\tfinal String[] inputArray = group.getRawInput().split(FormComponent.VALUE_SEPARATOR);\n-\n-\t\t\tif (inputArray != null)\n+\t\t\tfinal String[] values = raw.split(FormComponent.VALUE_SEPARATOR);\n+\t\t\tfor (String value : values)\n \t\t\t{\n-\t\t\t\tfor (String input : inputArray)\n+\t\t\t\tif (uuid.equals(value))\n \t\t\t\t{\n-\t\t\t\t\tif (uuid.equals(input))\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttag.put(\"checked\", \"checked\");\n-\t\t\t\t\t}\n+\t\t\t\t\ttag.put(\"checked\", \"checked\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "sha": "f0f6b1c3771ba057eeb31398d0bfc7226e7afb73",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java?ref=42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
                "deletions": 11,
                "filename": "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "patch": "@@ -221,22 +221,19 @@ boolean isSelected(final SelectOption<?> option)\n \t\tArgs.notNull(option, \"option\");\n \n \t\t// if the raw input is specified use that, otherwise use model\n-\t\tif (hasRawInput())\n+\t\tfinal String raw = getRawInput();\n+\t\tif (!Strings.isEmpty(raw))\n \t\t{\n-\t\t\t// Wicket-2949 getInputAsArray() might not be the raw input\n-\t\t\tString[] values = getRawInput().split(VALUE_SEPARATOR);\n-\t\t\tif (values != null && values.length > 0)\n+\t\t\tString[] values = raw.split(VALUE_SEPARATOR);\n+\t\t\tfor (int i = 0; i < values.length; i++)\n \t\t\t{\n-\t\t\t\tfor (int i = 0; i < values.length; i++)\n+\t\t\t\tString value = values[i];\n+\t\t\t\tif (value.equals(option.getValue()))\n \t\t\t\t{\n-\t\t\t\t\tString value = values[i];\n-\t\t\t\t\tif (value.equals(option.getValue()))\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n+\t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\treturn false;\n \t\t\t}\n+\t\t\treturn false;\n \t\t}\n \n \t\treturn compareModels(getDefaultModelObject(), option.getDefaultModelObject());",
                "raw_url": "https://github.com/apache/wicket/raw/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "sha": "45f8b373938ff16c9ac32e89cfb5baa6d2b84394",
                "status": "modified"
            }
        ],
        "message": "AAU-2949 fix NPE. hasRawInput() can return null for check boxes...",
        "parent": "https://github.com/apache/wicket/commit/b2dc52d6f522ad9c9aabcd6f25c1242f5071bc25",
        "repo": "wicket",
        "unit_tests": [
            "SelectTest.java"
        ]
    },
    "wicket_4fc4621": {
        "bug_id": "wicket_4fc4621",
        "commit": "https://github.com/apache/wicket/commit/4fc462187d294222372ef73951c5d4c849c148d5",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/RequestCycle.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/RequestCycle.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 12,
                "filename": "wicket/src/main/java/wicket/RequestCycle.java",
                "patch": "@@ -890,14 +890,6 @@ private void detach()\n \t\t// clear the used pagemap for this thread, \n \t\t// maybe we can move this a few lines above to have a but more\n \t\t// concurrency (session.update)\n-\t\ttry\n-\t\t{\n-\t\t\tsession.requestDetached();\n-\t\t}\n-\t\tcatch(RuntimeException re)\n-\t\t{\n-\t\t\tlog.error(\"there was an error detaching the request from the session \" + session + \".\", re);\n-\t\t}\n \t\tif (getResponse() instanceof BufferedWebResponse)\n \t\t{\n \t\t\ttry\n@@ -910,12 +902,28 @@ private void detach()\n \t\t\t}\n \t\t}\n \n-\t\tIRequestLogger requestLogger = getApplication().getRequestLogger();\n-\t\tif (requestLogger != null)\n+\t\ttry\n \t\t{\n-\t\t\trequestLogger.requestTime((System.currentTimeMillis() - startTime));\n+\t\t\tIRequestLogger requestLogger = getApplication().getRequestLogger();\n+\t\t\tif (requestLogger != null)\n+\t\t\t{\n+\t\t\t\trequestLogger.requestTime((System.currentTimeMillis() - startTime));\n+\t\t\t}\n \t\t}\n-\t\t\n+\t\tcatch(RuntimeException re)\n+\t\t{\n+\t\t\tlog.error(\"there was an error in the RequestLogger ending.\", re);\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tsession.requestDetached();\n+\t\t}\n+\t\tcatch(RuntimeException re)\n+\t\t{\n+\t\t\tlog.error(\"there was an error detaching the request from the session \" + session + \".\", re);\n+\t\t}\n+\n \t\ttry\n \t\t{\n \t\t\tonEndRequest();",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/RequestCycle.java",
                "sha": "2cadf154c26b9eb5c6c645cab720bae1745beca3",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/protocol/http/RequestLogger.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 10,
                "filename": "wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "patch": "@@ -202,28 +202,28 @@ public void requestTime(long timeTaken)\n \t\tRequestData rd = (RequestData)currentRequest.get();\n \t\tif(rd != null)\n \t\t{\n+\t\t\tsynchronized (this)\n+\t\t\t{\n+\t\t\t\tif(active > 0)\n+\t\t\t\t{\n+\t\t\t\t\trd.setActiveRequest(active--);\n+\t\t\t\t}\n+\t\t\t}\n \t\t\tSession session = Session.get();\n \t\t\tString sessionId = session.getId();\n \t\t\trd.setSessionId(sessionId);\n-\t\t\t\n+\n \t\t\tObject sessionInfo = getSessionInfo(session);\n \t\t\trd.setSessionInfo(sessionInfo);\n-\t\t\t\n+\n \t\t\tlong sizeInBytes = -1;\n \t\t\tif(Application.get().getRequestLoggerSettings().getRecordSessionSize())\n \t\t\t{\n \t\t\t\tsizeInBytes = session.getSizeInBytes();\n \t\t\t}\n \t\t\trd.setSessionSize(sizeInBytes);\n \t\t\trd.setTimeTaken(timeTaken);\n-\t\t\tsynchronized (this)\n-\t\t\t{\n-\t\t\t\tif(active > 0)\n-\t\t\t\t{\n-\t\t\t\t\trd.setActiveRequest(active--);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n+\n \t\t\trequests.add(0, rd);\n \t\t\tcurrentRequest.set(null);\n \t\t\tif(sessionId != null)",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "sha": "77402191b69e23c326d5aecd6c427062ad4baf79",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/util/lang/Objects.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/lang/Objects.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 2,
                "filename": "wicket/src/main/java/wicket/util/lang/Objects.java",
                "patch": "@@ -1052,16 +1052,18 @@ public static Number newInteger(int type, long value)\n \t */\n \tpublic static long sizeof(final Object object)\n \t{\n+\t\tif (object == null) return 0;\n \t\ttry\n \t\t{\n \t\t\tfinal ByteCountingOutputStream out = new ByteCountingOutputStream();\n \t\t\tnew ObjectOutputStream(out).writeObject(object);\n \t\t\tout.close();\n \t\t\treturn out.size();\n \t\t}\n-\t\tcatch (IOException e)\n+\t\tcatch (Exception e)\n \t\t{\n-\t\t\treturn -1;\n+\t\t\tlog.warn(\"Size of failed of object: \" + object.getClass().getName(), e);\n+\t\t\treturn 0;\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/util/lang/Objects.java",
                "sha": "c5f166c38b1712e073263b39c2eeb0918020ad19",
                "status": "modified"
            }
        ],
        "message": "WICKET-241, WICKET-240, all stages in requestcycle called again by wrapping methods that can generate exceptions in a try/catch block. Possible NPE's in calculation of size also captured, which was the cause of resource leaks (e.g. non-closed database connections when resource clean up is done in requestcycle.detach)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@501911 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/697a5cf7909733bc41f176dfc8969f96144713ee",
        "repo": "wicket",
        "unit_tests": [
            "ObjectsTest.java"
        ]
    },
    "wicket_4fe91d8": {
        "bug_id": "wicket_4fe91d8",
        "commit": "https://github.com/apache/wicket/commit/4fe91d81aee44702ad547920f3ed48982eeeeec2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/4fe91d81aee44702ad547920f3ed48982eeeeec2/wicket/src/java/wicket/Localizer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Localizer.java?ref=4fe91d81aee44702ad547920f3ed48982eeeeec2",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/Localizer.java",
                "patch": "@@ -405,7 +405,7 @@ private List getComponentStack(final Component component)\n \t\tif (!(component instanceof Page))\n \t\t{\n \t\t\tMarkupContainer container = component.getParent();\n-\t\t\twhile (true)\n+\t\t\twhile (container != null)\n \t\t\t{\n \t\t\t\tsearchStack.add(container.getClass());\n \t\t\t\tif (container instanceof Page)",
                "raw_url": "https://github.com/apache/wicket/raw/4fe91d81aee44702ad547920f3ed48982eeeeec2/wicket/src/java/wicket/Localizer.java",
                "sha": "7dc2b13dc0448b0321e56d9e3b4fe4f806ae7fb8",
                "status": "modified"
            }
        ],
        "message": "fixed NPE if getParent() returned null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458757 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7756a1904a49e4f850e1401be63d761a4627b28a",
        "repo": "wicket",
        "unit_tests": [
            "LocalizerTest.java"
        ]
    },
    "wicket_55eb521": {
        "bug_id": "wicket_55eb521",
        "commit": "https://github.com/apache/wicket/commit/55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "patch": "@@ -100,6 +100,7 @@ public static CharSequence renderComponent(final Component component)\n \n \t\t\tRenderPage page = new RenderPage();\n \t\t\tpage.add(component);\n+\t\t\tpage.internalInitialize();\n \n \t\t\tcomponent.render();\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/main/java/org/apache/wicket/core/util/string/ComponentRenderer.java",
                "sha": "41704a65c8cfa8e41e075062b367fcb13b3fb35f",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.core.util.string;\n+\n+import org.apache.wicket.WicketTestCase;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for ComponentRenderer\n+ */\n+public class ComponentRendererTest extends WicketTestCase\n+{\n+\n+\t/**\n+\t * https://issues.apache.org/jira/browse/WICKET-5209\n+\t *\n+\t * Tests that the page and the components in it are initialized.\n+\t * Enclosure won't know its child component without being initialized\n+\t */\n+\t@Test\n+\tpublic void componentsAreInitialized()\n+\t{\n+\t\tComponentRenderer.renderComponent(new EnclosurePanel(ComponentRenderer.COMP_ID));\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/ComponentRendererTest.java",
                "sha": "80922f8f6020d03b4a67a32af1f31cf13cf7a4dd",
                "status": "added"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "patch": "@@ -0,0 +1,22 @@\n+<!--\n+    ====================================================================\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+     http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+-->\n+<!DOCTYPE html>\n+<html xmlns:wicket=\"http://wicket.apache.org/dtds.data/wicket-xhtml1.4-strict.dtd\">\n+\t<wicket:panel>\n+\t\t<wicket:enclosure child=\"externalLink\">\n+\t\t\t<a wicket:id=\"externalLink\">Google</a>\n+\t\t</wicket:enclosure>\n+\t</wicket:panel>\n+</html>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.html",
                "sha": "2977d1bd73e82d39222af38a8ef68d0b0ff38a28",
                "status": "added"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/wicket/blob/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java?ref=55eb52123ee45d5ffc70e3cac5e05b4400f2279e",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "patch": "@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.wicket.core.util.string;\n+\n+import org.apache.wicket.markup.html.link.ExternalLink;\n+import org.apache.wicket.markup.html.panel.Panel;\n+\n+class EnclosurePanel extends Panel\n+{\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate static final String TEST_LINK = \"http://google.com\";\n+\n+\tpublic EnclosurePanel(String id) {\n+\t\tsuper(id);\n+\t\t\n+\t\tExternalLink externalLink = new ExternalLink(\"externalLink\", TEST_LINK);\n+\t\tadd(externalLink);\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/55eb52123ee45d5ffc70e3cac5e05b4400f2279e/wicket-core/src/test/java/org/apache/wicket/core/util/string/EnclosurePanel.java",
                "sha": "d204ed4c53b95eab3425771c57f1079b48de2406",
                "status": "added"
            }
        ],
        "message": "WICKET-5209 NPE when using ComponentRenderer.renderComponent on a panel with <wicket:enclosure>",
        "parent": "https://github.com/apache/wicket/commit/415e6debab43dc59235f54e79d6e52f62359ac66",
        "repo": "wicket",
        "unit_tests": [
            "ComponentRendererTest.java"
        ]
    },
    "wicket_59b3e31": {
        "bug_id": "wicket_59b3e31",
        "commit": "https://github.com/apache/wicket/commit/59b3e318762733adea00cfe3b31c5dd25e4d2147",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/wicket/blob/59b3e318762733adea00cfe3b31c5dd25e4d2147/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java?ref=59b3e318762733adea00cfe3b31c5dd25e4d2147",
                "deletions": 21,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "patch": "@@ -1503,38 +1503,38 @@ protected final void validateValidators()\n \n \t\tIValidator<T> validator = null;\n \n-\t\ttry\n+\t\tfor (Behavior behavior : getBehaviors())\n \t\t{\n-\t\t\tfor (Behavior behavior : getBehaviors())\n+\t\t\tvalidator = null;\n+\t\t\tif (behavior instanceof ValidatorAdapter)\n \t\t\t{\n-\t\t\t\tvalidator = null;\n-\t\t\t\tif (behavior instanceof ValidatorAdapter)\n-\t\t\t\t{\n-\t\t\t\t\tvalidator = ((ValidatorAdapter<T>)behavior).getValidator();\n-\t\t\t\t}\n-\t\t\t\telse if (behavior instanceof IValidator)\n-\t\t\t\t{\n-\t\t\t\t\tvalidator = (IValidator<T>)behavior;\n-\t\t\t\t}\n-\t\t\t\tif (validator != null)\n+\t\t\t\tvalidator = ((ValidatorAdapter<T>)behavior).getValidator();\n+\t\t\t}\n+\t\t\telse if (behavior instanceof IValidator)\n+\t\t\t{\n+\t\t\t\tvalidator = (IValidator<T>)behavior;\n+\t\t\t}\n+\t\t\tif (validator != null)\n+\t\t\t{\n+\t\t\t\tif (isNull == false || validator instanceof INullAcceptingValidator<?>)\n \t\t\t\t{\n-\t\t\t\t\tif (isNull == false || validator instanceof INullAcceptingValidator<?>)\n+\t\t\t\t\ttry\n \t\t\t\t\t{\n \t\t\t\t\t\tvalidator.validate(validatable);\n \t\t\t\t\t}\n-\t\t\t\t\tif (!isValid())\n+\t\t\t\t\tcatch (Exception e)\n \t\t\t\t\t{\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tthrow new WicketRuntimeException(\"Exception '\" + e.getMessage() +\n+\t\t\t\t\t\t\t\t\"' occurred during validation \" + validator.getClass().getName() +\n+\t\t\t\t\t\t\t\t\" on component \" + getPath(), e);\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tif (!isValid())\n+\t\t\t\t{\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\tthrow new WicketRuntimeException(\"Exception '\" + e.getMessage() +\n-\t\t\t\t\"' occurred during validation \" + validator.getClass().getName() +\n-\t\t\t\t\" on component \" + getPath(), e);\n-\t\t}\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/59b3e318762733adea00cfe3b31c5dd25e4d2147/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "sha": "660cf5393620e7f470c83c30ab4eef91f6f37916",
                "status": "modified"
            }
        ],
        "message": "Move the try/catch just around the 'validator.validate()' call. Otherwise the construction of the error message will fail with NPE because 'validator' my be null",
        "parent": "https://github.com/apache/wicket/commit/9575f0d93901b7163a46c2ea38f43f135ecd7d50",
        "repo": "wicket",
        "unit_tests": [
            "FormComponentTest.java"
        ]
    },
    "wicket_5d78b71": {
        "bug_id": "wicket_5d78b71",
        "commit": "https://github.com/apache/wicket/commit/5d78b712740665f876dbfa6ed8159b24dcd76434",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java?ref=5d78b712740665f876dbfa6ed8159b24dcd76434",
                "deletions": 3,
                "filename": "wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "patch": "@@ -18,6 +18,8 @@\n \n import java.util.Map;\n \n+import wicket.util.string.Strings;\n+\n /**\n  * Interpolates variables into a string from a Map.\n  * \n@@ -42,7 +44,6 @@ public MapVariableInterpolator(final String string, final Map<?, ?> variables)\n \t\tthis.variables = variables;\n \t}\n \n-\n \t/**\n \t * Constructor\n \t * \n@@ -63,7 +64,6 @@ public MapVariableInterpolator(String string, final Map<?, ?> variables,\n \t\tthis.variables = variables;\n \t}\n \n-\n \t/**\n \t * Accessor to set variables\n \t * \n@@ -85,7 +85,7 @@ public final void setVariables(final Map<?, ?> variables)\n \t@Override\n \tprotected final String getValue(final String variableName)\n \t{\n-\t\treturn variables.get(variableName).toString();\n+\t\treturn Strings.toString(variables.get(variableName));\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "sha": "726d6f7abe7efe73ccd275b661bd901889405c42",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java?ref=5d78b712740665f876dbfa6ed8159b24dcd76434",
                "deletions": 1,
                "filename": "wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "patch": "@@ -65,7 +65,6 @@ public VariableInterpolator(final String string, boolean exceptionOnNullVarValue\n \t\tthis.exceptionOnNullVarValue = exceptionOnNullVarValue;\n \t}\n \n-\n \t/**\n \t * Gets a value for a variable name during interpolation\n \t * ",
                "raw_url": "https://github.com/apache/wicket/raw/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "sha": "e5a95619e56fa5d055dd2f0bb7a29a5be529dbba",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/wicket/blob/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java?ref=5d78b712740665f876dbfa6ed8159b24dcd76434",
                "deletions": 0,
                "filename": "wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package wicket.util.string.interpolator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+import wicket.util.string.interpolator.MapVariableInterpolator;\n+\n+/**\n+ * Tests {@link MapVariableInterpolator}\n+ * \n+ * @author <a href=\"mailto:jbq@apache.org\">Jean-Baptiste Quenot</a>\n+ */\n+public class VariableInterpolatorTest extends TestCase\n+{\n+\tpublic void testWithValue()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tparams.put(\"key\", \"value\");\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params);\n+\t\tassertEquals(\"value\", in.toString());\n+\t}\n+\n+\tpublic void testWithoutValue()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params);\n+\t\tassertEquals(\"${key}\", in.toString());\n+\t}\n+\n+\tpublic void testWithoutValueAndException()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params, true);\n+\t\ttry\n+\t\t{\n+\t\t\tin.toString();\n+\t\t\tfail(\"Should throw an exception\");\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\n+\t\t}\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/5d78b712740665f876dbfa6ed8159b24dcd76434/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "sha": "10fb665f229c17de93912bcbf6b0114ed70dad2f",
                "status": "added"
            }
        ],
        "message": "WICKET-340 Unexpected NPE in MapVariableInterpolator\n\nApplied patch and backported exceptionOnNullVarValue from trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@515082 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/4db6b180a43e6c5cadc0aa29ca0af2d6da72690d",
        "repo": "wicket",
        "unit_tests": [
            "VariableInterpolatorTest.java"
        ]
    },
    "wicket_6073fbd": {
        "bug_id": "wicket_6073fbd",
        "commit": "https://github.com/apache/wicket/commit/6073fbd0585602fcca3d09e10dc89fcbc6a629c4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/6073fbd0585602fcca3d09e10dc89fcbc6a629c4/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java?ref=6073fbd0585602fcca3d09e10dc89fcbc6a629c4",
                "deletions": 1,
                "filename": "wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "patch": "@@ -188,7 +188,8 @@ private final String getBeanNameOfClass(final ApplicationContext ctx, final Clas\n \t\t\t\tBeanDefinition beanDef = getBeanDefinition(\n \t\t\t\t\t((AbstractApplicationContext)ctx).getBeanFactory(), possibility);\n \t\t\t\tif (BeanFactoryUtils.isFactoryDereference(possibility) ||\n-\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") || !beanDef.isAutowireCandidate())\n+\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") ||\n+\t\t\t\t\t(beanDef != null && !beanDef.isAutowireCandidate()))\n \t\t\t\t{\n \t\t\t\t\tit.remove();\n \t\t\t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/6073fbd0585602fcca3d09e10dc89fcbc6a629c4/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "sha": "4a8880c05e58e76b6a753329d71f51fa36eeda78",
                "status": "modified"
            }
        ],
        "message": "Fixes WICKET-3632: NPE while injecting\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1095885 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/90d7803ba60c644eef9bbbbf3dc792d2ab137aa6",
        "repo": "wicket",
        "unit_tests": [
            "AnnotProxyFieldValueFactoryTest.java"
        ]
    },
    "wicket_689669c": {
        "bug_id": "wicket_689669c",
        "commit": "https://github.com/apache/wicket/commit/689669c193ebc7a5815ded063333a942450eea68",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/689669c193ebc7a5815ded063333a942450eea68/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java?ref=689669c193ebc7a5815ded063333a942450eea68",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "patch": "@@ -432,7 +432,11 @@ public Component newAutoComponent(final MarkupContainer container, final String\n \t\t\t\t}\n \n \t\t\t\t// Make sure base markup pages (inheritance) are handled correct\n-\t\t\t\tMarkupContainer parentWithContainer = container.findParentWithAssociatedMarkup();\n+\t\t\t\tMarkupContainer parentWithContainer = container;\n+\t\t\t\tif (container.getParent() != null)\n+\t\t\t\t{\n+\t\t\t\t\tparentWithContainer = container.findParentWithAssociatedMarkup();\n+\t\t\t\t}\n \t\t\t\tif ((parentWithContainer instanceof Page) && !infoPath.startsWith(\".\") &&\n \t\t\t\t\t\tpage.getMarkupStream().isMergedMarkup())\n \t\t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/689669c193ebc7a5815ded063333a942450eea68/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "sha": "54c9e86b047fb41610ef555e7cf86231b44d9678",
                "status": "modified"
            }
        ],
        "message": "fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@564872 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/3d465c25b8a06c19435488185e2e51e9d0c73fa5",
        "repo": "wicket",
        "unit_tests": [
            "AutoLinkResolverTest.java"
        ]
    },
    "wicket_724066f": {
        "bug_id": "wicket_724066f",
        "commit": "https://github.com/apache/wicket/commit/724066f406590a1b383a2476ee9983974f40ab80",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/wicket/blob/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java?ref=724066f406590a1b383a2476ee9983974f40ab80",
                "deletions": 12,
                "filename": "wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "patch": "@@ -58,23 +58,23 @@ public static JSONArray asArray(Map<String, Object> map) throws JSONException\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\telse if (value.getClass().isArray())\n+\t\t\t\telse if (value != null)\n \t\t\t\t{\n-\t\t\t\t\tObject[] array = (Object[]) value;\n-\t\t\t\t\tfor (Object v : array)\n+\t\t\t\t\tif (value.getClass().isArray())\n \t\t\t\t\t{\n-\t\t\t\t\t\tif (v != null)\n+\t\t\t\t\t\tObject[] array = (Object[]) value;\n+\t\t\t\t\t\tfor (Object v : array)\n \t\t\t\t\t\t{\n-\t\t\t\t\t\t\tJSONObject object = new JSONObject();\n-\t\t\t\t\t\t\tobject.put(\"name\", name);\n-\t\t\t\t\t\t\tobject.put(\"value\", v);\n-\t\t\t\t\t\t\tjsonArray.put(object);\n+\t\t\t\t\t\t\tif (v != null)\n+\t\t\t\t\t\t\t{\n+\t\t\t\t\t\t\t\tJSONObject object = new JSONObject();\n+\t\t\t\t\t\t\t\tobject.put(\"name\", name);\n+\t\t\t\t\t\t\t\tobject.put(\"value\", v);\n+\t\t\t\t\t\t\t\tjsonArray.put(object);\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tif (value != null)\n+\t\t\t\t\telse\n \t\t\t\t\t{\n \t\t\t\t\t\tJSONObject object = new JSONObject();\n \t\t\t\t\t\tobject.put(\"name\", name);",
                "raw_url": "https://github.com/apache/wicket/raw/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/main/java/org/apache/wicket/ajax/json/JsonUtils.java",
                "sha": "ece49971528276158f163328eac2e31285412653",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java?ref=724066f406590a1b383a2476ee9983974f40ab80",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "patch": "@@ -56,5 +56,11 @@ public void asArray() throws Exception\n \t\tObject[] arrayValues = {\"arrayValue\", 3, null, true};\n \t\tmap.put(\"array\", arrayValues);\n \t\tassertEquals(\"[{\\\"name\\\":\\\"array\\\",\\\"value\\\":\\\"arrayValue\\\"},{\\\"name\\\":\\\"array\\\",\\\"value\\\":3},{\\\"name\\\":\\\"array\\\",\\\"value\\\":true}]\", JsonUtils.asArray(map).toString());\n+\n+\t\tmap.clear();\n+\t\tmap.put(\"null\", null);\n+\t\tassertEquals(\"[]\", JsonUtils.asArray(map).toString());\n+\t\tmap.put(\"notNull\", \"notNull\");\n+\t\tassertEquals(\"[{\\\"name\\\":\\\"notNull\\\",\\\"value\\\":\\\"notNull\\\"}]\", JsonUtils.asArray(map).toString());\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/724066f406590a1b383a2476ee9983974f40ab80/wicket-core/src/test/java/org/apache/wicket/ajax/json/JsonUtilsTest.java",
                "sha": "b78003bcfd3f3906670deba8cb173e2621591127",
                "status": "modified"
            }
        ],
        "message": "WICKET-5497 NPE in JsonUtils when the value is null",
        "parent": "https://github.com/apache/wicket/commit/972c71522caddfa3c6836dafab6831a9643cbd08",
        "repo": "wicket",
        "unit_tests": [
            "JsonUtilsTest.java"
        ]
    },
    "wicket_729e2ec": {
        "bug_id": "wicket_729e2ec",
        "commit": "https://github.com/apache/wicket/commit/729e2ec3393c406e73319168488b0a22b4ae1ade",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/729e2ec3393c406e73319168488b0a22b4ae1ade/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java?ref=729e2ec3393c406e73319168488b0a22b4ae1ade",
                "deletions": 1,
                "filename": "wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "patch": "@@ -206,7 +206,7 @@ public final String getModelValue()\n \t{\n \t\t// Get the list of selected values\n \t\tObject modelObject = getModelObject();\n-\t\tif (!(modelObject instanceof Collection))\n+\t\tif (modelObject != null && !(modelObject instanceof Collection))\n \t\t{\n \t\t\tthrow new WicketRuntimeException(\n \t\t\t\t\t\"Model object for a ListMultipleChoice must be a Collection (found \"",
                "raw_url": "https://github.com/apache/wicket/raw/729e2ec3393c406e73319168488b0a22b4ae1ade/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "sha": "f99853a80432355bbb07fb71746df63ee2074349",
                "status": "modified"
            }
        ],
        "message": "WICKET-231: npe fix for sanicy check patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@499072 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/b415fd24cfa6468e6fde9ffd9ca97b318cbb03bb",
        "repo": "wicket",
        "unit_tests": [
            "ListMultipleChoiceTest.java"
        ]
    },
    "wicket_743503c": {
        "bug_id": "wicket_743503c",
        "commit": "https://github.com/apache/wicket/commit/743503c86e52eb965bf73c47164e8f2f1b754e7a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/743503c86e52eb965bf73c47164e8f2f1b754e7a/wicket/src/java/wicket/markup/MarkupCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/MarkupCache.java?ref=743503c86e52eb965bf73c47164e8f2f1b754e7a",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/MarkupCache.java",
                "patch": "@@ -91,7 +91,7 @@ public final MarkupStream getMarkupStream(final MarkupContainer container, final\n \t\t\t// throw exception since there is no associated markup\n \t\t\tthrow new WicketRuntimeException(\n \t\t\t\t\t\"Markup not found. Component class: \"\n-\t\t\t\t\t\t\t+ clazz.getName()\n+\t\t\t\t\t\t\t+ (clazz != null ? clazz.getName() : container.getClass().getName())\n \t\t\t\t\t\t\t+ \" Enable debug messages for wicket.util.resource.Resource to get a list of all filenames tried.\");\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/743503c86e52eb965bf73c47164e8f2f1b754e7a/wicket/src/java/wicket/markup/MarkupCache.java",
                "sha": "4b848dbb1635013237d3106dc7afd52e0c8ff5b4",
                "status": "modified"
            }
        ],
        "message": "fixed [1182843 ] NPE in exception generation process\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@456498 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/8c90a9193a82d1b21ac17873654eaf56aec9e88a",
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_74b92ab": {
        "bug_id": "wicket_74b92ab",
        "commit": "https://github.com/apache/wicket/commit/74b92abb83242b7bacd01dc9ddb8d78330ca5f76",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/wicket/blob/74b92abb83242b7bacd01dc9ddb8d78330ca5f76/wicket/src/java/wicket/markup/resolver/AutoLinkResolver.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/resolver/AutoLinkResolver.java?ref=74b92abb83242b7bacd01dc9ddb8d78330ca5f76",
                "deletions": 13,
                "filename": "wicket/src/java/wicket/markup/resolver/AutoLinkResolver.java",
                "patch": "@@ -440,20 +440,22 @@ public Component newAutoComponent(final MarkupContainer container, final String\n \t\t\t\t\t\t&& page.getMarkupStream().isMergedMarkup())\n \t\t\t\t{\n \t\t\t\t\tClass clazz = container.getMarkupStream().getTag().getMarkupClass();\n-\t\t\t\t\t\n-\t\t\t\t\t// Href is relative. Resolve the url given relative to the\n-\t\t\t\t\t// current page\n-\t\t\t\t\tclassName = Packages.extractPackageName(clazz) + \".\" + infoPath;\n-\t\n-\t\t\t\t\ttry\n+\t\t\t\t\tif (clazz != null)\n \t\t\t\t\t{\n-\t\t\t\t\t\tclazz = defaultClassResolver.resolveClass(className);\n-\t\t\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pathInfo.getPageParameters());\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (WicketRuntimeException ex)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tlog.warn(\"Did not find corresponding java class: \" + className);\n-\t\t\t\t\t\t// fall through\n+\t\t\t\t\t\t// Href is relative. Resolve the url given relative to the\n+\t\t\t\t\t\t// current page\n+\t\t\t\t\t\tclassName = Packages.extractPackageName(clazz) + \".\" + infoPath;\n+\t\n+\t\t\t\t\t\ttry\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tclazz = defaultClassResolver.resolveClass(className);\n+\t\t\t\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pathInfo.getPageParameters());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (WicketRuntimeException ex)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tlog.warn(\"Did not find corresponding java class: \" + className);\n+\t\t\t\t\t\t\t// fall through\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/74b92abb83242b7bacd01dc9ddb8d78330ca5f76/wicket/src/java/wicket/markup/resolver/AutoLinkResolver.java",
                "sha": "bb6ec333055c97048610ea4a95a73fd847bb2275",
                "status": "modified"
            }
        ],
        "message": "fixed NPE and extended the unit test (provided by Thomas Singer)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@460162 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/af8bc0ceff7d99d4bb431a9538974acee58d3680",
        "repo": "wicket",
        "unit_tests": [
            "AutoLinkResolverTest.java"
        ]
    },
    "wicket_7614520": {
        "bug_id": "wicket_7614520",
        "commit": "https://github.com/apache/wicket/commit/7614520e94eb49cb2e5c2c560d055b18c8785301",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/7614520e94eb49cb2e5c2c560d055b18c8785301/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java?ref=7614520e94eb49cb2e5c2c560d055b18c8785301",
                "deletions": 8,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "patch": "@@ -1319,9 +1319,9 @@ protected void delegateSubmit(IFormSubmittingComponent submittingComponent)\n \t\tForm formToProcess = this;\n \t\tif (submittingComponent != null)\n \t\t{\n-\t\t\tsubmittingComponent.onSubmit();\n \t\t\t// use the form which the submittingComponent has submitted for further processing\n \t\t\tformToProcess = submittingComponent.getForm();\n+\t\t\tsubmittingComponent.onSubmit();\n \t\t}\n \n \t\t// Model was successfully updated with valid data\n@@ -1368,13 +1368,12 @@ protected final String getJavascriptId()\n \n \n \t/**\n-\t * Gets the HTTP submit method that will appear in form markup. If no method is specified in \n-\t * the template, \"post\" is the default. Note that the markup-declared HTTP method may not\n-\t * correspond to the one actually used to submit the form; in an Ajax submit, for example, \n-\t * JavaScript event handlers may submit the form with a \"get\" even when the form method is \n-\t * declared as \"post.\" Therefore this method should not be considered a guarantee of the \n-\t * HTTP method used, but a value for the markup only.\n-\t * Override if you have a requirement to alter this behavior.\n+\t * Gets the HTTP submit method that will appear in form markup. If no method is specified in the\n+\t * template, \"post\" is the default. Note that the markup-declared HTTP method may not correspond\n+\t * to the one actually used to submit the form; in an Ajax submit, for example, JavaScript event\n+\t * handlers may submit the form with a \"get\" even when the form method is declared as \"post.\"\n+\t * Therefore this method should not be considered a guarantee of the HTTP method used, but a\n+\t * value for the markup only. Override if you have a requirement to alter this behavior.\n \t * \n \t * @return the submit method specified in markup.\n \t */",
                "raw_url": "https://github.com/apache/wicket/raw/7614520e94eb49cb2e5c2c560d055b18c8785301/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "sha": "0d712f2df35f973b53ace581e2ba31bb7ca108d8",
                "status": "modified"
            }
        ],
        "message": "WICKET-1430: Form processing throws NPE if button.onsubmit() moves the button or its parents out of the component hierarchy\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@638021 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/0d0a8b78760f7dd7a984df0ab6e6329755fb7f3f",
        "repo": "wicket",
        "unit_tests": [
            "FormTest.java",
            "TestForm.java"
        ]
    },
    "wicket_7cc3599": {
        "bug_id": "wicket_7cc3599",
        "commit": "https://github.com/apache/wicket/commit/7cc3599025cdf4c4fcd64e3d7be32cf29bbf4c2f",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/7cc3599025cdf4c4fcd64e3d7be32cf29bbf4c2f/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java?ref=7cc3599025cdf4c4fcd64e3d7be32cf29bbf4c2f",
                "deletions": 5,
                "filename": "wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "patch": "@@ -186,8 +186,10 @@ public final String getModelValue()\n \t{\n \t\t// Get the list of selected values\n \t\tObject modelObject = getModelObject();\n-\t\tif (! (modelObject instanceof Collection))\n-\t\t\tthrow new WicketRuntimeException(\"Model object for a ListMultipleChoice must be a Collection (found \" + modelObject.getClass() + \")\");\n+\t\tif (modelObject != null && !(modelObject instanceof Collection))\n+\t\t\tthrow new WicketRuntimeException(\n+\t\t\t\t\t\"Model object for a ListMultipleChoice must be a Collection (found \"\n+\t\t\t\t\t\t\t+ modelObject.getClass() + \")\");\n \t\tfinal Collection selectedValues = (Collection)modelObject;\n \t\tfinal AppendingStringBuffer buffer = new AppendingStringBuffer();\n \t\tif (selectedValues != null)\n@@ -235,7 +237,7 @@ protected final void onComponentTag(final ComponentTag tag)\n \t{\n \t\tsuper.onComponentTag(tag);\n \t\ttag.put(\"multiple\", \"multiple\");\n-\t\t\n+\n \t\tif (!tag.getAttributes().containsKey(\"size\"))\n \t\t{\n \t\t\ttag.put(\"size\", Math.min(maxRows, getChoices().size()));\n@@ -272,7 +274,7 @@ protected Object convertValue(String[] ids) throws ConversionException\n \t\t}\n \t\treturn selectedValues;\n \t}\n-\t\n+\n \t/**\n \t * @see FormComponent#updateModel()\n \t */\n@@ -282,7 +284,8 @@ public void updateModel()\n \t\tif (selectedValues != null)\n \t\t{\n \t\t\tif (getModelObject() != selectedValues)\n-\t\t\t\tthrow new WicketRuntimeException(\"Updating a ListMultipleChoice works by modifying the underlying model object in-place, so please make sure that getObject() always returns the same Collection instance!\");\n+\t\t\t\tthrow new WicketRuntimeException(\n+\t\t\t\t\t\t\"Updating a ListMultipleChoice works by modifying the underlying model object in-place, so please make sure that getObject() always returns the same Collection instance!\");\n \t\t\tmodelChanging();\n \t\t\tselectedValues.clear();\n \t\t\tselectedValues.addAll((Collection)getConvertedInput());",
                "raw_url": "https://github.com/apache/wicket/raw/7cc3599025cdf4c4fcd64e3d7be32cf29bbf4c2f/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "sha": "4ac77c695b6b162ff85a7b35f183b7802a9badc7",
                "status": "modified"
            }
        ],
        "message": "WICKET-231: npe fix for sanicy check patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@499073 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/81275860a9a4b82e894b23328b1d4232aee45c5d",
        "repo": "wicket",
        "unit_tests": [
            "ListMultipleChoiceTest.java"
        ]
    },
    "wicket_7ebae30": {
        "bug_id": "wicket_7ebae30",
        "commit": "https://github.com/apache/wicket/commit/7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java?ref=7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
                "deletions": 7,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -23,7 +23,6 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.wicket.feedback.IFeedback;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.MarkupElement;\n import org.apache.wicket.markup.MarkupException;\n@@ -1394,12 +1393,8 @@ void onBeforeRenderChildren()\n \t\t\t\t// Get next child\n \t\t\t\tfinal Component child = children_get(i);\n \n-\t\t\t\t// Ignore feedback as that was done in Page\n-\t\t\t\tif (!(child instanceof IFeedback))\n-\t\t\t\t{\n-\t\t\t\t\t// Call begin request on the child\n-\t\t\t\t\tchild.beforeRender();\n-\t\t\t\t}\n+\t\t\t\t// Call begin request on the child\n+\t\t\t\tchild.beforeRender();\n \t\t\t}\n \t\t}\n \t\tcatch (RuntimeException ex)",
                "raw_url": "https://github.com/apache/wicket/raw/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "27560128b0a5a3b2c2f3f56b591d71d58e67afb5",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java?ref=7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "patch": "@@ -814,7 +814,6 @@ public final void renderPage()\n \t\t\tpublic Object component(Component component)\n \t\t\t{\n \t\t\t\t((IFeedback)component).updateFeedback();\n-\t\t\t\tcomponent.beforeRender();\n \t\t\t\treturn IVisitor.CONTINUE_TRAVERSAL;\n \t\t\t}\n \t\t});",
                "raw_url": "https://github.com/apache/wicket/raw/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "sha": "b4fbb7cadfcc397c6ab7e3933862e5cee4cd8779",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE in ListView on AJAX calls.  The problem was with IFeedback implementing components, which were special cased in onBeforeRenderChildren() based on the assumption that Page had already called beforeRender() on them.  This is not the case with an AJAX rendering.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@537919 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/5db310ad78875869177502a2d15581de227dc0cd",
        "repo": "wicket",
        "unit_tests": [
            "MarkupContainerTest.java",
            "TestPage.java"
        ]
    },
    "wicket_8468de3": {
        "bug_id": "wicket_8468de3",
        "commit": "https://github.com/apache/wicket/commit/8468de343669cdd482f41359acaaadc6ae4d5653",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/8468de343669cdd482f41359acaaadc6ae4d5653/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java?ref=8468de343669cdd482f41359acaaadc6ae4d5653",
                "deletions": 2,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "patch": "@@ -62,7 +62,7 @@ public BundleStringResourceLoader(final String bundleName)\n \t * @return The string resource value or null if resource not found\n \t */\n \tpublic final String loadStringResource(final Class clazz, final String key, Locale locale,\n-\t\t\tfinal String style)\n+\t\tfinal String style)\n \t{\n \t\tif (locale == null)\n \t\t{\n@@ -91,6 +91,7 @@ public final String loadStringResource(final Class clazz, final String key, Loca\n \t */\n \tpublic final String loadStringResource(final Component component, final String key)\n \t{\n-\t\treturn loadStringResource(null, key, component.getLocale(), null);\n+\t\tfinal Locale locale = (component != null) ? component.getLocale() : null;\n+\t\treturn loadStringResource(null, key, locale, null);\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/8468de343669cdd482f41359acaaadc6ae4d5653/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "sha": "2651fcf450c59a145e6cfa843eea3b89a648ef39",
                "status": "modified"
            }
        ],
        "message": "WICKET-1415: BundleStringResourceLoader throws NPE if component is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@640155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7536a80d5183c8a00050dae51a0fa008ab0c40d9",
        "repo": "wicket",
        "unit_tests": [
            "BundleStringResourceLoaderTest.java"
        ]
    },
    "wicket_8511b06": {
        "bug_id": "wicket_8511b06",
        "commit": "https://github.com/apache/wicket/commit/8511b06ce2f23cabd1f796b9d787b65245f06a23",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/AutoLinkResolver.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/AutoLinkResolver.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 7,
                "filename": "wicket/src/java/wicket/AutoLinkResolver.java",
                "patch": "@@ -29,6 +29,7 @@\n import wicket.markup.html.link.ExternalLink;\n import wicket.util.string.Strings;\n import wicket.util.value.ValueMap;\n+import wicket.util.lang.Packages;\n \n /**\n  * The AutoLinkResolver is responsible to handle automatic link resolution. Tags\n@@ -153,14 +154,14 @@ private final Component resolveAutomaticLink(final MarkupContainer container, fi\n \t\t\t// Wicket will not throw an exception. It accepts it.\n \t\t\tinfoPath = Strings.replaceAll(infoPath, \"/\", \".\");\n \n+\t\t\tfinal ApplicationSettings appSettings = page.getApplicationSettings();\n+\t\t\tfinal IClassResolver defaultClassResolver = appSettings.getDefaultClassResolver();\n \t\t\tif (!infoPath.startsWith(\".\"))\n \t\t\t{\n \t\t\t\t// Href is relative. Resolve the url given relative to the\n \t\t\t\t// current page\n-\t\t\t\tfinal String className = page.getClass().getPackage().getName() + \".\" + infoPath;\n-\t\t\t\tfinal Class clazz = page.getApplicationSettings().getDefaultClassResolver()\n-\t\t\t\t\t\t.resolveClass(className);\n-\n+\t\t\t\tfinal String className = Packages.extractPackageName( page.getClass() ) + \".\" + infoPath;\n+\t\t\t\tfinal Class clazz = defaultClassResolver.resolveClass(className);\n \t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);\n \t\t\t}\n \t\t\telse\n@@ -170,9 +171,7 @@ private final Component resolveAutomaticLink(final MarkupContainer container, fi\n \t\t\t\tfinal String className = infoPath.substring(1);\n \t\t\t\ttry\n \t\t\t\t{\n-\t\t\t\t\tfinal Class clazz = page.getApplicationSettings().getDefaultClassResolver()\n-\t\t\t\t\t\t\t.resolveClass(className);\n-\n+\t\t\t\t\tfinal Class clazz = defaultClassResolver.resolveClass(className);\n \t\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);\n \t\t\t\t}\n \t\t\t\tcatch (WicketRuntimeException ex)",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/AutoLinkResolver.java",
                "sha": "6499b5bcd9edd4f24b3e362be21792c0958f3157",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/markup/html/PackageResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/PackageResource.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/PackageResource.java",
                "patch": "@@ -170,7 +170,7 @@ private PackageResource(final Class scope, final String path, final Locale local\n \t{\n \t\tthis.scope = scope;\n \t\t// Convert resource path to absolute path relative to base package\n-\t\tthis.absolutePath = Packages.absolutePath(scope.getPackage(), path);\n+\t\tthis.absolutePath = Packages.absolutePath(scope, path);\n \t\tthis.locale = locale;\n \t\tthis.style = style;\n \t\t",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/markup/html/PackageResource.java",
                "sha": "f07973f856de94c95149b9ced09eb130229f33d8",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/pageset/PackagePageSetMap.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/pageset/PackagePageSetMap.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 4,
                "filename": "wicket/src/java/wicket/pageset/PackagePageSetMap.java",
                "patch": "@@ -33,7 +33,7 @@\n public class PackagePageSetMap extends PageSetMap\n {\n \t/** Map from Package to PageSet */\n-\tprivate final Map packageToPageSet = new HashMap();\n+\tprivate final Map packageNameToPageSet = new HashMap();\n \n \t/**\n \t * Adds a mapping from a given class to a given PageSet\n@@ -46,21 +46,24 @@\n \tpublic final void add(final Class pageClass, final PageSet pageSet)\n \t{\n \t\tcheckPageClass(pageClass);\n-\t\tpackageToPageSet.put(pageClass.getPackage(), pageSet);\n+\t\tString packageName = Packages.extractPackageName( pageClass );\n+\t\tpackageNameToPageSet.put( packageName, pageSet );\n \t}\n \n \t/**\n \t * @see wicket.PageSetMap#pageSet(wicket.Page)\n \t */\n \tpublic PageSet pageSet(final Page page)\n \t{\n-\t\tfor (Package p = page.getClass().getPackage(); p != null; p = Packages.parent(p))\n+\t\tString packageName = Packages.extractPackageName( page.getClass() );\n+\t\twhile ( \"\".equals( packageName ) == false )\n \t\t{\n-\t\t\tfinal PageSet pageSet = (PageSet)packageToPageSet.get(p);\n+\t\t\tfinal PageSet pageSet = (PageSet)packageNameToPageSet.get(packageName);\n \t\t\tif (pageSet != null)\n \t\t\t{\n \t\t\t\treturn pageSet;\n \t\t\t}\n+\t\t\tpackageName = Packages.parent(packageName);\n \t\t}\n \t\treturn null;\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/pageset/PackagePageSetMap.java",
                "sha": "25d27766331df53ef7f7c1f8a0e98405f6c3e857",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/util/lang/Classes.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/lang/Classes.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 7,
                "filename": "wicket/src/java/wicket/util/lang/Classes.java",
                "patch": "@@ -53,24 +53,24 @@ public static String name(final Class c)\n \t}\n \n \t/**\n-\t * Takes a package and a relative path to a class and returns any class at\n-\t * that relative path. For example, if the given package was java.lang and\n+\t * Takes a Class and a relative path to a class and returns any class at\n+\t * that relative path. For example, if the given Class was java.lang.System and\n \t * the relative path was \"../util/List\", then the java.util.List class would\n \t * be returned.\n-\t * \n-\t * @param p\n+\t *\n+\t * @param scope\n \t *            The package to start at\n \t * @param path\n \t *            The relative path to the class\n \t * @return The class\n \t * @throws ClassNotFoundException\n \t */\n-\tpublic static Class relativeClass(final Package p, final String path)\n+\tpublic static Class relativeClass(final Class scope, final String path)\n \t\t\tthrows ClassNotFoundException\n \t{\n-\t\treturn Class.forName(Packages.absolutePath(p, path).replace('/', '.'));\n+\t\treturn Class.forName(Packages.absolutePath(scope, path).replace('/', '.'));\n \t}\n-\t\n+\n \t/**\n \t * Invoke the setter method for 'name' on object and provide the 'value'\n \t * ",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/util/lang/Classes.java",
                "sha": "b64973484df8a010d206834a370f13c5080fa61f",
                "status": "modified"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/util/lang/Packages.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/lang/Packages.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 13,
                "filename": "wicket/src/java/wicket/util/lang/Packages.java",
                "patch": "@@ -19,15 +19,33 @@\n \n import wicket.util.string.IStringIterator;\n import wicket.util.string.StringList;\n-import wicket.util.string.Strings;\n \n /**\n  * Utilities for dealing with packages.\n  * \n  * @author Jonathan Locke\n+ * @author Niclas Hedhman\n  */\n public final class Packages\n {\n+\t/**\n+\t * Takes a package and a relative path to a resource and returns an absolute\n+\t * path to the resource. For example, if the given package was java.lang and\n+\t * the relative path was \"../util/List\", then \"java/util/List\" would be\n+\t * returned.\n+\t * \n+\t * @param p\n+\t *            The package to start at\n+\t * @param relativePath\n+\t *            The relative path to the class\n+\t * @return The absolute path\n+\t */\n+\tpublic static String absolutePath(final Class p, final String relativePath)\n+\t{\n+\t\tString packName = extractPackageName(p);\n+\t\treturn absolutePath(packName, relativePath);\n+\t}\n+\n \t/**\n \t * Takes a package and a relative path to a resource and returns an absolute\n \t * path to the resource. For example, if the given package was java.lang and\n@@ -41,6 +59,23 @@\n \t * @return The absolute path\n \t */\n \tpublic static String absolutePath(final Package p, final String relativePath)\n+\t{\n+\t\treturn absolutePath(p.getName(), relativePath);\n+\t}\n+\n+\t/**\n+\t * Takes a package and a relative path to a resource and returns an absolute\n+\t * path to the resource. For example, if the given package was java.lang and\n+\t * the relative path was \"../util/List\", then \"java/util/List\" would be\n+\t * returned.\n+\t * \n+\t * @param packageName\n+\t *            The package to start at\n+\t * @param relativePath\n+\t *            The relative path to the class\n+\t * @return The absolute path\n+\t */\n+\tpublic static String absolutePath(final String packageName, final String relativePath)\n \t{\n \t\t// Is path already absolute?\n \t\tif (relativePath.startsWith(\"/\"))\n@@ -50,7 +85,7 @@ public static String absolutePath(final Package p, final String relativePath)\n \t\telse\n \t\t{\n \t\t\t// Break package into list of package names\n-\t\t\tfinal StringList absolutePath = StringList.tokenize(p.getName(), \".\");\n+\t\t\tfinal StringList absolutePath = StringList.tokenize(packageName, \".\");\n \n \t\t\t// Break path into folders\n \t\t\tfinal StringList folders = StringList.tokenize(relativePath, \"/\\\\\");\n@@ -62,7 +97,7 @@ public static String absolutePath(final Package p, final String relativePath)\n \t\t\t\tfinal String folder = iterator.next();\n \n \t\t\t\t// Up one?\n-\t\t\t\tif (folder.equals(\"..\"))\n+\t\t\t\tif (\"..\".equals(folder))\n \t\t\t\t{\n \t\t\t\t\t// Pop off stack\n \t\t\t\t\tif (absolutePath.size() > 0)\n@@ -87,23 +122,59 @@ public static String absolutePath(final Package p, final String relativePath)\n \t}\n \n \t/**\n-\t * @param p\n-\t *            The Package\n+\t * Determines the package name for the given class.\n+\t * \n+\t * @param forClass\n+\t *            the class\n+\t * @return the package name\n+\t */\n+\tpublic static String extractPackageName(final Class forClass)\n+\t{\n+\t\tString classname = forClass.getName();\n+\t\tString parent = parent(classname);\n+\t\treturn parent;\n+\t}\n+\n+\t/**\n+\t * Gets the parent package name.\n+\t * \n+\t * @param packageName\n+\t *            The Package name\n \t * @return The parent Package\n \t */\n-\tpublic static Package parent(final Package p)\n+\tpublic static String parent(final String packageName)\n \t{\n-\t\tfinal String packageName = p.getName();\n-\t\tif (packageName.indexOf('.') != -1)\n+\t\tint pos = packageName.lastIndexOf(\".\");\n+\t\tString parent;\n+\t\tif (pos < 0)\n \t\t{\n-\t\t\tfinal String parentPackageName = Strings.beforeLast(packageName, '.');\n-\t\t\treturn Package.getPackage(parentPackageName);\n+\t\t\tpos = packageName.lastIndexOf(\"/\");\n+\t\t\tif (pos < 0)\n+\t\t\t{\n+\t\t\t\tpos = 0;\n+\t\t\t}\n \t\t}\n-\t\treturn null;\n+\t\tparent = packageName.substring(0, pos);\n+\t\treturn parent;\n \t}\n-\t\n+\n+\n+\t/**\n+\t * Resolve scope for the given class by extracting it's package name and\n+\t * converting all dots to slashes.\n+\t * \n+\t * @param forClass\n+\t *            the class\n+\t * @return the scope string\n+\t */\n+\tpublic static String resolveScope(final Class forClass)\n+\t{\n+\t\tString packName = extractPackageName(forClass);\n+\t\treturn packName.replace('.', '/');\n+\t}\n+\n \t/**\n-\t * Instantiation not allowed\n+\t * Instantiation not allowed.\n \t */\n \tprivate Packages()\n \t{",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/util/lang/Packages.java",
                "sha": "b8586f88fd1ec675662baf6a3975d5586c184e0c",
                "status": "modified"
            }
        ],
        "message": "fix for 1251658 (Possible NPE in AutoLinkResolver) and 1291603 (patch)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@457774 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c0d9739c90cdb4e06c34c8346158e4a2a9aa58cf",
        "repo": "wicket",
        "unit_tests": [
            "AutoLinkResolverTest.java",
            "PackageResourceTest.java",
            "ClassesTest.java",
            "PackagesTest.java"
        ]
    },
    "wicket_8cb7d48": {
        "bug_id": "wicket_8cb7d48",
        "commit": "https://github.com/apache/wicket/commit/8cb7d48aa7bbc058255abd1f282252897a9d9baa",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/wicket/blob/8cb7d48aa7bbc058255abd1f282252897a9d9baa/wicket/src/java/wicket/util/string/Strings.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/string/Strings.java?ref=8cb7d48aa7bbc058255abd1f282252897a9d9baa",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/util/string/Strings.java",
                "patch": "@@ -61,6 +61,10 @@\n \t */\n \tpublic static String afterFirst(final String s, final char c)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = s.indexOf(c);\n \n \t\tif (index == -1)\n@@ -90,6 +94,8 @@ public static String afterFirstPathComponent(final String path, final char separ\n \t}\n \n \t/**\n+\t * Returns everything after the last occurence of the given character in s.\n+\t *\n \t * @param s\n \t *            The string\n \t * @param c\n@@ -99,6 +105,10 @@ public static String afterFirstPathComponent(final String path, final char separ\n \t */\n \tpublic static String afterLast(final String s, final char c)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = s.lastIndexOf(c);\n \n \t\tif (index == -1)\n@@ -119,6 +129,10 @@ public static String afterLast(final String s, final char c)\n \t */\n \tpublic static String beforeFirst(final String s, final char c)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = s.indexOf(c);\n \n \t\tif (index == -1)\n@@ -139,6 +153,10 @@ public static String beforeFirst(final String s, final char c)\n \t */\n \tpublic static String beforeLast(final String s, final char c)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = s.lastIndexOf(c);\n \n \t\tif (index == -1)\n@@ -176,6 +194,10 @@ public static String beforeLastPathComponent(final String path, final char separ\n \t */\n \tpublic static String capitalize(final String s)\n \t{\n+\t\tif(s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal char[] chars = s.toCharArray();\n \n \t\tif (chars.length > 0)",
                "raw_url": "https://github.com/apache/wicket/raw/8cb7d48aa7bbc058255abd1f282252897a9d9baa/wicket/src/java/wicket/util/string/Strings.java",
                "sha": "7e2c85225cfd87a84769f440903693d6bdf25228",
                "status": "modified"
            },
            {
                "additions": 142,
                "blob_url": "https://github.com/apache/wicket/blob/8cb7d48aa7bbc058255abd1f282252897a9d9baa/wicket/src/test/wicket/util/string/StringsTest.java",
                "changes": 166,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/util/string/StringsTest.java?ref=8cb7d48aa7bbc058255abd1f282252897a9d9baa",
                "deletions": 24,
                "filename": "wicket/src/test/wicket/util/string/StringsTest.java",
                "patch": "@@ -25,33 +25,151 @@\n \n /**\n  * Test cases for this object\n+ * \n  * @author Jonathan Locke\n  */\n public final class StringsTest extends TestCase\n {\n-    /**\n-     *\n-     */\n-    public void test()\n-    {\n-        Assert.assertEquals(\"foo\", Strings.lastPathComponent(\"bar.garply.foo\", '.'));\n-        Assert.assertEquals(\"foo\", Strings.lastPathComponent(\"foo\", '.'));\n-        Assert.assertEquals(\"bar\", Strings.firstPathComponent(\"bar.garply.foo\", '.'));\n-        Assert.assertEquals(\"foo\", Strings.lastPathComponent(\"foo\", '.'));\n-        Assert.assertEquals(\"garply.foo\", Strings.afterFirstPathComponent(\"bar.garply.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.afterFirstPathComponent(\"foo\", '.'));\n-        Assert.assertEquals(\"bar.baz\", Strings.beforeLast(\"bar.baz.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.beforeLast(\"bar\", '.'));\n-        Assert.assertEquals(\"bar\", Strings.beforeFirst(\"bar.baz.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.beforeFirst(\"bar\", '.'));\n-        Assert.assertEquals(\"baz.foo\", Strings.afterFirst(\"bar.baz.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.afterFirst(\"bar\", '.'));\n-        Assert.assertEquals(\"foo\", Strings.afterLast(\"bar.baz.foo\", '.'));\n-        Assert.assertEquals(\"\", Strings.afterLast(\"bar\", '.'));\n-        Assert.assertEquals(\"foo\", Strings.replaceAll(\"afaooaaa\", \"a\", \"\"));\n-        Assert.assertEquals(\"fuzzyffuzzyoofuzzyfuzzyfuzzy\", Strings.replaceAll(\"afaooaaa\", \"a\",\n-                \"fuzzy\"));\n-    }\n-}\n+\t/**\n+\t * \n+\t */\n+\tpublic void test()\n+\t{\n+\t\tAssert.assertEquals(\"foo\", Strings.lastPathComponent(\"bar.garply.foo\", '.'));\n+\t\tAssert.assertEquals(\"foo\", Strings.lastPathComponent(\"foo\", '.'));\n+\t\tAssert.assertEquals(\"bar\", Strings.firstPathComponent(\"bar.garply.foo\", '.'));\n+\t\tAssert.assertEquals(\"foo\", Strings.lastPathComponent(\"foo\", '.'));\n+\t\tAssert.assertEquals(\"garply.foo\", Strings.afterFirstPathComponent(\"bar.garply.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.afterFirstPathComponent(\"foo\", '.'));\n+\t\tAssert.assertEquals(\"bar.baz\", Strings.beforeLast(\"bar.baz.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.beforeLast(\"bar\", '.'));\n+\t\tAssert.assertEquals(\"bar\", Strings.beforeFirst(\"bar.baz.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.beforeFirst(\"bar\", '.'));\n+\t\tAssert.assertEquals(\"baz.foo\", Strings.afterFirst(\"bar.baz.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.afterFirst(\"bar\", '.'));\n+\t\tAssert.assertEquals(\"foo\", Strings.afterLast(\"bar.baz.foo\", '.'));\n+\t\tAssert.assertEquals(\"\", Strings.afterLast(\"bar\", '.'));\n+\t\tAssert.assertEquals(\"foo\", Strings.replaceAll(\"afaooaaa\", \"a\", \"\"));\n+\t\tAssert.assertEquals(\"fuzzyffuzzyoofuzzyfuzzyfuzzy\", Strings.replaceAll(\"afaooaaa\", \"a\",\n+\t\t\t\t\"fuzzy\"));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>beforeFirst</code> method.\n+\t */\n+\tpublic void testBeforeFirst()\n+\t{\n+\t\tassertNull(Strings.beforeFirst(null, '.'));\n+\t\tassertEquals(\"\", Strings.beforeFirst(\"\", '.'));\n+\t\tassertEquals(\"\", Strings.beforeFirst(\"\", ' '));\n+\t\tassertEquals(\"\", Strings.beforeFirst(\".\", '.'));\n+\t\tassertEquals(\"\", Strings.beforeFirst(\"..\", '.'));\n+\t\tassertEquals(\"com\", Strings.beforeFirst(\"com.foo.bar\", '.'));\n+\t\tassertEquals(\"com\", Strings.beforeFirst(\"com foo bar\", ' '));\n+\t\tassertEquals(\"com foo\", Strings.beforeFirst(\"com foo.bar\", '.'));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>afterFirst</code> method.\n+\t */\n+\tpublic void testAfterFirst()\n+\t{\n+\t\tassertNull(Strings.afterFirst(null, '.'));\n+\t\tassertEquals(\"\", Strings.afterFirst(\"\", '.'));\n+\t\tassertEquals(\"\", Strings.afterFirst(\"\", ' '));\n+\t\tassertEquals(\"\", Strings.afterFirst(\".\", '.'));\n+\t\tassertEquals(\".\", Strings.afterFirst(\"..\", '.'));\n+\t\tassertEquals(\"foo.bar\", Strings.afterFirst(\"com.foo.bar\", '.'));\n+\t\tassertEquals(\"foo bar\", Strings.afterFirst(\"com foo bar\", ' '));\n+\t\tassertEquals(\"bar\", Strings.afterFirst(\"com.foo bar\", ' '));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>afterLast</code> method.\n+\t */\n+\tpublic void testAfterLast()\n+\t{\n+\t\tassertNull(Strings.afterLast(null, '.'));\n+\t\tassertEquals(\"\", Strings.afterLast(\"\", '.'));\n+\t\tassertEquals(\"\", Strings.afterLast(\"\", ' '));\n+\t\tassertEquals(\"\", Strings.afterLast(\".\", '.'));\n+\t\tassertEquals(\"\", Strings.afterLast(\"..\", '.'));\n+\t\tassertEquals(\"bar\", Strings.afterLast(\"com.foo.bar\", '.'));\n+\t\tassertEquals(\"bar\", Strings.afterLast(\"com foo bar\", ' '));\n+\t\tassertEquals(\"bar\", Strings.afterLast(\"com foo.bar\", '.'));\n+\t}\n+\n+\t/**\n+\t * Tests the beforeLastPathComponent method\n+\t */\n+\tpublic void testBeforeLastPathComponent()\n+\t{\n+\t\tassertNull(Strings.beforeLastPathComponent(null, '.'));\n+\t\tassertEquals(\"\", Strings.beforeLastPathComponent(\"\", '.'));\n+\t\tassertEquals(\"\", Strings.beforeLastPathComponent(\"\", ' '));\n+\t\tassertEquals(\"\", Strings.beforeLastPathComponent(\".\", '.'));\n+\t\tassertEquals(\".\", Strings.beforeLastPathComponent(\"..\", '.'));\n+\t\tassertEquals(\"foo\", Strings.beforeLastPathComponent(\"foo.bar\", '.'));\n+\t\tassertEquals(\"\", Strings.beforeLastPathComponent(\"foo.bar\", ' '));\n+\t\tassertEquals(\"foo.ba\", Strings.beforeLastPathComponent(\"foo.bar\", 'r'));\n+\t\tassertEquals(\"com.foo\", Strings.beforeLastPathComponent(\"com.foo.bar\", '.'));\n+\t}\n \n+\t/**\n+\t * Tests the capitalize method.\n+\t */\n+\tpublic void testCapitalize()\n+\t{\n+\t\tassertEquals(\"Lorem ipsum dolor sit amet\", Strings.capitalize(\"lorem ipsum dolor sit amet\"));\n+\t\tassertEquals(\"Lorem ipsum dolor sit amet\", Strings.capitalize(\"Lorem ipsum dolor sit amet\"));\n+\t\tassertEquals(\" abcdefghijklm\", Strings.capitalize(\" abcdefghijklm\"));\n+\t\tassertEquals(\"\", Strings.capitalize(\"\"));\n+\t\tassertNull(Strings.capitalize(null));\n+\t}\n \n+\t/**\n+\t * Tests the escapeMarkup method.\n+\t */\n+\tpublic void testEscapeMarkup()\n+\t{\n+\t\tassertNull(Strings.escapeMarkup(null));\n+\t\tassertEquals(\"\", Strings.escapeMarkup(\"\"));\n+\n+\t\tassertEquals(\"&amp;\", Strings.escapeMarkup(\"&\"));\n+\t\tassertEquals(\"&#\", Strings.escapeMarkup(\"&#\"));\n+\t\tassertEquals(\"&#0000;\", Strings.escapeMarkup(\"&#0000;\"));\n+\t\t\n+\t\tassertEquals(\"&amp;amp;\", Strings.escapeMarkup(\"&amp;\"));\n+\t\tassertEquals(\"&lt; &gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\"));\n+\t\tassertEquals(\"&lt;&nbsp;&gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\", true));\n+\t}\n+\t\n+\t/**\n+\t * Tests the escapeMarkup method with whitespace.\n+\t */\n+\tpublic void testEscapeMarkupWhiteSpace()\n+\t{\n+\t\tassertNull(Strings.escapeMarkup(null, true));\n+\t\tassertEquals(\"\", Strings.escapeMarkup(\"\", true));\n+\t\t\n+\t\tassertEquals(\"\\n \\t\", Strings.escapeMarkup(\"\\n \\t\", false));\n+\t\tassertEquals(\"\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\", Strings.escapeMarkup(\"\\n \\t\", true));\n+\t\tassertEquals(\"  \", Strings.escapeMarkup(\"  \", false));\n+\t\tassertEquals(\"&nbsp;&nbsp;\", Strings.escapeMarkup(\"  \", true));\n+\t}\n+\n+\t/**\n+\t * Tests the escapeMarkup method with unicode escapes.\n+\t */\n+\tpublic void testEscapeMarkupUnicode()\n+\t{\n+\t\tassertNull(Strings.escapeMarkup(null, true, true));\n+\t\tassertEquals(\"\", Strings.escapeMarkup(\"\", true, true));\n+\n+\t\tassertEquals(\"&#199;&#252;&#233;&#226;&#228;&#224;&#229;&#231;&#234;&#235;\", \n+\t\t\t\tStrings.escapeMarkup(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", false, true));\n+\n+\t\tassertEquals(\"\\n \\t&#233;\", Strings.escapeMarkup(\"\\n \\t\ufffd\", false, true));\n+\t\tassertEquals(\"\\n \\t\ufffd\", Strings.escapeMarkup(\"\\n \\t\ufffd\", false, false));\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/8cb7d48aa7bbc058255abd1f282252897a9d9baa/wicket/src/test/wicket/util/string/StringsTest.java",
                "sha": "097bd817cf560dac355616e6ad022e2c5d20f2df",
                "status": "modified"
            }
        ],
        "message": "Fixed possible NPE's, upped coverage from <25% to >30%\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@457539 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/e8c477fadf373f35a068acc0d710d6a91ffa9ff7",
        "repo": "wicket",
        "unit_tests": [
            "StringsTest.java"
        ]
    },
    "wicket_8cd64ee": {
        "bug_id": "wicket_8cd64ee",
        "commit": "https://github.com/apache/wicket/commit/8cd64ee40d1ac5444d7136e9a68c71010085f65a",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/wicket/blob/8cd64ee40d1ac5444d7136e9a68c71010085f65a/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java?ref=8cd64ee40d1ac5444d7136e9a68c71010085f65a",
                "deletions": 7,
                "filename": "wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "patch": "@@ -110,7 +110,7 @@ public ComponentStringResourceLoader()\n \t * @see org.apache.wicket.resource.loader.IStringResourceLoader#loadStringResource(java.lang.Class,\n \t *      java.lang.String, java.util.Locale, java.lang.String)\n \t */\n-\tpublic String loadStringResource(Class< ? > clazz, final String key, final Locale locale,\n+\tpublic String loadStringResource(Class<?> clazz, final String key, final Locale locale,\n \t\tfinal String style)\n \t{\n \t\tif (clazz == null)\n@@ -132,7 +132,7 @@ public String loadStringResource(Class< ? > clazz, final String key, final Local\n \t\t\tResourceNameIterator iter = new ResourceNameIterator(path, style, locale, null);\n \t\t\twhile (iter.hasNext())\n \t\t\t{\n-\t\t\t\tString newPath = (String)iter.next();\n+\t\t\t\tString newPath = iter.next();\n \n \t\t\t\tfinal Properties props = propertiesFactory.load(clazz, newPath);\n \t\t\t\tif (props != null)\n@@ -159,6 +159,12 @@ public String loadStringResource(Class< ? > clazz, final String key, final Local\n \n \t\t\t// Move to the next superclass\n \t\t\tclazz = clazz.getSuperclass();\n+\n+\t\t\tif (clazz == null)\n+\t\t\t{\n+\t\t\t\t// nothing more to search, done\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \n \t\t// not found\n@@ -188,12 +194,12 @@ public String loadStringResource(final Component component, final String key)\n \n \t\t// The reason why we need to create that stack is because we need to\n \t\t// walk it downwards starting with Page down to the Component\n-\t\tList<Class< ? >> searchStack = getComponentStack(component);\n+\t\tList<Class<?>> searchStack = getComponentStack(component);\n \n \t\t// Walk the component hierarchy down from page to the component\n \t\tfor (int i = searchStack.size() - 1; (i >= 0) && (string == null); i--)\n \t\t{\n-\t\t\tClass< ? > clazz = searchStack.get(i);\n+\t\t\tClass<?> clazz = searchStack.get(i);\n \n \t\t\t// First, try the fully qualified resource name relative to the\n \t\t\t// component on the path from page down.\n@@ -226,10 +232,10 @@ public String loadStringResource(final Component component, final String key)\n \t *            The component to evaluate\n \t * @return The stack of classes\n \t */\n-\tprivate List<Class< ? >> getComponentStack(final Component component)\n+\tprivate List<Class<?>> getComponentStack(final Component component)\n \t{\n \t\t// Build the search stack\n-\t\tfinal List<Class< ? >> searchStack = new ArrayList<Class< ? >>();\n+\t\tfinal List<Class<?>> searchStack = new ArrayList<Class<?>>();\n \t\tsearchStack.add(component.getClass());\n \n \t\tif (!(component instanceof Page))\n@@ -258,7 +264,7 @@ public String loadStringResource(final Component component, final String key)\n \t *            The class to check\n \t * @return Whether to stop the search\n \t */\n-\tprotected boolean isStopResourceSearch(final Class< ? > clazz)\n+\tprotected boolean isStopResourceSearch(final Class<?> clazz)\n \t{\n \t\tif ((clazz == null) || clazz.equals(Object.class) || clazz.equals(Application.class))\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/8cd64ee40d1ac5444d7136e9a68c71010085f65a/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "sha": "a9554af89fb74d05902eade24f4accfe338a6fbc",
                "status": "modified"
            }
        ],
        "message": "patch possible npe when interface is passed in\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@683701 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/02c85dba31a0d5c315f5e90a994df2263a61b2d9",
        "repo": "wicket",
        "unit_tests": [
            "ComponentStringResourceLoaderTest.java"
        ]
    },
    "wicket_999e860": {
        "bug_id": "wicket_999e860",
        "commit": "https://github.com/apache/wicket/commit/999e86006793c58b45fb0bc09bd55fde1db42b49",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/999e86006793c58b45fb0bc09bd55fde1db42b49/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java?ref=999e86006793c58b45fb0bc09bd55fde1db42b49",
                "deletions": 1,
                "filename": "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "patch": "@@ -228,7 +228,15 @@ public void setAmOrPm(AM_PM amOrPm)\n \t */\n \tpublic void setDate(Date date)\n \t{\n-\t\tthis.date = (date != null) ? new MutableDateTime(date) : null;\n+\t\tif (date == null) {\n+\t\t\tthis.date = null;\n+\t\t\tsetDefaultModelObject(null);\n+\t\t\tsetHours(null);\n+\t\t\tsetMinutes(null);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tthis.date = new MutableDateTime(date);\n \t\tsetDefaultModelObject(date);\n \n \t\tInteger hours = getHours();",
                "raw_url": "https://github.com/apache/wicket/raw/999e86006793c58b45fb0bc09bd55fde1db42b49/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "sha": "c521336399874ccf22c7c29cdb9070d3dd3c99ac",
                "status": "modified"
            }
        ],
        "message": "fixed wicket-2083: NPE when clearing DateTimeField \n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@744182 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/6b2a347b3d7e8e5959114ae57ff0a8666743d4f4",
        "repo": "wicket",
        "unit_tests": [
            "DateTimeFieldTest.java"
        ]
    },
    "wicket_aa24d76": {
        "bug_id": "wicket_aa24d76",
        "commit": "https://github.com/apache/wicket/commit/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191/wicket/src/java/wicket/markup/html/form/Form.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/form/Form.java?ref=aa24d761bfcf0cae32aa6d41589b2b7ed2b31191",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/markup/html/form/Form.java",
                "patch": "@@ -925,6 +925,11 @@ private void dispatchEvent(final Page page, final String url)\n \t{\n \t\tfinal RequestParameters requestParameters = getRequest().getRequestParameters();\n \t\tfinal Component component = page.get(requestParameters.getComponentPath());\n+\t\tif (component == null)\n+\t\t{\n+\t\t\tthrow new WicketRuntimeException(\n+\t\t\t\t\t\"Component not found: \" + requestParameters.getComponentPath());\n+\t\t}\n \t\tif (!component.isVisible())\n \t\t{\n \t\t\tthrow new WicketRuntimeException(",
                "raw_url": "https://github.com/apache/wicket/raw/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191/wicket/src/java/wicket/markup/html/form/Form.java",
                "sha": "f63de6a4fd0ce458103997d5ff6fca87eb7abbf1",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459396 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/a96383b0210468fd4ee0087fec3961fb82a668ec",
        "repo": "wicket",
        "unit_tests": [
            "FormTest.java",
            "TestForm.java"
        ]
    },
    "wicket_ac9c28c": {
        "bug_id": "wicket_ac9c28c",
        "commit": "https://github.com/apache/wicket/commit/ac9c28c81e88b05a2bc755a3e1b995322852b3cb",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ac9c28c81e88b05a2bc755a3e1b995322852b3cb/wicket/src/java/wicket/markup/html/link/BookmarkablePageLink.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/link/BookmarkablePageLink.java?ref=ac9c28c81e88b05a2bc755a3e1b995322852b3cb",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/link/BookmarkablePageLink.java",
                "patch": "@@ -202,7 +202,7 @@ protected CharSequence getURL()\n \n \t\tif (getPopupSettings() != null)\n \t\t{\n-\t\t\treturn urlFor(getPopupSettings().getPageMap(), pageClass, parameters);\n+\t\t\treturn urlFor(getPopupSettings().getPageMap(this), pageClass, parameters);\n \t\t}\n \t\telse\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/ac9c28c81e88b05a2bc755a3e1b995322852b3cb/wicket/src/java/wicket/markup/html/link/BookmarkablePageLink.java",
                "sha": "b06f96cd4f83f7dfb94c9c68ba7bf62a082b9ee2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ac9c28c81e88b05a2bc755a3e1b995322852b3cb/wicket/src/java/wicket/markup/html/link/Link.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/link/Link.java?ref=ac9c28c81e88b05a2bc755a3e1b995322852b3cb",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/link/Link.java",
                "patch": "@@ -248,7 +248,7 @@ public final void onLinkClicked()\n \t\tif (popupSettings != null)\n \t\t{\n \t\t\tRequestCycle.get().getRequest().getRequestParameters().setPageMapName(\n-\t\t\t\t\tpopupSettings.getPageMap().getName());\n+\t\t\t\t\tpopupSettings.getPageMap(this).getName());\n \t\t}\n \t\t// Invoke subclass handler\n \t\tonClick();",
                "raw_url": "https://github.com/apache/wicket/raw/ac9c28c81e88b05a2bc755a3e1b995322852b3cb/wicket/src/java/wicket/markup/html/link/Link.java",
                "sha": "d7e9faa58bd94efc1e9186bce9311f6ef3d17a6a",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/wicket/blob/ac9c28c81e88b05a2bc755a3e1b995322852b3cb/wicket/src/java/wicket/markup/html/link/PopupSettings.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/link/PopupSettings.java?ref=ac9c28c81e88b05a2bc755a3e1b995322852b3cb",
                "deletions": 6,
                "filename": "wicket/src/java/wicket/markup/html/link/PopupSettings.java",
                "patch": "@@ -1,6 +1,7 @@\n /*\n- * $Id$ $Revision:\n- * 1.7 $ $Date$\n+ * $Id: PopupSettings.java 4824 2006-03-08 20:04:37 +0000 (Wed, 08 Mar 2006)\n+ * eelco12 $ $Revision$ $Date: 2006-03-08 20:04:37 +0000 (Wed, 08 Mar\n+ * 2006) $\n  * \n  * ==============================================================================\n  * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n@@ -19,8 +20,12 @@\n \n import java.io.Serializable;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import wicket.Component;\n+import wicket.Page;\n import wicket.PageMap;\n-import wicket.RequestCycle;\n \n /**\n  * A popup specification can be used as a property of the {@link Link}classes\n@@ -40,6 +45,9 @@\n  */\n public class PopupSettings implements Serializable\n {\n+\t/** The log. */\n+\tprivate static final Log log = LogFactory.getLog(PopupSettings.class);\n+\n \tprivate static final long serialVersionUID = 1L;\n \n \t/** Flag to include location bar */\n@@ -135,6 +143,7 @@ public PopupSettings(final int displayFlags)\n \tpublic PopupSettings(PageMap pagemap)\n \t{\n \t\tthis.pageMapName = pagemap.getName();\n+\t\tthis.windowName = pageMapName;\n \t}\n \n \t/**\n@@ -154,6 +163,7 @@ public PopupSettings(PageMap pagemap, final int displayFlags)\n \t{\n \t\tthis.displayFlags = displayFlags;\n \t\tthis.pageMapName = pagemap.getName();\n+\t\tthis.windowName = pageMapName;\n \t}\n \n \t/**\n@@ -288,7 +298,17 @@ public PopupSettings setWidth(int popupWidth)\n \t */\n \tpublic PopupSettings setWindowName(String popupWindowName)\n \t{\n-\t\tthis.windowName = popupWindowName;\n+\t\tif (popupWindowName != null)\n+\t\t{\n+\t\t\tthis.windowName = popupWindowName;\n+\t\t\tif (pageMapName != null && (!pageMapName.equals(popupWindowName)))\n+\t\t\t{\n+\t\t\t\tlog.warn(\"the page map and window name should be the same. The page map was \"\n+\t\t\t\t\t\t+ pageMapName + \", and the requested window name is \" + popupWindowName\n+\t\t\t\t\t\t+ \"; changing the page map to \" + popupWindowName);\n+\t\t\t}\n+\t\t\tthis.pageMapName = popupWindowName;\n+\t\t}\n \t\treturn this;\n \t}\n \n@@ -306,6 +326,8 @@ private String flagToString(final int flag)\n \t * Gets the pagemap where the popup page must be created in.\n \t * \n \t * @return The pagemap where the popup page must be created in\n+\t * @deprecated will be removed in Wicket 2.0; use\n+\t *             {@link #getPageMap(Component)} instead\n \t */\n \tpublic PageMap getPageMap()\n \t{\n@@ -315,8 +337,41 @@ public PageMap getPageMap()\n \t\t}\n \t\telse\n \t\t{\n-\t\t\t// fallback on the current page map\n-\t\t\treturn RequestCycle.get().getRequest().getPage().getPageMap();\n+\t\t\tthrow new UnsupportedOperationException(\n+\t\t\t\t\t\"this method can only work when a page map is set. Either call\"\n+\t\t\t\t\t\t\t+ \" getPageMap(Component) or set the page map\");\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Gets the pagemap where the popup page must be created in.\n+\t * \n+\t * @param callee\n+\t *            Calling component\n+\t * @return The pagemap where the popup page must be created in\n+\t */\n+\tpublic PageMap getPageMap(Component callee)\n+\t{\n+\t\tif (pageMapName != null)\n+\t\t{\n+\t\t\treturn PageMap.forName(pageMapName);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tif (callee == null)\n+\t\t\t{\n+\t\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\t\"when the page map is not set, argument callee may not be null\");\n+\t\t\t}\n+\t\t\tPage page = callee.getPage();\n+\t\t\tif (page == null)\n+\t\t\t{\n+\t\t\t\tthrow new IllegalStateException(callee\n+\t\t\t\t\t\t+ \" is not yet set on a page; if you want to use this method \"\n+\t\t\t\t\t\t+ \"without a page map being set, argument callee must be not null \"\n+\t\t\t\t\t\t+ \"and added to a page\");\n+\t\t\t}\n+\t\t\treturn page.getPageMap();\n \t\t}\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/ac9c28c81e88b05a2bc755a3e1b995322852b3cb/wicket/src/java/wicket/markup/html/link/PopupSettings.java",
                "sha": "85af2b7c62fde97626763c07083fedede4fc03fa",
                "status": "modified"
            }
        ],
        "message": "popup settings synced the window name and page map name and doesn't throw a NPE anymore when no page map was set\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/WICKET_1_2@461814 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/8dc2294ad12b857856e8569f643ca50fc10a60ed",
        "repo": "wicket",
        "unit_tests": [
            "BookmarkablePageLinkTest.java"
        ]
    },
    "wicket_af05b3d": {
        "bug_id": "wicket_af05b3d",
        "commit": "https://github.com/apache/wicket/commit/af05b3d68ca8b8021db8e205d39557782eb68a7b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/af05b3d68ca8b8021db8e205d39557782eb68a7b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java?ref=af05b3d68ca8b8021db8e205d39557782eb68a7b",
                "deletions": 3,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "patch": "@@ -774,10 +774,10 @@ else if (hasError())\n \t\t\tcallOnError(submitter);\n \t\t}\n \n-\n-\t\tif (((WebRequest)getRequest()).isAjax())\n+\t\t// update auto labels if we are inside an ajax request\n+\t\tfinal AjaxRequestTarget target = getRequestCycle().find(AjaxRequestTarget.class);\n+\t\tif (target != null)\n \t\t{\n-\t\t\tfinal AjaxRequestTarget target = getRequestCycle().find(AjaxRequestTarget.class);\n \t\t\tvisitChildren(FormComponent.class, new IVisitor<FormComponent<?>, Void>()\n \t\t\t{\n \t\t\t\t@Override",
                "raw_url": "https://github.com/apache/wicket/raw/af05b3d68ca8b8021db8e205d39557782eb68a7b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "sha": "7eeb1e17c4c76b9726b4859279bd15f8034abf08",
                "status": "modified"
            }
        ],
        "message": "WICKET-5462 fix npe in ajax form component label repainting",
        "parent": "https://github.com/apache/wicket/commit/a3a5a40fcea53384554d7a8ada08ef7bb021bf1d",
        "repo": "wicket",
        "unit_tests": [
            "FormTest.java",
            "TestForm.java"
        ]
    },
    "wicket_af8bc0c": {
        "bug_id": "wicket_af8bc0c",
        "commit": "https://github.com/apache/wicket/commit/af8bc0ceff7d99d4bb431a9538974acee58d3680",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/AutolinkTest.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/AutolinkTest.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 4,
                "filename": "wicket/src/test/wicket/markup/html/autolink/AutolinkTest.java",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.commons.logging.LogFactory;\n \n import wicket.WicketTestCase;\n+import wicket.markup.html.autolink.sub.PageB;\n import wicket.markup.resolver.AutoLinkResolver;\n \n /**\n@@ -41,15 +42,29 @@ public AutolinkTest(String name)\n \t}\n \n \t/**\n-\t * TODO Autolink: see https://sourceforge.net/tracker/index.php?func=detail&aid=1448200&group_id=119783&atid=684975\n-\t * The AnchorResolverDelegate implementation solves the problem. In that\n-\t * context it actually is not a test, rather than a solution which has not yet\n-\t * found its way into the core.\n \t * \n \t * @throws Exception\n \t */\n \tpublic void test_1() throws Exception\n \t{\n \t\texecuteTest(MyPage.class, \"MyPageExpectedResult.html\");\n \t}\n+\n+\t/**\n+\t * \n+\t * @throws Exception\n+\t */\n+\tpublic void test_2() throws Exception\n+\t{\n+\t\texecuteTest(PageA.class, \"PageAExpectedResult.html\");\n+\t}\n+\n+\t/**\n+\t * \n+\t * @throws Exception\n+\t */\n+\tpublic void test_3() throws Exception\n+\t{\n+\t\texecuteTest(PageB.class, \"PageBExpectedResult.html\");\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/AutolinkTest.java",
                "sha": "1bbc1ba0644cd50df3740da51e95f24100d1a099",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/BasePage.html",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/BasePage.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/BasePage.html",
                "patch": "@@ -0,0 +1,13 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n+<html>\n+  <body>\n+    <wicket:link>\n+      <a href=\"MyPage.html\">My Page</a>\n+      <a href=\"PageA.html\">Page A</a>\n+      <a href=\"sub/PageB.html\">Page B</a>\n+    </wicket:link>\n+    START<br>\n+    <wicket:child/>\n+    END<br>\n+  </body>\n+</html>",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/BasePage.html",
                "sha": "0a04d9c4b750de00a1fc1acf43c90c4685c8bd36",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/BasePage.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/BasePage.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/BasePage.java",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * $Id: ContainerWithAssociatedMarkupHelper.java,v 1.1 2006/03/10 22:20:42\n+ * jdonnerstag Exp $ $Revision$ $Date: 2006/03/10 22:20:42 $\n+ * \n+ * ==============================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * \n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package wicket.markup.html.autolink;\n+\n+import wicket.markup.html.WebPage;\n+\n+/**\n+ * \n+ */\n+public class BasePage extends WebPage\n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/** \n+\t * Creates a new instance of BasePanel\n+\t * \n+\t */\n+\tpublic BasePage()\n+\t{\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/BasePage.java",
                "sha": "e2583d7ddf3f9979cd666d7850bff21906f18f46",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/MyPage.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/MyPage.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 1,
                "filename": "wicket/src/test/wicket/markup/html/autolink/MyPage.java",
                "patch": "@@ -17,7 +17,6 @@\n  */\n package wicket.markup.html.autolink;\n \n-import wicket.markup.html.autolink.sub.BasePage;\n \n /**\n  * ",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/MyPage.java",
                "sha": "a5b593efc711e3227a2067e14f9c81b501125d19",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/MyPageExpectedResult.html",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/MyPageExpectedResult.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/MyPageExpectedResult.html",
                "patch": "@@ -2,6 +2,8 @@\n <html>\r\n   <body>\r\n     <wicket:link>\r\n+      <span><em>My Page</em></span>\r\n+      <a href=\"/MockWebApplication/MockWebApplication?wicket:bookmarkablePage=:wicket.markup.html.autolink.PageA\">Page A</a>\r\n       <a href=\"/MockWebApplication/MockWebApplication?wicket:bookmarkablePage=:wicket.markup.html.autolink.sub.PageB\">Page B</a>\r\n     </wicket:link>\r\n     START<br>\r",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/MyPageExpectedResult.html",
                "sha": "01f9ad375df56b3e7819ff70261e9d288c3d906a",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageA.html",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/PageA.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 6,
                "filename": "wicket/src/test/wicket/markup/html/autolink/PageA.html",
                "patch": "@@ -1,6 +1,7 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n-<html>\n-  <body>\n-    Page A\n-  </body>\n-</html>\n+\n+<wicket:extend>\n+  <wicket:link>\n+    <a href=\"PageA.html\">Page A</a>\n+  </wicket:link>\n+  Page A\n+</wicket:extend>",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageA.html",
                "sha": "9e59faa483289aac0bb2ff4d68971f28b89b2ffa",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageA.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/PageA.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 3,
                "filename": "wicket/src/test/wicket/markup/html/autolink/PageA.java",
                "patch": "@@ -17,13 +17,11 @@\n  */\n package wicket.markup.html.autolink;\n \n-import wicket.markup.html.WebPage;\n-\n /**\n  * \n  * @author Juergen Donnerstag\n  */\n-public class PageA extends WebPage\n+public class PageA extends BasePage\n {\n \tprivate static final long serialVersionUID = 1L;\n ",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageA.java",
                "sha": "498814b4be75b22557d9e2a7ed13dbc0cb4ef2bf",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageAExpectedResult.html",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/PageAExpectedResult.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/PageAExpectedResult.html",
                "patch": "@@ -0,0 +1,18 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n+<html>\r\n+  <body>\r\n+    <wicket:link>\r\n+      <a href=\"/MockWebApplication/MockWebApplication?wicket:bookmarkablePage=:wicket.markup.html.autolink.MyPage\">My Page</a>\r\n+      <span><em>Page A</em></span>\r\n+      <a href=\"/MockWebApplication/MockWebApplication?wicket:bookmarkablePage=:wicket.markup.html.autolink.sub.PageB\">Page B</a>\r\n+    </wicket:link>\r\n+    START<br>\r\n+    <wicket:child><wicket:extend>\r\n+  <wicket:link>\r\n+    <span><em>Page A</em></span>\r\n+  </wicket:link>\r\n+  Page A\r\n+</wicket:extend></wicket:child>\r\n+    END<br>\r\n+  </body>\r\n+</html>\r",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageAExpectedResult.html",
                "sha": "9506f717b55efd93867380c3dbeff4178844e721",
                "status": "added"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageBExpectedResult.html",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/PageBExpectedResult.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/autolink/PageBExpectedResult.html",
                "patch": "@@ -0,0 +1,16 @@\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\r\n+<html>\r\n+  <body>\r\n+    <wicket:link>\r\n+      <span><em>Page B</em></span>\r\n+    </wicket:link>\r\n+    START<br>\r\n+    <wicket:child><wicket:extend>\r\n+  <wicket:link>\r\n+    <a href=\"PageA.html\">Page A</a>\r\n+  </wicket:link>\r\n+  Page B\r\n+</wicket:extend></wicket:child>\r\n+    END<br>\r\n+  </body>\r\n+</html>\r",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/PageBExpectedResult.html",
                "sha": "592bbbe2df992bfcb9fdd607a610a2a757f4d4a3",
                "status": "added"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/sub/PageB.html",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/sub/PageB.html?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 6,
                "filename": "wicket/src/test/wicket/markup/html/autolink/sub/PageB.html",
                "patch": "@@ -1,6 +1,7 @@\n-<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n-<html>\n-  <body>\n-    Page B\n-  </body>\n-</html>\n+\n+<wicket:extend>\n+  <wicket:link>\n+    <a href=\"PageA.html\">Page A</a>\n+  </wicket:link>\n+  Page B\n+</wicket:extend>",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/sub/PageB.html",
                "sha": "05da0c93fede142a2594675d9747e7944b750281",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/sub/PageB.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/autolink/sub/PageB.java?ref=af8bc0ceff7d99d4bb431a9538974acee58d3680",
                "deletions": 2,
                "filename": "wicket/src/test/wicket/markup/html/autolink/sub/PageB.java",
                "patch": "@@ -17,13 +17,12 @@\n  */\n package wicket.markup.html.autolink.sub;\n \n-import wicket.markup.html.WebPage;\n \n /**\n  * \n  * @author Juergen Donnerstag\n  */\n-public class PageB extends WebPage\n+public class PageB extends BasePage\n {\n \tprivate static final long serialVersionUID = 1L;\n ",
                "raw_url": "https://github.com/apache/wicket/raw/af8bc0ceff7d99d4bb431a9538974acee58d3680/wicket/src/test/wicket/markup/html/autolink/sub/PageB.java",
                "sha": "339c6c8767ef4b017c26e917722269723bf77946",
                "status": "modified"
            }
        ],
        "message": "fixed NPE and extended the unit test (provided by Thomas Singer)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@460161 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/153dd8404e080e1a4b70e05d6e0f55e34188e5bd",
        "repo": "wicket",
        "unit_tests": [
            "TestBasePage.java",
            "TestBasePage.java"
        ]
    },
    "wicket_b02ba6d": {
        "bug_id": "wicket_b02ba6d",
        "commit": "https://github.com/apache/wicket/commit/b02ba6d5f4810ab70f0144f9c16273311b976b9a",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/b02ba6d5f4810ab70f0144f9c16273311b976b9a/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java?ref=b02ba6d5f4810ab70f0144f9c16273311b976b9a",
                "deletions": 0,
                "filename": "wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "patch": "@@ -694,6 +694,10 @@ public void clear()\n \t\t */\n \t\tpublic boolean containsKey(Object key)\n \t\t{\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t\treturn cache.containsKey(key);\n \t\t}\n \n@@ -702,6 +706,10 @@ public boolean containsKey(Object key)\n \t\t */\n \t\tpublic V get(Object key)\n \t\t{\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\treturn cache.get(key);\n \t\t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/b02ba6d5f4810ab70f0144f9c16273311b976b9a/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "sha": "3328337be9948e0ad20976b1f8e96de96be93aba",
                "status": "modified"
            }
        ],
        "message": "fixed: NPE after application hot redeployment (MarkupCache)\nIssue: WICKET-2475\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@816867 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/9771e6b210e353c3e91aeefbf7c7214ef30b6d75",
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_b719561": {
        "bug_id": "wicket_b719561",
        "commit": "https://github.com/apache/wicket/commit/b719561b4429941ccbd705ac1ddd13e4aa1aec0e",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/b719561b4429941ccbd705ac1ddd13e4aa1aec0e/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java?ref=b719561b4429941ccbd705ac1ddd13e4aa1aec0e",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "patch": "@@ -349,6 +349,15 @@ public void reset() throws IOException\n \t\twriteObjectMethodMissing.clear();\n \t}\n \n+\t@Override\n+\tpublic void close() throws IOException\n+\t{\n+\t\t// do not call super.close() because SerializableChecker uses ObjectOutputStream's no-arg constructor\n+\n+\t\t// just null-ify the declared members\n+\t\treset();\n+\t}\n+\n \tprivate void check(Object obj)\n \t{\n \t\tif (obj == null)",
                "raw_url": "https://github.com/apache/wicket/raw/b719561b4429941ccbd705ac1ddd13e4aa1aec0e/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "sha": "57f831716882a7750bc29cb274e46a8c3b771e81",
                "status": "modified"
            }
        ],
        "message": "WICKET-4706 SerializableChecker.close throws NPE",
        "parent": "https://github.com/apache/wicket/commit/4fc82e3598ec6d790fe13c05ef99b1a69095779e",
        "repo": "wicket",
        "unit_tests": [
            "SerializableCheckerTest.java"
        ]
    },
    "wicket_bc10ba5": {
        "bug_id": "wicket_bc10ba5",
        "commit": "https://github.com/apache/wicket/commit/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java?ref=bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc",
                "deletions": 5,
                "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -710,12 +710,9 @@ public final void renderAssociatedMarkup(final String openTagName, final String\n \t */\n \tpublic MarkupContainer replace(final Component child)\n \t{\n-\t\tcheckHierarchyChange(child);\n+\t\tArgs.notNull(child, \"child\");\n \n-\t\tif (child == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"argument child must be not null\");\n-\t\t}\n+\t\tcheckHierarchyChange(child);\n \n \t\tif (log.isDebugEnabled())\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "731065c5f3aa82804f1f3fe85de5c0c7cc2bd4fb",
                "status": "modified"
            }
        ],
        "message": "Move the check for non-null earlier in the method body. It would throw NPE in #checkHierarchyChange() otherwise.\n\nUse Args.",
        "parent": "https://github.com/apache/wicket/commit/0b78d759220c1b09abb0d47b5007757bbfeb4e0c",
        "repo": "wicket",
        "unit_tests": [
            "MarkupContainerTest.java"
        ]
    },
    "wicket_c0d3864": {
        "bug_id": "wicket_c0d3864",
        "commit": "https://github.com/apache/wicket/commit/c0d38640f267939c3c8e46d381f62f8f48f912ae",
        "file": [
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/java/wicket/AutoLinkResolver.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/AutoLinkResolver.java?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 62,
                "filename": "wicket/src/java/wicket/AutoLinkResolver.java",
                "patch": "@@ -160,77 +160,78 @@ private final Component resolveAutomaticLink(final MarkupContainer container, fi\n \t\t{\n \t\t\textension = infoPath.substring(pos + 1);\n \t\t\tinfoPath = infoPath.substring(0, pos);\n-\t\t}\n-\n-\t\t// HTML hrefs are handled first\n-\t\tif (supportedPageExtensions.containsKey(extension.toLowerCase()))\n-\t\t{\n-\t\t\t// Obviously a href like href=\"myPkg.MyLabel.html\" will do as well.\n-\t\t\t// Wicket will not throw an exception. It accepts it.\n-\t\t\tinfoPath = Strings.replaceAll(infoPath, \"/\", \".\");\n \n-\t\t\tfinal ApplicationSettings appSettings = page.getApplicationSettings();\n-\t\t\tfinal IClassResolver defaultClassResolver = appSettings.getDefaultClassResolver();\n-\t\t\t\n-\t\t\tfinal String className;\n-\t\t\tif (!infoPath.startsWith(\".\"))\n-\t\t\t{\n-\t\t\t\t// Href is relative. Resolve the url given relative to the\n-\t\t\t\t// current page\n-\t\t\t\tclassName = Packages.extractPackageName(page.getClass()) + \".\" + infoPath;\n-\t\t\t}\n-\t\t\telse\n-\t\t\t{\n-\t\t\t\t// href is absolute. If class with the same absolute path\n-\t\t\t\t// exists, use it. Else don't change the href.\n-\t\t\t\tclassName = infoPath.substring(1);\n-\t\t\t}\n-\t\t\t\n-\t\t\ttry\n-\t\t\t{\n-\t\t\t\tfinal Class clazz = defaultClassResolver.resolveClass(className);\n-\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);\n-\t\t\t}\n-\t\t\tcatch (WicketRuntimeException ex)\n-\t\t\t{\n-\t\t\t\t// fall through\n-\t\t\t}\n-\t\t}\n-\t\t// It is not \"*.html\". Create a static resource reference\n-\t\telse\n-\t\t{\n-\t\t\tif (infoPath.startsWith(\"/\") || infoPath.startsWith(\"\\\\\"))\n-\t\t\t{\n-\t\t\t\t// href is absolute. Don't change it at all.\n-\t\t\t}\n-\t\t\telse\n+\t\t\t// HTML hrefs are handled first\n+\t\t\tif (supportedPageExtensions.containsKey(extension.toLowerCase()))\n \t\t\t{\n-\t\t\t\t// Href is relative. Create a resource reference pointing at\n-\t\t\t\t// this file\n-\n-\t\t\t\t// <wicket:head> components are handled differently. We can not\n-\t\t\t\t// use the container, because it is the container the header\n-\t\t\t\t// has been added to (e.g. the Page). What we need however, is\n-\t\t\t\t// the component (e.g. a Panel) which contributed it.\n-\t\t\t\tComponent relevantContainer = container;\n-\t\t\t\twhile ((relevantContainer instanceof IComponentResolver) \n-\t\t\t\t\t\t&& !(relevantContainer instanceof IComponentResolverMarker))\n+\t\t\t\t// Obviously a href like href=\"myPkg.MyLabel.html\" will do as well.\n+\t\t\t\t// Wicket will not throw an exception. It accepts it.\n+\t\t\t\tinfoPath = Strings.replaceAll(infoPath, \"/\", \".\");\n+\t\n+\t\t\t\tfinal ApplicationSettings appSettings = page.getApplicationSettings();\n+\t\t\t\tfinal IClassResolver defaultClassResolver = appSettings.getDefaultClassResolver();\n+\t\t\t\t\n+\t\t\t\tfinal String className;\n+\t\t\t\tif (!infoPath.startsWith(\".\"))\n \t\t\t\t{\n-\t\t\t\t\trelevantContainer = relevantContainer.getParent(); \n+\t\t\t\t\t// Href is relative. Resolve the url given relative to the\n+\t\t\t\t\t// current page\n+\t\t\t\t\tclassName = Packages.extractPackageName(page.getClass()) + \".\" + infoPath;\n \t\t\t\t}\n-\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t// href is absolute. If class with the same absolute path\n+\t\t\t\t\t// exists, use it. Else don't change the href.\n+\t\t\t\t\tclassName = infoPath.substring(1);\n+\t\t\t\t}\n+\t\t\t\t\n \t\t\t\ttry\n \t\t\t\t{\n-\t\t\t\t\t// Create the component implementing the link\n-\t\t\t\t\treturn new CssLink(autoId, relevantContainer.getClass(), href);\n+\t\t\t\t\tfinal Class clazz = defaultClassResolver.resolveClass(className);\n+\t\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);\n \t\t\t\t}\n \t\t\t\tcatch (WicketRuntimeException ex)\n \t\t\t\t{\n-\t\t\t\t\t// Provided the resource does not exist, assume the user did\n-\t\t\t\t\t// deliberately not point it to a page or resource. The href\n-\t\t\t\t\t// might still point to a valid homepage outside of wicket.\n-\t\t\t\t\tlog.info(\"Did not find autolink resource: \" + href \n-\t\t\t\t\t\t\t+ \"; Assume it is a valid external URL\");\n+\t\t\t\t\tlog.info(\"Did not find corresponding java class: \" + className);\n+\t\t\t\t\t// fall through\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t// It is not \"*.html\". Create a static resource reference\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\tif (infoPath.startsWith(\"/\") || infoPath.startsWith(\"\\\\\"))\n+\t\t\t\t{\n+\t\t\t\t\t// href is absolute. Don't change it at all.\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\t// Href is relative. Create a resource reference pointing at\n+\t\t\t\t\t// this file\n+\t\n+\t\t\t\t\t// <wicket:head> components are handled differently. We can not\n+\t\t\t\t\t// use the container, because it is the container the header\n+\t\t\t\t\t// has been added to (e.g. the Page). What we need however, is\n+\t\t\t\t\t// the component (e.g. a Panel) which contributed it.\n+\t\t\t\t\tComponent relevantContainer = container;\n+\t\t\t\t\twhile ((relevantContainer instanceof IComponentResolver) \n+\t\t\t\t\t\t\t&& !(relevantContainer instanceof IComponentResolverMarker))\n+\t\t\t\t\t{\n+\t\t\t\t\t\trelevantContainer = relevantContainer.getParent(); \n+\t\t\t\t\t}\n+\t\n+\t\t\t\t\ttry\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Create the component implementing the link\n+\t\t\t\t\t\treturn new CssLink(autoId, relevantContainer.getClass(), href);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (WicketRuntimeException ex)\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Provided the resource does not exist, assume the user did\n+\t\t\t\t\t\t// deliberately not point it to a page or resource. The href\n+\t\t\t\t\t\t// might still point to a valid homepage outside of wicket.\n+\t\t\t\t\t\tlog.info(\"Did not find autolink resource: \" + href \n+\t\t\t\t\t\t\t\t+ \"; Assume it is a valid external URL\");\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/java/wicket/AutoLinkResolver.java",
                "sha": "e787a0e7ff2014261ee3647a7baa843a1ed14d52",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPageExpectedResult_4.html",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/link/AutolinkPageExpectedResult_4.html?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/link/AutolinkPageExpectedResult_4.html",
                "patch": "@@ -0,0 +1,14 @@\n+<html xmlns:wicket>\n+<body>\n+<wicket:link autolink=\"true\">\n+  <!-- File/page does not exist => Do not change href at all -->\n+  <a href=\"PageDoesNotExist.html\">Home</a>\n+  <!-- Reference an internal target => Do not change href at all -->\n+  <a href=\"#link1\">Link 1</a>\n+  <!-- Not sure what it should do, but it is obviously valid => Do not change href at all -->\n+  <a href=\"\">Link 1</a>\n+  <!-- Not supported yet: Reference an internal target on an existing page -->\n+  <a href=\"SamePage.html#link1\">Link 1</a>\n+</wicket:link>\n+</body>\n+</html>",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPageExpectedResult_4.html",
                "sha": "297ba3abe2080774f09d8cf232053a2e7280d428",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.html",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.html?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/link/AutolinkPage_4.html",
                "patch": "@@ -0,0 +1,14 @@\n+<html xmlns:wicket>\n+<body>\n+<wicket:link autolink=true>\n+  <!-- File/page does not exist => Do not change href at all -->\n+  <a href=\"PageDoesNotExist.html\">Home</a>\n+  <!-- Reference an internal target => Do not change href at all -->\n+  <a href=\"#link1\">Link 1</a>\n+  <!-- Not sure what it should do, but it is obviously valid => Do not change href at all -->\n+  <a href=\"\">Link 1</a>\n+  <!-- Not supported yet: Reference an internal target on an existing page -->\n+  <a href=\"SamePage.html#link1\">Link 1</a>\n+</wicket:link>\n+</body>\n+</html>",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.html",
                "sha": "0127b353c448344943876f6b331c9adb7a43772c",
                "status": "added"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.java?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/link/AutolinkPage_4.java",
                "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * $Id$\n+ * $Revision$\n+ * $Date$\n+ *\n+ * ====================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package wicket.markup.html.link;\n+\n+import wicket.PageParameters;\n+import wicket.markup.html.WebPage;\n+\n+\n+/**\n+ * Mock page for testing.\n+ *\n+ * @author Chris Turner\n+ */\n+public class AutolinkPage_4 extends WebPage \n+{\n+\tprivate static final long serialVersionUID = 1L;\n+\n+\t/**\n+\t * Construct.\n+\t * @param parameters\n+\t */\n+\tpublic AutolinkPage_4(final PageParameters parameters) \n+\t{\n+    }\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkPage_4.java",
                "sha": "ce87975437157afc279e34486952d80bdf6651f8",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/markup/html/link/AutolinkTest.java?ref=c0d38640f267939c3c8e46d381f62f8f48f912ae",
                "deletions": 0,
                "filename": "wicket/src/test/wicket/markup/html/link/AutolinkTest.java",
                "patch": "@@ -70,4 +70,13 @@ public void testRenderHomePage_3() throws Exception\n         application.getSettings().setAutomaticLinking(true);\n \t    executeTest(AutolinkPage_3.class, \"AutolinkPageExpectedResult_3.html\");\n \t}\n+    \n+\t/**\n+\t * @throws Exception\n+\t */\n+\tpublic void testRenderHomePage_4() throws Exception\n+\t{\n+        application.getSettings().setAutomaticLinking(true);\n+\t    executeTest(AutolinkPage_4.class, \"AutolinkPageExpectedResult_4.html\");\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/c0d38640f267939c3c8e46d381f62f8f48f912ae/wicket/src/test/wicket/markup/html/link/AutolinkTest.java",
                "sha": "c489be2858cdd028ca3787e33d6d7029d7083fcc",
                "status": "modified"
            }
        ],
        "message": "Fixed autolink NPE bug\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@457979 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/ce994531ed150f40de63a6a4e32adfcc164800ec",
        "repo": "wicket",
        "unit_tests": [
            "AutoLinkResolverTest.java"
        ]
    },
    "wicket_c14a1e1": {
        "bug_id": "wicket_c14a1e1",
        "commit": "https://github.com/apache/wicket/commit/c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java?ref=c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
                "deletions": 7,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "patch": "@@ -92,13 +92,6 @@ public IRequestHandler mapRequest(Request request)\n \t\t\t\t// should be stripped of timestamps\n \t\t\t\tif (i + 1 == segmentsSize)\n \t\t\t\t{\n-\t\t\t\t\t// since we need mutable page parameters for \n-\t\t\t\t\t// the caching strategy ensure they are not null \n-\t\t\t\t\tif (pageParameters == null)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tpageParameters = new PageParameters();\n-\t\t\t\t\t}\n-\t\t\t\t\t\n \t\t\t\t\t// The filename + parameters eventually contain caching\n \t\t\t\t\t// related information which needs to be removed\n \t\t\t\t\tResourceUrl resourceUrl = new ResourceUrl(segment, pageParameters);",
                "raw_url": "https://github.com/apache/wicket/raw/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "sha": "cdc5ac7fd169ea5e328234d98316edcd5e1fe5ed",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java?ref=c14a1e127d7e324383ba5fc6c0c42aa1c3817449",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.wicket.request.resource.caching;\n \n import org.apache.wicket.request.http.WebResponse;\n+import org.apache.wicket.request.mapper.parameter.INamedParameters;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.ResourceReference;\n import org.apache.wicket.util.lang.Args;\n@@ -75,7 +76,12 @@ public void decorateUrl(ResourceUrl url, final ResourceReference reference)\n \n \tpublic void undecorateUrl(ResourceUrl url)\n \t{\n-\t\turl.getParameters().remove(timestampParameter);\n+\t\tfinal INamedParameters parameters = url.getParameters();\n+\t\t\n+\t\tif (parameters != null)\n+\t\t{\n+\t\t\tparameters.remove(timestampParameter);\n+\t\t}\n \t}\n \n \tpublic void decorateResponse(AbstractResource.ResourceResponse response)",
                "raw_url": "https://github.com/apache/wicket/raw/c14a1e127d7e324383ba5fc6c0c42aa1c3817449/wicket-core/src/main/java/org/apache/wicket/request/resource/caching/QueryStringWithTimestampResourceCachingStrategy.java",
                "sha": "654114ee84431de46c1c3c5d5d0da7a79ef9f7ef",
                "status": "modified"
            }
        ],
        "message": "WICKET-3828 QueryStringWithTimestampResourceCachingStrategy#undecorateUrl(ResourceUrl) can causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1138591 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/f5a62da5b38c504db8945a88857a53aae6b5d7b7",
        "repo": "wicket",
        "unit_tests": [
            "BasicResourceReferenceMapperTest.java"
        ]
    },
    "wicket_c48ef46": {
        "bug_id": "wicket_c48ef46",
        "commit": "https://github.com/apache/wicket/commit/c48ef460a9c570dcedfe50bf5ab92872dd0aa682",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/c48ef460a9c570dcedfe50bf5ab92872dd0aa682/wicket/src/java/wicket/util/string/Strings.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/string/Strings.java?ref=c48ef460a9c570dcedfe50bf5ab92872dd0aa682",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/util/string/Strings.java",
                "patch": "@@ -807,8 +807,12 @@ else if (aChar == 'f')\n \t *            The unicode string\n \t * @return The escaped unicode string, like '\\u4F60\\u597D'.\n \t */\n-\tpublic static String toEscapedUnicode(String unicodeString)\n+\tpublic static String toEscapedUnicode(final String unicodeString)\n \t{\n+\t\tif ((unicodeString == null) || (unicodeString.length() == 0))\n+\t\t{\n+\t\t\treturn unicodeString;\n+\t\t}\n \t\tint len = unicodeString.length();\n \t\tint bufLen = len * 2;\n \t\tStringBuffer outBuffer = new StringBuffer(bufLen);",
                "raw_url": "https://github.com/apache/wicket/raw/c48ef460a9c570dcedfe50bf5ab92872dd0aa682/wicket/src/java/wicket/util/string/Strings.java",
                "sha": "715860c1747a3476ad59555680bb34f2bb9b7254",
                "status": "modified"
            }
        ],
        "message": "avoid NPE in unicode conversion\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@462131 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/ae260354840d0a55a9d19524940a913c0cf3aab5",
        "repo": "wicket",
        "unit_tests": [
            "StringsTest.java"
        ]
    },
    "wicket_c940a37": {
        "bug_id": "wicket_c940a37",
        "commit": "https://github.com/apache/wicket/commit/c940a378736e728ba959ec62d9a1f10fb0bc6a0f",
        "file": [
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/wicket/blob/c940a378736e728ba959ec62d9a1f10fb0bc6a0f/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java?ref=c940a378736e728ba959ec62d9a1f10fb0bc6a0f",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "patch": "@@ -96,18 +96,27 @@ protected MarkupCache()\n \t\t}\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic void clear()\n \t{\n \t\tmarkupCache.clear();\n \t\tmarkupKeyCache.clear();\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic void shutdown()\n \t{\n \t\tmarkupCache.shutdown();\n \t\tmarkupKeyCache.shutdown();\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic final IMarkupFragment removeMarkup(final String cacheKey)\n \t{\n \t\tArgs.notNull(cacheKey, \"cacheKey\");\n@@ -188,6 +197,10 @@ private boolean isBaseMarkupCached(final CharSequence key)\n \t{\n \t\t// Get the markup associated with key\n \t\tMarkup markup = markupCache.get(key);\n+\t\tif (markup == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n \n \t\t// Get the base markup resource stream from the markup\n \t\tMarkupResourceStream resourceStream = markup.getMarkupResourceStream()\n@@ -215,6 +228,9 @@ private boolean isMarkupCached(final MarkupResourceStream resourceStream)\n \t\treturn false;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic final int size()\n \t{\n \t\treturn markupCache.size();\n@@ -610,11 +626,17 @@ public DefaultCacheImplementation()\n \t\t{\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void clear()\n \t\t{\n \t\t\tcache.clear();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic boolean containsKey(Object key)\n \t\t{\n \t\t\tif (key == null)\n@@ -624,6 +646,9 @@ public boolean containsKey(Object key)\n \t\t\treturn cache.containsKey(key);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic V get(Object key)\n \t\t{\n \t\t\tif (key == null)\n@@ -633,26 +658,41 @@ public V get(Object key)\n \t\t\treturn cache.get(key);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic Collection<K> getKeys()\n \t\t{\n \t\t\treturn cache.keySet();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void put(K key, V value)\n \t\t{\n \t\t\tcache.put(key, value);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic boolean remove(K key)\n \t\t{\n \t\t\treturn cache.remove(key) == null;\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic int size()\n \t\t{\n \t\t\treturn cache.size();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void shutdown()\n \t\t{\n \t\t\tclear();",
                "raw_url": "https://github.com/apache/wicket/raw/c940a378736e728ba959ec62d9a1f10fb0bc6a0f/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "sha": "dd4c4bc1a7a13a40d7dfb4c1e0a65be7c513c170",
                "status": "modified"
            }
        ],
        "message": "fixed NPE when reloading updated markup in development mode\nIssue: WICKET-3336\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1059368 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/b40d5d6d529720e41948fa3ad55aa4bd29e527c4",
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_ca2ae1a": {
        "bug_id": "wicket_ca2ae1a",
        "commit": "https://github.com/apache/wicket/commit/ca2ae1ae5aa57665bd7ae292bc4ec5fe7524a158",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ca2ae1ae5aa57665bd7ae292bc4ec5fe7524a158/wicket-core/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java?ref=ca2ae1ae5aa57665bd7ae292bc4ec5fe7524a158",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "patch": "@@ -578,7 +578,7 @@ public ResourceReferenceAutolink(final String id, final Class<?> clazz, final St\n \t\t\tClass<?> cursor = clazz;\n \t\t\t// iterate all parents because the auto linked resource may come from\n \t\t\t// inherited markup\n-\t\t\twhile (cursor != null || cursor != Object.class)\n+\t\t\twhile (cursor != null && cursor != Object.class)\n \t\t\t{\n \t\t\t\tif (PackageResource.exists(cursor, href, getLocale(), getStyle(), getVariation()))\n \t\t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/ca2ae1ae5aa57665bd7ae292bc4ec5fe7524a158/wicket-core/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "sha": "5b20adb95c406a178f3b9aef5c517c610252b404",
                "status": "modified"
            }
        ],
        "message": "WICKET-4152 NPE in CachingResourceStreamLocator due to the search in parent's markup in Autolink code\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1186767 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/4fa68de58a9e18f183b2db381c47f7ac1a3b929d",
        "repo": "wicket",
        "unit_tests": [
            "AutoLinkResolverTest.java"
        ]
    },
    "wicket_d71a4cc": {
        "bug_id": "wicket_d71a4cc",
        "commit": "https://github.com/apache/wicket/commit/d71a4cc86a2a4b10aacf222f219ee8af94fe0b48",
        "file": [
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/wicket/blob/d71a4cc86a2a4b10aacf222f219ee8af94fe0b48/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java?ref=d71a4cc86a2a4b10aacf222f219ee8af94fe0b48",
                "deletions": 42,
                "filename": "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.wicket.request.ClientInfo;\n import org.apache.wicket.util.convert.IConverter;\n import org.apache.wicket.util.convert.converters.ZeroPaddingIntegerConverter;\n-import org.apache.wicket.util.lang.EnumeratedType;\n import org.apache.wicket.validation.validator.RangeValidator;\n import org.joda.time.DateTimeFieldType;\n import org.joda.time.DateTimeZone;\n@@ -53,33 +52,34 @@\n  */\n public class DateTimeField extends FormComponentPanel<Date>\n {\n+\tprivate static final long serialVersionUID = 1L;\n+\n \t/**\n \t * Enumerated type for different ways of handling the render part of requests.\n \t */\n-\t// enums are mucho nicer, but let's keep this project at 1.4 for now\n-\tprivate static class AM_PM extends EnumeratedType\n-\t{\n-\t\tprivate static final long serialVersionUID = 1L;\n+\tprivate static enum AM_PM {\n+\t\tAM(\"AM\"), PM(\"PM\");\n \n-\t\tstatic final AM_PM AM = new AM_PM(\"AM\");\n+\t\t/** */\n+\t\tprivate String value;\n \n-\t\tstatic final AM_PM PM = new AM_PM(\"PM\");\n-\n-\t\tpublic static AM_PM[] values()\n+\t\tAM_PM(final String name)\n \t\t{\n-\t\t\treturn new AM_PM[] { AM, PM };\n+\t\t\tvalue = name;\n \t\t}\n \n-\t\tprivate AM_PM(final String name)\n+\t\t/**\n+\t\t * @see java.lang.Enum#toString()\n+\t\t */\n+\t\t@Override\n+\t\tpublic String toString()\n \t\t{\n-\t\t\tsuper(name);\n+\t\t\treturn value;\n \t\t}\n \t}\n \n \tprivate static final IConverter MINUTES_CONVERTER = new ZeroPaddingIntegerConverter(2);\n \n-\tprivate static final long serialVersionUID = 1L;\n-\n \tprivate AM_PM amOrPm = AM_PM.AM;\n \n \tprivate DropDownChoice<AM_PM> amOrPmChoice;\n@@ -101,7 +101,7 @@ private AM_PM(final String name)\n \t * \n \t * @param id\n \t */\n-\tpublic DateTimeField(String id)\n+\tpublic DateTimeField(final String id)\n \t{\n \t\tthis(id, null);\n \t}\n@@ -112,9 +112,10 @@ public DateTimeField(String id)\n \t * @param id\n \t * @param model\n \t */\n-\tpublic DateTimeField(String id, IModel<Date> model)\n+\tpublic DateTimeField(final String id, final IModel<Date> model)\n \t{\n \t\tsuper(id, model);\n+\n \t\tsetType(Date.class);\n \t\tPropertyModel<Date> dateFieldModel = new PropertyModel<Date>(this, \"date\");\n \t\tadd(dateField = newDateTextField(\"date\", dateFieldModel));\n@@ -181,9 +182,13 @@ public Integer getHours()\n \t\treturn hours;\n \t}\n \n-\tprotected void configure(Map widgetProperties)\n+\t/**\n+\t * TODO comment\n+\t * \n+\t * @param widgetProperties\n+\t */\n+\tprotected void configure(Map< ? , ? > widgetProperties)\n \t{\n-\n \t}\n \n \t/**\n@@ -213,7 +218,7 @@ public Integer getMinutes()\n \t * @param amOrPm\n \t *            amOrPm\n \t */\n-\tpublic void setAmOrPm(AM_PM amOrPm)\n+\tpublic void setAmOrPm(final AM_PM amOrPm)\n \t{\n \t\tthis.amOrPm = amOrPm;\n \t}\n@@ -224,7 +229,7 @@ public void setAmOrPm(AM_PM amOrPm)\n \t * @param date\n \t *            date\n \t */\n-\tpublic void setDate(Date date)\n+\tpublic void setDate(final Date date)\n \t{\n \t\tif (date == null)\n \t\t{\n@@ -236,17 +241,18 @@ public void setDate(Date date)\n \t\t}\n \n \t\tthis.date = new MutableDateTime(date);\n-\t\tsetDefaultModelObject(date);\n \n \t\tInteger hours = getHours();\n-\t\tInteger minutes = getMinutes();\n-\t\tboolean use12HourFormat = use12HourFormat();\n \t\tif (hours != null)\n \t\t{\n+\t\t\tboolean use12HourFormat = use12HourFormat();\n \t\t\tthis.date.set(DateTimeFieldType.hourOfDay(), hours.intValue() %\n \t\t\t\t\t(use12HourFormat ? 12 : 24));\n+\n+\t\t\tInteger minutes = getMinutes();\n \t\t\tthis.date.setMinuteOfHour((minutes != null) ? minutes.intValue() : 0);\n \t\t}\n+\n \t\tsetDefaultModelObject(this.date.toDate());\n \t}\n \n@@ -256,7 +262,7 @@ public void setDate(Date date)\n \t * @param hours\n \t *            hours\n \t */\n-\tpublic void setHours(Integer hours)\n+\tpublic void setHours(final Integer hours)\n \t{\n \t\tthis.hours = hours;\n \t}\n@@ -267,7 +273,7 @@ public void setHours(Integer hours)\n \t * @param minutes\n \t *            minutes\n \t */\n-\tpublic void setMinutes(Integer minutes)\n+\tpublic void setMinutes(final Integer minutes)\n \t{\n \t\tthis.minutes = minutes;\n \t}\n@@ -346,30 +352,27 @@ protected void convertInput()\n \t\t}\n \t}\n \n+\t/**\n+\t * \n+\t * @param to\n+\t * @param from\n+\t * @param instant\n+\t * @return millis\n+\t */\n \tprivate long getMillis(TimeZone to, TimeZone from, long instant)\n \t{\n \t\treturn DateTimeZone.forTimeZone(from).getMillisKeepLocal(DateTimeZone.forTimeZone(to),\n \t\t\t\tinstant);\n \t}\n \n-\t/**\n-\t * @deprecated replaced by {@link #newDateTextField(String, PropertyModel)}\n-\t */\n-\t// TODO remove after deprecation release\n-\t@Deprecated\n-\tprotected final DateTextField newDateTextField(PropertyModel dateFieldModel)\n-\t{\n-\t\tthrow new UnsupportedOperationException();\n-\t}\n-\n \t/**\n \t * create a new {@link DateTextField} instance to be added to this panel.\n \t * \n \t * @param dateFieldModel\n \t *            model that should be used by the {@link DateTextField}\n \t * @return a new date text field instance\n \t */\n-\tprotected DateTextField newDateTextField(String id, PropertyModel dateFieldModel)\n+\tprotected DateTextField newDateTextField(String id, PropertyModel<Date> dateFieldModel)\n \t{\n \t\treturn new DateTextField(id, dateFieldModel, new StyleDateConverter(false));\n \t}\n@@ -384,12 +387,6 @@ protected void onBeforeRender()\n \t\thoursField.setRequired(isRequired());\n \t\tminutesField.setRequired(isRequired());\n \n-\t\t// obsolete with WICKET-1919\n-\t\t// dateField.setEnabled(isEnabledInHierarchy());\n-\t\t// hoursField.setEnabled(isEnabledInHierarchy());\n-\t\t// minutesField.setEnabled(isEnabledInHierarchy());\n-\t\t// amOrPmChoice.setEnabled(isEnabledInHierarchy());\n-\n \t\tboolean use12HourFormat = use12HourFormat();\n \t\tamOrPmChoice.setVisible(use12HourFormat);\n ",
                "raw_url": "https://github.com/apache/wicket/raw/d71a4cc86a2a4b10aacf222f219ee8af94fe0b48/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "sha": "8d624579e19769ad3c850e4847ea71381ed87fb4",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/wicket/blob/d71a4cc86a2a4b10aacf222f219ee8af94fe0b48/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.html",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.html?ref=d71a4cc86a2a4b10aacf222f219ee8af94fe0b48",
                "deletions": 0,
                "filename": "wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.html",
                "patch": "@@ -16,11 +16,23 @@\n \twicket:id=\"localeUSLink\">set to english</a>]</p>\n </form>\n <p>\n+Example using DateTextField:&nbsp;\n <form wicket:id=\"form\"><input type=\"text\"\n \twicket:id=\"dateTextField\" /> <input type=\"submit\" value=\"submit\" /></form>\n </p>\n+\n+<br/>\n+<p>\n+Example using DateTimeField:&nbsp;\n+<form wicket:id=\"form2\">\n+<span wicket:id=\"dateTimeField\"></span>\n+<input type=\"submit\" value=\"submit\" />\n+</form>\n+</p>\n+\n <p>\n \t<div wicket:id=\"feedback\"></div>\n </p>\n+\n </body>\n </html>",
                "raw_url": "https://github.com/apache/wicket/raw/d71a4cc86a2a4b10aacf222f219ee8af94fe0b48/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.html",
                "sha": "138a60f7019b7cfb2f049defbbfa2db80831f124",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/wicket/blob/d71a4cc86a2a4b10aacf222f219ee8af94fe0b48/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.java?ref=d71a4cc86a2a4b10aacf222f219ee8af94fe0b48",
                "deletions": 2,
                "filename": "wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.java",
                "patch": "@@ -1,5 +1,6 @@\n /*\n  * Licensed to the Apache Software Foundation (ASF) under one or more\n+\n  * contributor license agreements.  See the NOTICE file distributed with\n  * this work for additional information regarding copyright ownership.\n  * The ASF licenses this file to You under the Apache License, Version 2.0\n@@ -29,6 +30,7 @@\n import org.apache.wicket.datetime.markup.html.form.DateTextField;\n import org.apache.wicket.examples.WicketExamplePage;\n import org.apache.wicket.extensions.yui.calendar.DatePicker;\n+import org.apache.wicket.extensions.yui.calendar.DateTimeField;\n import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n@@ -130,6 +132,7 @@ protected boolean wantOnSelectionChangedNotifications()\n \t}\n \n \tprivate final Date date = new Date();\n+\tprivate final Date date2 = new Date();\n \n \tprivate Locale selectedLocale = LOCALE_EN;\n \n@@ -139,7 +142,7 @@ protected boolean wantOnSelectionChangedNotifications()\n \tpublic DatesPage()\n \t{\n \t\tselectedLocale = Session.get().getLocale();\n-\t\tForm<?> localeForm = new Form(\"localeForm\");\n+\t\tForm<?> localeForm = new Form<Void>(\"localeForm\");\n \t\tlocaleForm.add(new LocaleDropDownChoice(\"localeSelect\"));\n \t\tlocaleForm.add(new Link(\"localeUSLink\")\n \t\t{\n@@ -159,7 +162,7 @@ public Locale getLocale()\n \t\t\t\treturn selectedLocale;\n \t\t\t}\n \t\t};\n-\t\tForm<?> form = new Form(\"form\")\n+\t\tForm<?> form = new Form<Void>(\"form\")\n \t\t{\n \t\t\t@Override\n \t\t\tprotected void onSubmit()\n@@ -171,6 +174,17 @@ protected void onSubmit()\n \t\tform.add(dateTextField);\n \t\tdateTextField.add(new DatePicker());\n \t\tadd(new FeedbackPanel(\"feedback\"));\n+\n+\t\tForm<?> form2 = new Form<Void>(\"form2\")\n+\t\t{\n+\t\t\t@Override\n+\t\t\tprotected void onSubmit()\n+\t\t\t{\n+\t\t\t\tinfo(\"set date2 to \" + date2);\n+\t\t\t}\n+\t\t};\n+\t\tadd(form2);\n+\t\tform2.add(new DateTimeField(\"dateTimeField\", new PropertyModel<Date>(this, \"date2\")));\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/d71a4cc86a2a4b10aacf222f219ee8af94fe0b48/wicket-examples/src/main/java/org/apache/wicket/examples/dates/DatesPage.java",
                "sha": "84141c44e2169d3081856d6a252b30f01b5b4793",
                "status": "modified"
            }
        ],
        "message": "Without a stacktrace I could find the problem. Its all looking good. But some minor cleanup.\n\nWICKET-2479: NPE when clearing DateTimeField\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@816995 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/d314cd5b4119bda4569b1144eb92e62242ec5856",
        "repo": "wicket",
        "unit_tests": [
            "DateTimeFieldTest.java"
        ]
    },
    "wicket_db0a4db": {
        "bug_id": "wicket_db0a4db",
        "commit": "https://github.com/apache/wicket/commit/db0a4db0510392331298f7179193ef6c2b4b6053",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/db0a4db0510392331298f7179193ef6c2b4b6053/wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/java/wicket/examples/forminput/FormInput.java?ref=db0a4db0510392331298f7179193ef6c2b4b6053",
                "deletions": 1,
                "filename": "wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "patch": "@@ -89,7 +89,10 @@ public FormInput()\n \t */\n \tpublic void setLocale(Locale locale)\n \t{\n-\t\tgetSession().setLocale(locale);\n+\t\tif (locale != null)\n+\t\t{\n+\t\t\tgetSession().setLocale(locale);\n+\t\t}\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/db0a4db0510392331298f7179193ef6c2b4b6053/wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "sha": "31a127a8ab3c1bd381f1b1dce36f24eafd495343",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459438 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/cfcaf4af4065396d7e1b6b940d7947c02f8d3fee",
        "repo": "wicket",
        "unit_tests": [
            "FormInputTest.java"
        ]
    },
    "wicket_dbd2be6": {
        "bug_id": "wicket_dbd2be6",
        "commit": "https://github.com/apache/wicket/commit/dbd2be6157cb74332921166867ceacf6f613d1f5",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/RequestCycle.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/RequestCycle.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/RequestCycle.java",
                "patch": "@@ -199,11 +199,11 @@\n \tprivate static final int RESOLVE_TARGET = 2;\n \n \t/** Responding using the currently set {@link IRequestTarget}. */\n-\tprivate static final int RESPOND = 4;;\n+\tprivate static final int RESPOND = 4;\n \n \t/**\n \t * Gets request cycle for calling thread.\n-\t * \n+\t *\n \t * @return Request cycle for calling thread\n \t */\n \tpublic final static RequestCycle get()",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/RequestCycle.java",
                "sha": "9514d5465075f93f8e2d46d010a868ccf550d05e",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/behavior/AbstractAjaxBehavior.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/behavior/AbstractAjaxBehavior.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 6,
                "filename": "wicket/src/java/wicket/behavior/AbstractAjaxBehavior.java",
                "patch": "@@ -118,12 +118,6 @@ public final CharSequence getCallbackUrl(final boolean recordPageVersion,\n \t\t\t\t\t\"Behavior must be bound to a component to create the URL\");\n \t\t}\n \n-\t\tif (!(this instanceof IBehaviorListener))\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\"The behavior must implement IBehaviorListener to accept requests\");\n-\t\t}\n-\n \t\tint index = getComponent().getBehaviors().indexOf(this);\n \t\tif (index == -1)\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/behavior/AbstractAjaxBehavior.java",
                "sha": "a16afe11136170c03e5676bb312bb165a2ada9a1",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/form/FormComponent.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/form/FormComponent.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/form/FormComponent.java",
                "patch": "@@ -739,8 +739,13 @@ protected final void validateValidators()\n \t\t}\n \t\tcatch (Exception e)\n \t\t{\n+\t\t\tString name = \"<null>\";\n+\t\t\tif (validator != null)\n+\t\t\t{\n+\t\t\t\tname = validator.getClass().getName();\n+\t\t\t}\n \t\t\tthrow new WicketRuntimeException(\"Exception '\" + e + \"' occurred during validation \"\n-\t\t\t\t\t+ validator.getClass().getName() + \" on component \" + this.getPath(), e);\n+\t\t\t\t\t+ name + \" on component \" + this.getPath(), e);\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/form/FormComponent.java",
                "sha": "935ea84c4ae7e856071a59ba7381bb07502ffb3a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/form/RadioChoice.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/form/RadioChoice.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/markup/html/form/RadioChoice.java",
                "patch": "@@ -411,8 +411,8 @@ protected final void onComponentTagBody(final MarkupStream markupStream,\n \n \t\t\t// Get label for choice\n \t\t\tfinal String label = (String)getConverter().convert(\n-\t\t\t\t\tgetChoiceRenderer().getDisplayValue(choice), String.class);\n-\t\t\t;\n+\t\t\t\t\tgetChoiceRenderer().getDisplayValue(choice), String.class\n+\t\t\t);\n \n \t\t\t// If there is a display value for the choice, then we know that the\n \t\t\t// choice is automatic in some way. If label is /null/ then we know",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/form/RadioChoice.java",
                "sha": "00d7820d41812045e299d152dd3b91932e364d96",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/tree/AbstractTree.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/tree/AbstractTree.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/markup/html/tree/AbstractTree.java",
                "patch": "@@ -105,6 +105,7 @@ public void collapseSiblings(final DefaultMutableTreeNode node)\n \t\t{\n \t\t\tfinal TreePath siblingSelection = new TreePath(nextNode.getPath());\n \t\t\tsetExpandedState(siblingSelection, false); // inverse\n+\t\t\t// ToDo: Check if previousNode can be null? If so, needs trapping - Gwyn\n \t\t\tnextNode = previousNode.getNextSibling();\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/markup/html/tree/AbstractTree.java",
                "sha": "5f7c2695d12d3b6922c1f876c4e031e24a5366fc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/protocol/http/MockWebApplication.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "patch": "@@ -138,7 +138,7 @@ public MockWebApplication(final String path)\n \t\t\tpublic ServletContext getServletContext()\n \t\t\t{\n \t\t\t\treturn context;\n-\t\t\t};\n+\t\t\t}\n \n \t\t\t/**\n \t\t\t * @see javax.servlet.GenericServlet#getInitParameter(java.lang.String)",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/protocol/http/MockWebApplication.java",
                "sha": "86fc39812e7de1407850849260282cec7b1d1f85",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/protocol/http/WebRequestCycle.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/protocol/http/WebRequestCycle.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/protocol/http/WebRequestCycle.java",
                "patch": "@@ -149,7 +149,7 @@ public final void redirectTo(final Page page)\n \t\t\t\t\tpublic CharSequence encodeURL(CharSequence url)\n \t\t\t\t\t{\n \t\t\t\t\t\treturn currentResponse.encodeURL(url);\n-\t\t\t\t\t};\n+\t\t\t\t\t}\n \t\t\t\t};\n \t\t\t\tredirectResponse.setCharacterEncoding(currentResponse.getCharacterEncoding());\n ",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/protocol/http/WebRequestCycle.java",
                "sha": "3cbeba6f6eb8cb8b72f7ed7af5ddfcd5cb22b103",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/request/target/coding/SharedResourceRequestTargetUrlCodingStrategy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/request/target/coding/SharedResourceRequestTargetUrlCodingStrategy.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/request/target/coding/SharedResourceRequestTargetUrlCodingStrategy.java",
                "patch": "@@ -91,7 +91,7 @@ public boolean matches(IRequestTarget requestTarget)\n \t{\r\n \t\tif (requestTarget instanceof ISharedResourceRequestTarget)\r\n \t\t{\r\n-\t\t\tSharedResourceRequestTarget target = (SharedResourceRequestTarget)requestTarget;\r\n+\t\t\tISharedResourceRequestTarget target = (ISharedResourceRequestTarget)requestTarget;\r\n \t\t\treturn target.getRequestParameters().getResourceKey().equals(resourceKey);\r\n \t\t}\r\n \t\telse\r",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/request/target/coding/SharedResourceRequestTargetUrlCodingStrategy.java",
                "sha": "17986902b884af26048814811a06ef4caed6a883",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/util/collections/IntHashMap.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/collections/IntHashMap.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/util/collections/IntHashMap.java",
                "patch": "@@ -625,7 +625,7 @@ private boolean containsNullValue()\n \t * \r\n \t * @return a shallow copy of this map.\r\n \t */\r\n-\tpublic Object clone()\r\n+\tpublic Object clone() throws CloneNotSupportedException\r\n \t{\r\n \t\tIntHashMap result = null;\r\n \t\ttry\r\n@@ -791,7 +791,7 @@ void createEntry(int key, Object value, int bucketIndex)\n \t\t\t{ // advance to first entry\r\n \t\t\t\twhile (i > 0 && (n = t[--i]) == null)\r\n \t\t\t\t{\r\n-\t\t\t\t\t;\r\n+\t\t\t\t\t/* NoOp*/ ;\r\n \t\t\t\t}\r\n \t\t\t}\r\n \t\t\tnext = n;\r",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/util/collections/IntHashMap.java",
                "sha": "c12727acaba280e8ae9a74224a01dcfa061a1272",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java?ref=dbd2be6157cb74332921166867ceacf6f613d1f5",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "patch": "@@ -916,7 +916,7 @@ public synchronized void clear()\n \t * \n \t * @return a shallow copy of this map.\n \t */\n-\tpublic synchronized Object clone()\n+\tpublic synchronized Object clone() throws CloneNotSupportedException\n \t{\n \t\ttry\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/dbd2be6157cb74332921166867ceacf6f613d1f5/wicket/src/java/wicket/util/concurrent/ConcurrentReaderHashMap.java",
                "sha": "4dd115bb2a5aa5c80d3542e04c63eb1cda15ce92",
                "status": "modified"
            }
        ],
        "message": "Some minor tiding up of surplus ';'s, places where the code can't reach & a check against a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@462049 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/9639728fab956de03e218ecc65aa5b8da7525944",
        "repo": "wicket",
        "unit_tests": [
            "FormComponentTest.java",
            "RadioChoiceTest.java",
            "IntHashMapTest.java"
        ]
    },
    "wicket_dd001de": {
        "bug_id": "wicket_dd001de",
        "commit": "https://github.com/apache/wicket/commit/dd001de3106579673028bf9223b812d2039510fd",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/wicket/blob/dd001de3106579673028bf9223b812d2039510fd/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java?ref=dd001de3106579673028bf9223b812d2039510fd",
                "deletions": 6,
                "filename": "wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "patch": "@@ -18,6 +18,8 @@\n \n import java.util.Map;\n \n+import wicket.util.string.Strings;\n+\n /**\n  * Interpolates variables into a string from a Map.\n  * \n@@ -42,6 +44,26 @@ public MapVariableInterpolator(final String string, final Map variables)\n \t\tthis.variables = variables;\n \t}\n \n+\t/**\n+\t * Constructor\n+\t * \n+\t * @param string\n+\t *            The string to interpolate into\n+\t * @param variables\n+\t *            The variables to substitute\n+\t * @param exceptionOnNullVarValue\n+\t *            if true an {@link IllegalStateException} will be thrown if a\n+\t *            {@link #getValue(String)} returns null, otherwise the\n+\t *            ${varname} string will be left in the <code>string</code> so\n+\t *            multiple interpolators can be chained\n+\t */\n+\tpublic MapVariableInterpolator(String string, final Map variables,\n+\t\t\tboolean exceptionOnNullVarValue)\n+\t{\n+\t\tsuper(string, exceptionOnNullVarValue);\n+\t\tthis.variables = variables;\n+\t}\n+\n \t/**\n \t * Accessor to set variables\n \t * \n@@ -62,12 +84,7 @@ public final void setVariables(final Map variables)\n \t */\n \tprotected final String getValue(final String variableName)\n \t{\n-\t\tfinal Object value = variables.get(variableName);\n-\t\tif (value != null)\n-\t\t{\n-\t\t\treturn value.toString();\n-\t\t}\n-\t\tthrow new IllegalStateException(\"Interpolated variable '\" + variableName + \"' not found.\");\n+\t\treturn Strings.toString(variables.get(variableName));\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/dd001de3106579673028bf9223b812d2039510fd/wicket/src/main/java/wicket/util/string/interpolator/MapVariableInterpolator.java",
                "sha": "e106816b4a79adb3c6fbdd9407d6589625995c5e",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/wicket/blob/dd001de3106579673028bf9223b812d2039510fd/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java?ref=dd001de3106579673028bf9223b812d2039510fd",
                "deletions": 4,
                "filename": "wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "patch": "@@ -35,6 +35,8 @@\n \t/** The string to interpolate within */\n \tprotected final String string;\n \n+\tprivate boolean exceptionOnNullVarValue = false;\n+\n \t/**\n \t * Constructor\n \t * \n@@ -46,6 +48,23 @@ public VariableInterpolator(final String string)\n \t\tthis.string = string;\n \t}\n \n+\t/**\n+\t * Constructor\n+\t * \n+\t * @param string\n+\t *            String to interpolate with variable values\n+\t * @param exceptionOnNullVarValue\n+\t *            if true an {@link IllegalStateException} will be thrown if a\n+\t *            {@link #getValue(String)} returns null, otherwise the\n+\t *            ${varname} string will be left in the <code>string</code> so\n+\t *            multiple interpolators can be chained\n+\t */\n+\tpublic VariableInterpolator(final String string, boolean exceptionOnNullVarValue)\n+\t{\n+\t\tthis.string = string;\n+\t\tthis.exceptionOnNullVarValue = exceptionOnNullVarValue;\n+\t}\n+\n \t/**\n \t * Gets a value for a variable name during interpolation\n \t * \n@@ -93,10 +112,18 @@ public String toString()\n \t\t\t\t// If there's no value\n \t\t\t\tif (value == null)\n \t\t\t\t{\n-\t\t\t\t\t// Leave variable uninterpolated, allowing multiple\n-\t\t\t\t\t// interpolators to\n-\t\t\t\t\t// do their work on the same string\n-\t\t\t\t\tbuffer.append(\"${\" + variableName + \"}\");\n+\t\t\t\t\tif (exceptionOnNullVarValue)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tthrow new IllegalArgumentException(\"Value of variable [[\" + variableName\n+\t\t\t\t\t\t\t\t+ \"]] could not be resolved while interpolating [[\" + string + \"]]\");\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\t// Leave variable uninterpolated, allowing multiple\n+\t\t\t\t\t\t// interpolators to\n+\t\t\t\t\t\t// do their work on the same string\n+\t\t\t\t\t\tbuffer.append(\"${\" + variableName + \"}\");\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\telse\n \t\t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/dd001de3106579673028bf9223b812d2039510fd/wicket/src/main/java/wicket/util/string/interpolator/VariableInterpolator.java",
                "sha": "c62981ff1e9963c6623291671972a6b197f5940d",
                "status": "modified"
            },
            {
                "additions": 61,
                "blob_url": "https://github.com/apache/wicket/blob/dd001de3106579673028bf9223b812d2039510fd/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java?ref=dd001de3106579673028bf9223b812d2039510fd",
                "deletions": 0,
                "filename": "wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package wicket.util.string.interpolator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import junit.framework.TestCase;\n+import wicket.util.string.interpolator.MapVariableInterpolator;\n+\n+/**\n+ * Tests {@link MapVariableInterpolator}\n+ * \n+ * @author <a href=\"mailto:jbq@apache.org\">Jean-Baptiste Quenot</a>\n+ */\n+public class VariableInterpolatorTest extends TestCase\n+{\n+\tpublic void testWithValue()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tparams.put(\"key\", \"value\");\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params);\n+\t\tassertEquals(\"value\", in.toString());\n+\t}\n+\n+\tpublic void testWithoutValue()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params);\n+\t\tassertEquals(\"${key}\", in.toString());\n+\t}\n+\n+\tpublic void testWithoutValueAndException()\n+\t{\n+\t\tMap params = new HashMap();\n+\t\tMapVariableInterpolator in = new MapVariableInterpolator(\"${key}\", params, true);\n+\t\ttry\n+\t\t{\n+\t\t\tin.toString();\n+\t\t\tfail(\"Should throw an exception\");\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\n+\t\t}\n+\t}\n+}",
                "raw_url": "https://github.com/apache/wicket/raw/dd001de3106579673028bf9223b812d2039510fd/wicket/src/test/java/wicket/util/string/interpolator/VariableInterpolatorTest.java",
                "sha": "10fb665f229c17de93912bcbf6b0114ed70dad2f",
                "status": "added"
            }
        ],
        "message": "WICKET-340 Unexpected NPE in MapVariableInterpolator\n\nApplied patch and backported exceptionOnNullVarValue from trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@515082 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c0b1eab708e6cd49a0085ebb929c396d293cee63",
        "repo": "wicket",
        "unit_tests": [
            "VariableInterpolatorTest.java"
        ]
    },
    "wicket_e37a9e1": {
        "bug_id": "wicket_e37a9e1",
        "commit": "https://github.com/apache/wicket/commit/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java?ref=e37a9e101f6ee74aa03bff9a6797a16d304b3d0c",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "patch": "@@ -152,7 +152,7 @@ protected void onRemove()\n \t\t\t// decrement the fence count\n \n \t\t\tInteger count = fence.getMetaData(FENCE_KEY);\n-\t\t\tcount = count == 1 ? null : count - 1;\n+\t\t\tcount = (count == null || count == 1) ? null : count - 1;\n \t\t\tfence.setMetaData(FENCE_KEY, count);\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "sha": "f6916f2c8f0e19f04d4de8cbe3d0dc4210f3a43f",
                "status": "modified"
            }
        ],
        "message": "WICKET-4968 NPE in FencedFeedbackPanel#onRemove",
        "parent": "https://github.com/apache/wicket/commit/af3f84485ccf7a10a7fafe9246d80ff83b13daed",
        "repo": "wicket",
        "unit_tests": [
            "FencedFeedbackPanelTest.java"
        ]
    },
    "wicket_e4399d7": {
        "bug_id": "wicket_e4399d7",
        "commit": "https://github.com/apache/wicket/commit/e4399d74234b657435f44eb137969db1a22896d5",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/wicket/blob/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java?ref=e4399d74234b657435f44eb137969db1a22896d5",
                "deletions": 8,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "patch": "@@ -111,10 +111,16 @@ public PackageResource getResource()\n \t\tfinal String extension = getExtension();\n \n \t\tfinal PackageResource resource;\n-\t\t\n-\t\tfinal Url url = RequestCycle.get().getRequest().getUrl();\n-\t\t//resource attributes (locale, style, variation) might be encoded in the URL\n-\t\tfinal UrlAttributes urlAttributes = ResourceUtil.decodeResourceReferenceAttributes(url);\n+\n+\t\tRequestCycle requestCycle = RequestCycle.get();\n+\t\tUrlAttributes urlAttributes = null;\n+\t\tif (requestCycle != null)\n+\t\t{\n+\t\t\t//resource attributes (locale, style, variation) might be encoded in the URL\n+\t\t\tfinal Url url = requestCycle.getRequest().getUrl();\n+\t\t\turlAttributes = ResourceUtil.decodeResourceReferenceAttributes(url);\n+\t\t}\n+\n \t\tfinal String currentVariation = getCurrentVariation(urlAttributes);\n \t\tfinal String currentStyle = getCurrentStyle(urlAttributes);\n \t\tfinal Locale currentLocale = getCurrentLocale(urlAttributes);\n@@ -185,7 +191,11 @@ private Locale getCurrentLocale(UrlAttributes attributes)\n \t{\n \t\tLocale currentLocale = getCurrentLocale();\n \n-\t\treturn currentLocale != null ? currentLocale : attributes.getLocale();\n+\t\treturn currentLocale != null\n+\t\t\t\t? currentLocale\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getLocale()\n+\t\t\t\t\t: null;\n \t}\n \n \tprivate Locale getCurrentLocale()\n@@ -208,8 +218,12 @@ private Locale getCurrentLocale()\n \tprivate String getCurrentStyle(UrlAttributes attributes)\n \t{\n \t\tString currentStyle = getCurrentStyle();\n-\t\t\n-\t\treturn currentStyle != null ? currentStyle : attributes.getStyle();\n+\n+\t\treturn currentStyle != null\n+\t\t\t\t? currentStyle\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getStyle()\n+\t\t\t\t\t: null;\n \t}\n \t\n \tprivate String getCurrentStyle()\n@@ -233,7 +247,11 @@ private String getCurrentVariation(UrlAttributes attributes)\n \t{\n \t\tfinal String variation = getVariation();\n \n-\t\treturn variation != null ? variation : attributes.getVariation();\n+\t\treturn variation != null\n+\t\t\t\t? variation\n+\t\t\t\t: attributes != null\n+\t\t\t\t\t? attributes.getVariation()\n+\t\t\t\t\t: null;\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResourceReference.java",
                "sha": "f10a01cb83b22133f83f457d6db6fbc5c0dbb966",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java?ref=e4399d74234b657435f44eb137969db1a22896d5",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Locale;\r\n \r\n import org.apache.wicket.Application;\r\n+import org.apache.wicket.ThreadContext;\r\n import org.apache.wicket.protocol.http.mock.MockHttpServletRequest;\r\n import org.apache.wicket.protocol.http.mock.MockHttpServletResponse;\r\n import org.apache.wicket.request.Request;\r\n@@ -355,5 +356,23 @@ public void testContentRangeHeaders()\n \t\t\tnew String(mockHttpServletResponse.getBinaryContent()));\r\n \t}\r\n \r\n+\t/**\r\n+\t * https://issues.apache.org/jira/browse/WICKET-6031\r\n+\t */\r\n+\t@Test\r\n+\tpublic void noRequestCycle()\r\n+\t{\r\n+\t\tThreadContext.setRequestCycle(null);\r\n+\r\n+\t\tPackageResourceReference reference = new PackageResourceReference(scope, \"resource.txt\",\r\n+\t\t\t\tlocales[1], styles[1], variations[1]);\r\n+\r\n+\t\tPackageResource resource = reference.getResource();\r\n+\t\tassertNotNull(resource);\r\n+\r\n+\t\tassertEquals(locales[1], resource.getResourceStream().getLocale());\r\n+\t\tassertEquals(styles[1], resource.getResourceStream().getStyle());\r\n+\t\tassertEquals(variations[1], resource.getResourceStream().getVariation());\r\n+\t}\r\n \r\n }\r",
                "raw_url": "https://github.com/apache/wicket/raw/e4399d74234b657435f44eb137969db1a22896d5/wicket-core/src/test/java/org/apache/wicket/request/resource/PackageResourceReferenceTest.java",
                "sha": "de7a0a55b3f91d97e34e9685dbf9aef74a77c3e0",
                "status": "modified"
            }
        ],
        "message": "WICKET-6031 NPE in PackageResourceReference#getResource() when there is no request",
        "parent": "https://github.com/apache/wicket/commit/490fdf67646f1b987c2c1065a3fa6c55f6c5b338",
        "repo": "wicket",
        "unit_tests": [
            "PackageResourceReferenceTest.java"
        ]
    },
    "wicket_e6df651": {
        "bug_id": "wicket_e6df651",
        "commit": "https://github.com/apache/wicket/commit/e6df65118c046b8150ae76e5cc5319a1e94639e0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/e6df65118c046b8150ae76e5cc5319a1e94639e0/wicket/src/changes/changes.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/changes/changes.xml?ref=e6df65118c046b8150ae76e5cc5319a1e94639e0",
                "deletions": 0,
                "filename": "wicket/src/changes/changes.xml",
                "patch": "@@ -11,6 +11,8 @@\n   </properties>\n   <body>\n \t<release version=\"2.0-beta1\" date=\"tbd\" description=\"Wicket 2.0 beta 1\">\n+\t\t<action type=\"fix\" dev=\"Igor Vaynberg\">Application.get() and Session.get() will now return null if threadlocal is not set as opposed to throwing an NPE</action>\n+\t\t\n     <release version=\"1.2-rc4\" date=\"tbd\" description=\"Wicket 1.2 release candidate 4\">\n       <action type=\"add\" dev=\"Juergen Donnerstag\" issue=\"1357511\">Markup inheritance extended to support &lt;wicket:child&gt; ... &lt;/wicket:child&gt; as well</action>\n       <action type=\"add\" dev=\"Martijn Dashorst\" issue=\"1471603\" due-to=\"Dzenan Ridjanovic\">Added Bosnian/Herzegovinan translation of Application.properties</action>",
                "raw_url": "https://github.com/apache/wicket/raw/e6df65118c046b8150ae76e5cc5319a1e94639e0/wicket/src/changes/changes.xml",
                "sha": "492baf8406528b9c23b83c7b98381bb2c3f17ae5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/e6df65118c046b8150ae76e5cc5319a1e94639e0/wicket/src/java/wicket/Application.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Application.java?ref=e6df65118c046b8150ae76e5cc5319a1e94639e0",
                "deletions": 9,
                "filename": "wicket/src/java/wicket/Application.java",
                "patch": "@@ -169,17 +169,11 @@\n \t/**\n \t * Get Application for current thread.\n \t * \n-\t * @return The current thread's Application\n+\t * @return The current thread's Application, or null if not set\n \t */\n \tpublic static Application get()\n \t{\n-\t\tfinal Application application = current.get();\n-\t\tif (application == null)\n-\t\t{\n-\t\t\tthrow new WicketRuntimeException(\"There is no application attached to current thread \"\n-\t\t\t\t\t+ Thread.currentThread().getName());\n-\t\t}\n-\t\treturn application;\n+\t\treturn current.get();\n \t}\n \n \t/**\n@@ -752,7 +746,7 @@ protected void destroy()\n \n \t}\n \n-\t\n+\n \t/**\n \t * @param sessionId\n \t *            The session id that was destroyed",
                "raw_url": "https://github.com/apache/wicket/raw/e6df65118c046b8150ae76e5cc5319a1e94639e0/wicket/src/java/wicket/Application.java",
                "sha": "963c5210dea6108f035b8958c2f897946b02610e",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/e6df65118c046b8150ae76e5cc5319a1e94639e0/wicket/src/java/wicket/Session.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Session.java?ref=e6df65118c046b8150ae76e5cc5319a1e94639e0",
                "deletions": 14,
                "filename": "wicket/src/java/wicket/Session.java",
                "patch": "@@ -197,17 +197,11 @@\n \t/**\n \t * Get the session for the calling thread.\n \t * \n-\t * @return Session for calling thread\n+\t * @return Session for calling thread, or null if not set\n \t */\n \tpublic static Session get()\n \t{\n-\t\tfinal Session session = current.get();\n-\t\tif (session == null)\n-\t\t{\n-\t\t\tthrow new WicketRuntimeException(\"there is no session attached to current thread \"\n-\t\t\t\t\t+ Thread.currentThread().getName());\n-\t\t}\n-\t\treturn session;\n+\t\treturn current.get();\n \t}\n \n \t/**\n@@ -232,7 +226,7 @@ public static Session get()\n \tpublic static Session get(boolean forceBind)\n \t{\n \t\tSession session = get();\n-\t\tif(forceBind)\n+\t\tif (forceBind)\n \t\t{\n \t\t\tsession.bind();\n \t\t}\n@@ -461,11 +455,11 @@ public final synchronized Page getPage(final String pageMapName, final String pa\n \t\t{\n \t\t\t// Get page entry for id and version\n \t\t\tfinal String id = Strings.firstPathComponent(path, Component.PATH_SEPARATOR);\n-\t\t\tif(usedPages==null)\n+\t\t\tif (usedPages == null)\n \t\t\t{\n \t\t\t\tusedPages = new HashMap<String, Thread>(3);\n \t\t\t}\n-\t\t\t\n+\n \t\t\tThread t = usedPages.get(id);\n \t\t\twhile (t != null && t != Thread.currentThread())\n \t\t\t{\n@@ -479,7 +473,7 @@ public final synchronized Page getPage(final String pageMapName, final String pa\n \t\t\t\t}\n \t\t\t\tt = usedPages.get(id);\n \t\t\t}\n-\t\t\t\n+\n \t\t\tusedPages.put(id, Thread.currentThread());\n \t\t\tPage page = pageMap.get(Integer.parseInt(id), versionNumber);\n \t\t\tif (page == null)\n@@ -848,7 +842,7 @@ public final IConverter getConverter(Class type)\n \t\t{\n \t\t\t// Let the factory create a new converter\n \t\t\tconverterSupplier = getApplication().getApplicationSettings()\n-\t\t\t.getConverterSupplierFactory().newConverterSupplier();\n+\t\t\t\t\t.getConverterSupplierFactory().newConverterSupplier();\n \t\t}\n \t\treturn converterSupplier.getConverter(type);\n \t}\n@@ -1101,7 +1095,7 @@ void dirtyPage(final Page page)\n \t */\n \tfinal synchronized void pageDetached(Page page)\n \t{\n-\t\tif(usedPages!=null)\n+\t\tif (usedPages != null)\n \t\t{\n \t\t\tusedPages.remove(page.getId());\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/e6df65118c046b8150ae76e5cc5319a1e94639e0/wicket/src/java/wicket/Session.java",
                "sha": "f4a94202b514ce76688e59c5240b39da3fd8cdad",
                "status": "modified"
            }
        ],
        "message": "Application.get() and Session.get() will now return null if threadlocal is not set as opposed to throwing an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@461953 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/570bd0140f446de07794f7f6d69160dfeaa5b6a9",
        "repo": "wicket",
        "unit_tests": [
            "TestApplication.java"
        ]
    },
    "wicket_e9170eb": {
        "bug_id": "wicket_e9170eb",
        "commit": "https://github.com/apache/wicket/commit/e9170ebd658342d5871a3a93397dbe85314e6a53",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "deletions": 4,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "patch": "@@ -70,11 +70,14 @@ protected boolean removeEldestEntry(java.util.Map.Entry<String, Object> eldest)\n \t\tif (removed == false)\n \t\t{\n \t\t\tValue value = (Value)eldest.getValue();\n-\t\t\tDuration elapsedTime = Time.now().subtract(value.creationTime);\n-\t\t\tif (lifetime.lessThanOrEqual(elapsedTime))\n+\t\t\tif (value != null)\n \t\t\t{\n-\t\t\t\tremovedValue = value.response;\n-\t\t\t\tremoved = true;\n+\t\t\t\tDuration elapsedTime = Time.now().subtract(value.creationTime);\n+\t\t\t\tif (lifetime.lessThanOrEqual(elapsedTime))\n+\t\t\t\t{\n+\t\t\t\t\tremovedValue = value.response;\n+\t\t\t\t\tremoved = true;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn removed;",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/StoredResponsesMap.java",
                "sha": "29b61774d4da20daace5d1415130d124294461ec",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "deletions": 9,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "patch": "@@ -16,6 +16,13 @@\n  */\n package org.apache.wicket.protocol.http;\n \n+import java.io.UnsupportedEncodingException;\n+\n+import javax.servlet.ServletContext;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.servlet.http.HttpSession;\n+\n import org.apache.wicket.Application;\n import org.apache.wicket.IPageRendererProvider;\n import org.apache.wicket.Page;\n@@ -62,13 +69,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import java.io.UnsupportedEncodingException;\n-\n-import javax.servlet.ServletContext;\n-import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpServletResponse;\n-import javax.servlet.http.HttpSession;\n-\n \n /**\n  * A web application is a subclass of Application which associates with an instance of WicketServlet\n@@ -681,8 +681,8 @@ protected void outputDevelopmentModeWarning()\n \t}\n \n \t/*\n-\t * Can contain at most 1000 responses and each entry can live at most one minute for now there\n-\t * is no need to configure these parameters externally\n+\t * Can contain at most 1000 responses and each entry can live at most one minute. For now there\n+\t * is no need to configure these parameters externally.\n \t */\n \tprivate final StoredResponsesMap storedResponses = new StoredResponsesMap(1000,\n \t\tDuration.seconds(60));",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "sha": "62fa114656fe7a2eba15288f4b47872bfd435805",
                "status": "modified"
            },
            {
                "additions": 64,
                "blob_url": "https://github.com/apache/wicket/blob/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java?ref=e9170ebd658342d5871a3a93397dbe85314e6a53",
                "deletions": 0,
                "filename": "wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "patch": "@@ -20,10 +20,16 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n \n import org.apache.wicket.util.time.Duration;\n+import org.junit.Ignore;\n import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n \n /**\n  * @see <a href=\"https://issues.apache.org/jira/browse/WICKET-3209\">WICKET-3209</a>\n@@ -75,4 +81,62 @@ public void cannotPutArbitraryValue()\n \t\tStoredResponsesMap map = new StoredResponsesMap(1000, Duration.days(1));\n \t\tmap.put(\"1\", new Object());\n \t}\n+\n+\t/**\n+\t * <a href=\"https://issues.apache.org/jira/browse/WICKET-3736\">WICKET-3736</a>\n+\t * \n+\t * Tries to simulate heavy load on the {@link StoredResponsesMap} by putting many entries and\n+\t * removing randomly them.\n+\t * \n+\t * The test is disabled by default because it is slow (~ 30secs). Enable it when we have\n+\t * categorized tests ({@link Category}) and run slow ones only at Apache CI servers\n+\t * \n+\t * @throws InterruptedException\n+\t */\n+\t@Test\n+\t@Ignore\n+\tpublic void heavyLoad() throws InterruptedException\n+\t{\n+\t\tint numberOfThreads = 100;\n+\t\tfinal int iterations = 10000;\n+\t\tfinal CountDownLatch startLatch = new CountDownLatch(numberOfThreads);\n+\t\tfinal CountDownLatch endLatch = new CountDownLatch(numberOfThreads);\n+\t\tfinal SecureRandom rnd = new SecureRandom();\n+\t\tfinal StoredResponsesMap map = new StoredResponsesMap(1000, Duration.seconds(60));\n+\t\tfinal List<String> keys = new ArrayList<String>();\n+\n+\t\tRunnable r = new Runnable()\n+\t\t{\n+\t\t\tpublic void run()\n+\t\t\t{\n+\t\t\t\tstartLatch.countDown();\n+\t\t\t\ttry\n+\t\t\t\t{\n+\t\t\t\t\t// wait all threads before starting the test\n+\t\t\t\t\tstartLatch.await();\n+\t\t\t\t}\n+\t\t\t\tcatch (InterruptedException e)\n+\t\t\t\t{\n+\t\t\t\t\tthrow new RuntimeException(e);\n+\t\t\t\t}\n+\n+\t\t\t\tfor (int i = 0; i < iterations; i++)\n+\t\t\t\t{\n+\t\t\t\t\tString key = \"abc\" + (rnd.nextDouble() * iterations);\n+\t\t\t\t\tkeys.add(key);\n+\t\t\t\t\tmap.put(key, new BufferedWebResponse(null));\n+\n+\t\t\t\t\tString key2 = keys.get(rnd.nextInt(keys.size() - 1));\n+\t\t\t\t\tmap.remove(key2);\n+\t\t\t\t}\n+\t\t\t\tendLatch.countDown();\n+\t\t\t}\n+\t\t};\n+\n+\t\tfor (int t = 0; t < numberOfThreads; t++)\n+\t\t{\n+\t\t\tnew Thread(r).start();\n+\t\t}\n+\t\tendLatch.await();\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/e9170ebd658342d5871a3a93397dbe85314e6a53/wicket-core/src/test/java/org/apache/wicket/protocol/http/StoredResponsesMapTest.java",
                "sha": "12effe3d29f700ede7140ab0eb44c1f4f7f332e6",
                "status": "modified"
            }
        ],
        "message": "WICKET-3736 npe in StoredResponsesMap\n\nAdd a check for null for the last entry.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1126429 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/802995c6f1be706d9c4f1f618e8d365a2fc9e971",
        "repo": "wicket",
        "unit_tests": [
            "StoredResponsesMapTest.java",
            "WebApplicationTest.java"
        ]
    },
    "wicket_eb7c860": {
        "bug_id": "wicket_eb7c860",
        "commit": "https://github.com/apache/wicket/commit/eb7c860efdddcedf6ea323a903d4a5af9e814a02",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/eb7c860efdddcedf6ea323a903d4a5af9e814a02/wicket/src/java/wicket/Component.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Component.java?ref=eb7c860efdddcedf6ea323a903d4a5af9e814a02",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/Component.java",
                "patch": "@@ -793,6 +793,11 @@ protected void invalidateModel()\n     {\n         // Find the page where this component lives\n         final Page page = getPage();\n+        \n+        if (page == null)\n+        {\n+            return;\n+        }\n \n         // Make all previous renderings of the page stale\n         page.setStaleRendering(page.getRendering());",
                "raw_url": "https://github.com/apache/wicket/raw/eb7c860efdddcedf6ea323a903d4a5af9e814a02/wicket/src/java/wicket/Component.java",
                "sha": "71af289fd8cf501f9a0eb435528e42571fbbd604",
                "status": "modified"
            }
        ],
        "message": "prevent NPE being thrown from invalidateModel, if component not yet assigned to page\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@455216 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/02f3c71e3c3c012e6cebd65363409124eb2b647a",
        "repo": "wicket",
        "unit_tests": [
            "ComponentTest.java",
            "TestComponent.java"
        ]
    },
    "wicket_eeb8ea1": {
        "bug_id": "wicket_eeb8ea1",
        "commit": "https://github.com/apache/wicket/commit/eeb8ea14b24d8e10dc04226fbcf5203bcef93630",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/eeb8ea14b24d8e10dc04226fbcf5203bcef93630/wicket-core/src/main/java/org/apache/wicket/Application.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/Application.java?ref=eeb8ea14b24d8e10dc04226fbcf5203bcef93630",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/Application.java",
                "patch": "@@ -57,8 +57,8 @@\n import org.apache.wicket.page.IPageManagerContext;\n import org.apache.wicket.pageStore.IDataStore;\n import org.apache.wicket.pageStore.IPageStore;\n-import org.apache.wicket.protocol.http.RequestLogger;\n import org.apache.wicket.protocol.http.IRequestLogger;\n+import org.apache.wicket.protocol.http.RequestLogger;\n import org.apache.wicket.protocol.http.WebApplication;\n import org.apache.wicket.protocol.http.WebSession;\n import org.apache.wicket.request.IExceptionMapper;",
                "raw_url": "https://github.com/apache/wicket/raw/eeb8ea14b24d8e10dc04226fbcf5203bcef93630/wicket-core/src/main/java/org/apache/wicket/Application.java",
                "sha": "b4d4d7d0494aa298aab8f3cd4a1de1612560a6c3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/eeb8ea14b24d8e10dc04226fbcf5203bcef93630/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java?ref=eeb8ea14b24d8e10dc04226fbcf5203bcef93630",
                "deletions": 2,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "patch": "@@ -170,7 +170,6 @@ public WebApplication()\n \t/**\n \t * @see org.apache.wicket.Application#getApplicationKey()\n \t */\n-\t@Deprecated\n \t@Override\n \tpublic final String getApplicationKey()\n \t{\n@@ -249,7 +248,8 @@ public String getSessionAttributePrefix(final WebRequest request, String filterN\n \t\t\t\t// According to the ServletSpec, the filter might not yet been initialized\n \t\t\t\tfilterName = getWicketFilter().getFilterConfig().getFilterName();\n \t\t\t}\n-\t\t\tsessionAttributePrefix = \"wicket:\" + filterName + \":\";\n+\t\t\tString namespace = getMapperContext().getNamespace();\n+\t\t\tsessionAttributePrefix = namespace + ':' + filterName + ':';\n \t\t}\n \n \t\t// Namespacing for session attributes is provided by",
                "raw_url": "https://github.com/apache/wicket/raw/eeb8ea14b24d8e10dc04226fbcf5203bcef93630/wicket-core/src/main/java/org/apache/wicket/protocol/http/WebApplication.java",
                "sha": "55f5c4da136cbf10bb2e423fd67064e840ca1930",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/eeb8ea14b24d8e10dc04226fbcf5203bcef93630/wicket-core/src/main/java/org/apache/wicket/session/HttpSessionStore.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/session/HttpSessionStore.java?ref=eeb8ea14b24d8e10dc04226fbcf5203bcef93630",
                "deletions": 13,
                "filename": "wicket-core/src/main/java/org/apache/wicket/session/HttpSessionStore.java",
                "patch": "@@ -52,9 +52,6 @@\n \t/** log. */\n \tprivate static Logger log = LoggerFactory.getLogger(HttpSessionStore.class);\n \n-\t/** Name of session attribute under which this session is stored */\n-\tpublic static final String SESSION_ATTRIBUTE_NAME = \"session\";\n-\n \t/** */\n \tprivate final Set<UnboundListener> unboundListeners = new CopyOnWriteArraySet<UnboundListener>();\n \n@@ -65,11 +62,6 @@ public HttpSessionStore()\n \t{\n \t}\n \n-\tprivate String getSessionAttribute()\n-\t{\n-\t\treturn SESSION_ATTRIBUTE_NAME + Application.get().getApplicationKey();\n-\t}\n-\n \t/**\n \t * \n \t * @param request\n@@ -106,7 +98,7 @@ final HttpSession getHttpSession(final Request request, final boolean create)\n \t */\n \tpublic final void bind(final Request request, final Session newSession)\n \t{\n-\t\tif (getAttribute(request, getSessionAttribute()) != newSession)\n+\t\tif (getAttribute(request, Session.SESSION_ATTRIBUTE_NAME) != newSession)\n \t\t{\n \t\t\t// call template method\n \t\t\tonBind(request, newSession);\n@@ -121,21 +113,21 @@ public final void bind(final Request request, final Session newSession)\n \t\t\t\t\tnew SessionBindingListener(applicationKey, httpSession.getId()));\n \n \t\t\t\t// register the session object itself\n-\t\t\t\tsetAttribute(request, getSessionAttribute(), newSession);\n+\t\t\t\tsetAttribute(request, Session.SESSION_ATTRIBUTE_NAME, newSession);\n \t\t\t}\n \t\t}\n \t}\n \n \tpublic void flushSession(Request request, Session session)\n \t{\n-\t\tif (getAttribute(request, getSessionAttribute()) != session)\n+\t\tif (getAttribute(request, Session.SESSION_ATTRIBUTE_NAME) != session)\n \t\t{\n \t\t\t// this session is not yet bound, bind it\n \t\t\tbind(request, session);\n \t\t}\n \t\telse\n \t\t{\n-\t\t\tsetAttribute(request, getSessionAttribute(), session);\n+\t\t\tsetAttribute(request, Session.SESSION_ATTRIBUTE_NAME, session);\n \t\t}\n \t}\n \n@@ -194,7 +186,7 @@ public final Session lookup(final Request request)\n \t\tString sessionId = getSessionId(request, false);\n \t\tif (sessionId != null)\n \t\t{\n-\t\t\treturn (Session)getAttribute(request, getSessionAttribute());\n+\t\t\treturn (Session)getAttribute(request, Session.SESSION_ATTRIBUTE_NAME);\n \t\t}\n \t\treturn null;\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/eeb8ea14b24d8e10dc04226fbcf5203bcef93630/wicket-core/src/main/java/org/apache/wicket/session/HttpSessionStore.java",
                "sha": "68e2a1a8dd33275bbb484e9f7975bd0f45c0a165",
                "status": "modified"
            }
        ],
        "message": "WICKET-3769 Using Session.getId() throws NPE when used through WicketSessionFilter\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1131067 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/0c0b44f07d5fd4410724a27ce690fb9fb6b07665",
        "repo": "wicket",
        "unit_tests": [
            "TestApplication.java",
            "WebApplicationTest.java"
        ]
    },
    "wicket_f2db539": {
        "bug_id": "wicket_f2db539",
        "commit": "https://github.com/apache/wicket/commit/f2db539e5cfab3801293b175581586a9cdf785e3",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/wicket/blob/f2db539e5cfab3801293b175581586a9cdf785e3/wicket-core/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java?ref=f2db539e5cfab3801293b175581586a9cdf785e3",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java",
                "patch": "@@ -548,7 +548,16 @@ public void write(byte[] b, int off, int len) throws IOException\n \t@Override\n \tpublic String toString()\n \t{\n-\t\treturn charSequenceAction.builder.toString();\n+\t\tfinal String toString;\n+\t\tif (charSequenceAction != null)\n+\t\t{\n+\t\t\ttoString = charSequenceAction.builder.toString();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\ttoString = super.toString();\n+\t\t}\n+\t\treturn toString;\n \t}\n \n \t@Override",
                "raw_url": "https://github.com/apache/wicket/raw/f2db539e5cfab3801293b175581586a9cdf785e3/wicket-core/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java",
                "sha": "2ec9997bbd31494aef67be9bcd97afc55d499d46",
                "status": "modified"
            }
        ],
        "message": "Improve BufferedWebResponse#toString().\ncharSequenceAction may be null and thus calling #toString() fails with NPE\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1078105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c9c55aab22520a06833baddcd7d1532a667f97aa",
        "repo": "wicket",
        "unit_tests": [
            "BufferedWebResponseTest.java"
        ]
    },
    "wicket_f54d28e": {
        "bug_id": "wicket_f54d28e",
        "commit": "https://github.com/apache/wicket/commit/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62",
        "file": [
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/wicket/blob/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62/wicket/src/java/wicket/util/string/Strings.java",
                "changes": 121,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/string/Strings.java?ref=f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62",
                "deletions": 37,
                "filename": "wicket/src/java/wicket/util/string/Strings.java",
                "patch": "@@ -49,7 +49,7 @@\n  */\n public final class Strings\n {\n-    private static final Pattern htmlNumber = Pattern.compile(\"\\\\&\\\\#\\\\d+\\\\;\");\n+\tprivate static final Pattern htmlNumber = Pattern.compile(\"\\\\&\\\\#\\\\d+\\\\;\");\n \n \t/**\n \t * @param s\n@@ -61,7 +61,7 @@\n \t */\n \tpublic static String afterFirst(final String s, final char c)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -95,7 +95,7 @@ public static String afterFirstPathComponent(final String path, final char separ\n \n \t/**\n \t * Returns everything after the last occurence of the given character in s.\n-\t *\n+\t * \n \t * @param s\n \t *            The string\n \t * @param c\n@@ -105,7 +105,7 @@ public static String afterFirstPathComponent(final String path, final char separ\n \t */\n \tpublic static String afterLast(final String s, final char c)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -129,7 +129,7 @@ public static String afterLast(final String s, final char c)\n \t */\n \tpublic static String beforeFirst(final String s, final char c)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -153,7 +153,7 @@ public static String beforeFirst(final String s, final char c)\n \t */\n \tpublic static String beforeLast(final String s, final char c)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -194,7 +194,7 @@ public static String beforeLastPathComponent(final String path, final char separ\n \t */\n \tpublic static String capitalize(final String s)\n \t{\n-\t\tif(s == null)\n+\t\tif (s == null)\n \t\t{\n \t\t\treturn null;\n \t\t}\n@@ -255,8 +255,8 @@ public static String escapeMarkup(final String s, final boolean escapeSpaces)\n \t *            True to convert non-7 bit characters to unicode HTML (&#...)\n \t * @return The escaped string\n \t */\n-\tpublic static String escapeMarkup(final String s,\n-\t\t\tfinal boolean escapeSpaces, final boolean convertToHtmlUnicodeEscapes)\n+\tpublic static String escapeMarkup(final String s, final boolean escapeSpaces,\n+\t\t\tfinal boolean convertToHtmlUnicodeEscapes)\n \t{\n \t\tif (s == null)\n \t\t{\n@@ -305,46 +305,46 @@ public static String escapeMarkup(final String s,\n \t\t\t\t\t\tbuffer.append(\"&gt;\");\n \t\t\t\t\t\tbreak;\n \n-\t\t\t\t\tcase '&':\n+\t\t\t\t\tcase '&' :\n \n \t\t\t\t\t\t// if this is an entity (&#), then do not convert\n \t\t\t\t\t\tif ((i < len - 1) && (s.charAt(i + 1) == '#'))\n-\t\t\t\t\t    {\n+\t\t\t\t\t\t{\n \t\t\t\t\t\t\tbuffer.append(c);\n-\t\t\t\t\t\t\t\n-\t\t\t\t\t    }\n+\n+\t\t\t\t\t\t}\n \t\t\t\t\t\telse\n \t\t\t\t\t\t{\n \t\t\t\t\t\t\t// it is not an entity, so convert it to &amp;\n \t\t\t\t\t\t\tbuffer.append(\"&amp;\");\n \t\t\t\t\t\t}\n-\t\t\t\t\t    break;\n+\t\t\t\t\t\tbreak;\n \n-\t\t\t\t\tcase '\"':\n-\t\t\t\t\t    buffer.append(\"&quot;\");\n-\t\t\t\t\t    break;\n+\t\t\t\t\tcase '\"' :\n+\t\t\t\t\t\tbuffer.append(\"&quot;\");\n+\t\t\t\t\t\tbreak;\n \n-\t\t\t\t\tcase '\\'':\n-\t\t\t\t\t    buffer.append(\"&#039;\");\n-\t\t\t\t\t    break;\n+\t\t\t\t\tcase '\\'' :\n+\t\t\t\t\t\tbuffer.append(\"&#039;\");\n+\t\t\t\t\t\tbreak;\n \n \t\t\t\t\tdefault :\n \n \t\t\t\t\t\tif (convertToHtmlUnicodeEscapes)\n \t\t\t\t\t\t{\n-\t\t\t                int ci = 0xffff & c;\n-\t\t\t                if (ci < 160 )\n-\t\t\t\t\t\t\t{   \n+\t\t\t\t\t\t\tint ci = 0xffff & c;\n+\t\t\t\t\t\t\tif (ci < 160)\n+\t\t\t\t\t\t\t{\n \t\t\t\t\t\t\t\t// nothing special only 7 Bit\n \t\t\t\t\t\t\t\tbuffer.append(c);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t\telse\n \t\t\t\t\t\t\t{\n-\t\t\t                    // Not 7 Bit use the unicode system\n+\t\t\t\t\t\t\t\t// Not 7 Bit use the unicode system\n \t\t\t\t\t\t\t\tbuffer.append(\"&#\");\n \t\t\t\t\t\t\t\tbuffer.append(new Integer(ci).toString());\n \t\t\t\t\t\t\t\tbuffer.append(';');\n-\t\t\t                }\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t\telse\n \t\t\t\t\t\t{\n@@ -362,23 +362,28 @@ public static String escapeMarkup(final String s,\n \t/**\n \t * Replace HTML numbers like &#20540 by the appropriate character.\n \t * \n-\t * @param str The text to be evaluated\n+\t * @param str\n+\t *            The text to be evaluated\n \t * @return The text with \"numbers\" replaced\n \t */\n \tpublic static String replaceHtmlEscapeNumber(String str)\n \t{\n+\t\tif (str == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tMatcher matcher = htmlNumber.matcher(str);\n \t\twhile (matcher.find())\n \t\t{\n-\t\t    int pos = matcher.start();\n-\t\t    int end = matcher.end();\n-\t\t    int number = Integer.parseInt(str.substring(pos+2, end-1));\n-\t\t    char ch = (char)number;\n-\t\t    str = str.substring(0, pos) + ch + str.substring(end);\n+\t\t\tint pos = matcher.start();\n+\t\t\tint end = matcher.end();\n+\t\t\tint number = Integer.parseInt(str.substring(pos + 2, end - 1));\n+\t\t\tchar ch = (char)number;\n+\t\t\tstr = str.substring(0, pos) + ch + str.substring(end);\n \t\t\tmatcher = htmlNumber.matcher(str);\n \t\t}\n-\t\t\n-\t    return str;\n+\n+\t\treturn str;\n \t}\n \n \t/**\n@@ -397,6 +402,10 @@ public static String replaceHtmlEscapeNumber(String str)\n \t */\n \tpublic static String firstPathComponent(final String path, final char separator)\n \t{\n+\t\tif (path == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n \t\tfinal int index = path.indexOf(separator);\n \n \t\tif (index == -1)\n@@ -408,6 +417,11 @@ public static String firstPathComponent(final String path, final char separator)\n \t}\n \n \t/**\n+\t * Checks whether the <code>string</code> is considered empty. Empty means\n+\t * that the string may contain whitespace, but no visible characters.\n+\t * \n+\t * \"\\n\\t \" is considered empty, while \" a\" is not.\n+\t * \n \t * @param string\n \t *            The string\n \t * @return True if the string is null or \"\"\n@@ -418,10 +432,20 @@ public static boolean isEmpty(final String string)\n \t}\n \n \t/**\n+\t * Converts the text in <code>s</code> to a corresponding boolean. On,\n+\t * yes, y, true and 1 are converted to <code>true</code>. Off, no, n,\n+\t * false and 0 (zero) are converted to <code>false</code>. An empty\n+\t * string is converted to <code>false</code>. Conversion is\n+\t * case-insensitive, and does <em>not</em> take internationalization into\n+\t * account.\n+\t * \n+\t * 'Ja', 'Oui', 'Igen', 'Nein', 'Nee', 'Non', 'Nem' are all illegal values.\n+\t * \n \t * @param s\n-\t *            String\n-\t * @return Boolean value\n+\t *            the value to convert into a boolean\n+\t * @return Boolean the converted value of <code>s</code>\n \t * @throws StringValueConversionException\n+\t *             when the value of <code>s</code> is not recognized.\n \t */\n \tpublic static boolean isTrue(final String s) throws StringValueConversionException\n \t{\n@@ -487,7 +511,7 @@ public static String lastPathComponent(final String path, final char separator)\n \t}\n \n \t/**\n-\t * Replace all occurrences of one string replaceWith another string\n+\t * Replace all occurrences of one string replaceWith another string.\n \t * \n \t * @param s\n \t *            The string to process\n@@ -497,8 +521,27 @@ public static String lastPathComponent(final String path, final char separator)\n \t *            The value to searchFor replaceWith\n \t * @return The resulting string with searchFor replaced with replaceWith\n \t */\n-\tpublic static String replaceAll(final String s, final String searchFor, final String replaceWith)\n+\tpublic static String replaceAll(final String s, final String searchFor, String replaceWith)\n \t{\n+\t\tif (s == null)\n+\t\t{\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t// if searchFor is null or the empty string, then there is nothing to\n+\t\t// replace, so returning s is the only option here.\n+\t\tif (searchFor == null || \"\".equals(searchFor))\n+\t\t{\n+\t\t\treturn s;\n+\t\t}\n+\n+\t\t// if replaceWith is null, then the searchFor should be replaced with\n+\t\t// nothing,\n+\t\t// which can be seen as the empty string.\n+\t\tif (replaceWith == null)\n+\t\t{\n+\t\t\treplaceWith = \"\";\n+\t\t}\n \t\t// Look for first occurrence of searchFor\n \t\tint matchIndex = s.indexOf(searchFor);\n \t\tif (matchIndex == -1)\n@@ -554,6 +597,10 @@ public static String replaceAll(final String s, final String searchFor, final St\n \t */\n \tpublic static String[] split(final String s, final char c)\n \t{\n+\t\tif (s == null)\n+\t\t{\n+\t\t\treturn new String[0];\n+\t\t}\n \t\tfinal List strings = new ArrayList();\n \t\tint pos = 0;\n \t\twhile (true)",
                "raw_url": "https://github.com/apache/wicket/raw/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62/wicket/src/java/wicket/util/string/Strings.java",
                "sha": "728fd44719916ef7bc6bcdfaa9b0309014aa4e0d",
                "status": "modified"
            },
            {
                "additions": 172,
                "blob_url": "https://github.com/apache/wicket/blob/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62/wicket/src/test/wicket/util/string/StringsTest.java",
                "changes": 179,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/test/wicket/util/string/StringsTest.java?ref=f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62",
                "deletions": 7,
                "filename": "wicket/src/test/wicket/util/string/StringsTest.java",
                "patch": "@@ -138,20 +138,22 @@ public void testEscapeMarkup()\n \t\tassertEquals(\"&amp;\", Strings.escapeMarkup(\"&\"));\n \t\tassertEquals(\"&#\", Strings.escapeMarkup(\"&#\"));\n \t\tassertEquals(\"&#0000;\", Strings.escapeMarkup(\"&#0000;\"));\n-\t\t\n+\n \t\tassertEquals(\"&amp;amp;\", Strings.escapeMarkup(\"&amp;\"));\n-\t\tassertEquals(\"&lt; &gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\"));\n-\t\tassertEquals(\"&lt;&nbsp;&gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\", true));\n+\t\tassertEquals(\"&lt; &gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings\n+\t\t\t\t.escapeMarkup(\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\"));\n+\t\tassertEquals(\"&lt;&nbsp;&gt;&amp;&quot;&#039;?:;{}[]-_+=()*^%$#@!~`\", Strings.escapeMarkup(\n+\t\t\t\t\"< >&\\\"'?:;{}[]-_+=()*^%$#@!~`\", true));\n \t}\n-\t\n+\n \t/**\n \t * Tests the escapeMarkup method with whitespace.\n \t */\n \tpublic void testEscapeMarkupWhiteSpace()\n \t{\n \t\tassertNull(Strings.escapeMarkup(null, true));\n \t\tassertEquals(\"\", Strings.escapeMarkup(\"\", true));\n-\t\t\n+\n \t\tassertEquals(\"\\n \\t\", Strings.escapeMarkup(\"\\n \\t\", false));\n \t\tassertEquals(\"\\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\", Strings.escapeMarkup(\"\\n \\t\", true));\n \t\tassertEquals(\"  \", Strings.escapeMarkup(\"  \", false));\n@@ -166,10 +168,173 @@ public void testEscapeMarkupUnicode()\n \t\tassertNull(Strings.escapeMarkup(null, true, true));\n \t\tassertEquals(\"\", Strings.escapeMarkup(\"\", true, true));\n \n-\t\tassertEquals(\"&#199;&#252;&#233;&#226;&#228;&#224;&#229;&#231;&#234;&#235;\", \n-\t\t\t\tStrings.escapeMarkup(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", false, true));\n+\t\tassertEquals(\"&#199;&#252;&#233;&#226;&#228;&#224;&#229;&#231;&#234;&#235;\", Strings\n+\t\t\t\t.escapeMarkup(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", false, true));\n \n \t\tassertEquals(\"\\n \\t&#233;\", Strings.escapeMarkup(\"\\n \\t\ufffd\", false, true));\n \t\tassertEquals(\"\\n \\t\ufffd\", Strings.escapeMarkup(\"\\n \\t\ufffd\", false, false));\n \t}\n+\n+\t/**\n+\t * Tests the <code>replaceHtmlEscapeNumber</code> method.\n+\t */\n+\tpublic void testReplaceHtmlEscapeNumber()\n+\t{\n+\t\tassertNull(Strings.replaceHtmlEscapeNumber(null));\n+\t\tassertEquals(\"\", Strings.replaceHtmlEscapeNumber(\"\"));\n+\t\tassertEquals(\"abcdefghijklm\ufffd\", Strings.replaceHtmlEscapeNumber(\"abcdefghijklm\ufffd\"));\n+\t\tassertEquals(\"a &#\", Strings.replaceHtmlEscapeNumber(\"a &#\"));\n+\t\tassertEquals(\n+\t\t\t\t\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\",\n+\t\t\t\tStrings\n+\t\t\t\t\t\t.replaceHtmlEscapeNumber(\"&#199;&#252;&#233;&#226;&#228;&#224;&#229;&#231;&#234;&#235;\"));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>firstPathComponent</code> method.\n+\t */\n+\tpublic void testFirstPathComponent()\n+\t{\n+\t\tassertNull(Strings.firstPathComponent(null, '.'));\n+\t\tassertEquals(\"\", Strings.firstPathComponent(\"\", '.'));\n+\t\tassertEquals(\"foo\", Strings.firstPathComponent(\"foo\", '.'));\n+\t\tassertEquals(\"foo\", Strings.firstPathComponent(\"foo.bar\", '.'));\n+\t\tassertEquals(\"foo bar\", Strings.firstPathComponent(\"foo bar\", '.'));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>isEmpty</code> method.\n+\t */\n+\tpublic void testIsEmpty()\n+\t{\n+\t\tassertTrue(Strings.isEmpty(null));\n+\t\tassertTrue(Strings.isEmpty(\"\"));\n+\t\tassertTrue(Strings.isEmpty(\" \"));\n+\t\tassertTrue(Strings.isEmpty(\"           \"));\n+\t\tassertTrue(Strings.isEmpty(\" \\n\\t\"));\n+\t\tassertFalse(Strings.isEmpty(\"a\"));\n+\t\tassertFalse(Strings.isEmpty(\" a\"));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>isTrue</code> method.\n+\t * \n+\t * @throws StringValueConversionException\n+\t */\n+\tpublic void testIsTrue() throws StringValueConversionException\n+\t{\n+\t\tassertFalse(Strings.isTrue(null));\n+\t\tassertFalse(Strings.isTrue(\"\"));\n+\t\tassertFalse(Strings.isTrue(\" \\n \\t\"));\n+\n+\t\tassertFalse(Strings.isTrue(\"no\"));\n+\t\tassertFalse(Strings.isTrue(\"n\"));\n+\t\tassertFalse(Strings.isTrue(\"false\"));\n+\t\tassertFalse(Strings.isTrue(\"nO\"));\n+\t\tassertFalse(Strings.isTrue(\"N\"));\n+\t\tassertFalse(Strings.isTrue(\"fAlSe\"));\n+\t\tassertFalse(Strings.isTrue(\"0\"));\n+\n+\t\tassertTrue(Strings.isTrue(\"yes\"));\n+\t\tassertTrue(Strings.isTrue(\"y\"));\n+\t\tassertTrue(Strings.isTrue(\"true\"));\n+\t\tassertTrue(Strings.isTrue(\"1\"));\n+\t\tassertTrue(Strings.isTrue(\"YeS\"));\n+\t\tassertTrue(Strings.isTrue(\"Y\"));\n+\t\tassertTrue(Strings.isTrue(\"tRuE\"));\n+\t\tassertTrue(Strings.isTrue(\"1\"));\n+\n+\t\ttry\n+\t\t{\n+\t\t\tStrings.isTrue(\"foo\");\n+\t\t\tfail(\"Exception expected\");\n+\t\t}\n+\t\tcatch (StringValueConversionException e)\n+\t\t{\n+\t\t\tassertTrue(true);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Tests the <code>replaceAll</code> method.\n+\t */\n+\tpublic void testReplaceAll()\n+\t{\n+\t\tassertNull(Strings.replaceAll(null, null, null));\n+\t\tassertNull(Strings.replaceAll(null, \"\", null));\n+\t\tassertNull(Strings.replaceAll(null, null, \"\"));\n+\t\tassertNull(Strings.replaceAll(null, \"\", \"\"));\n+\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", null, null));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", \"\", null));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", null, \"\"));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", \"\", \"\"));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", \"\", \"abc\"));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"\", \"abc\", \"def\"));\n+\t\tassertEquals(\"\", Strings.replaceAll(\"abc\", \"abc\", \"\"));\n+\n+\t\tassertEquals(\"abc\", Strings.replaceAll(\"abc\", \"\", \"\"));\n+\t\tassertEquals(\"abc\", Strings.replaceAll(\"abc\", \"abc\", \"abc\"));\n+\t\tassertEquals(\"def\", Strings.replaceAll(\"abc\", \"abc\", \"def\"));\n+\t\tassertEquals(\"abc\", Strings.replaceAll(\"abc\", \"ABC\", \"\"));\n+\n+\t\tassertEquals(\"abc\", Strings.replaceAll(\"abc\", \"d\", null));\n+\t\tassertEquals(\"ab\", Strings.replaceAll(\"abc\", \"c\", null));\n+\t\tassertEquals(\"bc\", Strings.replaceAll(\"abc\", \"a\", null));\n+\n+\t\tassertEquals(\"aaaa\", Strings.replaceAll(\"aa\", \"a\", \"aa\"));\n+\t}\n+\n+\t/**\n+\t * Tests the <code>split</code> method.\n+\t */\n+\tpublic void testSplit()\n+\t{\n+\t\tassertEquals(new String[0], Strings.split(null, '.'));\n+\t\tassertEquals(new String[0], Strings.split(\"\", '.'));\n+\t\tassertEquals(new String[] { \"\", \"\" }, Strings.split(\".\", '.'));\n+\t\tassertEquals(new String[] { \"a\", \"\" }, Strings.split(\"a.\", '.'));\n+\t\tassertEquals(new String[] { \"a\", \"b\" }, Strings.split(\"a.b\", '.'));\n+\t\tassertEquals(new String[] { \"a\", \"b\", \"c\" }, Strings.split(\"a.b.c\", '.'));\n+\t\tassertEquals(new String[] { \"a\", \"b\", \"c\" }, Strings.split(\"a b c\", ' '));\n+\t\tassertEquals(new String[] { \"abc\" }, Strings.split(\"abc\", ' '));\n+\t}\n+\n+\t/**\n+\t * Asserts that both string arrays are equal.\n+\t * \n+\t * @param expected\n+\t *            the expected value\n+\t * @param actual\n+\t *            the actual value\n+\t */\n+\tprivate void assertEquals(String[] expected, String[] actual)\n+\t{\n+\t\tif (expected == null)\n+\t\t{\n+\t\t\tassertNull(actual);\n+\t\t}\n+\t\tassertEquals(stringValue(expected), stringValue(actual));\n+\t}\n+\n+\t/**\n+\t * Converts an array of strings to a String. {\"a\", \"b\"} becomes: \"{a,b}\"\n+\t * \n+\t * @param arrayOfStrings\n+\t *            the array to convert\n+\t * @return the array as a string.\n+\t */\n+\tprivate String stringValue(String[] arrayOfStrings)\n+\t{\n+\t\tStringBuffer sb = new StringBuffer(\"{\");\n+\t\tString komma = \"\";\n+\t\tfor (int i = 0; i < arrayOfStrings.length; i++)\n+\t\t{\n+\t\t\tsb.append(komma);\n+\t\t\tsb.append(arrayOfStrings[i]);\n+\t\t\tkomma = \",\";\n+\t\t}\n+\t\tsb.append(\"}\");\n+\t\treturn sb.toString();\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/f54d28e18f2d0d6b4f8c1280cf29b36fe9d04a62/wicket/src/test/wicket/util/string/StringsTest.java",
                "sha": "6079168de19acc14f5bceb821387efec70e7cea8",
                "status": "modified"
            }
        ],
        "message": "Fixed possible NPE's, and removed an endless loop construct (replaceAll(\"foo\", \"\", \"a\")).\n\nAdded more unittests.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@457544 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7b3d8dd66861684ee73b1bbc4ad926c4f9568fb7",
        "repo": "wicket",
        "unit_tests": [
            "StringsTest.java"
        ]
    },
    "wicket_f5a62da": {
        "bug_id": "wicket_f5a62da",
        "commit": "https://github.com/apache/wicket/commit/f5a62da5b38c504db8945a88857a53aae6b5d7b7",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/f5a62da5b38c504db8945a88857a53aae6b5d7b7/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java?ref=f5a62da5b38c504db8945a88857a53aae6b5d7b7",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "patch": "@@ -92,6 +92,13 @@ public IRequestHandler mapRequest(Request request)\n \t\t\t\t// should be stripped of timestamps\n \t\t\t\tif (i + 1 == segmentsSize)\n \t\t\t\t{\n+\t\t\t\t\t// since we need mutable page parameters for \n+\t\t\t\t\t// the caching strategy ensure they are not null \n+\t\t\t\t\tif (pageParameters == null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpageParameters = new PageParameters();\n+\t\t\t\t\t}\n+\t\t\t\t\t\n \t\t\t\t\t// The filename + parameters eventually contain caching\n \t\t\t\t\t// related information which needs to be removed\n \t\t\t\t\tResourceUrl resourceUrl = new ResourceUrl(segment, pageParameters);",
                "raw_url": "https://github.com/apache/wicket/raw/f5a62da5b38c504db8945a88857a53aae6b5d7b7/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "sha": "c1530cfdd5da3dbce6a5fb760db2933994625e47",
                "status": "modified"
            }
        ],
        "message": "WICKET-3828 QueryStringWithTimestampResourceCachingStrategy#undecorateUrl(ResourceUrl) can causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1138587 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/d997f7e9d4939eaa4074e185bd06ac07361e9ccd",
        "repo": "wicket",
        "unit_tests": [
            "BasicResourceReferenceMapperTest.java"
        ]
    },
    "wicket_feed0b7": {
        "bug_id": "wicket_feed0b7",
        "commit": "https://github.com/apache/wicket/commit/feed0b7814855c9d8815826ecd4c75f96da090cf",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/wicket/blob/feed0b7814855c9d8815826ecd4c75f96da090cf/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java?ref=feed0b7814855c9d8815826ecd4c75f96da090cf",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "patch": "@@ -30,8 +30,11 @@\n import org.apache.wicket.core.util.lang.WicketObjects;\n import org.apache.wicket.core.util.resource.locator.IResourceStreamLocator;\n import org.apache.wicket.markup.html.IPackageResourceGuard;\n+import org.apache.wicket.mock.MockWebRequest;\n+import org.apache.wicket.request.Url;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.request.resource.caching.IStaticCacheableResource;\n+import org.apache.wicket.response.StringResponse;\n import org.apache.wicket.util.io.IOUtils;\n import org.apache.wicket.util.lang.Classes;\n import org.apache.wicket.util.lang.Packages;\n@@ -493,7 +496,16 @@ public InputStream getInputStream() throws ResourceStreamNotFoundException\n \t\t\t}\n \n \t\t\tRequestCycle cycle = RequestCycle.get();\n-\t\t\tAttributes attributes = new Attributes(cycle.getRequest(), cycle.getResponse());\n+\t\t\tAttributes attributes;\n+\t\t\tif (cycle != null)\n+\t\t\t{\n+\t\t\t\tattributes = new Attributes(cycle.getRequest(), cycle.getResponse());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t// use empty request and response in case of non-http thread. WICKET-5532\n+\t\t\t\tattributes = new Attributes(new MockWebRequest(Url.parse(\"\")), new StringResponse());\n+\t\t\t}\n \t\t\tbyte[] processedBytes = processResponse(attributes, bytes);\n \t\t\treturn new ByteArrayInputStream(processedBytes);\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/feed0b7814855c9d8815826ecd4c75f96da090cf/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "sha": "403d1f7da77e6859b25ac03d5b1174c046c1f8ef",
                "status": "modified"
            }
        ],
        "message": "WICKET-5532 NPE calling PackageResource.getResourceStream() if there is no RequestCycle defined\n\nUse empty request and response when a PackageResource is used out of a request cycle\n\n(cherry picked from commit ae44d26db32587f4ddb9b8c52460ec1450dc96f5)",
        "parent": "https://github.com/apache/wicket/commit/5fe57410df21141d1a8db05fcb95728ab0ab8065",
        "repo": "wicket",
        "unit_tests": [
            "PackageResourceTest.java"
        ]
    }
}