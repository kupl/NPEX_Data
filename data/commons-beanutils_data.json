[{"commit": "https://github.com/apache/commons-beanutils/commit/b32ef1172046e4b3e9f496c3e06c363a12f3cbf4", "parent": "https://github.com/apache/commons-beanutils/commit/c8fbf336a870520f42e46696300165374b29ddb0", "message": "Fix for BEANUTILS-302 - NPE in ArrayConverter when converting a string with underscores to a string array - reported by Martin Bartlett\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/beanutils/trunk@618207 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-beanutils_1", "file": [{"additions": 5, "raw_url": "https://github.com/apache/commons-beanutils/raw/b32ef1172046e4b3e9f496c3e06c363a12f3cbf4/src/java/org/apache/commons/beanutils/converters/ArrayConverter.java", "blob_url": "https://github.com/apache/commons-beanutils/blob/b32ef1172046e4b3e9f496c3e06c363a12f3cbf4/src/java/org/apache/commons/beanutils/converters/ArrayConverter.java", "sha": "da19ca231b4c931c0f1e2bb1cab0670c585160a9", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src/java/org/apache/commons/beanutils/converters/ArrayConverter.java?ref=b32ef1172046e4b3e9f496c3e06c363a12f3cbf4", "patch": "@@ -434,10 +434,12 @@ private List parseElements(Class type, String value) {\n             while (true) {\n                 int ttype = st.nextToken();\n                 if ((ttype == StreamTokenizer.TT_WORD) || (ttype > 0)) {\n-                    if (list == null) {\n-                        list = new ArrayList();\n+                    if (st.sval != null) {\n+                        if (list == null) {\n+                            list = new ArrayList();\n+                        }\n+                        list.add(st.sval);\n                     }\n-                    list.add(st.sval.trim());\n                 } else if (ttype == StreamTokenizer.TT_EOF) {\n                     break;\n                 } else {", "filename": "src/java/org/apache/commons/beanutils/converters/ArrayConverter.java"}, {"additions": 27, "raw_url": "https://github.com/apache/commons-beanutils/raw/b32ef1172046e4b3e9f496c3e06c363a12f3cbf4/src/test/org/apache/commons/beanutils/converters/ArrayConverterTestCase.java", "blob_url": "https://github.com/apache/commons-beanutils/blob/b32ef1172046e4b3e9f496c3e06c363a12f3cbf4/src/test/org/apache/commons/beanutils/converters/ArrayConverterTestCase.java", "sha": "20ec30bdc0d3c5706d79808dd792d8bccc5e889f", "changes": 27, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src/test/org/apache/commons/beanutils/converters/ArrayConverterTestCase.java?ref=b32ef1172046e4b3e9f496c3e06c363a12f3cbf4", "patch": "@@ -360,6 +360,33 @@ public void testErrors() {\n         }\n     }\n \n+    /**\n+     * Test for BEANUTILS-302 - throwing a NPE when underscore used\n+     */\n+    public void testUnderscore_BEANUTILS_302() {\n+        String value = \"first_value,second_value\";\n+        ArrayConverter converter = new ArrayConverter(String[].class, new StringConverter());\n+\n+        // test underscore not allowed (the default)\n+        String[] result = (String[])converter.convert(String[].class, value);\n+        assertNotNull(\"result.null\", result);\n+        assertEquals(\"result.length\", 4, result.length);\n+        assertEquals(\"result[0]\", \"first\", result[0]);\n+        assertEquals(\"result[1]\", \"value\", result[1]);\n+        assertEquals(\"result[2]\", \"second\", result[2]);\n+        assertEquals(\"result[3]\", \"value\", result[3]);\n+\n+        // configure the converter to allow underscore\n+        converter.setAllowedChars(new char[] {'.', '-', '_'});\n+\n+        // test underscore allowed\n+        result = (String[])converter.convert(String[].class, value);\n+        assertNotNull(\"result.null\", result);\n+        assertEquals(\"result.length\", 2, result.length);\n+        assertEquals(\"result[0]\", \"first_value\", result[0]);\n+        assertEquals(\"result[1]\", \"second_value\", result[1]);\n+    }\n+\n     /**\n      * Check that two arrays are the same.\n      * @param msg Test prefix msg", "filename": "src/test/org/apache/commons/beanutils/converters/ArrayConverterTestCase.java"}], "repo": "commons-beanutils"}, {"commit": "https://github.com/apache/commons-beanutils/commit/f306335d0f7cbe362cc6dd869642b65376db8b6c", "parent": "https://github.com/apache/commons-beanutils/commit/b32ef1172046e4b3e9f496c3e06c363a12f3cbf4", "message": "Fix for BEANUTILS-306 - LocaleConvertUtilsBean.convert throws NPE on null Locale when debug logging is enabled\n(NOTE: change surefire plugin configuration logging level to \"DEBUG\" in pom.xml to test this is fixed)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/beanutils/trunk@628158 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-beanutils_2", "file": [{"additions": 17, "raw_url": "https://github.com/apache/commons-beanutils/raw/f306335d0f7cbe362cc6dd869642b65376db8b6c/pom.xml", "blob_url": "https://github.com/apache/commons-beanutils/blob/f306335d0f7cbe362cc6dd869642b65376db8b6c/pom.xml", "sha": "f37e242acd471c2d106311a883675b92b7b45332", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/pom.xml?ref=f306335d0f7cbe362cc6dd869642b65376db8b6c", "patch": "@@ -180,6 +180,23 @@\n                 -->\n                 <exclude>**/*MemoryTestCase.java</exclude>\n               </excludes>\n+\n+              <!-- Configure Logging -->\n+              <systemProperties>\n+                  <property>\n+                      <name>org.apache.commons.logging.LogFactory</name>\n+                      <value>org.apache.commons.logging.impl.LogFactoryImpl</value>\n+                  </property>\n+                  <property>\n+                      <name>org.apache.commons.logging.Log</name>\n+                      <value>org.apache.commons.logging.impl.SimpleLog</value>\n+                  </property>\n+                  <property>\n+                      <name>org.apache.commons.logging.simplelog.defaultlog</name>\n+                      <value>WARN</value>\n+                  </property>\n+              </systemProperties>\n+\n           </configuration>\n         </plugin>\n         <plugin>", "filename": "pom.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/commons-beanutils/raw/f306335d0f7cbe362cc6dd869642b65376db8b6c/src/java/org/apache/commons/beanutils/locale/LocaleConvertUtilsBean.java", "blob_url": "https://github.com/apache/commons-beanutils/blob/f306335d0f7cbe362cc6dd869642b65376db8b6c/src/java/org/apache/commons/beanutils/locale/LocaleConvertUtilsBean.java", "sha": "d6896f453e823fe1a6f4e0ea734b05814da92448", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src/java/org/apache/commons/beanutils/locale/LocaleConvertUtilsBean.java?ref=f306335d0f7cbe362cc6dd869642b65376db8b6c", "patch": "@@ -263,7 +263,7 @@ public Object convert(String value, Class clazz, Locale locale, String pattern)\n \n         if (log.isDebugEnabled()) {\n             log.debug(\"Convert string \" + value + \" to class \" +\n-                    clazz.getName() + \" using \" + locale.toString() +\n+                    clazz.getName() + \" using \" + locale +\n                     \" locale and \" + pattern + \" pattern\");\n         }\n \n@@ -333,7 +333,7 @@ public Object convert(String[] values, Class clazz, Locale locale, String patter\n         }\n         if (log.isDebugEnabled()) {\n             log.debug(\"Convert String[\" + values.length + \"] to class \" +\n-                    type.getName() + \"[] using \" + locale.toString() +\n+                    type.getName() + \"[] using \" + locale +\n                     \" locale and \" + pattern + \" pattern\");\n         }\n ", "filename": "src/java/org/apache/commons/beanutils/locale/LocaleConvertUtilsBean.java"}, {"additions": 34, "raw_url": "https://github.com/apache/commons-beanutils/raw/f306335d0f7cbe362cc6dd869642b65376db8b6c/src/test/org/apache/commons/beanutils/locale/LocaleConvertUtilsTestCase.java", "blob_url": "https://github.com/apache/commons-beanutils/blob/f306335d0f7cbe362cc6dd869642b65376db8b6c/src/test/org/apache/commons/beanutils/locale/LocaleConvertUtilsTestCase.java", "sha": "df70c7253fb26fa67439c8fbc4aed8ccf09a7d4b", "changes": 34, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src/test/org/apache/commons/beanutils/locale/LocaleConvertUtilsTestCase.java?ref=f306335d0f7cbe362cc6dd869642b65376db8b6c", "patch": "@@ -23,6 +23,7 @@\n import java.sql.Timestamp;\n import java.text.DecimalFormat;\n import java.text.NumberFormat;\n+import java.util.Locale;\n \n import junit.framework.TestCase;\n import junit.framework.Test;\n@@ -595,6 +596,39 @@ public void fixmetestPositiveStringArray() {\n \n     }\n \n+    /**\n+     * Test conversion of a String using a Locale and pattern.\n+     */\n+    public void testConvertStringLocaleNull() {\n+        Object result = null;\n+        try {\n+            result = LocaleConvertUtils.convert(\"123\", Integer.class, (Locale)null, \"#,###\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"Threw: \" + e);\n+        }\n+        assertNotNull(\"Null Result\", result);\n+        assertEquals(\"Integer Type\", Integer.class, result.getClass());\n+        assertEquals(\"Integer Value\", new Integer(123), result);\n+    }\n+\n+    /**\n+     * Test conversion of a String array using a Locale and pattern.\n+     */\n+    public void testConvertStringArrayLocaleNull() {\n+        Object result = null;\n+        try {\n+            result = LocaleConvertUtils.convert(new String[] {\"123\"}, Integer[].class, (Locale)null, \"#,###\");\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"Threw: \" + e);\n+        }\n+        assertNotNull(\"Null Result\", result);\n+        assertEquals(\"Integer Array Type\", Integer[].class, result.getClass());\n+        assertEquals(\"Integer Array Length\", 1, ((Integer[])result).length);\n+        assertEquals(\"Integer Array Value\", new Integer(123), ((Integer[])result)[0]);\n+    }\n+\n \n     // -------------------------------------------------------- Private Methods\n ", "filename": "src/test/org/apache/commons/beanutils/locale/LocaleConvertUtilsTestCase.java"}], "repo": "commons-beanutils"}, {"commit": "https://github.com/apache/commons-beanutils/commit/6b8041f96ce1017be49d4eb460ae2ef1c81294f7", "parent": "https://github.com/apache/commons-beanutils/commit/d981b1ffa632617ca096b2a9816557f68cce1ea4", "message": "Check for null \"new\" values in setProperty() appropriately, to avoid NPEs.\n\nPR: Bugzilla #15773\nSubmitted by:\tBen Tomasini <btomasini at neteverything.com>\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/beanutils/trunk@128659 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-beanutils_3", "file": [{"additions": 11, "raw_url": "https://github.com/apache/commons-beanutils/raw/6b8041f96ce1017be49d4eb460ae2ef1c81294f7/src/java/org/apache/commons/beanutils/BeanUtils.java", "blob_url": "https://github.com/apache/commons-beanutils/blob/6b8041f96ce1017be49d4eb460ae2ef1c81294f7/src/java/org/apache/commons/beanutils/BeanUtils.java", "sha": "8a8d1d3fb0833d7ca5a089f7812e698d06f6093b", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src/java/org/apache/commons/beanutils/BeanUtils.java?ref=6b8041f96ce1017be49d4eb460ae2ef1c81294f7", "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/BeanUtils.java,v 1.32 2002/12/21 19:33:19 craigmcc Exp $\n- * $Revision: 1.32 $\n- * $Date: 2002/12/21 19:33:19 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/BeanUtils.java,v 1.33 2003/01/03 20:32:35 craigmcc Exp $\n+ * $Revision: 1.33 $\n+ * $Date: 2003/01/03 20:32:35 $\n  *\n  * ====================================================================\n  *\n@@ -87,7 +87,7 @@\n  * @author Chris Audley\n  * @author Rey Fran\ufffdois\n  * @author Gregor Ra\ufffdman\n- * @version $Revision: 1.32 $ $Date: 2002/12/21 19:33:19 $\n+ * @version $Revision: 1.33 $ $Date: 2003/01/03 20:32:35 $\n  */\n \n public class BeanUtils {\n@@ -880,7 +880,12 @@ public static void setProperty(Object bean, String name, Object value)\n         // Convert the specified value to the required type\n         Object newValue = null;\n         if (type.isArray() && (index < 0)) { // Scalar value into array\n-            if (value instanceof String) {\n+            log.debug(\"CONVERTING SCALAR '\" + value + \"' TO ARRAY\");\n+            if (value == null) {\n+                String values[] = new String[1];\n+                values[0] = (String) value;\n+                newValue = ConvertUtils.convert((String[]) values, type);\n+            } else if (value instanceof String) {\n                 String values[] = new String[1];\n                 values[0] = (String) value;\n                 newValue = ConvertUtils.convert((String[]) values, type);\n@@ -900,7 +905,7 @@ public static void setProperty(Object bean, String name, Object value)\n                 newValue = value;\n             }\n         } else {                             // Value into scalar\n-            if (value instanceof String || (value == null && type.isPrimitive())) {\n+            if ((value instanceof String) || (value == null)) {\n                 newValue = ConvertUtils.convert((String) value, type);\n             } else if (value instanceof String[]) {\n                 newValue = ConvertUtils.convert(((String[]) value)[0],", "filename": "src/java/org/apache/commons/beanutils/BeanUtils.java"}, {"additions": 8, "raw_url": "https://github.com/apache/commons-beanutils/raw/6b8041f96ce1017be49d4eb460ae2ef1c81294f7/src/java/org/apache/commons/beanutils/ResultSetDynaClass.java", "blob_url": "https://github.com/apache/commons-beanutils/blob/6b8041f96ce1017be49d4eb460ae2ef1c81294f7/src/java/org/apache/commons/beanutils/ResultSetDynaClass.java", "sha": "82604665096201b8fd1b6ad27edca33dfe596efa", "changes": 16, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src/java/org/apache/commons/beanutils/ResultSetDynaClass.java?ref=6b8041f96ce1017be49d4eb460ae2ef1c81294f7", "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/ResultSetDynaClass.java,v 1.7 2002/12/16 01:53:20 craigmcc Exp $\n- * $Revision: 1.7 $\n- * $Date: 2002/12/16 01:53:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/java/org/apache/commons/beanutils/ResultSetDynaClass.java,v 1.8 2003/01/03 20:32:35 craigmcc Exp $\n+ * $Revision: 1.8 $\n+ * $Date: 2003/01/03 20:32:35 $\n  *\n  * ====================================================================\n  *\n@@ -87,8 +87,8 @@\n  * </pre>\n  *\n  * <p>Each column in the result set will be represented as a DynaBean\n- * property of the corresponding name (forced to lower case for portability).\n- * </p>\n+ * property of the corresponding name (optionally forced to lower case\n+ * for portability).</p>\n  *\n  * <p><strong>WARNING</strong> - Any {@link DynaBean} instance returned by\n  * this class, or from the <code>Iterator</code> returned by the\n@@ -125,7 +125,7 @@\n  * </pre>\n  *\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.7 $ $Date: 2002/12/16 01:53:20 $\n+ * @version $Revision: 1.8 $ $Date: 2003/01/03 20:32:35 $\n  */\n \n public class ResultSetDynaClass implements DynaClass {\n@@ -142,7 +142,7 @@\n      * @param resultSet The result set to be wrapped\n      *\n      * @exception NullPointerException if <code>resultSet</code>\n-     *  is <code>false</code>\n+     *  is <code>null</code>\n      * @exception SQLException if the metadata for this result set\n      *  cannot be introspected\n      */\n@@ -170,7 +170,7 @@ public ResultSetDynaClass(ResultSet resultSet) throws SQLException {\n      * @param lowerCase Should property names be lower cased?\n      *\n      * @exception NullPointerException if <code>resultSet</code>\n-     *  is <code>false</code>\n+     *  is <code>null</code>\n      * @exception SQLException if the metadata for this result set\n      *  cannot be introspected\n      */", "filename": "src/java/org/apache/commons/beanutils/ResultSetDynaClass.java"}, {"additions": 46, "raw_url": "https://github.com/apache/commons-beanutils/raw/6b8041f96ce1017be49d4eb460ae2ef1c81294f7/src/test/org/apache/commons/beanutils/BeanUtilsTestCase.java", "blob_url": "https://github.com/apache/commons-beanutils/blob/6b8041f96ce1017be49d4eb460ae2ef1c81294f7/src/test/org/apache/commons/beanutils/BeanUtilsTestCase.java", "sha": "ec66925469a4922ecf0aece788d3b74244f75569", "changes": 50, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src/test/org/apache/commons/beanutils/BeanUtilsTestCase.java?ref=6b8041f96ce1017be49d4eb460ae2ef1c81294f7", "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/BeanUtilsTestCase.java,v 1.16 2002/12/21 19:33:20 craigmcc Exp $\n- * $Revision: 1.16 $\n- * $Date: 2002/12/21 19:33:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/BeanUtilsTestCase.java,v 1.17 2003/01/03 20:32:35 craigmcc Exp $\n+ * $Revision: 1.17 $\n+ * $Date: 2003/01/03 20:32:35 $\n  *\n  * ====================================================================\n  *\n@@ -97,7 +97,7 @@\n  * </ul>\n  *\n  * @author <a href=\"mailto:geirm@optonline.net\">Geir Magnusson Jr.</a>\n- * @version $Revision: 1.16 $\n+ * @version $Revision: 1.17 $\n  */\n \n public class BeanUtilsTestCase extends TestCase {\n@@ -782,6 +782,48 @@ public void testPopulateScalar() {\n     }\n \n \n+    /**\n+     * Test calling setProperty() with null property values.\n+     */\n+    public void testSetPropertyNullValues() throws Exception {\n+\n+        Object oldValue = null;\n+        Object newValue = null;\n+\n+        // Scalar value into array\n+        oldValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\n+        BeanUtils.setProperty(bean, \"stringArray\", (String) null);\n+        newValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\n+        assertNotNull(\"stringArray is not null\", newValue);\n+        assertTrue(\"stringArray of correct type\",\n+                   newValue instanceof String[]);\n+        assertEquals(\"stringArray length\",\n+                     1, ((String[]) newValue).length);\n+        assertTrue(\"stringArray[0] is null\",\n+                   ((String[]) newValue)[0] == null);\n+        PropertyUtils.setProperty(bean, \"stringArray\", oldValue);\n+\n+        // Indexed value into array\n+        oldValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\n+        BeanUtils.setProperty(bean, \"stringArray[2]\", (String) null);\n+        newValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\n+        assertNotNull(\"stringArray is not null\", newValue);\n+        assertTrue(\"stringArray of correct type\",\n+                   newValue instanceof String[]);\n+        assertEquals(\"stringArray length\",\n+                     5, ((String[]) newValue).length);\n+        assertTrue(\"stringArray[2] is null\",\n+                   ((String[]) newValue)[2] == null);\n+        PropertyUtils.setProperty(bean, \"stringArray\", oldValue);\n+\n+        // Value into scalar\n+        BeanUtils.setProperty(bean, \"stringProperty\", null);\n+        assertTrue(\"stringProperty is now null\",\n+                   BeanUtils.getProperty(bean, \"stringProperty\") == null);\n+\n+    }\n+\n+\n     /**\n      * Test converting to and from primitive wrapper types.\n      */", "filename": "src/test/org/apache/commons/beanutils/BeanUtilsTestCase.java"}, {"additions": 46, "raw_url": "https://github.com/apache/commons-beanutils/raw/6b8041f96ce1017be49d4eb460ae2ef1c81294f7/src/test/org/apache/commons/beanutils/DynaBeanUtilsTestCase.java", "blob_url": "https://github.com/apache/commons-beanutils/blob/6b8041f96ce1017be49d4eb460ae2ef1c81294f7/src/test/org/apache/commons/beanutils/DynaBeanUtilsTestCase.java", "sha": "7ef7049d33225f026cc9b32605eb373c92fa0feb", "changes": 50, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/commons-beanutils/contents/src/test/org/apache/commons/beanutils/DynaBeanUtilsTestCase.java?ref=6b8041f96ce1017be49d4eb460ae2ef1c81294f7", "patch": "@@ -1,7 +1,7 @@\n /*\n- * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/DynaBeanUtilsTestCase.java,v 1.13 2002/12/21 19:33:20 craigmcc Exp $\n- * $Revision: 1.13 $\n- * $Date: 2002/12/21 19:33:20 $\n+ * $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//beanutils/src/test/org/apache/commons/beanutils/DynaBeanUtilsTestCase.java,v 1.14 2003/01/03 20:32:35 craigmcc Exp $\n+ * $Revision: 1.14 $\n+ * $Date: 2003/01/03 20:32:35 $\n  *\n  * ====================================================================\n  *\n@@ -77,7 +77,7 @@\n  * Test case for BeanUtils when the underlying bean is actually a DynaBean.\n  *\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.13 $ $Date: 2002/12/21 19:33:20 $\n+ * @version $Revision: 1.14 $ $Date: 2003/01/03 20:32:35 $\n  */\n \n public class DynaBeanUtilsTestCase extends TestCase {\n@@ -832,6 +832,48 @@ public void testPopulateScalar() {\n     }\n \n \n+    /**\n+     * Test calling setProperty() with null property values.\n+     */\n+    public void testSetPropertyNullValues() throws Exception {\n+\n+        Object oldValue = null;\n+        Object newValue = null;\n+\n+        // Scalar value into array\n+        oldValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\n+        BeanUtils.setProperty(bean, \"stringArray\", (String) null);\n+        newValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\n+        assertNotNull(\"stringArray is not null\", newValue);\n+        assertTrue(\"stringArray of correct type\",\n+                   newValue instanceof String[]);\n+        assertEquals(\"stringArray length\",\n+                     1, ((String[]) newValue).length);\n+        assertTrue(\"stringArray[0] is null\",\n+                   ((String[]) newValue)[0] == null);\n+        PropertyUtils.setProperty(bean, \"stringArray\", oldValue);\n+\n+        // Indexed value into array\n+        oldValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\n+        BeanUtils.setProperty(bean, \"stringArray[2]\", (String) null);\n+        newValue = PropertyUtils.getSimpleProperty(bean, \"stringArray\");\n+        assertNotNull(\"stringArray is not null\", newValue);\n+        assertTrue(\"stringArray of correct type\",\n+                   newValue instanceof String[]);\n+        assertEquals(\"stringArray length\",\n+                     5, ((String[]) newValue).length);\n+        assertTrue(\"stringArray[2] is null\",\n+                   ((String[]) newValue)[2] == null);\n+        PropertyUtils.setProperty(bean, \"stringArray\", oldValue);\n+\n+        // Value into scalar\n+        BeanUtils.setProperty(bean, \"stringProperty\", null);\n+        assertTrue(\"stringProperty is now null\",\n+                   BeanUtils.getProperty(bean, \"stringProperty\") == null);\n+\n+    }\n+\n+\n     /**\n      * Test converting to and from primitive wrapper types.\n      */", "filename": "src/test/org/apache/commons/beanutils/DynaBeanUtilsTestCase.java"}], "repo": "commons-beanutils"}]
