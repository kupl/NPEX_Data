[
    {
        "repo": "struts",
        "commit": "https://github.com/apache/struts/commit/2a60c1eee69f976a6e20f20add04cdc39b757ead",
        "bug_id": "struts_2a60c1e",
        "message": "[WW-4981] Adds support for JDK11  (#270)\n\n* Upgrades test dependencies\r\n\r\n* Drops unused lib\r\n\r\n* Uses AssertJ instead of FestAssert\r\n\r\n* Upgrades Surefire Maven Plugin to 2.22.1\r\n\r\n* Downgrades to AssertJ 2.x to support JDK7\r\n\r\n* decouple tests from java version\r\n\r\nRefactor a java 9 conditional test to work always with any java version\r\n\r\nSee also WW-4845\r\n\r\n* fix NullPointerException in NotURLClassLoader tests\r\n\r\nAlso includes a few improvements\r\n\r\nSee also WW-4845\r\n\r\n* do not specify threadCount & forkMode which breaks tests in java 9\r\n\r\nSee also WW-4845\r\n\r\n* pass all current tests with java 11\r\n\r\nSee also WW-4981\r\n\r\n* fix an odd path problem in java 9\r\n\r\nSee also WW-4845\r\n\r\n* gitignore test-output\r\n\r\nSee also WW-4981\r\n\r\n* ask travis an oracle jdk 11 build\r\n\r\nSee also WW-4981\r\n\r\n* ask travis to report coverage only in latest working jdk, jdk8\r\n\r\nSee also WW-4845",
        "parent": "https://github.com/apache/struts/commit/f2ad93a0d64b127829e8777a06af4c20dcd7af85",
        "patched_files": [
            "pom.xml",
            "JarEntryRevision.java",
            "FreemarkerThemeTemplateLoader.java",
            "min-lib.xml",
            "UploadedFileConverter.java",
            ".travis.yml",
            "EmbeddedJSPResult.java",
            "OgnlUtil.java",
            "JSONValidationInterceptor.java",
            ".gitignore",
            "AnnotationUtils.java",
            "ClassPathFinder.java",
            "JacksonXmlHandler.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/.gitignore",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/.gitignore?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": ".gitignore",
                "deletions": 0,
                "sha": "025e54528ea93b2a2ae041a6387dfa7337e0864f",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/.gitignore",
                "patch": "@@ -63,3 +63,4 @@ bundles/target\n plugins/target\n target\n plugins/testng/test-output\n+test-output",
                "changes": 1
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/.travis.yml",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/.travis.yml?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": ".travis.yml",
                "deletions": 1,
                "sha": "5ba7076caa4d1b1764e25cbb3dfc111c6848d3db",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/.travis.yml",
                "patch": "@@ -5,12 +5,18 @@ jdk:\n   - openjdk7\n   - oraclejdk8\n   - oraclejdk9\n+  - oraclejdk11\n \n install: true\n script: mvn test -DskipAssembly\n \n after_success:\n-  - mvn clean cobertura:cobertura org.eluder.coveralls:coveralls-maven-plugin:report com.updateimpact:updateimpact-maven-plugin:submit -Ptravis-coveralls,update-impact -DskipAssembly\n+  # TODO delete following if statement after fix of https://github.com/cobertura/cobertura/issues/271\n+  - if [ \"$TRAVIS_JDK_VERSION\" == \"openjdk8\" ] || [ \"$TRAVIS_JDK_VERSION\" == \"oraclejdk8\" ]; then\n+      mvn clean cobertura:cobertura org.eluder.coveralls:coveralls-maven-plugin:report com.updateimpact:updateimpact-maven-plugin:submit -Ptravis-coveralls,update-impact -DskipAssembly\n+    else\n+      echo \"Not reporting coverage for $TRAVIS_JDK_VERSION due to incomatibility or to save performance\";\n+    fi\n \n env:\n   global:",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/assembly/src/main/assembly/min-lib.xml",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/assembly/src/main/assembly/min-lib.xml?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "assembly/src/main/assembly/min-lib.xml",
                "deletions": 2,
                "sha": "3e6e4a17661b367aa3473543290353ba26461c1a",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/assembly/src/main/assembly/min-lib.xml",
                "patch": "@@ -38,9 +38,8 @@\n         <include>org.apache.commons:commons-lang3</include>\n         <include>org.apache.logging.log4j:log4j-api</include>\n         <include>ognl:ognl</include>\n-        <include>org.javassist:javassist</include>\n         <include>commons-fileupload:commons-fileupload</include>\n-        <include>commons-io:commons-io</include>\n+        <include>org.apache.commons:commons-io</include>\n       </includes>\n     </dependencySet>\n   </dependencySets>",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/pom.xml?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/pom.xml",
                "deletions": 3,
                "sha": "f5e0dac0a729c473b8a697c5472338baf0992876",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/pom.xml",
                "patch": "@@ -339,13 +339,13 @@\n \n         <dependency>\n             <groupId>org.mockito</groupId>\n-            <artifactId>mockito-all</artifactId>\n+            <artifactId>mockito-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n \n         <dependency>\n-            <groupId>org.easytesting</groupId>\n-            <artifactId>fest-assert</artifactId>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n ",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 137,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/main/java/com/opensymphony/xwork2/util/ClassPathFinder.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/main/java/com/opensymphony/xwork2/util/ClassPathFinder.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/src/main/java/com/opensymphony/xwork2/util/ClassPathFinder.java",
                "deletions": 142,
                "sha": "8cb69cbefd6798a2c5403e2f60a3835f03f588cb",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/main/java/com/opensymphony/xwork2/util/ClassPathFinder.java",
                "patch": "@@ -36,158 +36,153 @@\n /**\n  * This class is an utility class that will search through the classpath\n  * for files whose names match the given pattern. The filename is tested\n- * using the given implementation of {@link com.opensymphony.xwork2.util.PatternMatcher} by default it \n+ * using the given implementation of {@link com.opensymphony.xwork2.util.PatternMatcher} by default it\n  * uses {@link com.opensymphony.xwork2.util.WildcardHelper}\n  */\n public class ClassPathFinder {\n-\t\n-\t/**\n+\n+    /**\n      * The String pattern to test against.\n      */\n-\tprivate String pattern ;\n-\t\n-\tprivate int[] compiledPattern ;\n-\t\n-\t/**\n+    private String pattern;\n+\n+    private int[] compiledPattern;\n+\n+    /**\n      * The PatternMatcher implementation to use\n      */\n-\tprivate PatternMatcher<int[]> patternMatcher = new WildcardHelper();\n-\n-\tprivate Vector<String> compared = new Vector<>();\n-\t\n-\t/**\n-\t * @return the pattern in use\n-\t */\n-\tpublic String getPattern() {\n-\t\treturn pattern;\n-\t}\n-\n-\t/**\n-\t * @param pattern the String pattern for comparing filenames\n-\t */\n-\tpublic void setPattern(String pattern) {\n-\t\tthis.pattern = pattern;\n-\t}\n-\n-\t/**\n+    private PatternMatcher<int[]> patternMatcher = new WildcardHelper();\n+\n+    private Vector<String> compared = new Vector<>();\n+\n+    /**\n+     * @return the pattern in use\n+     */\n+    public String getPattern() {\n+        return pattern;\n+    }\n+\n+    /**\n+     * @param pattern the String pattern for comparing filenames\n+     */\n+    public void setPattern(String pattern) {\n+        this.pattern = pattern;\n+    }\n+\n+    /**\n      * Builds a {@link java.util.Vector} containing Strings which each name a file\n-     * who's name matches the pattern set by setPattern(String). The classpath is \n+     * who's name matches the pattern set by setPattern(String). The classpath is\n      * searched recursively, so use with caution.\n      *\n      * @return Vector&lt;String&gt; containing matching filenames\n      */\n-\tpublic Vector<String> findMatches() {\n-\t\tVector<String> matches = new Vector<>();\n-\t\tURL[] parentUrls = getClassLoaderURLs();\n-\t\tcompiledPattern = patternMatcher.compilePattern(pattern);\n-\t\tfor (URL url : parentUrls) {\n-\t\t\tif (!\"file\".equals(url.getProtocol())) {\n-\t\t\t\tcontinue ;\n-\t\t\t}\n-\t\t\tURI entryURI ;\n-\t\t\ttry {\n-\t\t\t\tentryURI = url.toURI();\n-\t\t\t} catch (URISyntaxException e) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tFile entry = new File(entryURI);\n-\t\t\tif (entry.isFile() && entry.toString().endsWith(\".jar\")) {\n-\t\t\t\ttry {\n-\t\t\t\t\tZipInputStream zip = new ZipInputStream(new FileInputStream(entry));\n-\t\t\t\t\tfor (ZipEntry zipEntry = zip.getNextEntry(); zipEntry != null; zipEntry = zip.getNextEntry()) {\n-\t\t\t\t\t\tboolean doesMatch = patternMatcher.match(new HashMap<String, String>(), zipEntry.getName(), compiledPattern);\n-\t\t\t\t\t\tif (doesMatch) {\n-\t\t\t\t\t\t\tmatches.add(zipEntry.getName());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\te.printStackTrace();\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tVector<String> results = checkEntries(entry.list(), entry, \"\");\n-\t\t\t\tif (results != null) {\n-\t\t\t\t\tmatches.addAll(results);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn matches;\n-\t}\n-\t\n-\tprivate Vector<String> checkEntries(String[] entries, File parent, String prefix) {\n-\t\t\n-\t\tif (entries == null ) {\n-\t\t\treturn null;\n-\t\t}\n-\n-\t\tVector<String> matches = new Vector<>();\n-\t\tfor (String listEntry : entries) {\n-\t\t\tFile tempFile ;\n-\t\t\tif (!\"\".equals(prefix) ) {\n-\t\t\t\ttempFile = new File(parent, prefix + \"/\" + listEntry);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\ttempFile = new File(parent, listEntry);\n-\t\t\t}\n-\t\t\tif (tempFile.isDirectory() && \n-\t\t\t\t\t!(\".\".equals(listEntry) || \"..\".equals(listEntry)) ) {\n-\t\t\t\tif\t(!\"\".equals(prefix) ) {\n-\t\t\t\t\tmatches.addAll(checkEntries(tempFile.list(), parent, prefix + \"/\" + listEntry));\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tmatches.addAll(checkEntries(tempFile.list(), parent, listEntry));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\t\n-\t\t\t\tString entryToCheck ;\n-\t\t\t\tif (\"\".equals(prefix)) {\n-\t\t\t\t\tentryToCheck = listEntry ;\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tentryToCheck = prefix + \"/\" + listEntry ;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tif (compared.contains(entryToCheck) ) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\telse {\n-\t\t\t\t\tcompared.add(entryToCheck) ;\n-\t\t\t\t}\n-\t\t\t\t\n-\t\t\t\tboolean doesMatch = patternMatcher.match(new HashMap<String,String>(), entryToCheck, compiledPattern);\n-\t\t\t\tif (doesMatch) {\n-\t\t\t\t\tmatches.add(entryToCheck);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn matches ;\n-\t}\n-\n-\t/**\n-\t * @param patternMatcher the PatternMatcher implementation to use when comparing filenames\n-\t */\n-\tpublic void setPatternMatcher(PatternMatcher<int[]> patternMatcher) {\n-\t\tthis.patternMatcher = patternMatcher;\n-\t}\n-\n-\tprivate URL[] getClassLoaderURLs() {\n-\t\tURL[] urls;\n-\t\tClassLoader loader = Thread.currentThread().getContextClassLoader();\n-\n-\t\tif (!(loader instanceof URLClassLoader)) {\n-\t\t\tloader = ClassPathFinder.class.getClassLoader();\n-\t\t}\n-\n-\t\tif (loader instanceof URLClassLoader) {\n-\t\t\turls = ((URLClassLoader) loader).getURLs();\n-\t\t} else {    //jdk9 or later\n-\t\t\ttry {\n-\t\t\t\turls = Collections.list(loader.getResources(\"\")).toArray(new URL[0]);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new XWorkException(\"unable to get ClassLoader URLs\", e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn urls;\n-\t}\n+    public Vector<String> findMatches() {\n+        Vector<String> matches = new Vector<>();\n+        URL[] parentUrls = getClassLoaderURLs();\n+        compiledPattern = patternMatcher.compilePattern(pattern);\n+        for (URL url : parentUrls) {\n+            if (!\"file\".equals(url.getProtocol())) {\n+                continue;\n+            }\n+            URI entryURI;\n+            try {\n+                entryURI = url.toURI();\n+            } catch (URISyntaxException e) {\n+                continue;\n+            }\n+            File entry = new File(entryURI);\n+            if (entry.isFile() && entry.toString().endsWith(\".jar\")) {\n+                try {\n+                    ZipInputStream zip = new ZipInputStream(new FileInputStream(entry));\n+                    for (ZipEntry zipEntry = zip.getNextEntry(); zipEntry != null; zipEntry = zip.getNextEntry()) {\n+                        boolean doesMatch = patternMatcher.match(new HashMap<String, String>(), zipEntry.getName(), compiledPattern);\n+                        if (doesMatch) {\n+                            matches.add(zipEntry.getName());\n+                        }\n+                    }\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            } else {\n+                Vector<String> results = checkEntries(entry.list(), entry, \"\");\n+                if (results != null) {\n+                    matches.addAll(results);\n+                }\n+            }\n+        }\n+        return matches;\n+    }\n+\n+    private Vector<String> checkEntries(String[] entries, File parent, String prefix) {\n+\n+        if (entries == null) {\n+            return null;\n+        }\n+\n+        Vector<String> matches = new Vector<>();\n+        for (String listEntry : entries) {\n+            File tempFile;\n+            if (!\"\".equals(prefix)) {\n+                tempFile = new File(parent, prefix + \"/\" + listEntry);\n+            } else {\n+                tempFile = new File(parent, listEntry);\n+            }\n+            if (tempFile.isDirectory() &&\n+                !(\".\".equals(listEntry) || \"..\".equals(listEntry))) {\n+                if (!\"\".equals(prefix)) {\n+                    matches.addAll(checkEntries(tempFile.list(), parent, prefix + \"/\" + listEntry));\n+                } else {\n+                    matches.addAll(checkEntries(tempFile.list(), parent, listEntry));\n+                }\n+            } else {\n+\n+                String entryToCheck;\n+                if (\"\".equals(prefix)) {\n+                    entryToCheck = listEntry;\n+                } else {\n+                    entryToCheck = prefix + \"/\" + listEntry;\n+                }\n+\n+                if (compared.contains(entryToCheck)) {\n+                    continue;\n+                } else {\n+                    compared.add(entryToCheck);\n+                }\n+\n+                boolean doesMatch = patternMatcher.match(new HashMap<String, String>(), entryToCheck, compiledPattern);\n+                if (doesMatch) {\n+                    matches.add(entryToCheck);\n+                }\n+            }\n+        }\n+        return matches;\n+    }\n+\n+    /**\n+     * @param patternMatcher the PatternMatcher implementation to use when comparing filenames\n+     */\n+    public void setPatternMatcher(PatternMatcher<int[]> patternMatcher) {\n+        this.patternMatcher = patternMatcher;\n+    }\n+\n+    private URL[] getClassLoaderURLs() {\n+        URL[] urls;\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+\n+        if (!(loader instanceof URLClassLoader)) {\n+            loader = ClassPathFinder.class.getClassLoader();\n+        }\n+\n+        if (loader instanceof URLClassLoader) {\n+            urls = ((URLClassLoader) loader).getURLs();\n+        } else {    //jdk9 or later\n+            try {\n+                urls = Collections.list(loader.getResources(\"\")).toArray(new URL[0]);\n+            } catch (IOException e) {\n+                throw new XWorkException(\"unable to get ClassLoader URLs\", e);\n+            }\n+        }\n+\n+        return urls;\n+    }\n }",
                "changes": 279
            },
            {
                "status": "modified",
                "additions": 21,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java",
                "deletions": 23,
                "sha": "99aa541332b84e8cf1bbf6a348cbc23c28ae22d3",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/com/opensymphony/xwork2/ognl/OgnlUtilTest.java",
                "patch": "@@ -27,9 +27,9 @@\n import com.opensymphony.xwork2.util.*;\n import com.opensymphony.xwork2.util.reflection.ReflectionContextState;\n import ognl.*;\n-import org.apache.struts2.TestUtils;\n \n import java.lang.reflect.Method;\n+import java.text.DateFormat;\n import java.util.*;\n \n public class OgnlUtilTest extends XWorkTestCase {\n@@ -373,24 +373,8 @@ public void testSetPropertiesDate() {\n         cal.set(Calendar.YEAR, 1982);\n \n         assertEquals(cal.getTime(), foo.getBirthday());\n-        \n-        //UK style test\n-        if (TestUtils.isJdk9OrLater()) {\n-            /* In JDK 9 and later, the default locale data uses data derived from the\n-            Unicode Consortium's Common Locale Data Repository (CLDR). The short date-time format is \u2039{1}, {0}\u203a in the\n-            CLDR locale, as opposed to {1} {0} in the JRE locale data.\n-            Please refer : http://www.oracle.com/technetwork/java/javase/9-relnote-issues-3704069.html#JDK-8008577 */\n-            props.put(\"event\", \"18/10/2006, 14:23:45\");\n-            props.put(\"meeting\", \"09/09/2006, 14:30\");\n-        }\n-        else {\n-            props.put(\"event\", \"18/10/2006 14:23:45\");\n-            props.put(\"meeting\", \"09/09/2006 14:30\");\n-        }\n-        context.put(ActionContext.LOCALE, Locale.UK);\n \n-        ognlUtil.setProperties(props, foo, context);\n-        \n+        //UK style test\n         cal = Calendar.getInstance();\n         cal.clear();\n         cal.set(Calendar.MONTH, Calendar.OCTOBER);\n@@ -399,18 +383,32 @@ public void testSetPropertiesDate() {\n         cal.set(Calendar.HOUR_OF_DAY, 14);\n         cal.set(Calendar.MINUTE, 23);\n         cal.set(Calendar.SECOND, 45);\n-        \n-        assertEquals(cal.getTime(), foo.getEvent());\n-        \n+\n+        Date eventTime = cal.getTime();\n+        String formatted = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK)\n+                .format(eventTime);\n+        props.put(\"event\", formatted);\n+\n         cal = Calendar.getInstance();\n         cal.clear();\n         cal.set(Calendar.MONTH, Calendar.SEPTEMBER);\n         cal.set(Calendar.DAY_OF_MONTH, 9);\n         cal.set(Calendar.YEAR, 2006);\n         cal.set(Calendar.HOUR_OF_DAY, 14);\n         cal.set(Calendar.MINUTE, 30);\n-        \n-        assertEquals(cal.getTime(), foo.getMeeting());\n+\n+        Date meetingTime = cal.getTime();\n+        formatted = DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.MEDIUM, Locale.UK)\n+                .format(meetingTime);\n+        props.put(\"meeting\", formatted);\n+\n+        context.put(ActionContext.LOCALE, Locale.UK);\n+\n+        ognlUtil.setProperties(props, foo, context);\n+\n+        assertEquals(eventTime, foo.getEvent());\n+\n+        assertEquals(meetingTime, foo.getMeeting());\n         \n         //test RFC 3339 date format for JSON\n         props.put(\"event\", \"1996-12-19T16:39:57Z\");",
                "changes": 44
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/com/opensymphony/xwork2/util/AnnotationUtilsTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/com/opensymphony/xwork2/util/AnnotationUtilsTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/src/test/java/com/opensymphony/xwork2/util/AnnotationUtilsTest.java",
                "deletions": 1,
                "sha": "fdc5416b4188dff567fe6af94ebec35bb9775682",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/com/opensymphony/xwork2/util/AnnotationUtilsTest.java",
                "patch": "@@ -30,7 +30,7 @@\n import java.util.List;\n import java.util.Set;\n \n-import static org.fest.assertions.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n public class AnnotationUtilsTest extends TestCase {\n ",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/com/opensymphony/xwork2/util/ClassPathFinderTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/com/opensymphony/xwork2/util/ClassPathFinderTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/src/test/java/com/opensymphony/xwork2/util/ClassPathFinderTest.java",
                "deletions": 5,
                "sha": "17a9deb25b9099774e87d16efd235558b6aaace7",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/com/opensymphony/xwork2/util/ClassPathFinderTest.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.commons.io.IOUtils;\n \n import java.io.IOException;\n+import java.io.InputStream;\n import java.net.URL;\n import java.util.Enumeration;\n import java.util.HashMap;\n@@ -62,12 +63,14 @@ public void testFinderNotURLClassLoader() throws Exception {\n         NotURLClassLoader loader = new NotURLClassLoader(Thread.currentThread().getContextClassLoader());\n         Thread.currentThread().setContextClassLoader(loader);\n \n-        Class<?> clazz = loader.loadClass(ClassPathFinderTest.class.getName());\n-        Object test = clazz.getConstructor().newInstance();\n+        try {\n+            Class<?> clazz = loader.loadClass(ClassPathFinderTest.class.getName());\n+            Object test = clazz.getConstructor().newInstance();\n \n-        clazz.getMethod(\"testFinder\").invoke(test);\n-\n-        Thread.currentThread().setContextClassLoader(loader.parentClassLoader);\n+            clazz.getMethod(\"testFinder\").invoke(test);\n+        } finally {\n+            Thread.currentThread().setContextClassLoader(loader.parentClassLoader);\n+        }\n     }\n \n \n@@ -89,6 +92,8 @@ public void testFinderNotURLClassLoader() throws Exception {\n                     loadedClasses.put(name, defineClass(name, classBits, 0, classBits.length));\n                 } catch (IOException e) {\n                     throw new ClassNotFoundException(\"class \" + name + \" is not findable\", e);\n+                } catch (Exception e) {\n+                    loadedClasses.put(name, parentClassLoader.loadClass(name));\n                 }\n             }\n ",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 12,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/src/test/java/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.java",
                "deletions": 10,
                "sha": "20a21ce7cd76911fc8edfe66e2209ed8aa0e678a",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.java",
                "patch": "@@ -34,6 +34,7 @@\n import java.net.URLStreamHandler;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.jar.Attributes;\n import java.util.jar.JarOutputStream;\n import java.util.jar.Manifest;\n@@ -49,10 +50,13 @@ public void setUp() throws Exception {\n         fileManager = container.getInstance(FileManagerFactory.class).getFileManager();\n     }\n \n-    private void createJarFile(long time) throws Exception {\n+    private String createJarFile(long time) throws Exception {\n         Manifest manifest = new Manifest();\n         manifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, \"1.0\");\n-        FileOutputStream fos = new FileOutputStream(\"target/JarEntryRevisionTest_testNeedsReloading.jar\", false);\n+        Path jarPath = Paths.get(Thread.currentThread().getContextClassLoader()\n+                .getResource(\"xwork-jar.jar\").toURI()).getParent();\n+        File jarFile = jarPath.resolve(\"JarEntryRevisionTest_testNeedsReloading.jar\").toFile();\n+        FileOutputStream fos = new FileOutputStream(jarFile, false);\n         JarOutputStream target = new JarOutputStream(fos, manifest);\n         target.putNextEntry(new ZipEntry(\"com/opensymphony/xwork2/util/fs/\"));\n         ZipEntry entry = new ZipEntry(\"com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.class\");\n@@ -64,13 +68,14 @@ private void createJarFile(long time) throws Exception {\n         target.closeEntry();\n         target.close();\n         fos.close();\n+\n+        return jarFile.toURI().toURL().toExternalForm();\n     }\n \n     public void testNeedsReloading() throws Exception {\n         long now = System.currentTimeMillis();\n \n-        createJarFile(now);\n-        URL url = new URL(\"jar:file:target/JarEntryRevisionTest_testNeedsReloading.jar!/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.class\");\n+        URL url = new URL(\"jar:\" + createJarFile(now) + \"!/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.class\");\n         Revision entry = JarEntryRevision.build(url, fileManager);\n         assert entry != null;\n         assertFalse(entry.needsReloading());\n@@ -82,9 +87,8 @@ public void testNeedsReloading() throws Exception {\n     public void testNeedsReloadingWithContainerProvidedURLConnection() throws Exception {\n         long now = System.currentTimeMillis();\n \n-        createJarFile(now);\n         URL url = new URL(null,\n-                \"jar:file:target/JarEntryRevisionTest_testNeedsReloading.jar!/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.class\",\n+                \"jar:\" + createJarFile(now) + \"!/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.class\",\n                 new ContainerProvidedURLStreamHandler());\n         Revision entry = JarEntryRevision.build(url, fileManager);\n         assert entry != null;\n@@ -97,17 +101,15 @@ public void testNeedsReloadingWithContainerProvidedURLConnection() throws Except\n     public void testNeedsReloadingWithContainerProvidedURLConnectionEmptyProtocol() throws Exception {\n         long now = System.currentTimeMillis();\n \n-        createJarFile(now);\n-        File targetDir = new File(\"target\");\n-        String targetUrlStr = targetDir.toURI().toURL().toString();\n+        String targetUrlStr = createJarFile(now);\n         if (targetUrlStr.startsWith(\"file:\")) {\n             targetUrlStr = targetUrlStr.substring(5);//emptying protocol; we expect framework will fix it\n         }\n         if (targetUrlStr.startsWith(\"/\")) {\n             targetUrlStr = targetUrlStr.substring(1);//we expect framework will fix it also\n         }\n         URL url = new URL(null,\n-                \"zip:\" + targetUrlStr + \"JarEntryRevisionTest_testNeedsReloading.jar!/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.class\",\n+                \"zip:\" + targetUrlStr + \"!/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.class\",\n                 new ContainerProvidedURLStreamHandler());\n         Revision entry = JarEntryRevision.build(url, fileManager);\n         assert entry != null;",
                "changes": 22
            },
            {
                "status": "modified",
                "additions": 0,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/org/apache/struts2/TestUtils.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/TestUtils.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/src/test/java/org/apache/struts2/TestUtils.java",
                "deletions": 16,
                "sha": "32f5630daa8ac237eb6c77494c55f80ed28d1f52",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/org/apache/struts2/TestUtils.java",
                "patch": "@@ -91,20 +91,4 @@ public static String readContent(URL url)\n \n         return buffer.toString();\n     }\n-\n-    public static boolean isJdk9OrLater() {\n-        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n-\n-        if(loader instanceof URLClassLoader) {\n-            return false;\n-        }\n-\n-        loader = TestUtils.class.getClassLoader();\n-\n-        if(loader instanceof URLClassLoader) {\n-            return false;\n-        }\n-\n-        return true;\n-    }\n }",
                "changes": 16
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/org/apache/struts2/conversion/UploadedFileConverterTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/conversion/UploadedFileConverterTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/src/test/java/org/apache/struts2/conversion/UploadedFileConverterTest.java",
                "deletions": 1,
                "sha": "b88d2b36bac257f0b2e49e97529b47e3dd5b416f",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/org/apache/struts2/conversion/UploadedFileConverterTest.java",
                "patch": "@@ -29,7 +29,7 @@\n import java.util.Collections;\n import java.util.Map;\n \n-import static org.fest.assertions.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n public class UploadedFileConverterTest {\n ",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/org/apache/struts2/views/freemarker/FreemarkerThemeTemplateLoaderTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/core/src/test/java/org/apache/struts2/views/freemarker/FreemarkerThemeTemplateLoaderTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "core/src/test/java/org/apache/struts2/views/freemarker/FreemarkerThemeTemplateLoaderTest.java",
                "deletions": 6,
                "sha": "0c5538a6cd01227990cbf2f5a63529f85dac91fb",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/core/src/test/java/org/apache/struts2/views/freemarker/FreemarkerThemeTemplateLoaderTest.java",
                "patch": "@@ -22,18 +22,15 @@\n import org.apache.struts2.StrutsInternalTestCase;\n import org.apache.struts2.components.template.Template;\n import org.apache.struts2.components.template.TemplateEngine;\n-import org.hamcrest.BaseMatcher;\n-import org.hamcrest.Description;\n-import org.hamcrest.Matcher;\n import org.hamcrest.core.IsEqual;\n-import org.mockito.Matchers;\n \n import java.util.HashMap;\n import java.util.Map;\n \n-import static org.fest.assertions.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n+import static org.mockito.hamcrest.MockitoHamcrest.argThat;\n \n public class FreemarkerThemeTemplateLoaderTest extends StrutsInternalTestCase {\n \n@@ -65,7 +62,7 @@ public void testThemeExpansionTokenWithParent() throws Exception {\n         TemplateEngine engine = mock(TemplateEngine.class);\n         Map<String, String> props = new HashMap<String, String>();\n         props.put(\"parent\", \"foo/foo\");\n-        when(engine.getThemeProps(Matchers.argThat(new IsEqual<Template>(new Template(\"template\", \"foo/bar\", \"text.ftl\"))))).thenReturn(props);\n+        when(engine.getThemeProps(argThat(new IsEqual<>(new Template(\"template\", \"foo/bar\", \"text.ftl\"))))).thenReturn(props);\n         loader.setTemplateEngine(engine);\n \n         TemplateLoader parent = mock(TemplateLoader.class);",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 31,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/bean-validation/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/bean-validation/pom.xml?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "plugins/bean-validation/pom.xml",
                "deletions": 0,
                "sha": "f304f79b016e24d9ce3b2ed577d6e5c88ae7013e",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/bean-validation/pom.xml",
                "patch": "@@ -61,6 +61,37 @@\n             <scope>test</scope>\n         </dependency>\n \n+        <!--\n+         The Java EE API modules listed below are all marked @Deprecated(forRemoval=true), because they are scheduled\n+         for removal in Java 11. So the -add-module approach will no longer work in Java 11 out of the box.\n+         What we will need to do in Java 11 and forward is include our own copy of the Java EE APIs on the class path\n+         or module path. For example, we can add the JAX-B APIs as a maven dependency like this:\n+        -->\n+        <dependency>\n+            <groupId>javax.xml.bind</groupId>\n+            <artifactId>jaxb-api</artifactId>\n+            <version>2.3.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.sun.xml.bind</groupId>\n+            <artifactId>jaxb-core</artifactId>\n+            <version>2.3.0.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.sun.xml.bind</groupId>\n+            <artifactId>jaxb-impl</artifactId>\n+            <version>2.3.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>javax.activation</groupId>\n+            <artifactId>activation</artifactId>\n+            <version>1.1.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+\n     </dependencies>\n \n </project>\n\\ No newline at end of file",
                "changes": 31
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/embeddedjsp/src/test/java/org/apache/struts2/EmbeddedJSPResultTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/embeddedjsp/src/test/java/org/apache/struts2/EmbeddedJSPResultTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "plugins/embeddedjsp/src/test/java/org/apache/struts2/EmbeddedJSPResultTest.java",
                "deletions": 5,
                "sha": "dbc8070113c8046388249c70b8128b64e17ef1e7",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/embeddedjsp/src/test/java/org/apache/struts2/EmbeddedJSPResultTest.java",
                "patch": "@@ -231,12 +231,14 @@ public void testNotURLClassLoader() throws Exception {\n         NotURLClassLoader loader = new NotURLClassLoader(parentClassLoader);\r\n         Thread.currentThread().setContextClassLoader(loader);\r\n \r\n-        result.setLocation(\"org/apache/struts2/tag0.jsp\");\r\n-        result.execute(null);\r\n-\r\n-        assertEquals(\"Thissessionisnotsecure.OtherText\", StringUtils.deleteWhitespace(response.getContentAsString()));\r\n+        try {\r\n+            result.setLocation(\"org/apache/struts2/tag0.jsp\");\r\n+            result.execute(null);\r\n \r\n-        Thread.currentThread().setContextClassLoader(parentClassLoader);\r\n+            assertEquals(\"Thissessionisnotsecure.OtherText\", StringUtils.deleteWhitespace(response.getContentAsString()));\r\n+        } finally {\r\n+            Thread.currentThread().setContextClassLoader(parentClassLoader);\r\n+        }\r\n     }\r\n \r\n     @Override\r",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/json/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/json/pom.xml?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "plugins/json/pom.xml",
                "deletions": 2,
                "sha": "a89b221a33a9dfc88f1fa3610f0e9f0ac4a7139a",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/json/pom.xml",
                "patch": "@@ -101,8 +101,8 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>org.easytesting</groupId>\n-            <artifactId>fest-assert</artifactId>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n ",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/json/src/test/java/org/apache/struts2/json/JSONValidationInterceptorTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/json/src/test/java/org/apache/struts2/json/JSONValidationInterceptorTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "plugins/json/src/test/java/org/apache/struts2/json/JSONValidationInterceptorTest.java",
                "deletions": 1,
                "sha": "a4fd58d2d3d0e8a4897ca78bcaa8806bef3d6ead",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/json/src/test/java/org/apache/struts2/json/JSONValidationInterceptorTest.java",
                "patch": "@@ -39,7 +39,7 @@\n import java.util.HashMap;\n import java.util.Map;\n \n-import static org.fest.assertions.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n public class JSONValidationInterceptorTest extends StrutsTestCase {\n ",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/rest/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/rest/pom.xml?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "plugins/rest/pom.xml",
                "deletions": 2,
                "sha": "33324af2a3a6658c7edbb0fa2a7210f963d2a21a",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/rest/pom.xml",
                "patch": "@@ -80,8 +80,8 @@\n         </dependency>\n \n         <dependency>\n-            <groupId>org.easytesting</groupId>\n-            <artifactId>fest-assert</artifactId>\n+            <groupId>org.assertj</groupId>\n+            <artifactId>assertj-core</artifactId>\n             <scope>test</scope>\n         </dependency>\n ",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/rest/src/test/java/org/apache/struts2/rest/handler/JacksonXmlHandlerTest.java",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/plugins/rest/src/test/java/org/apache/struts2/rest/handler/JacksonXmlHandlerTest.java?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "plugins/rest/src/test/java/org/apache/struts2/rest/handler/JacksonXmlHandlerTest.java",
                "deletions": 1,
                "sha": "befefee73dcd8daa031a93a4befcaf2e1b2c556b",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/plugins/rest/src/test/java/org/apache/struts2/rest/handler/JacksonXmlHandlerTest.java",
                "patch": "@@ -28,7 +28,7 @@\n import java.io.Writer;\n import java.util.Arrays;\n \n-import static org.fest.assertions.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n \n public class JacksonXmlHandlerTest extends XWorkTestCase {\n ",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 11,
                "raw_url": "https://github.com/apache/struts/raw/2a60c1eee69f976a6e20f20add04cdc39b757ead/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/struts/contents/pom.xml?ref=2a60c1eee69f976a6e20f20add04cdc39b757ead",
                "filename": "pom.xml",
                "deletions": 8,
                "sha": "02fcdf65bae417371aab9f41921b196b5a0db5a4",
                "blob_url": "https://github.com/apache/struts/blob/2a60c1eee69f976a6e20f20add04cdc39b757ead/pom.xml",
                "patch": "@@ -110,6 +110,7 @@\n \n         <!-- Sonar -->\n         <sonar.host.url>https://builds.apache.org/analysis/</sonar.host.url>\n+        <maven-surefire-plugin.version>2.22.1</maven-surefire-plugin.version>\n     </properties>\n \n     <profiles>\n@@ -169,6 +170,7 @@\n             </activation>\n             <properties>\n                 <!-- coverall version 4.3.0 does not work with java 9, see https://github.com/trautonen/coveralls-maven-plugin/issues/112 -->\n+                <!-- TODO delete coveralls.skip property after fix of https://github.com/cobertura/cobertura/issues/271 -->\n                 <coveralls.skip>true</coveralls.skip>\n             </properties>\n             <build>\n@@ -178,7 +180,8 @@\n                             <groupId>org.apache.maven.plugins</groupId>\n                             <artifactId>maven-surefire-plugin</artifactId>\n                             <configuration>\n-                                <argLine>--add-modules java.activation --add-modules java.xml.bind</argLine>\n+                                <!-- TODO delete forkCount=0 after fix of https://issues.apache.org/jira/browse/SUREFIRE-1588 -->\n+                                <forkCount>0</forkCount>\n                             </configuration>\n                         </plugin>\n                     </plugins>\n@@ -233,12 +236,12 @@\n                 <plugin>\n                     <groupId>org.apache.maven.plugins</groupId>\n                     <artifactId>maven-surefire-plugin</artifactId>\n-                    <version>2.22.1</version>\n+                    <version>${maven-surefire-plugin.version}</version>\n                     <dependencies>\n                         <dependency>\n                             <groupId>org.apache.maven.surefire</groupId>\n                             <artifactId>surefire-junit47</artifactId>\n-                            <version>2.22.1</version>\n+                            <version>${maven-surefire-plugin.version}</version>\n                         </dependency>\n                     </dependencies>\n                     <configuration>\n@@ -972,16 +975,16 @@\n             </dependency>\n \n             <dependency>\n-                <groupId>org.easytesting</groupId>\n-                <artifactId>fest-assert</artifactId>\n-                <version>1.4</version>\n+                <groupId>org.assertj</groupId>\n+                <artifactId>assertj-core</artifactId>\n+                <version>2.9.1</version>\n                 <scope>test</scope>\n             </dependency>\n \n             <dependency>\n                 <groupId>org.mockito</groupId>\n-                <artifactId>mockito-all</artifactId>\n-                <version>1.10.19</version>\n+                <artifactId>mockito-core</artifactId>\n+                <version>2.23.0</version>\n                 <scope>test</scope>\n             </dependency>\n ",
                "changes": 19
            }
        ],
        "unit_tests": [
            "JarEntryRevisionTest.java",
            "OgnlUtilTest.java",
            "UploadedFileConverterTest.java",
            "JacksonXmlHandlerTest.java",
            "AnnotationUtilsTest.java",
            "ClassPathFinderTest.java",
            "TestUtils.java",
            "FreemarkerThemeTemplateLoaderTest.java",
            "EmbeddedJSPResultTest.java",
            "JSONValidationInterceptorTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "core/src/test/java/com/opensymphony/xwork2/util/fs/JarEntryRevisionTest.java",
        "buggy_files": [
            "pom.xml",
            "core/pom.xml",
            "apps/pom.xml",
            "apps/rest-showcase/pom.xml",
            "apps/showcase/pom.xml",
            "assembly/pom.xml",
            "plugins/pom.xml",
            "plugins/gxp/pom.xml",
            "plugins/oval/pom.xml",
            "plugins/plexus/pom.xml",
            "plugins/json/pom.xml",
            "plugins/sitemesh/pom.xml",
            "plugins/config-browser/pom.xml",
            "plugins/async/pom.xml",
            "plugins/junit/pom.xml",
            "plugins/spring/pom.xml",
            "plugins/portlet-tiles/pom.xml",
            "plugins/jasperreports/pom.xml",
            "plugins/testng/pom.xml",
            "plugins/rest/pom.xml",
            "plugins/portlet/pom.xml",
            "plugins/embeddedjsp/pom.xml",
            "plugins/sitegraph/pom.xml",
            "plugins/osgi/pom.xml",
            "plugins/cdi/pom.xml",
            "plugins/jfreechart/pom.xml",
            "plugins/bean-validation/pom.xml",
            "plugins/dwr/pom.xml",
            "plugins/convention/pom.xml",
            "plugins/javatemplates/pom.xml",
            "plugins/pell-multipart/pom.xml",
            "plugins/tiles/pom.xml",
            "bundles/pom.xml",
            "bundles/admin/pom.xml",
            "bundles/demo/pom.xml",
            "bom/pom.xml",
            "core/src/main/java/com/opensymphony/xwork2/util/fs/JarEntryRevision.java",
            "core/src/main/java/org/apache/struts2/views/freemarker/FreemarkerThemeTemplateLoader.java",
            "assembly/src/main/assembly/min-lib.xml",
            "core/src/main/java/org/apache/struts2/conversion/UploadedFileConverter.java",
            ".travis.yml",
            "plugins/embeddedjsp/src/main/java/org/apache/struts2/EmbeddedJSPResult.java",
            "core/src/main/java/com/opensymphony/xwork2/ognl/OgnlUtil.java",
            "plugins/json/src/main/java/org/apache/struts2/json/JSONValidationInterceptor.java",
            ".gitignore",
            "core/src/main/java/com/opensymphony/xwork2/util/AnnotationUtils.java",
            "core/src/main/java/com/opensymphony/xwork2/util/ClassPathFinder.java",
            "plugins/rest/src/main/java/org/apache/struts2/rest/handler/JacksonXmlHandler.java"
        ],
        "fixed": true
    }
]