{
    "ignite_253b002": {
        "bug_id": "ignite_253b002",
        "commit": "https://github.com/apache/ignite/commit/253b00221d4d02157c9c478c027653525d71b363",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "patch": "@@ -36,11 +36,6 @@\n      */\n     public void stop(boolean deallocate) throws IgniteException;\n \n-    /**\n-     * @return {@code True} if this memory is stopped.\n-     */\n-    public boolean stopped();\n-\n     /**\n      * @return Page size in bytes.\n      */",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "sha": "bd03c5473bcd2ebb6c81feaa8ac22bdb1d97d1fe",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "patch": "@@ -273,11 +273,6 @@ public PageMemoryNoStoreImpl(\n         }\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public boolean stopped() {\n-        return stopped;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public ByteBuffer pageBuffer(long pageAddr) {\n         return wrapPointer(pageAddr, pageSize());",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "sha": "c60c63c53914a8ec89149a4e3a5a2654178b3003",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "deletions": 2,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "patch": "@@ -2779,8 +2779,7 @@ private CacheGroupContext startCacheGroup(\n \n         DataRegion dataRegion = sharedCtx.database().dataRegion(memPlcName);\n \n-        if (sharedCtx.isLazyMemoryAllocation() &&\n-            (dataRegion != null && dataRegion.pageMemory().stopped()) &&\n+        if (sharedCtx.isLazyMemoryAllocation() && dataRegion != null &&\n             (!ctx.clientNode() || desc.config().getCacheMode() == LOCAL)) {\n             dataRegion.pageMemory().start();\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "sha": "e0ba2da0ba67ab6160534802b2aef443e3cfd3fc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "deletions": 4,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "patch": "@@ -440,10 +440,6 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n         }\n     }\n \n-    @Override public boolean stopped() {\n-        return stopped;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void releasePage(int grpId, long pageId, long page) {\n         assert !stopped;\n@@ -1779,6 +1775,9 @@ void beforeReleaseWrite(FullPageId pageId, long ptr, boolean pageWalRec) throws\n      * @return Segment.\n      */\n     private Segment segment(int grpId, long pageId) {\n+        if (segments == null)\n+            System.out.println(\"PageMemoryImpl.segment\");\n+\n         int idx = segmentIndex(grpId, pageId, segments.length);\n \n         return segments[idx];",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "sha": "a94c32083034d6f64009e1bd04e53e975ddd3076",
                "status": "modified"
            }
        ],
        "message": "IGNITE-9113: NPE fixes for some modes.",
        "parent": "https://github.com/apache/ignite/commit/394b104c9e20f25dc1a59fcb19843fae6d3f2603",
        "repo": "ignite",
        "unit_tests": [
            "PageMemoryImplTest.java"
        ]
    },
    "ignite_6b1265c": {
        "bug_id": "ignite_6b1265c",
        "commit": "https://github.com/apache/ignite/commit/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "patch": "@@ -318,11 +318,6 @@\n         rmtNodes.clear();\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator auth) {\n-        // No-op.\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void sendCustomEvent(DiscoverySpiCustomMessage evt) {\n         if (segmented)",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "sha": "e672d6490b14fb1048d50d90e425f54ad83cdaf7",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "deletions": 14,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "patch": "@@ -115,9 +115,6 @@\n     /** Response on join request from coordinator (in case of duplicate ID or auth failure). */\n     private final GridTuple<TcpDiscoveryAbstractMessage> joinRes = F.t1();\n \n-    /** Node authenticator. */\n-    private DiscoverySpiNodeAuthenticator nodeAuth;\n-\n     /** Mutex. */\n     private final Object mux = new Object();\n \n@@ -630,11 +627,6 @@ private boolean pingNode(TcpDiscoveryNode node) {\n         spiStop0(true);\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator nodeAuth) {\n-        this.nodeAuth = nodeAuth;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void sendCustomEvent(DiscoverySpiCustomMessage evt) {\n         try {\n@@ -680,10 +672,10 @@ private void joinTopology() throws IgniteSpiException {\n                 if (log.isDebugEnabled())\n                     log.debug(\"Join request message has not been sent (local node is the first in the topology).\");\n \n-                if (nodeAuth != null) {\n+                if (spi.nodeAuth != null) {\n                     // Authenticate local node.\n                     try {\n-                        SecurityContext subj = nodeAuth.authenticateNode(locNode, locCred);\n+                        SecurityContext subj = spi.nodeAuth.authenticateNode(locNode, locCred);\n \n                         if (subj == null)\n                             throw new IgniteSpiException(\"Authentication failed for local node: \" + locNode.id());\n@@ -2469,12 +2461,12 @@ private void processJoinRequestMessage(TcpDiscoveryJoinRequestMessage msg) {\n                     return;\n                 }\n \n-                if (nodeAuth != null) {\n+                if (spi.nodeAuth != null) {\n                     // Authenticate node first.\n                     try {\n                         SecurityCredentials cred = unmarshalCredentials(node);\n \n-                        SecurityContext subj = nodeAuth.authenticateNode(node, cred);\n+                        SecurityContext subj = spi.nodeAuth.authenticateNode(node, cred);\n \n                         if (subj == null) {\n                             // Node has not pass authentication.\n@@ -2843,7 +2835,7 @@ private void processNodeAddedMessage(TcpDiscoveryNodeAddedMessage msg) {\n                     return;\n                 }\n \n-                if (!isLocalNodeCoordinator() && nodeAuth != null && nodeAuth.isGlobalNodeAuthentication()) {\n+                if (!isLocalNodeCoordinator() && spi.nodeAuth != null && spi.nodeAuth.isGlobalNodeAuthentication()) {\n                     boolean authFailed = true;\n \n                     try {\n@@ -2861,7 +2853,7 @@ private void processNodeAddedMessage(TcpDiscoveryNodeAddedMessage msg) {\n                             authFailed = false;\n                         }\n                         else {\n-                            SecurityContext subj = nodeAuth.authenticateNode(node, cred);\n+                            SecurityContext subj = spi.nodeAuth.authenticateNode(node, cred);\n \n                             SecurityContext coordSubj = spi.ignite().configuration().getMarshaller().unmarshal(\n                                 node.<byte[]>attribute(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT),",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "sha": "57c13d668cc171c61b0c2b2fdf26cbf831ba7d75",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "patch": "@@ -112,11 +112,6 @@ protected void onException(String msg, Exception e){\n      */\n     public abstract void disconnect() throws IgniteSpiException;\n \n-    /**\n-     * @param auth Auth.\n-     */\n-    public abstract void setAuthenticator(DiscoverySpiNodeAuthenticator auth);\n-\n     /**\n      * @param msg Message.\n      */",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "sha": "f285279cda828e68f75764f20660bb5ec61e8032",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "patch": "@@ -294,6 +294,9 @@\n     @SuppressWarnings({\"FieldAccessedSynchronizedAndUnsynchronized\"})\n     protected long ipFinderCleanFreq = DFLT_IP_FINDER_CLEAN_FREQ;\n \n+    /** Node authenticator. */\n+    protected DiscoverySpiNodeAuthenticator nodeAuth;\n+\n     /** Context initialization latch. */\n     @GridToStringExclude\n     private final CountDownLatch ctxInitLatch = new CountDownLatch(1);\n@@ -353,7 +356,7 @@\n \n     /** {@inheritDoc} */\n     @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator auth) {\n-        impl.setAuthenticator(auth);\n+        nodeAuth = auth;\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "sha": "1b8424ca76a1204181792e3443784581d732e0a6",
                "status": "modified"
            }
        ],
        "message": "# IGNITE-943 Bug fix: NPE in setAuthenticator",
        "parent": "https://github.com/apache/ignite/commit/2bc07956a828ac836641f4fbe6ae0db7b3cc1793",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpDiscoverySpi.java"
        ]
    },
    "ignite_7ada6a5": {
        "bug_id": "ignite_7ada6a5",
        "commit": "https://github.com/apache/ignite/commit/7ada6a5f5a339b1282bd554c068b380254f78065",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/ignite/blob/7ada6a5f5a339b1282bd554c068b380254f78065/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java?ref=7ada6a5f5a339b1282bd554c068b380254f78065",
                "deletions": 6,
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "patch": "@@ -69,7 +69,7 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                 throw new CacheException(\"Failed to find class: \" + clsName, e);\n             }\n             catch (NoSuchMethodException e) {\n-                throw new CacheException(\"Failed to find empty constructor for class: \" + clsName, e);\n+                throw new CacheException(\"Failed to find default constructor for class: \" + clsName, e);\n             }\n \n             setters = U.newHashMap(fields.size());\n@@ -87,17 +87,17 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                         getters.put(field.getJavaName(), cls.getMethod(\"is\" + prop));\n                     }\n                     catch (NoSuchMethodException e) {\n-                        throw new CacheException(\"Failed to find getter for property \" + field.getJavaName() +\n-                            \" of class: \" + cls.getName(), e);\n+                        throw new CacheException(\"Failed to find getter in pojo class [class name: \" + clsName +\n+                            \", property: \" + field.getJavaName() + \"]\", e);\n                     }\n                 }\n \n                 try {\n                     setters.put(field.getJavaName(), cls.getMethod(\"set\" + prop, field.getJavaType()));\n                 }\n                 catch (NoSuchMethodException e) {\n-                    throw new CacheException(\"Failed to find setter for property \" + field.getJavaName() +\n-                        \" of class: \" + clsName, e);\n+                    throw new CacheException(\"Failed to find setter in pojo class [class name: \" + clsName +\n+                        \", property: \" + field.getJavaName() + \"]\", e);\n                 }\n             }\n         }\n@@ -157,12 +157,19 @@ protected Object newInstance() throws CacheLoaderException {\n         Map<String, Integer> loadColIdxs, ResultSet rs) throws CacheLoaderException {\n         PojoMethodsCache mc = mtdsCache.get(cacheName).get(typeName);\n \n+        if (mc == null)\n+            throw new CacheLoaderException(\"Failed to find cache type metadata for type: \" + typeName);\n+\n         Object obj = mc.newInstance();\n \n         try {\n             for (CacheTypeFieldMetadata field : fields) {\n                 Method setter = mc.setters.get(field.getJavaName());\n \n+                if (setter == null)\n+                    throw new CacheLoaderException(\"Failed to find setter in pojo class [class name:\" + typeName +\n+                        \", property: \" + field.getJavaName() + \"]\");\n+\n                 Integer colIdx = loadColIdxs.get(field.getDatabaseName());\n \n                 setter.invoke(obj, getColumnValue(rs, colIdx, field.getJavaType()));\n@@ -181,7 +188,16 @@ protected Object newInstance() throws CacheLoaderException {\n         try {\n             PojoMethodsCache mc = mtdsCache.get(cacheName).get(typeName);\n \n-            return mc.getters.get(fieldName).invoke(obj);\n+            if (mc == null)\n+                throw new CacheException(\"Failed to find cache type metadata for type: \" + typeName);\n+\n+            Method getter = mc.getters.get(fieldName);\n+\n+            if (getter == null)\n+                throw new CacheLoaderException(\"Failed to find getter in pojo class [class name:\" + typeName +\n+                    \", property: \" + fieldName + \"]\");\n+\n+            return getter.invoke(obj);\n         }\n         catch (Exception e) {\n             throw new CacheException(\"Failed to read object of class: \" + typeName, e);",
                "raw_url": "https://github.com/apache/ignite/raw/7ada6a5f5a339b1282bd554c068b380254f78065/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "sha": "0c6292d302f76d3e1ccbb0a21de3aa0a41226eb0",
                "status": "modified"
            }
        ],
        "message": "# ignite-281 Fixed npe CacheJdbcPojoStore.",
        "parent": "https://github.com/apache/ignite/commit/dd6c24f4e45cf136aa1d496028c20ce5f0d1a35d",
        "repo": "ignite",
        "unit_tests": [
            "CacheJdbcPojoStoreTest.java"
        ]
    },
    "ignite_895771a": {
        "bug_id": "ignite_895771a",
        "commit": "https://github.com/apache/ignite/commit/895771a79d8acca3baf06c23bf3f82483ec62d6f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/895771a79d8acca3baf06c23bf3f82483ec62d6f/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=895771a79d8acca3baf06c23bf3f82483ec62d6f",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "patch": "@@ -1458,8 +1458,10 @@ public CommunicationListener getListener() {\n                     }\n                 };\n \n+                boolean clientMode = Boolean.TRUE.equals(ignite.configuration().isClientMode());\n+\n                 IgniteBiInClosure<GridNioSession, Integer> queueSizeMonitor =\n-                    !ignite.configuration().isClientMode() && slowClientQueueLimit > 0 ?\n+                    !clientMode && slowClientQueueLimit > 0 ?\n                     new CI2<GridNioSession, Integer>() {\n                         @Override public void apply(GridNioSession ses, Integer qSize) {\n                             checkClientQueueSize(ses, qSize);",
                "raw_url": "https://github.com/apache/ignite/raw/895771a79d8acca3baf06c23bf3f82483ec62d6f/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "sha": "bbb9b1ca06b92a3186579141f26b41b8bcbb1d20",
                "status": "modified"
            }
        ],
        "message": "# ignite-sprint-6 fixed NPE in comm spi unit tests",
        "parent": "https://github.com/apache/ignite/commit/ef4abeba881f079cab08af9ade99fe52ecf5d26d",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpCommunicationSpi.java"
        ]
    },
    "ignite_95850b4": {
        "bug_id": "ignite_95850b4",
        "commit": "https://github.com/apache/ignite/commit/95850b47bde6df109ecd029d6a3a59b8e3772f81",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=95850b47bde6df109ecd029d6a3a59b8e3772f81",
                "deletions": 2,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "patch": "@@ -1858,11 +1858,11 @@ public static synchronized boolean isLocalHostChanged() throws IOException {\n      * @return List of reachable addresses.\n      */\n     public static List<InetAddress> filterReachable(Collection<InetAddress> addrs) {\n-        final int reachTimeout = 2000;\n-\n         if (addrs.isEmpty())\n             return Collections.emptyList();\n \n+        final int reachTimeout = 2000;\n+\n         if (addrs.size() == 1) {\n             InetAddress addr = F.first(addrs);\n ",
                "raw_url": "https://github.com/apache/ignite/raw/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "sha": "0668708c8e15904b19bc84d92f001004d8911663",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/ignite/blob/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=95850b47bde6df109ecd029d6a3a59b8e3772f81",
                "deletions": 6,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "patch": "@@ -2885,22 +2885,27 @@ protected GridCommunicationClient createTcpClient(ClusterNode node, int connIdx)\n \n         Set<InetAddress> allInetAddrs = U.newHashSet(addrs.size());\n \n-        for (InetSocketAddress addr : addrs)\n-            allInetAddrs.add(addr.getAddress());\n+        for (InetSocketAddress addr : addrs) {\n+            // Skip unresolved as addr.getAddress() can return null.\n+            if(!addr.isUnresolved())\n+                allInetAddrs.add(addr.getAddress());\n+        }\n \n         List<InetAddress> reachableInetAddrs = U.filterReachable(allInetAddrs);\n \n         if (reachableInetAddrs.size() < allInetAddrs.size()) {\n             LinkedHashSet<InetSocketAddress> addrs0 = U.newLinkedHashSet(addrs.size());\n \n+            List<InetSocketAddress> unreachableInetAddr = new ArrayList<>(allInetAddrs.size() - reachableInetAddrs.size());\n+\n             for (InetSocketAddress addr : addrs) {\n                 if (reachableInetAddrs.contains(addr.getAddress()))\n                     addrs0.add(addr);\n+                else\n+                    unreachableInetAddr.add(addr);\n             }\n-            for (InetSocketAddress addr : addrs) {\n-                if (!reachableInetAddrs.contains(addr.getAddress()))\n-                    addrs0.add(addr);\n-            }\n+\n+            addrs0.addAll(unreachableInetAddr);\n \n             addrs = addrs0;\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "sha": "769a02ed0da8cd26921346e9d3fca4fe45f7bcca",
                "status": "modified"
            }
        ],
        "message": "IGNITE-5225: Fix NPE caused by changes in IGNITE-4577.\n\n(cherry picked from commit d463840)",
        "parent": "https://github.com/apache/ignite/commit/dacf973ef8580ff649fc2dafd5a55a420edf7759",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpCommunicationSpi.java"
        ]
    },
    "ignite_a1ec83a": {
        "bug_id": "ignite_a1ec83a",
        "commit": "https://github.com/apache/ignite/commit/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=a1ec83a826f1a87b88dd16f93d0ee3b3168439b9",
                "deletions": 0,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "patch": "@@ -2781,6 +2781,9 @@ private void sendMessage0(ClusterNode node, Message msg, IgniteInClosure<IgniteE\n                 while (retry);\n             }\n             catch (Throwable t) {\n+                if (stopping)\n+                    throw new IgniteSpiException(\"Node is stopping.\", t);\n+\n                 log.error(\"Failed to send message to remote node [node=\" + node + \", msg=\" + msg + ']', t);\n \n                 if (t instanceof Error)",
                "raw_url": "https://github.com/apache/ignite/raw/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "sha": "243f707bce7a59038c895d4c3664eccfc03bab0b",
                "status": "modified"
            }
        ],
        "message": "IGNITE-11293 Fix of NPE in TcpCommunicationSpi caused by simultaneous node stopping. - Fixes #6081.\n\nSigned-off-by: Dmitriy Govorukhin <dmitriy.govorukhin@gmail.com>",
        "parent": "https://github.com/apache/ignite/commit/033170d90f6c0618b9d6a3fd997e13a5ec1fff89",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpCommunicationSpi.java"
        ]
    },
    "ignite_ce153e4": {
        "bug_id": "ignite_ce153e4",
        "commit": "https://github.com/apache/ignite/commit/ce153e4d76122d2c1f060018530e94fe443ff2bf",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/ignite/blob/ce153e4d76122d2c1f060018530e94fe443ff2bf/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java?ref=ce153e4d76122d2c1f060018530e94fe443ff2bf",
                "deletions": 8,
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "patch": "@@ -87,17 +87,17 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                         getters.put(field.getJavaName(), cls.getMethod(\"is\" + prop));\n                     }\n                     catch (NoSuchMethodException e) {\n-                        throw new CacheException(\"Failed to find getter in pojo class [class name: \" + clsName +\n-                            \", property: \" + field.getJavaName() + \"]\", e);\n+                        throw new CacheException(\"Failed to find getter in POJO class [class name=\" + clsName +\n+                            \", property=\" + field.getJavaName() + \"]\", e);\n                     }\n                 }\n \n                 try {\n                     setters.put(field.getJavaName(), cls.getMethod(\"set\" + prop, field.getJavaType()));\n                 }\n                 catch (NoSuchMethodException e) {\n-                    throw new CacheException(\"Failed to find setter in pojo class [class name: \" + clsName +\n-                        \", property: \" + field.getJavaName() + \"]\", e);\n+                    throw new CacheException(\"Failed to find setter in POJO class [class name=\" + clsName +\n+                        \", property=\" + field.getJavaName() + \"]\", e);\n                 }\n             }\n         }\n@@ -167,8 +167,8 @@ protected Object newInstance() throws CacheLoaderException {\n                 Method setter = mc.setters.get(field.getJavaName());\n \n                 if (setter == null)\n-                    throw new CacheLoaderException(\"Failed to find setter in pojo class [class name:\" + typeName +\n-                        \", property: \" + field.getJavaName() + \"]\");\n+                    throw new CacheLoaderException(\"Failed to find setter in POJO class [class name=\" + typeName +\n+                        \", property=\" + field.getJavaName() + \"]\");\n \n                 Integer colIdx = loadColIdxs.get(field.getDatabaseName());\n \n@@ -194,8 +194,8 @@ protected Object newInstance() throws CacheLoaderException {\n             Method getter = mc.getters.get(fieldName);\n \n             if (getter == null)\n-                throw new CacheLoaderException(\"Failed to find getter in pojo class [class name:\" + typeName +\n-                    \", property: \" + fieldName + \"]\");\n+                throw new CacheLoaderException(\"Failed to find getter in POJO class [class name=\" + typeName +\n+                    \", property=\" + fieldName + \"]\");\n \n             return getter.invoke(obj);\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/ce153e4d76122d2c1f060018530e94fe443ff2bf/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "sha": "f2d6cae5c79bff27a9987faba4aa10b17a846054",
                "status": "modified"
            }
        ],
        "message": "# ignite-281 Fixed npe CacheJdbcPojoStore.",
        "parent": "https://github.com/apache/ignite/commit/65a852be839581099688593dabae75490798f1b2",
        "repo": "ignite",
        "unit_tests": [
            "CacheJdbcPojoStoreTest.java"
        ]
    },
    "ignite_d0dac7d": {
        "bug_id": "ignite_d0dac7d",
        "commit": "https://github.com/apache/ignite/commit/d0dac7de1e573ae3870e20adfe18abf61caa84ec",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/ignite/blob/d0dac7de1e573ae3870e20adfe18abf61caa84ec/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=d0dac7de1e573ae3870e20adfe18abf61caa84ec",
                "deletions": 13,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "patch": "@@ -1766,7 +1766,7 @@ private void notifyDiscovery(int type, long topVer, TcpDiscoveryNode node) {\n                 log.debug(\"Discovery notification [node=\" + node + \", spiState=\" + spiState +\n                     \", type=\" + U.gridEventName(type) + \", topVer=\" + topVer + ']');\n \n-            Collection<ClusterNode> top = F.<TcpDiscoveryNode, ClusterNode>upcast(ring.visibleNodes());\n+            Collection<ClusterNode> top = F.upcast(ring.visibleNodes());\n \n             Map<Long, Collection<ClusterNode>> hist = updateTopologyHistory(topVer, top);\n \n@@ -4522,20 +4522,22 @@ private void notifyDiscoveryListener(TcpDiscoveryCustomEventMessage msg) {\n \n                 TcpDiscoveryNode node = ring.node(msg.creatorNodeId());\n \n-                try {\n-                    Serializable msgObj = marsh.unmarshal(msg.messageBytes(), U.gridClassLoader());\n+                if (node != null) {\n+                    try {\n+                        Serializable msgObj = marsh.unmarshal(msg.messageBytes(), U.gridClassLoader());\n \n-                    lsnr.onDiscovery(DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT,\n-                        msg.topologyVersion(),\n-                        node,\n-                        snapshot,\n-                        hist,\n-                        msgObj);\n+                        lsnr.onDiscovery(DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT,\n+                            msg.topologyVersion(),\n+                            node,\n+                            snapshot,\n+                            hist,\n+                            msgObj);\n \n-                    msg.messageBytes(marsh.marshal(msgObj));\n-                }\n-                catch (IgniteCheckedException e) {\n-                    U.error(log, \"Failed to unmarshal discovery custom message.\", e);\n+                        msg.messageBytes(marsh.marshal(msgObj));\n+                    }\n+                    catch (IgniteCheckedException e) {\n+                        U.error(log, \"Failed to unmarshal discovery custom message.\", e);\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/d0dac7de1e573ae3870e20adfe18abf61caa84ec/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "sha": "8051172e63104e8a74bb6602b01d3cd3b92e942c",
                "status": "modified"
            }
        ],
        "message": "# IGNITE-831 Fix NPE",
        "parent": "https://github.com/apache/ignite/commit/5ffaa4cb6f35ead8fc94c563d52e98cc5241acbc",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpDiscoverySpi.java"
        ]
    },
    "ignite_f2a5a93": {
        "bug_id": "ignite_f2a5a93",
        "commit": "https://github.com/apache/ignite/commit/f2a5a93f0748f905ede77ff84787947a0893c3f8",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/ignite/blob/f2a5a93f0748f905ede77ff84787947a0893c3f8/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java?ref=f2a5a93f0748f905ede77ff84787947a0893c3f8",
                "deletions": 7,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "patch": "@@ -1014,14 +1014,21 @@ private void copyInBuffer(long absPtr, ByteBuffer tmpBuf) {\n     @Override public long loadedPages() {\n         long total = 0;\n \n-        for (Segment seg : segments) {\n-            seg.readLock().lock();\n+        Segment[] segments = this.segments;\n \n-            try {\n-                total += seg.loadedPages.size();\n-            }\n-            finally {\n-                seg.readLock().unlock();\n+        if (segments != null) {\n+            for (Segment seg : segments) {\n+                if (seg == null)\n+                    break;\n+\n+                seg.readLock().lock();\n+\n+                try {\n+                    total += seg.loadedPages.size();\n+                }\n+                finally {\n+                    seg.readLock().unlock();\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/ignite/raw/f2a5a93f0748f905ede77ff84787947a0893c3f8/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "sha": "6bb5c337db0f90056259b2699753771461259513",
                "status": "modified"
            }
        ],
        "message": "Quick fix for NPE in PageMemoryImpl.loadedPages",
        "parent": "https://github.com/apache/ignite/commit/fd09d301b14a2e20774503359bcef4280a67da92",
        "repo": "ignite",
        "unit_tests": [
            "PageMemoryImplTest.java"
        ]
    }
}