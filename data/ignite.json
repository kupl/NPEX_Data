{
    "ignite_0d6fb1a": {
        "bug_id": "ignite_0d6fb1a",
        "commit": "https://github.com/apache/ignite/commit/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ignite/blob/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java?ref=0d6fb1ad73e8ed448dabe7c0cc631222835b52c4",
                "deletions": 1,
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "patch": "@@ -441,7 +441,7 @@ public int put(long pageAddr, int off, Value val, int maxSize) {\n                     size = (short)s.length;\n                 else {\n                     s = trimUTF8(s, maxSize - 3);\n-                    size = (short)(s.length | 0x8000);\n+                    size = (short)(s == null ? 0 : s.length | 0x8000);\n                 }\n \n                 if (s == null) {",
                "raw_url": "https://github.com/apache/ignite/raw/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "sha": "19cf857fece29f356d79697bc57850802241012f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ignite/blob/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java?ref=0d6fb1ad73e8ed448dabe7c0cc631222835b52c4",
                "deletions": 0,
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "patch": "@@ -167,6 +167,10 @@ public void testStringTruncate() throws Exception {\n             assertTrue(ih.isValueFull(pageAddr, off));\n \n             assertEquals(\"aaa\", ih.get(pageAddr, off, 3 + 5).getString());\n+\n+            ih.put(pageAddr, off, ValueString.get(\"\\u20acaaa\"), 3 + 2);\n+\n+            assertNull(ih.get(pageAddr, off, 3 + 2));\n         }\n         finally {\n             if (page != 0L)",
                "raw_url": "https://github.com/apache/ignite/raw/0d6fb1ad73e8ed448dabe7c0cc631222835b52c4/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "sha": "a2a3a7204cc6b1273ebb047edecf78b3b00f4fe3",
                "status": "modified"
            }
        ],
        "message": "IGNITE-5204: Fixed NPE on certain data with index inlining. This closes #2115.",
        "parent": "https://github.com/apache/ignite/commit/ea4420e6aad509c4ae58d6d0880918c98fd1959a",
        "repo": "ignite",
        "unit_tests": [
            "InlineIndexHelperTest.java"
        ]
    },
    "ignite_253b002": {
        "bug_id": "ignite_253b002",
        "commit": "https://github.com/apache/ignite/commit/253b00221d4d02157c9c478c027653525d71b363",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "patch": "@@ -36,11 +36,6 @@\n      */\n     public void stop(boolean deallocate) throws IgniteException;\n \n-    /**\n-     * @return {@code True} if this memory is stopped.\n-     */\n-    public boolean stopped();\n-\n     /**\n      * @return Page size in bytes.\n      */",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/PageMemory.java",
                "sha": "bd03c5473bcd2ebb6c81feaa8ac22bdb1d97d1fe",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "patch": "@@ -273,11 +273,6 @@ public PageMemoryNoStoreImpl(\n         }\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public boolean stopped() {\n-        return stopped;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public ByteBuffer pageBuffer(long pageAddr) {\n         return wrapPointer(pageAddr, pageSize());",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "sha": "c60c63c53914a8ec89149a4e3a5a2654178b3003",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "deletions": 2,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "patch": "@@ -2779,8 +2779,7 @@ private CacheGroupContext startCacheGroup(\n \n         DataRegion dataRegion = sharedCtx.database().dataRegion(memPlcName);\n \n-        if (sharedCtx.isLazyMemoryAllocation() &&\n-            (dataRegion != null && dataRegion.pageMemory().stopped()) &&\n+        if (sharedCtx.isLazyMemoryAllocation() && dataRegion != null &&\n             (!ctx.clientNode() || desc.config().getCacheMode() == LOCAL)) {\n             dataRegion.pageMemory().start();\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "sha": "e0ba2da0ba67ab6160534802b2aef443e3cfd3fc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java?ref=253b00221d4d02157c9c478c027653525d71b363",
                "deletions": 4,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "patch": "@@ -440,10 +440,6 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n         }\n     }\n \n-    @Override public boolean stopped() {\n-        return stopped;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void releasePage(int grpId, long pageId, long page) {\n         assert !stopped;\n@@ -1779,6 +1775,9 @@ void beforeReleaseWrite(FullPageId pageId, long ptr, boolean pageWalRec) throws\n      * @return Segment.\n      */\n     private Segment segment(int grpId, long pageId) {\n+        if (segments == null)\n+            System.out.println(\"PageMemoryImpl.segment\");\n+\n         int idx = segmentIndex(grpId, pageId, segments.length);\n \n         return segments[idx];",
                "raw_url": "https://github.com/apache/ignite/raw/253b00221d4d02157c9c478c027653525d71b363/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "sha": "a94c32083034d6f64009e1bd04e53e975ddd3076",
                "status": "modified"
            }
        ],
        "message": "IGNITE-9113: NPE fixes for some modes.",
        "parent": "https://github.com/apache/ignite/commit/394b104c9e20f25dc1a59fcb19843fae6d3f2603",
        "repo": "ignite",
        "unit_tests": [
            "PageMemoryImplTest.java"
        ]
    },
    "ignite_271550f": {
        "bug_id": "ignite_271550f",
        "commit": "https://github.com/apache/ignite/commit/271550fed7662c5032f9e4fb49cd135f3a55a46e",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/ignite/blob/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java?ref=271550fed7662c5032f9e4fb49cd135f3a55a46e",
                "deletions": 9,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "patch": "@@ -583,7 +583,7 @@ public void init() throws IgniteInterruptedCheckedException {\n                             onDone(exchId.topologyVersion());\n                         }\n                         else\n-                            sendPartitions();\n+                            sendPartitions(oldest);\n                     }\n                     else {\n                         rmtIds = Collections.emptyList();\n@@ -816,9 +816,11 @@ public void init() throws IgniteInterruptedCheckedException {\n             if (log.isDebugEnabled())\n                 log.debug(\"Initialized future: \" + this);\n \n+            ClusterNode oldest = oldestNode.get();\n+\n             // If this node is not oldest.\n-            if (!oldestNode.get().id().equals(cctx.localNodeId()))\n-                sendPartitions();\n+            if (!oldest.id().equals(cctx.localNodeId()))\n+                sendPartitions(oldest);\n             else {\n                 boolean allReceived = allReceived();\n \n@@ -948,11 +950,9 @@ private void sendAllPartitions(Collection<? extends ClusterNode> nodes, GridDhtP\n     }\n \n     /**\n-     *\n+     * @param oldestNode Oldest node.\n      */\n-    private void sendPartitions() {\n-        ClusterNode oldestNode = this.oldestNode.get();\n-\n+    private void sendPartitions(ClusterNode oldestNode) {\n         try {\n             sendLocalPartitions(oldestNode, exchId);\n         }\n@@ -1402,8 +1402,10 @@ else if (rmtIds.contains(nodeId)) {\n      *\n      */\n     private void recheck() {\n+        ClusterNode oldest = oldestNode.get();\n+\n         // If this is the oldest node.\n-        if (oldestNode.get().id().equals(cctx.localNodeId())) {\n+        if (oldest.id().equals(cctx.localNodeId())) {\n             Collection<UUID> remaining = remaining();\n \n             if (!remaining.isEmpty()) {\n@@ -1423,7 +1425,7 @@ private void recheck() {\n             }\n         }\n         else\n-            sendPartitions();\n+            sendPartitions(oldest);\n \n         // Schedule another send.\n         scheduleRecheck();",
                "raw_url": "https://github.com/apache/ignite/raw/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/distributed/dht/preloader/GridDhtPartitionsExchangeFuture.java",
                "sha": "cbf6b405c86117178e63e7d0f742493de879593c",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/ignite/blob/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=271550fed7662c5032f9e4fb49cd135f3a55a46e",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "patch": "@@ -1791,7 +1791,13 @@ private void checkAttributePresence(ClusterNode node, String attrName) {\n         if (log.isTraceEnabled())\n             log.trace(\"Sending message to node [node=\" + node + \", msg=\" + msg + ']');\n \n-        if (node.id().equals(getLocalNode().id()))\n+        ClusterNode localNode = getLocalNode();\n+\n+        if (localNode == null)\n+            throw new IgniteSpiException(\"Local node has not been started or fully initialized \" +\n+                \"[isStopping=\" + getSpiContext().isStopping() + ']');\n+\n+        if (node.id().equals(localNode.id()))\n             notifyListener(node.id(), msg, NOOP);\n         else {\n             GridCommunicationClient client = null;\n@@ -1804,7 +1810,7 @@ private void checkAttributePresence(ClusterNode node, String attrName) {\n \n                     UUID nodeId = null;\n \n-                    if (!client.async() && !getSpiContext().localNode().version().equals(node.version()))\n+                    if (!client.async() && !localNode.version().equals(node.version()))\n                         nodeId = node.id();\n \n                     retry = client.sendMessage(nodeId, msg);\n@@ -2435,8 +2441,14 @@ else if (log.isDebugEnabled())\n                     else\n                         ch.write(ByteBuffer.wrap(U.IGNITE_HEADER));\n \n+                    ClusterNode localNode = getLocalNode();\n+\n+                    if (localNode == null)\n+                        throw new IgniteCheckedException(\"Local node has not been started or \" +\n+                            \"fully initialized [isStopping=\" + getSpiContext().isStopping() + ']');\n+\n                     if (recovery != null) {\n-                        HandshakeMessage msg = new HandshakeMessage(getLocalNode().id(),\n+                        HandshakeMessage msg = new HandshakeMessage(localNode.id(),\n                             recovery.incrementConnectCount(),\n                             recovery.receivedCount());\n \n@@ -2629,7 +2641,20 @@ private void onException(String msg, Exception e) {\n      * @return Node ID message.\n      */\n     private NodeIdMessage nodeIdMessage() {\n-        return new NodeIdMessage(getLocalNode().id());\n+        ClusterNode localNode = getLocalNode();\n+\n+        UUID id;\n+\n+        if (localNode == null) {\n+            U.warn(log, \"Local node is not started or fully initialized [isStopping=\" +\n+                    getSpiContext().isStopping() + ']');\n+\n+            id = new UUID(0, 0);\n+        }\n+        else\n+            id = localNode.id();\n+\n+        return new NodeIdMessage(id);\n     }\n \n     /** {@inheritDoc} */\n@@ -3145,7 +3170,13 @@ else if (log.isDebugEnabled())\n             }\n \n             try {\n-                UUID id = getLocalNode().id();\n+                ClusterNode localNode = getLocalNode();\n+\n+                if (localNode == null)\n+                    throw new IgniteSpiException(\"Local node has not been started or fully initialized \" +\n+                        \"[isStopping=\" + getSpiContext().isStopping() + ']');\n+\n+                UUID id = localNode.id();\n \n                 NodeIdMessage msg = new NodeIdMessage(id);\n ",
                "raw_url": "https://github.com/apache/ignite/raw/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "sha": "1c74d5959c0a196440b3bbbbdd5b46ec80ff5396",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryMultiThreadedTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryMultiThreadedTest.java?ref=271550fed7662c5032f9e4fb49cd135f3a55a46e",
                "deletions": 5,
                "filename": "modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryMultiThreadedTest.java",
                "patch": "@@ -88,9 +88,9 @@ public TcpDiscoveryMultiThreadedTest() throws Exception {\n \n     /** {@inheritDoc} */\n     @Override protected void afterTest() throws Exception {\n-        super.afterTest();\n-\n         stopAllGrids();\n+\n+        super.afterTest();\n     }\n \n     /** {@inheritDoc} */\n@@ -102,8 +102,6 @@ public TcpDiscoveryMultiThreadedTest() throws Exception {\n      * @throws Exception If any error occurs.\n      */\n     public void testMultiThreadedClientsRestart() throws Exception {\n-        fail(\"https://issues.apache.org/jira/browse/IGNITE-1139\");\n-\n         clientFlagGlobal = false;\n \n         info(\"Test timeout: \" + (getTestTimeout() / (60 * 1000)) + \" min.\");\n@@ -126,7 +124,7 @@ public void testMultiThreadedClientsRestart() throws Exception {\n                     int idx = clientIdx.getAndIncrement();\n \n                     while (!done.get()) {\n-                        stopGrid(idx);\n+                        stopGrid(idx, true);\n                         startGrid(idx);\n                     }\n ",
                "raw_url": "https://github.com/apache/ignite/raw/271550fed7662c5032f9e4fb49cd135f3a55a46e/modules/core/src/test/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryMultiThreadedTest.java",
                "sha": "f7c73b647ede0d8531625a1fb893791ebd197a24",
                "status": "modified"
            }
        ],
        "message": "Squashed commit of the following:\n\ncommit ed8dac68bb008c17246ecea5169b34a55b860869\nMerge: 6f915db a127756\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 16:56:39 2015 +0300\n\n    Merge remote-tracking branch 'remotes/origin/master' into ignite-1139\n\ncommit 6f915db1890c81af035984f07a7195da9048a67f\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 09:50:53 2015 +0300\n\n    ignite-1139: uncommented tests\n\ncommit aadbdda1dab5e1c350afb0ac5e7f1182095ecd70\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 09:30:50 2015 +0300\n\n    ignite-1139: set cancel to true when stopping a client node\n\ncommit 86c6f6a8df6e828e5cc3c606c334925e948dee7a\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 09:06:49 2015 +0300\n\n    ignite-1139: temporaly disable some SPI tests\n\ncommit e6a2d88063a1c32478f3ee1dea80c2ffe2ee19af\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 08:51:51 2015 +0300\n\n    ignite-\n\ncommit f39086536e3afd031ed158e9cd2d65afb71a32bf\nMerge: 14ee9df 84f8b95\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 08:42:28 2015 +0300\n\n    Merge branch 'ignite-1139' of https://git-wip-us.apache.org/repos/asf/incubator-ignite into ignite-1139\n\ncommit 14ee9df2251716d1a3913742ce05154e2e958b56\nMerge: fd6b0e3 0341759\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Mon Jul 27 08:39:31 2015 +0300\n\n    Merge remote-tracking branch 'remotes/origin/master' into ignite-1139\n\ncommit 84f8b956e40ae88d11e0ef125442203a497b8c4b\nAuthor: dmagda <magda7817@gmail.com>\nDate:   Fri Jul 24 13:35:32 2015 +0300\n\n    ignite-1139:\n    - fixed race in GridDhtPartitionsExchangeFuture\n    - fixed NPE in TcpCommunicationSpi when this SPI was not in the fully initialized state\n\ncommit 89da409d5e6a62e744c4030475bbbfcb822a103c\nMerge: fd6b0e3 ed5d3ed\nAuthor: dmagda <magda7817@gmail.com>\nDate:   Fri Jul 24 08:55:26 2015 +0300\n\n    Merge remote-tracking branch 'remotes/origin/master' into ignite-1139\n\ncommit fd6b0e3684df97875947c7864487b658ac599fce\nAuthor: Denis Magda <dmagda@gridgain.com>\nDate:   Thu Jul 23 16:08:21 2015 +0300\n\n    ignite-1139: unmuted test",
        "parent": "https://github.com/apache/ignite/commit/abb2cef136da824c55964bb4032c47dd150242c1",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpCommunicationSpi.java"
        ]
    },
    "ignite_2929ace": {
        "bug_id": "ignite_2929ace",
        "commit": "https://github.com/apache/ignite/commit/2929acef591a6309438cd46e11751bf86a11bf8b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/2929acef591a6309438cd46e11751bf86a11bf8b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java?ref=2929acef591a6309438cd46e11751bf86a11bf8b",
                "deletions": 0,
                "filename": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "patch": "@@ -383,6 +383,9 @@ private int tryCompareOptimized(long pageAddr, int off, int maxSize, Value v) {\n         if (type == Value.NULL)\n             return Integer.MIN_VALUE;\n \n+        if (v == ValueNull.INSTANCE)\n+            return fixSort(1, sortType());\n+\n         if (this.type != type)\n             throw new UnsupportedOperationException(\"Invalid fast index type: \" + type);\n ",
                "raw_url": "https://github.com/apache/ignite/raw/2929acef591a6309438cd46e11751bf86a11bf8b/modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelper.java",
                "sha": "5c42d0d3097b40669b0890f9865b931d9f5f2ba9",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/ignite/blob/2929acef591a6309438cd46e11751bf86a11bf8b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java?ref=2929acef591a6309438cd46e11751bf86a11bf8b",
                "deletions": 2,
                "filename": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "patch": "@@ -207,15 +207,15 @@ private int putAndCompare(String v1, String v2, int maxSize) throws Exception {\n             InlineIndexHelper ih = new InlineIndexHelper(Value.STRING, 1, 0,\n                 CompareMode.getInstance(null, 0));\n \n-            ih.put(pageAddr, off, ValueString.get(v1), maxSize);\n+            ih.put(pageAddr, off, v1 == null ? ValueNull.INSTANCE : ValueString.get(v1), maxSize);\n \n             Comparator<Value> comp = new Comparator<Value>() {\n                 @Override public int compare(Value o1, Value o2) {\n                     throw new AssertionError(\"Optimized algorithm should be used.\");\n                 }\n             };\n \n-            return ih.compare(pageAddr, off, maxSize,  ValueString.get(v2), comp);\n+            return ih.compare(pageAddr, off, maxSize,  v2 == null ? ValueNull.INSTANCE : ValueString.get(v2), comp);\n         }\n         finally {\n             if (page != 0L)\n@@ -378,6 +378,10 @@ public void testBytes() throws Exception {\n     /** */\n     public void testNull() throws Exception {\n         testPutGet(ValueInt.get(-1), ValueNull.INSTANCE, ValueInt.get(3));\n+        testPutGet(ValueInt.get(-1), ValueNull.INSTANCE, ValueInt.get(3));\n+\n+        int maxSize = 3 + 2; // 2 ascii chars + 3 bytes header.\n+        assertEquals(1, putAndCompare(\"aa\", null, maxSize));\n     }\n \n     /** */",
                "raw_url": "https://github.com/apache/ignite/raw/2929acef591a6309438cd46e11751bf86a11bf8b/modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/h2/database/InlineIndexHelperTest.java",
                "sha": "4a6988734093f018999f3bf1c35e01e795b025f0",
                "status": "modified"
            }
        ],
        "message": "Fixed \"IGNITE-6360: NPE occurs if object with null indexed field is added\". This closes #2739.\n\nSigned-off-by: nikolay_tikhonov <ntikhonov@gridgain.com>",
        "parent": "https://github.com/apache/ignite/commit/12cbf75bb70615cf31ac059e89dabac1dabce77e",
        "repo": "ignite",
        "unit_tests": [
            "InlineIndexHelperTest.java"
        ]
    },
    "ignite_4c6f4ae": {
        "bug_id": "ignite_4c6f4ae",
        "commit": "https://github.com/apache/ignite/commit/4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/configuration/DataRegionConfiguration.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/configuration/DataRegionConfiguration.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 0,
                "filename": "modules/core/src/main/java/org/apache/ignite/configuration/DataRegionConfiguration.java",
                "patch": "@@ -133,6 +133,14 @@\n     /** Temporary buffer size for checkpoints in bytes. */\n     private long checkpointPageBufSize;\n \n+    /**\n+     * If {@code true}, memory for {@code DataRegion} will be allocated only on the creation of the first cache\n+     * belonged to this {@code DataRegion}.\n+     *\n+     * Default is {@code true}.\n+     */\n+    private boolean lazyMemoryAllocation = true;\n+\n     /**\n      * Gets data region name.\n      *\n@@ -433,6 +441,29 @@ public DataRegionConfiguration setCheckpointPageBufferSize(long checkpointPageBu\n         return this;\n     }\n \n+    /**\n+     * @return {@code True} if memory for {@code DataRegion} will be allocated only on the creation of the first cache\n+     * belonged to this {@code DataRegion}.\n+     */\n+    public boolean isLazyMemoryAllocation() {\n+        return lazyMemoryAllocation;\n+    }\n+\n+    /**\n+     * Sets {@code lazyMemoryAllocation} flag value.\n+     *\n+     * If {@code true}, memory for {@code DataRegion} will be allocated only on the creation of the first cache\n+     * belonged to this {@code DataRegion}.\n+     *\n+     * @param lazyMemoryAllocation Flag value.\n+     * @return {@code this} for chaining.\n+     */\n+    public DataRegionConfiguration setLazyMemoryAllocation(boolean lazyMemoryAllocation) {\n+        this.lazyMemoryAllocation = lazyMemoryAllocation;\n+\n+        return this;\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public String toString() {\n         return S.toString(DataRegionConfiguration.class, this);",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/configuration/DataRegionConfiguration.java",
                "sha": "85910005a37ee560d4ee17ee70f522a6691616b0",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "patch": "@@ -2010,7 +2010,8 @@ private String dataRegionConfigurationMessage(DataRegionConfiguration regCfg) {\n         m.a(\"  ^-- \").a(regCfg.getName()).a(\" [\");\n         m.a(\"initSize=\").a(U.readableSize(regCfg.getInitialSize(), false));\n         m.a(\", maxSize=\").a(U.readableSize(regCfg.getMaxSize(), false));\n-        m.a(\", persistence=\" + regCfg.isPersistenceEnabled()).a(']');\n+        m.a(\", persistence=\" + regCfg.isPersistenceEnabled());\n+        m.a(\", lazyMemoryAllocation=\" + regCfg.isLazyMemoryAllocation()).a(']');\n \n         return m.toString();\n     }",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/IgniteKernal.java",
                "sha": "c3c725d9430ae8518d98061a0a889eb03bf5d5b5",
                "status": "modified"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "changes": 96,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 43,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "patch": "@@ -140,6 +140,9 @@\n     /** Segments array. */\n     private volatile Segment[] segments;\n \n+    /** Lock for segments changes. */\n+    private Object segmentsLock = new Object();\n+\n     /** */\n     private final AtomicInteger allocatedPages = new AtomicInteger();\n \n@@ -165,9 +168,9 @@\n     private final GridCacheSharedContext<?, ?> ctx;\n \n     /**\n-     * Marker that stop was invoked and memory is not supposed for any usage.\n+     * {@code False} if memory was not started or already stopped and is not supposed for any usage.\n      */\n-    private volatile boolean stopped;\n+    private volatile boolean started;\n \n     /**\n      * @param log Logger.\n@@ -208,58 +211,65 @@ public PageMemoryNoStoreImpl(\n \n     /** {@inheritDoc} */\n     @Override public void start() throws IgniteException {\n-        stopped = false;\n+        synchronized (segmentsLock) {\n+            if (started)\n+                return;\n+\n+            started = true;\n \n-        long startSize = dataRegionCfg.getInitialSize();\n-        long maxSize = dataRegionCfg.getMaxSize();\n+            long startSize = dataRegionCfg.getInitialSize();\n+            long maxSize = dataRegionCfg.getMaxSize();\n \n-        long[] chunks = new long[SEG_CNT];\n+            long[] chunks = new long[SEG_CNT];\n \n-        chunks[0] = startSize;\n+            chunks[0] = startSize;\n \n-        long total = startSize;\n+            long total = startSize;\n \n-        long allocChunkSize = Math.max((maxSize - startSize) / (SEG_CNT - 1), 256L * 1024 * 1024);\n+            long allocChunkSize = Math.max((maxSize - startSize) / (SEG_CNT - 1), 256L * 1024 * 1024);\n \n-        int lastIdx = 0;\n+            int lastIdx = 0;\n \n-        for (int i = 1; i < SEG_CNT; i++) {\n-            long allocSize = Math.min(allocChunkSize, maxSize - total);\n+            for (int i = 1; i < SEG_CNT; i++) {\n+                long allocSize = Math.min(allocChunkSize, maxSize - total);\n \n-            if (allocSize <= 0)\n-                break;\n+                if (allocSize <= 0)\n+                    break;\n \n-            chunks[i] = allocSize;\n+                chunks[i] = allocSize;\n \n-            total += allocSize;\n+                total += allocSize;\n \n-            lastIdx = i;\n-        }\n+                lastIdx = i;\n+            }\n \n-        if (lastIdx != SEG_CNT - 1)\n-            chunks = Arrays.copyOf(chunks, lastIdx + 1);\n+            if (lastIdx != SEG_CNT - 1)\n+                chunks = Arrays.copyOf(chunks, lastIdx + 1);\n \n-        if (segments == null)\n-            directMemoryProvider.initialize(chunks);\n+            if (segments == null)\n+                directMemoryProvider.initialize(chunks);\n \n-        addSegment(null);\n+            addSegment(null);\n+        }\n     }\n \n     /** {@inheritDoc} */\n     @Override public void stop(boolean deallocate) throws IgniteException {\n-        if (log.isDebugEnabled())\n-            log.debug(\"Stopping page memory.\");\n+        synchronized (segmentsLock) {\n+            if (log.isDebugEnabled())\n+                log.debug(\"Stopping page memory.\");\n \n-        stopped = true;\n+            started = false;\n \n-        directMemoryProvider.shutdown(deallocate);\n+            directMemoryProvider.shutdown(deallocate);\n \n-        if (directMemoryProvider instanceof Closeable) {\n-            try {\n-                ((Closeable)directMemoryProvider).close();\n-            }\n-            catch (IOException e) {\n-                throw new IgniteException(e);\n+            if (directMemoryProvider instanceof Closeable) {\n+                try {\n+                    ((Closeable)directMemoryProvider).close();\n+                }\n+                catch (IOException e) {\n+                    throw new IgniteException(e);\n+                }\n             }\n         }\n     }\n@@ -271,7 +281,7 @@ public PageMemoryNoStoreImpl(\n \n     /** {@inheritDoc} */\n     @Override public long allocatePage(int grpId, int partId, byte flags) {\n-        assert !stopped;\n+        assert started;\n \n         long relPtr = borrowFreePage();\n         long absPtr = 0;\n@@ -335,7 +345,7 @@ public PageMemoryNoStoreImpl(\n \n     /** {@inheritDoc} */\n     @Override public boolean freePage(int cacheId, long pageId) {\n-        assert !stopped;\n+        assert started;\n \n         releaseFreePage(pageId);\n \n@@ -461,7 +471,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public long acquirePage(int cacheId, long pageId, IoStatisticsHolder statHolder) {\n-        assert !stopped;\n+        assert started;\n \n         int pageIdx = PageIdUtils.pageIndex(pageId);\n \n@@ -476,7 +486,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public void releasePage(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (trackAcquiredPages) {\n             Segment seg = segment(PageIdUtils.pageIndex(pageId));\n@@ -487,7 +497,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public long readLock(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (rwLock.readLock(page + LOCK_OFFSET, PageIdUtils.tag(pageId)))\n             return page + PAGE_OVERHEAD;\n@@ -497,7 +507,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public long readLockForce(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (rwLock.readLock(page + LOCK_OFFSET, -1))\n             return page + PAGE_OVERHEAD;\n@@ -507,14 +517,14 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public void readUnlock(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         rwLock.readUnlock(page + LOCK_OFFSET);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long writeLock(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (rwLock.writeLock(page + LOCK_OFFSET, PageIdUtils.tag(pageId)))\n             return page + PAGE_OVERHEAD;\n@@ -524,7 +534,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n \n     /** {@inheritDoc} */\n     @Override public long tryWriteLock(int cacheId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         if (rwLock.tryWriteLock(page + LOCK_OFFSET, PageIdUtils.tag(pageId)))\n             return page + PAGE_OVERHEAD;\n@@ -540,7 +550,7 @@ private long fromSegmentIndex(int segIdx, long pageIdx) {\n         Boolean walPlc,\n         boolean dirtyFlag\n     ) {\n-        assert !stopped;\n+        assert started;\n \n         long actualId = PageIO.getPageId(page + PAGE_OVERHEAD);\n ",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/pagemem/impl/PageMemoryNoStoreImpl.java",
                "sha": "adfbf449c64ff5a868bcdfb4b126e3f616d0a685",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 0,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "patch": "@@ -2813,6 +2813,15 @@ private CacheGroupContext startCacheGroup(\n         String memPlcName = cfg.getDataRegionName();\n \n         DataRegion dataRegion = sharedCtx.database().dataRegion(memPlcName);\n+\n+        boolean needToStart = (dataRegion != null)\n+            && (cacheType != CacheType.USER\n+                || (sharedCtx.isLazyMemoryAllocation(dataRegion)\n+                    && (!cacheObjCtx.kernalContext().clientNode() || cfg.getCacheMode() == LOCAL)));\n+\n+        if (needToStart)\n+            dataRegion.pageMemory().start();\n+\n         FreeList freeList = sharedCtx.database().freeList(memPlcName);\n         ReuseList reuseList = sharedCtx.database().reuseList(memPlcName);\n ",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java",
                "sha": "e095db4ae3577caebf145d570c2177b457440a23",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 0,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "patch": "@@ -49,6 +49,7 @@\n import org.apache.ignite.internal.processors.cache.mvcc.DeadlockDetectionManager;\n import org.apache.ignite.internal.processors.cache.mvcc.MvccCachingManager;\n import org.apache.ignite.internal.processors.cache.mvcc.MvccProcessor;\n+import org.apache.ignite.internal.processors.cache.persistence.DataRegion;\n import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n import org.apache.ignite.internal.processors.cache.persistence.snapshot.IgniteCacheSnapshotManager;\n import org.apache.ignite.internal.processors.cache.store.CacheStoreManager;\n@@ -1155,4 +1156,11 @@ public void readOnlyMode(boolean readOnlyMode) {\n     public void setTxManager(IgniteTxManager txMgr) {\n         this.txMgr = txMgr;\n     }\n+\n+    /**\n+     * @return {@code True} if lazy memory allocation enabled. {@code False} otherwise.\n+     */\n+    public boolean isLazyMemoryAllocation(@Nullable DataRegion region) {\n+        return gridConfig().isClientMode() || region == null || region.config().isLazyMemoryAllocation();\n+    }\n }",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheSharedContext.java",
                "sha": "32a8f5b81a44f343655d4f574e5a6c9caf8eaf33",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 0,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "patch": "@@ -965,6 +965,8 @@ private DataRegionConfiguration createTxLogRegion(DataStorageConfiguration dscfg\n         cfg.setInitialSize(dscfg.getSystemRegionInitialSize());\n         cfg.setMaxSize(dscfg.getSystemRegionMaxSize());\n         cfg.setPersistenceEnabled(CU.isPersistenceEnabled(dscfg));\n+        cfg.setLazyMemoryAllocation(false);\n+\n         return cfg;\n     }\n ",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/mvcc/MvccProcessorImpl.java",
                "sha": "6643b125c4ccf5ae670bb2fa96993993ef1edcd4",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "patch": "@@ -508,6 +508,7 @@ private DataRegionConfiguration createMetastoreDataRegionConfig(DataStorageConfi\n         cfg.setInitialSize(storageCfg.getSystemRegionInitialSize());\n         cfg.setMaxSize(storageCfg.getSystemRegionMaxSize());\n         cfg.setPersistenceEnabled(true);\n+        cfg.setLazyMemoryAllocation(false);\n \n         return cfg;\n     }\n@@ -2188,7 +2189,24 @@ private RestoreBinaryState performBinaryMemoryRestore(\n                     U.quietAndWarn(log, \"Ignite node stopped in the middle of checkpoint. Will restore memory state and \" +\n                         \"finish checkpoint on node start.\");\n \n-                cctx.pageStore().beginRecover();\n+            cctx.cache().cacheGroupDescriptors().forEach((grpId, desc) -> {\n+                if (!cacheGroupsPredicate.apply(grpId))\n+                    return;\n+\n+                try {\n+                    DataRegion region = cctx.database().dataRegion(desc.config().getDataRegionName());\n+\n+                    if (region == null || !cctx.isLazyMemoryAllocation(region))\n+                        return;\n+\n+                    region.pageMemory().start();\n+                }\n+                catch (IgniteCheckedException e) {\n+                    throw new IgniteException(e);\n+                }\n+            });\n+\n+            cctx.pageStore().beginRecover();\n \n                 if (!(startRec instanceof CheckpointRecord))\n                     throw new StorageException(\"Checkpoint marker doesn't point to checkpoint record \" +",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/GridCacheDatabaseSharedManager.java",
                "sha": "9110c95b484923f989d371bc33094bef42f6d109",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/IgniteCacheDatabaseSharedManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/IgniteCacheDatabaseSharedManager.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/IgniteCacheDatabaseSharedManager.java",
                "patch": "@@ -276,7 +276,8 @@ public int pageSize() {\n      */\n     private void startDataRegions() {\n         for (DataRegion region : dataRegionMap.values()) {\n-            region.pageMemory().start();\n+            if (!cctx.isLazyMemoryAllocation(region))\n+                region.pageMemory().start();\n \n             region.evictionTracker().start();\n         }\n@@ -463,6 +464,7 @@ private DataRegionConfiguration createSystemDataRegion(\n         res.setInitialSize(sysCacheInitSize);\n         res.setMaxSize(sysCacheMaxSize);\n         res.setPersistenceEnabled(persistenceEnabled);\n+        res.setLazyMemoryAllocation(false);\n \n         return res;\n     }",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/IgniteCacheDatabaseSharedManager.java",
                "sha": "d93c189f974518694f3c6fc3f6821637f401965f",
                "status": "modified"
            },
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "changes": 185,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 73,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "patch": "@@ -238,7 +238,10 @@\n     private final DirectMemoryProvider directMemoryProvider;\n \n     /** Segments array. */\n-    private Segment[] segments;\n+    private volatile Segment[] segments;\n+\n+    /** Lock for segments changes. */\n+    private Object segmentsLock = new Object();\n \n     /** */\n     private PagePool checkpointPool;\n@@ -281,9 +284,9 @@\n     private DataRegionMetricsImpl memMetrics;\n \n     /**\n-     * Marker that stop was invoked and memory is not supposed for any usage.\n+     * {@code False} if memory was not started or already stopped and is not supposed for any usage.\n      */\n-    private volatile boolean stopped;\n+    private volatile boolean started;\n \n     /**\n      * @param directMemoryProvider Memory allocator to use.\n@@ -347,56 +350,64 @@ public PageMemoryImpl(\n \n     /** {@inheritDoc} */\n     @Override public void start() throws IgniteException {\n-        stopped = false;\n+        synchronized (segmentsLock) {\n+            if (started)\n+                return;\n \n-        directMemoryProvider.initialize(sizes);\n+            started = true;\n \n-        List<DirectMemoryRegion> regions = new ArrayList<>(sizes.length);\n+            directMemoryProvider.initialize(sizes);\n \n-        while (true) {\n-            DirectMemoryRegion reg = directMemoryProvider.nextRegion();\n+            List<DirectMemoryRegion> regions = new ArrayList<>(sizes.length);\n \n-            if (reg == null)\n-                break;\n+            while (true) {\n+                DirectMemoryRegion reg = directMemoryProvider.nextRegion();\n \n-            regions.add(reg);\n-        }\n+                if (reg == null)\n+                    break;\n \n-        int regs = regions.size();\n+                regions.add(reg);\n+            }\n \n-        segments = new Segment[regs - 1];\n+            int regs = regions.size();\n \n-        DirectMemoryRegion cpReg = regions.get(regs - 1);\n+            Segment[] segments = new Segment[regs - 1];\n \n-        checkpointPool = new PagePool(regs - 1, cpReg, cpBufPagesCntr);\n+            DirectMemoryRegion cpReg = regions.get(regs - 1);\n \n-        long checkpointBuf = cpReg.size();\n+            checkpointPool = new PagePool(regs - 1, cpReg, cpBufPagesCntr);\n \n-        long totalAllocated = 0;\n-        int pages = 0;\n-        long totalTblSize = 0;\n+            long checkpointBuf = cpReg.size();\n \n-        for (int i = 0; i < regs - 1; i++) {\n-            assert i < segments.length;\n+            long totalAllocated = 0;\n+            int pages = 0;\n+            long totalTblSize = 0;\n \n-            DirectMemoryRegion reg = regions.get(i);\n+            for (int i = 0; i < regs - 1; i++) {\n+                assert i < segments.length;\n \n-            totalAllocated += reg.size();\n+                DirectMemoryRegion reg = regions.get(i);\n \n-            segments[i] = new Segment(i, regions.get(i), checkpointPool.pages() / segments.length, throttlingPlc);\n+                totalAllocated += reg.size();\n \n-            pages += segments[i].pages();\n-            totalTblSize += segments[i].tableSize();\n-        }\n+                segments[i] = new Segment(i, regions.get(i), checkpointPool.pages() / segments.length, throttlingPlc);\n+\n+                pages += segments[i].pages();\n+                totalTblSize += segments[i].tableSize();\n+            }\n \n-        initWriteThrottle();\n+            this.segments = segments;\n \n-        if (log.isInfoEnabled())\n-            log.info(\"Started page memory [memoryAllocated=\" + U.readableSize(totalAllocated, false) +\n-                \", pages=\" + pages +\n-                \", tableSize=\" + U.readableSize(totalTblSize, false) +\n-                \", checkpointBuffer=\" + U.readableSize(checkpointBuf, false) +\n-                ']');\n+            initWriteThrottle();\n+\n+            if (log.isInfoEnabled())\n+                log.info(\"Started page memory [memoryAllocated=\" + U.readableSize(totalAllocated, false) +\n+                    \", pages=\" + pages +\n+                    \", tableSize=\" + U.readableSize(totalTblSize, false) +\n+                    \", checkpointBuffer=\" + U.readableSize(checkpointBuf, false) +\n+                    ']');\n+\n+        }\n     }\n \n     /**\n@@ -413,24 +424,29 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n \n     /** {@inheritDoc} */\n     @Override public void stop(boolean deallocate) throws IgniteException {\n-        if (log.isDebugEnabled())\n-            log.debug(\"Stopping page memory.\");\n+        synchronized (segmentsLock) {\n+            if (!started)\n+                return;\n \n-        U.shutdownNow(getClass(), asyncRunner, log);\n+            if (log.isDebugEnabled())\n+                log.debug(\"Stopping page memory.\");\n \n-        if (segments != null) {\n-            for (Segment seg : segments)\n-                seg.close();\n-        }\n+            U.shutdownNow(getClass(), asyncRunner, log);\n \n-        stopped = true;\n+            if (segments != null) {\n+                for (Segment seg : segments)\n+                    seg.close();\n+            }\n+\n+            started = false;\n \n-        directMemoryProvider.shutdown(deallocate);\n+            directMemoryProvider.shutdown(deallocate);\n+        }\n     }\n \n     /** {@inheritDoc} */\n     @Override public void releasePage(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         Segment seg = segment(grpId, pageId);\n \n@@ -446,58 +462,58 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n \n     /** {@inheritDoc} */\n     @Override public long readLock(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return readLock(page, pageId, false);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void readUnlock(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         readUnlockPage(page);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long writeLock(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return writeLock(grpId, pageId, page, false);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long writeLock(int grpId, long pageId, long page, boolean restore) {\n-        assert !stopped;\n+        assert started;\n \n         return writeLockPage(page, new FullPageId(pageId, grpId), !restore);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long tryWriteLock(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return tryWriteLockPage(page, new FullPageId(pageId, grpId), true);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void writeUnlock(int grpId, long pageId, long page, Boolean walPlc,\n         boolean dirtyFlag) {\n-        assert !stopped;\n+        assert started;\n \n         writeUnlock(grpId, pageId, page, walPlc, dirtyFlag, false);\n     }\n \n     /** {@inheritDoc} */\n     @Override public void writeUnlock(int grpId, long pageId, long page, Boolean walPlc,\n         boolean dirtyFlag, boolean restore) {\n-        assert !stopped;\n+        assert started;\n \n         writeUnlockPage(page, new FullPageId(pageId, grpId), walPlc, dirtyFlag, restore);\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean isDirty(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return isDirty(page);\n     }\n@@ -508,7 +524,7 @@ else if (throttlingPlc == ThrottlingPolicy.CHECKPOINT_BUFFER_ONLY)\n             flags == PageIdAllocator.FLAG_IDX && partId == PageIdAllocator.INDEX_PARTITION :\n             \"flags = \" + flags + \", partId = \" + partId;\n \n-        assert !stopped;\n+        assert started;\n         assert stateChecker.checkpointLockIsHeldByThread();\n \n         if (isThrottlingEnabled())\n@@ -664,14 +680,14 @@ private DataRegionConfiguration getDataRegionConfiguration() {\n \n     /** {@inheritDoc} */\n     @Override public long metaPageId(int grpId) throws IgniteCheckedException {\n-        assert !stopped;\n+        assert started;\n \n         return storeMgr.metaPageId(grpId);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long partitionMetaPageId(int grpId, int partId) throws IgniteCheckedException {\n-        assert !stopped;\n+        assert started;\n \n         return PageIdUtils.pageId(partId, PageIdAllocator.FLAG_DATA, 0);\n     }\n@@ -684,15 +700,15 @@ private DataRegionConfiguration getDataRegionConfiguration() {\n     /** {@inheritDoc} */\n     @Override public long acquirePage(int grpId, long pageId,\n         IoStatisticsHolder statHolder) throws IgniteCheckedException {\n-        assert !stopped;\n+        assert started;\n \n         return acquirePage(grpId, pageId, statHolder, false);\n     }\n \n     /** {@inheritDoc} */\n     @Override public long acquirePage(int grpId, long pageId, IoStatisticsHolder statHolder,\n         boolean restore) throws IgniteCheckedException {\n-        assert !stopped;\n+        assert started;\n \n         FullPageId fullId = new FullPageId(pageId, grpId);\n \n@@ -1047,6 +1063,9 @@ private void tryToRestorePage(FullPageId fullId, ByteBuffer buf) throws IgniteCh\n      * @param dirtyRatioThreshold Throttle threshold.\n      */\n     boolean shouldThrottle(double dirtyRatioThreshold) {\n+        if (segments == null)\n+            return false;\n+\n         for (Segment segment : segments) {\n             if (segment.shouldThrottle(dirtyRatioThreshold))\n                 return true;\n@@ -1059,6 +1078,9 @@ boolean shouldThrottle(double dirtyRatioThreshold) {\n      * @return Max dirty ratio from the segments.\n      */\n     double getDirtyPagesRatio() {\n+        if (segments == null)\n+            return 0;\n+\n         double res = 0;\n \n         for (Segment segment : segments) {\n@@ -1072,6 +1094,9 @@ boolean shouldThrottle(double dirtyRatioThreshold) {\n      * @return Total pages can be placed in all segments.\n      */\n     public long totalPages() {\n+        if (segments == null)\n+            return 0;\n+\n         long res = 0;\n \n         for (Segment segment : segments) {\n@@ -1319,25 +1344,30 @@ private void copyInBuffer(long absPtr, ByteBuffer buf) {\n \n     /** {@inheritDoc} */\n     @Override public int invalidate(int grpId, int partId) {\n-        int tag = 0;\n+        synchronized (segmentsLock) {\n+            if (!started)\n+                return 0;\n \n-        for (Segment seg : segments) {\n-            seg.writeLock().lock();\n+            int tag = 0;\n \n-            try {\n-                int newTag = seg.incrementPartGeneration(grpId, partId);\n+            for (Segment seg : segments) {\n+                seg.writeLock().lock();\n \n-                if (tag == 0)\n-                    tag = newTag;\n+                try {\n+                    int newTag = seg.incrementPartGeneration(grpId, partId);\n \n-                assert tag == newTag;\n-            }\n-            finally {\n-                seg.writeLock().unlock();\n+                    if (tag == 0)\n+                        tag = newTag;\n+\n+                    assert tag == newTag;\n+                }\n+                finally {\n+                    seg.writeLock().unlock();\n+                }\n             }\n-        }\n \n-        return tag;\n+            return tag;\n+        }\n     }\n \n     /** {@inheritDoc} */\n@@ -1407,6 +1437,9 @@ private void copyInBuffer(long absPtr, ByteBuffer buf) {\n      * @return Total number of acquired pages.\n      */\n     public long acquiredPages() {\n+        if (segments == null)\n+            return 0L;\n+\n         long total = 0;\n \n         for (Segment seg : segments) {\n@@ -1438,7 +1471,7 @@ private long readLock(long absPtr, long pageId, boolean force) {\n \n     /** {@inheritDoc} */\n     @Override  public long readLock(long absPtr, long pageId, boolean force, boolean touch) {\n-        assert !stopped;\n+        assert started;\n \n         int tag = force ? -1 : PageIdUtils.tag(pageId);\n \n@@ -1457,7 +1490,7 @@ private long readLock(long absPtr, long pageId, boolean force) {\n \n     /** {@inheritDoc} */\n     @Override public long readLockForce(int grpId, long pageId, long page) {\n-        assert !stopped;\n+        assert started;\n \n         return readLock(page, pageId, true);\n     }\n@@ -1676,6 +1709,9 @@ boolean isDirty(long absPtr) {\n      * @return Number of active pages.\n      */\n     public int activePagesCount() {\n+        if (segments == null)\n+            return 0;\n+\n         int total = 0;\n \n         for (Segment seg : segments)\n@@ -1947,6 +1983,9 @@ private int pages() {\n      * @return Collection of all page IDs marked as dirty.\n      */\n     public Collection<FullPageId> dirtyPages() {\n+        if (segments == null)\n+            return Collections.EMPTY_SET;\n+\n         Collection<FullPageId> res = new HashSet<>((int)loadedPages());\n \n         for (Segment seg : segments)",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "sha": "45dfae1e1725c52abb6ac84ef5893e1ff64cb1c3",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
                "patch": "@@ -44,11 +44,15 @@\n     /** Version 1.2.0. */\n     public static final ClientListenerProtocolVersion VER_1_2_0 = ClientListenerProtocolVersion.create(1, 2, 0);\n \n+    /** Version 1.3.0. */\n+    public static final ClientListenerProtocolVersion VER_1_3_0 = ClientListenerProtocolVersion.create(1, 3, 0);\n+\n     /** Version 1.2.0. */\n-    public static final ClientListenerProtocolVersion CURRENT_VER = VER_1_2_0;\n+    public static final ClientListenerProtocolVersion CURRENT_VER = VER_1_3_0;\n \n     /** Supported versions. */\n     private static final Collection<ClientListenerProtocolVersion> SUPPORTED_VERS = Arrays.asList(\n+        VER_1_3_0,\n         VER_1_2_0,\n         VER_1_1_0,\n         VER_1_0_0",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/client/ClientConnectionContext.java",
                "sha": "25f7a96cfa58bc997598c6f22e304949a43e2ec4",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 23,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "patch": "@@ -110,6 +110,7 @@\n import org.apache.ignite.transactions.TransactionIsolation;\n \n import static org.apache.ignite.internal.processors.platform.client.ClientConnectionContext.VER_1_2_0;\n+import static org.apache.ignite.internal.processors.platform.client.ClientConnectionContext.VER_1_3_0;\n \n /**\n  * Configuration utils.\n@@ -815,7 +816,7 @@ public static void readIgniteConfiguration(BinaryRawReaderEx in, IgniteConfigura\n             cfg.setPersistentStoreConfiguration(readPersistentStoreConfiguration(in));\n \n         if (in.readBoolean())\n-            cfg.setDataStorageConfiguration(readDataStorageConfiguration(in));\n+            cfg.setDataStorageConfiguration(readDataStorageConfiguration(in, ver));\n \n         if (in.readBoolean())\n             cfg.setSslContextFactory(readSslContextFactory(in));\n@@ -1410,7 +1411,7 @@ else if (evtStorageSpi instanceof MemoryEventStorageSpi) {\n \n         writePersistentStoreConfiguration(w, cfg.getPersistentStoreConfiguration());\n \n-        writeDataStorageConfiguration(w, cfg.getDataStorageConfiguration());\n+        writeDataStorageConfiguration(w, cfg.getDataStorageConfiguration(), ver);\n \n         writeSslContextFactory(w, cfg.getSslContextFactory());\n \n@@ -1885,9 +1886,11 @@ private static PersistentStoreConfiguration readPersistentStoreConfiguration(Bin\n      * Reads the data storage configuration.\n      *\n      * @param in Reader.\n+     * @param ver Client version.\n      * @return Config.\n      */\n-    private static DataStorageConfiguration readDataStorageConfiguration(BinaryRawReader in) {\n+    private static DataStorageConfiguration readDataStorageConfiguration(BinaryRawReader in,\n+        ClientListenerProtocolVersion ver) {\n         DataStorageConfiguration res = new DataStorageConfiguration()\n                 .setStoragePath(in.readString())\n                 .setCheckpointFrequency(in.readLong())\n@@ -1926,13 +1929,13 @@ private static DataStorageConfiguration readDataStorageConfiguration(BinaryRawRe\n             DataRegionConfiguration[] regs = new DataRegionConfiguration[cnt];\n \n             for (int i = 0; i < cnt; i++)\n-                regs[i] = readDataRegionConfiguration(in);\n+                regs[i] = readDataRegionConfiguration(in, ver);\n \n             res.setDataRegionConfigurations(regs);\n         }\n \n         if (in.readBoolean())\n-            res.setDefaultDataRegionConfiguration(readDataRegionConfiguration(in));\n+            res.setDefaultDataRegionConfiguration(readDataRegionConfiguration(in, ver));\n \n         return res;\n     }\n@@ -2011,8 +2014,11 @@ private static void writePersistentStoreConfiguration(BinaryRawWriter w, Persist\n      * Writes the data storage configuration.\n      *\n      * @param w Writer.\n+     * @param cfg Data storage configuration.\n+     * @param ver Client version.\n      */\n-    private static void writeDataStorageConfiguration(BinaryRawWriter w, DataStorageConfiguration cfg) {\n+    private static void writeDataStorageConfiguration(BinaryRawWriter w, DataStorageConfiguration cfg,\n+        ClientListenerProtocolVersion ver) {\n         assert w != null;\n \n         if (cfg != null) {\n@@ -2057,14 +2063,14 @@ private static void writeDataStorageConfiguration(BinaryRawWriter w, DataStorage\n                 w.writeInt(cfg.getDataRegionConfigurations().length);\n \n                 for (DataRegionConfiguration d : cfg.getDataRegionConfigurations())\n-                    writeDataRegionConfiguration(w, d);\n+                    writeDataRegionConfiguration(w, d, ver);\n             }\n             else\n                 w.writeInt(0);\n \n             if (cfg.getDefaultDataRegionConfiguration() != null) {\n                 w.writeBoolean(true);\n-                writeDataRegionConfiguration(w, cfg.getDefaultDataRegionConfiguration());\n+                writeDataRegionConfiguration(w, cfg.getDefaultDataRegionConfiguration(), ver);\n             }\n             else\n                 w.writeBoolean(false);\n@@ -2077,8 +2083,10 @@ private static void writeDataStorageConfiguration(BinaryRawWriter w, DataStorage\n      * Writes the data region configuration.\n      *\n      * @param w Writer.\n+     * @param ver Client version.\n      */\n-    private static void writeDataRegionConfiguration(BinaryRawWriter w, DataRegionConfiguration cfg) {\n+    private static void writeDataRegionConfiguration(BinaryRawWriter w, DataRegionConfiguration cfg,\n+        ClientListenerProtocolVersion ver) {\n         assert w != null;\n         assert cfg != null;\n \n@@ -2094,6 +2102,9 @@ private static void writeDataRegionConfiguration(BinaryRawWriter w, DataRegionCo\n         w.writeInt(cfg.getMetricsSubIntervalCount());\n         w.writeLong(cfg.getMetricsRateTimeInterval());\n         w.writeLong(cfg.getCheckpointPageBufferSize());\n+\n+        if (ver.compareTo(VER_1_3_0) >= 0)\n+            w.writeBoolean(cfg.isLazyMemoryAllocation());\n     }\n \n     /**\n@@ -2131,23 +2142,30 @@ private static void writeSslContextFactory(BinaryRawWriter w, Factory<SSLContext\n      * Reads the data region configuration.\n      *\n      * @param r Reader.\n+     * @param ver Client version.\n      */\n-    private static DataRegionConfiguration readDataRegionConfiguration(BinaryRawReader r) {\n+    private static DataRegionConfiguration readDataRegionConfiguration(BinaryRawReader r,\n+        ClientListenerProtocolVersion ver) {\n         assert r != null;\n \n-        return new DataRegionConfiguration()\n-                .setName(r.readString())\n-                .setPersistenceEnabled(r.readBoolean())\n-                .setInitialSize(r.readLong())\n-                .setMaxSize(r.readLong())\n-                .setSwapPath(r.readString())\n-                .setPageEvictionMode(DataPageEvictionMode.fromOrdinal(r.readInt()))\n-                .setEvictionThreshold(r.readDouble())\n-                .setEmptyPagesPoolSize(r.readInt())\n-                .setMetricsEnabled(r.readBoolean())\n-                .setMetricsSubIntervalCount(r.readInt())\n-                .setMetricsRateTimeInterval(r.readLong())\n-                .setCheckpointPageBufferSize(r.readLong());\n+        DataRegionConfiguration cfg = new DataRegionConfiguration()\n+            .setName(r.readString())\n+            .setPersistenceEnabled(r.readBoolean())\n+            .setInitialSize(r.readLong())\n+            .setMaxSize(r.readLong())\n+            .setSwapPath(r.readString())\n+            .setPageEvictionMode(DataPageEvictionMode.fromOrdinal(r.readInt()))\n+            .setEvictionThreshold(r.readDouble())\n+            .setEmptyPagesPoolSize(r.readInt())\n+            .setMetricsEnabled(r.readBoolean())\n+            .setMetricsSubIntervalCount(r.readInt())\n+            .setMetricsRateTimeInterval(r.readLong())\n+            .setCheckpointPageBufferSize(r.readLong());\n+\n+        if (ver.compareTo(VER_1_3_0) >= 0)\n+            cfg.setLazyMemoryAllocation(r.readBoolean());\n+\n+        return cfg;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java",
                "sha": "857c1b12c71b7aab790981deed9634e88b6fb59d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "patch": "@@ -296,7 +296,7 @@\n @SuppressWarnings({\"UnusedReturnValue\", \"RedundantStringConstructorCall\"})\n public abstract class IgniteUtils {\n     /** */\n-    private static final long GB = 1024L * 1024 * 1024;\n+    public static final long GB = 1024L * 1024 * 1024;\n \n     /** Minimum checkpointing page buffer size (may be adjusted by Ignite). */\n     public static final Long DFLT_MIN_CHECKPOINTING_PAGE_BUFFER_SIZE = GB / 4;",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "sha": "999b4409870eb65a01605fe7146bd98dc145bade",
                "status": "modified"
            },
            {
                "additions": 275,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationTest.java",
                "changes": 275,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationTest.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationTest.java",
                "patch": "@@ -0,0 +1,275 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.pagemem;\n+\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.CacheMode;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.pagemem.PageMemory;\n+import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n+import org.apache.ignite.lang.IgnitePredicate;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/** */\n+public class PageMemoryLazyAllocationTest extends GridCommonAbstractTest {\n+    /** */\n+    public static final String LAZY_REGION = \"lazyRegion\";\n+\n+    /** */\n+    public static final String EAGER_REGION = \"eagerRegion\";\n+\n+    /** */\n+    protected boolean client = false;\n+\n+    /** */\n+    protected boolean lazyAllocation = true;\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setClientMode(client);\n+\n+        cfg.setDataStorageConfiguration(new DataStorageConfiguration()\n+            .setDataRegionConfigurations(\n+                new DataRegionConfiguration()\n+                    .setName(LAZY_REGION)\n+                    .setLazyMemoryAllocation(lazyAllocation)\n+                    .setPersistenceEnabled(persistenceEnabled()),\n+                new DataRegionConfiguration()\n+                    .setName(EAGER_REGION)\n+                    .setLazyMemoryAllocation(lazyAllocation)\n+                    .setPersistenceEnabled(persistenceEnabled())));\n+\n+        CacheConfiguration<?, ?> ccfg = new CacheConfiguration<>(\"my-cache\")\n+            .setDataRegionName(EAGER_REGION);\n+\n+        cfg.setCacheConfiguration(ccfg);\n+\n+        return cfg;\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testLazyMemoryAllocationOnServer() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager db = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(db.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(db.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(srv);\n+\n+        checkMemoryAllocated(db.dataRegion(LAZY_REGION).pageMemory());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testLazyMemoryAllocationOnClient() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager srvDb = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(srvDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(2);\n+\n+        IgniteCacheDatabaseSharedManager clntDb = clnt.context().cache().context().database();\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(clnt);\n+\n+        checkMemoryAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testEagerMemoryAllocationOnServer() throws Exception {\n+        lazyAllocation = false;\n+        client = false;\n+\n+        IgniteEx g = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager db = g.context().cache().context().database();\n+\n+        checkMemoryAllocated(db.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryAllocated(db.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(g);\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testEagerMemoryAllocationOnClient() throws Exception {\n+        lazyAllocation = false;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager srvDb = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(srvDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(2);\n+\n+        IgniteCacheDatabaseSharedManager clntDb = clnt.context().cache().context().database();\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(clnt);\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testLocalCacheOnClientNodeWithLazyAllocation() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager srvDb = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(srvDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(2);\n+\n+        IgniteCacheDatabaseSharedManager clntDb = clnt.context().cache().context().database();\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        createCacheAndPut(clnt, CacheMode.LOCAL);\n+\n+        checkMemoryNotAllocated(clntDb.dataRegion(EAGER_REGION).pageMemory());\n+        //LOCAL Cache was created in LAZY_REGION so it has to be allocated on client node.\n+        checkMemoryAllocated(clntDb.dataRegion(LAZY_REGION).pageMemory());\n+    }\n+\n+    /** @throws Exception If failed. */\n+    @Test\n+    public void testStopNotAllocatedRegions() throws Exception {\n+        IgniteEx srv = startSrv()[0];\n+\n+        IgniteCacheDatabaseSharedManager srvDb = srv.context().cache().context().database();\n+\n+        checkMemoryAllocated(srvDb.dataRegion(EAGER_REGION).pageMemory());\n+        checkMemoryNotAllocated(srvDb.dataRegion(LAZY_REGION).pageMemory());\n+\n+        stopGrid(0);\n+    }\n+\n+    @After\n+    public void after() {\n+        stopAllGrids();\n+    }\n+\n+    @Before\n+    public void before() throws Exception {\n+        cleanPersistenceDir();\n+    }\n+\n+    /** */\n+    protected void createCacheAndPut(IgniteEx g) {\n+        createCacheAndPut(g, CacheConfiguration.DFLT_CACHE_MODE);\n+    }\n+\n+    /** */\n+    private void createCacheAndPut(IgniteEx g, CacheMode cacheMode) {\n+        createCacheAndPut(g, cacheMode, null);\n+    }\n+\n+    /** */\n+    private void createCacheAndPut(IgniteEx g, CacheMode cacheMode, IgnitePredicate<ClusterNode> fltr) {\n+        IgniteCache<Integer, String> cache =\n+            g.createCache(new CacheConfiguration<Integer, String>(\"my-cache-2\")\n+                .setCacheMode(cacheMode)\n+                .setDataRegionName(LAZY_REGION)\n+                .setNodeFilter(fltr));\n+\n+        cache.put(1, \"test\");\n+\n+        assertEquals(cache.get(1), \"test\");\n+    }\n+\n+    /** */\n+    protected void checkMemoryAllocated(PageMemory pageMem) {\n+        Object[] segments = GridTestUtils.getFieldValue(pageMem, \"segments\");\n+\n+        assertNotNull(segments);\n+        assertTrue(segments.length > 0);\n+        assertNotNull(segments[0]);\n+    }\n+\n+    /** */\n+    protected void checkMemoryNotAllocated(PageMemory pageMem) {\n+        Object[] segments = GridTestUtils.getFieldValue(pageMem, \"segments\");\n+\n+        assertNull(segments);\n+    }\n+\n+    /** */\n+    protected IgniteEx[] startSrv() throws Exception {\n+        IgniteEx srv0 = startGrid(0);\n+        IgniteEx srv1 = startGrid(1);\n+\n+        srv0.cluster().active(true);\n+\n+        awaitPartitionMapExchange();\n+\n+        return new IgniteEx[] {srv0, srv1};\n+    }\n+\n+    /** */\n+    protected boolean persistenceEnabled() {\n+        return false;\n+    }\n+}",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationTest.java",
                "sha": "c7478ec71bdbdbbd629262dcf25b424bf20dd38a",
                "status": "added"
            },
            {
                "additions": 159,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationWithPDSTest.java",
                "changes": 159,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationWithPDSTest.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationWithPDSTest.java",
                "patch": "@@ -0,0 +1,159 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.pagemem;\n+\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.util.IgniteUtils.GB;\n+\n+/** */\n+public class PageMemoryLazyAllocationWithPDSTest extends PageMemoryLazyAllocationTest {\n+\n+    public static final long PETA_BYTE = 1024 * GB;\n+\n+    /** {@inheritDoc} */\n+    @Ignore(\"https://issues.apache.org/jira/browse/IGNITE-11677\")\n+    @Override public void testLocalCacheOnClientNodeWithLazyAllocation() throws Exception {\n+        // No-op.\n+    }\n+\n+    /** */\n+    @Test\n+    public void testNodeRestart() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        createCacheAndPut(srv);\n+\n+        stopAllGrids(false);\n+\n+        IgniteCache<Integer, String> cache = startSrv()[0].cache(\"my-cache-2\");\n+\n+        assertEquals(\"test\", cache.get(1));\n+    }\n+\n+    /** */\n+    @Test\n+    public void testClientNodeRestart() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startSrv()[0];\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(2);\n+\n+        createCacheAndPut(clnt);\n+\n+        stopAllGrids(false);\n+\n+        client = false;\n+\n+        srv = startSrv()[0];\n+\n+        client = true;\n+\n+        IgniteCache<Integer, String> cache = startGrid(2).cache(\"my-cache-2\");\n+\n+        assertEquals(\"test\", cache.get(1));\n+    }\n+\n+    /** */\n+    @Test\n+    public void testHugeNotUsedMemoryRegion() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startGrid(cfgWithHugeRegion(\"test-server\"));\n+\n+        startGrid(cfgWithHugeRegion(\"test-server-2\"));\n+\n+        srv.cluster().active(true);\n+\n+        awaitPartitionMapExchange();\n+\n+        stopAllGrids(false);\n+\n+        srv = startGrid(cfgWithHugeRegion(\"test-server\"));\n+\n+        startGrid(cfgWithHugeRegion(\"test-server-2\"));\n+\n+        srv.cluster().active(true);\n+    }\n+\n+    /** */\n+    @Test\n+    public void testCreateCacheFailsInHugeMemoryRegion() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startGrid(cfgWithHugeRegion(\"test-server\")\n+            .setFailureHandler(new StopNodeFailureHandler()));\n+\n+        srv.cluster().active(true);\n+\n+        awaitPartitionMapExchange();\n+    }\n+\n+    /** */\n+    @Test\n+    public void testCreateCacheFromClientFailsInHugeMemoryRegion() throws Exception {\n+        lazyAllocation = true;\n+        client = false;\n+\n+        IgniteEx srv = startGrid(cfgWithHugeRegion(\"test-server\")\n+            .setFailureHandler(new StopNodeFailureHandler()));\n+\n+        client = true;\n+\n+        IgniteEx clnt = startGrid(cfgWithHugeRegion(\"test-client\")\n+            .setFailureHandler(new StopNodeFailureHandler()));\n+\n+        srv.cluster().active(true);\n+\n+        awaitPartitionMapExchange();\n+    }\n+\n+    @NotNull private IgniteConfiguration cfgWithHugeRegion(String name) throws Exception {\n+        IgniteConfiguration cfg = getConfiguration(name);\n+\n+        for (DataRegionConfiguration drc : cfg.getDataStorageConfiguration().getDataRegionConfigurations()) {\n+            if (drc.getName().equals(LAZY_REGION))\n+                drc.setMaxSize(PETA_BYTE);\n+        }\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected boolean persistenceEnabled() {\n+        return true;\n+    }\n+}",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryLazyAllocationWithPDSTest.java",
                "sha": "c84928b60f6a35e176abdd7f3ca73a4237d90d00",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "patch": "@@ -44,6 +44,8 @@\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.IndexStoragePageMemoryImplTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryImplNoLoadTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryImplTest;\n+import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryLazyAllocationTest;\n+import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryLazyAllocationWithPDSTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.PageMemoryNoStoreLeakTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.PagesWriteThrottleSmokeTest;\n import org.apache.ignite.internal.processors.cache.persistence.pagemem.UsedPagesMetricTest;\n@@ -88,6 +90,8 @@\n         //GridTestUtils.addTestIfNeeded(suite, PageMemoryNoLoadSelfTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, PageMemoryImplNoLoadTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, PageMemoryNoStoreLeakTest.class, ignoredTests);\n+        GridTestUtils.addTestIfNeeded(suite, PageMemoryLazyAllocationTest.class, ignoredTests);\n+        GridTestUtils.addTestIfNeeded(suite, PageMemoryLazyAllocationWithPDSTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, IndexStoragePageMemoryImplTest.class, ignoredTests);\n         GridTestUtils.addTestIfNeeded(suite, PageMemoryImplTest.class, ignoredTests);\n         //GridTestUtils.addTestIfNeeded(suite, PageIdDistributionTest.class, ignoredTests);",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/core/src/test/java/org/apache/ignite/testsuites/IgnitePdsTestSuite.java",
                "sha": "e21577da56074e247fdf6fab317ed76983751c93",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataRegionConfiguration.cs",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataRegionConfiguration.cs?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 2,
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataRegionConfiguration.cs",
                "patch": "@@ -24,6 +24,7 @@ namespace Apache.Ignite.Core.Configuration\n     using Apache.Ignite.Core.Cache.Configuration;\n     using Apache.Ignite.Core.Impl;\n     using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Client;\n \n     /// <summary>\n     /// Defines custom data region configuration for Apache Ignite page memory\n@@ -74,6 +75,11 @@ public class DataRegionConfiguration\n         /// </summary>\n         public static readonly TimeSpan DefaultMetricsRateTimeInterval = TimeSpan.FromSeconds(60);\n \n+        /// <summary>\n+        /// Default value for <see cref=\"LazyMemoryAllocation\"/>.\n+        /// </summary>\n+        public const bool DefaultLazyMemoryAllocation = true;\n+\n         /// <summary>\n         /// Initializes a new instance of the <see cref=\"DataRegionConfiguration\"/> class.\n         /// </summary>\n@@ -86,13 +92,15 @@ public DataRegionConfiguration()\n             MaxSize = DefaultMaxSize;\n             MetricsSubIntervalCount = DefaultMetricsSubIntervalCount;\n             MetricsRateTimeInterval = DefaultMetricsRateTimeInterval;\n+            LazyMemoryAllocation = DefaultLazyMemoryAllocation;\n         }\n \n         /// <summary>\n         /// Initializes a new instance of the <see cref=\"DataRegionConfiguration\"/> class.\n         /// </summary>\n         /// <param name=\"reader\">The reader.</param>\n-        internal DataRegionConfiguration(IBinaryRawReader reader)\n+        /// <param name=\"srvVer\">Server version.</param>\n+        internal DataRegionConfiguration(IBinaryRawReader reader, ClientProtocolVersion srvVer)\n         {\n             Name = reader.ReadString();\n             PersistenceEnabled = reader.ReadBoolean();\n@@ -106,12 +114,19 @@ internal DataRegionConfiguration(IBinaryRawReader reader)\n             MetricsSubIntervalCount = reader.ReadInt();\n             MetricsRateTimeInterval = reader.ReadLongAsTimespan();\n             CheckpointPageBufferSize = reader.ReadLong();\n+\n+            if (srvVer.CompareTo(ClientSocket.Ver130) >= 0)\n+            {\n+                LazyMemoryAllocation = reader.ReadBoolean();\n+            }\n         }\n \n         /// <summary>\n         /// Writes this instance to a writer.\n         /// </summary>\n-        internal void Write(IBinaryRawWriter writer)\n+        /// <param name=\"writer\">The writer.</param>\n+        /// <param name=\"srvVer\">Server version.</param>\n+        internal void Write(IBinaryRawWriter writer, ClientProtocolVersion srvVer)\n         {\n             writer.WriteString(Name);\n             writer.WriteBoolean(PersistenceEnabled);\n@@ -125,6 +140,11 @@ internal void Write(IBinaryRawWriter writer)\n             writer.WriteInt(MetricsSubIntervalCount);\n             writer.WriteTimeSpanAsLong(MetricsRateTimeInterval);\n             writer.WriteLong(CheckpointPageBufferSize);\n+\n+            if (srvVer.CompareTo(ClientSocket.Ver130) >= 0)\n+            {\n+                writer.WriteBoolean(LazyMemoryAllocation);\n+            }\n         }\n \n         /// <summary>\n@@ -218,5 +238,11 @@ internal void Write(IBinaryRawWriter writer)\n         /// Default is <c>0</c>: Ignite will choose buffer size automatically.\n         /// </summary>\n         public long CheckpointPageBufferSize { get; set; }\n+        \n+        /// <summary>\n+        /// Gets or sets the lazy memory allocation flag.\n+        /// </summary>\n+        [DefaultValue(DefaultLazyMemoryAllocation)]\n+        public bool LazyMemoryAllocation { get; set; }\n     }\n }",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataRegionConfiguration.cs",
                "sha": "ef0759e52ed2193af0154571d40af2a643fc2ae9",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataStorageConfiguration.cs",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataStorageConfiguration.cs?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 6,
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataStorageConfiguration.cs",
                "patch": "@@ -26,6 +26,7 @@ namespace Apache.Ignite.Core.Configuration\n     using Apache.Ignite.Core.Binary;\n     using Apache.Ignite.Core.Common;\n     using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Client;\n \n     /// <summary>\n     /// Data storage configuration for Ignite page memory.\n@@ -202,7 +203,8 @@ public DataStorageConfiguration()\n         /// Initializes a new instance of the <see cref=\"DataStorageConfiguration\"/> class.\n         /// </summary>\n         /// <param name=\"reader\">The reader.</param>\n-        internal DataStorageConfiguration(IBinaryRawReader reader)\n+        /// <param name=\"srvVer\">Server version.</param>\n+        internal DataStorageConfiguration(IBinaryRawReader reader, ClientProtocolVersion srvVer)\n         {\n             Debug.Assert(reader != null);\n \n@@ -241,21 +243,22 @@ internal DataStorageConfiguration(IBinaryRawReader reader)\n             if (count > 0)\n             {\n                 DataRegionConfigurations = Enumerable.Range(0, count)\n-                    .Select(x => new DataRegionConfiguration(reader))\n+                    .Select(x => new DataRegionConfiguration(reader, srvVer))\n                     .ToArray();\n             }\n \n             if (reader.ReadBoolean())\n             {\n-                DefaultDataRegionConfiguration = new DataRegionConfiguration(reader);\n+                DefaultDataRegionConfiguration = new DataRegionConfiguration(reader, srvVer);\n             }\n         }\n \n         /// <summary>\n         /// Writes this instance to the specified writer.\n         /// </summary>\n         /// <param name=\"writer\">The writer.</param>\n-        internal void Write(IBinaryRawWriter writer)\n+        /// <param name=\"srvVer\">Server version.</param>\n+        internal void Write(IBinaryRawWriter writer, ClientProtocolVersion srvVer)\n         {\n             Debug.Assert(writer != null);\n \n@@ -301,7 +304,7 @@ internal void Write(IBinaryRawWriter writer)\n                             \"DataStorageConfiguration.DataRegionConfigurations must not contain null items.\");\n                     }\n \n-                    region.Write(writer);\n+                    region.Write(writer, srvVer);\n                 }\n             }\n             else\n@@ -312,7 +315,7 @@ internal void Write(IBinaryRawWriter writer)\n             if (DefaultDataRegionConfiguration != null)\n             {\n                 writer.WriteBoolean(true);\n-                DefaultDataRegionConfiguration.Write(writer);\n+                DefaultDataRegionConfiguration.Write(writer, srvVer);\n             }\n             else\n             {",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Configuration/DataStorageConfiguration.cs",
                "sha": "17ddf6b4b66b44b2e425de146bdb68a6ee358ee3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfiguration.cs",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfiguration.cs?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 2,
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfiguration.cs",
                "patch": "@@ -574,7 +574,7 @@ internal void Write(BinaryWriter writer, ClientProtocolVersion srvVer)\n             if (DataStorageConfiguration != null)\n             {\n                 writer.WriteBoolean(true);\n-                DataStorageConfiguration.Write(writer);\n+                DataStorageConfiguration.Write(writer, srvVer);\n             }\n             else\n             {\n@@ -863,7 +863,7 @@ private void ReadCore(BinaryReader r, ClientProtocolVersion srvVer)\n             // Data storage.\n             if (r.ReadBoolean())\n             {\n-                DataStorageConfiguration = new DataStorageConfiguration(r);\n+                DataStorageConfiguration = new DataStorageConfiguration(r, srvVer);\n             }\n \n             // SSL context factory.",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfiguration.cs",
                "sha": "f98acf9e182e69de806593e5fae9d3b77f91f49e",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfigurationSection.xsd",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfigurationSection.xsd?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 0,
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfigurationSection.xsd",
                "patch": "@@ -1714,6 +1714,13 @@\n                                             <xs:documentation>Size of the checkpointing page buffer.</xs:documentation>\n                                         </xs:annotation>\n                                     </xs:attribute>\n+                                    <xs:attribute name=\"lazyMemoryAllocation\" type=\"xs:boolean\">\n+                                        <xs:annotation>\n+                                            <xs:documentation>\n+                                                Enable lazy memory allocation.\n+                                            </xs:documentation>\n+                                        </xs:annotation>\n+                                    </xs:attribute>\n                                 </xs:complexType>\n                             </xs:element>\n                             <xs:element name=\"dataRegionConfigurations\">\n@@ -1787,6 +1794,13 @@\n                                                         <xs:documentation>Size of the checkpointing page buffer.</xs:documentation>\n                                                     </xs:annotation>\n                                                 </xs:attribute>\n+                                                <xs:attribute name=\"lazyMemoryAllocation\" type=\"xs:boolean\">\n+                                                    <xs:annotation>\n+                                                        <xs:documentation>\n+                                                            Enable lazy memory allocation.\n+                                                        </xs:documentation>\n+                                                    </xs:annotation>\n+                                                </xs:attribute>\n                                             </xs:complexType>\n                                         </xs:element>\n                                     </xs:sequence>",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/IgniteConfigurationSection.xsd",
                "sha": "0a6dca1f8453755698b7993e5f09ce3793f20e8e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ignite/blob/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs?ref=4c6f4aefc1c36bb5174a4a9b009824af25734dd3",
                "deletions": 1,
                "filename": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "patch": "@@ -46,8 +46,11 @@ internal sealed class ClientSocket : IClientSocket\n         /** Version 1.2.0. */\n         public static readonly ClientProtocolVersion Ver120 = new ClientProtocolVersion(1, 2, 0);\n \n+        /** Version 1.3.0. */\n+        public static readonly ClientProtocolVersion Ver130 = new ClientProtocolVersion(1, 3, 0);\n+\n         /** Current version. */\n-        public static readonly ClientProtocolVersion CurrentProtocolVersion = Ver120;\n+        public static readonly ClientProtocolVersion CurrentProtocolVersion = Ver130;\n \n         /** Handshake opcode. */\n         private const byte OpHandshake = 1;",
                "raw_url": "https://github.com/apache/ignite/raw/4c6f4aefc1c36bb5174a4a9b009824af25734dd3/modules/platforms/dotnet/Apache.Ignite.Core/Impl/Client/ClientSocket.cs",
                "sha": "e2567ef3791514fab2467d15695148993e81fcfd",
                "status": "modified"
            }
        ],
        "message": "IGNITE-9113: Lazy memory allocation implementation (#6388)\n\n* IGNITE-9113: Lazy memory allocation implemented.\r\n\r\n* IGNITE-9113: Lazy memory allocation implemented.\r\n\r\n* IGNITE-9113:\r\n\r\n* useless file removed\r\n* test added to suite.\r\n\r\n* IGNITE-9113:\r\n\r\n* Fix for persistence mode.\r\n* One test Ignored as it not working.\r\n\r\n* IGNITE-9113: Tests added.\r\n\r\n* IGNITE-9113: Tests added.\r\n\r\n* IGNITE-9113: double start fix.\r\n\r\n* IGNITE-9113: double start assert.\r\n\r\n* IGNITE-9113: Fix of several issues.\r\n\r\n* IGNITE-9113: Minor fixes.\r\n\r\n* IGNITE-9113: Tests fixes.\r\n\r\n* IGNITE-9113: NPE fixes for client nodes..\r\n\r\n* IGNITE-9113: NPE fixes for some modes.\r\n\r\n* IGNITE-9113: .Net fixes.\r\n\r\n* IGNITE-9113: .Net fixes.\r\n\r\n* IGNITE-9113: Useless log removed.\r\n\r\n* IGNITE-9113: Temporary commit.\r\n\r\n* IGNITE-9113: Flag moved to DataRegionConfiguration.\r\n\r\n* IGNITE-9113: NPE fix.\r\n\r\n* IGNITE-9113: Revert unnecessary static import.\r\n\r\n* IGNITE-9113: System data regions are not lazy.\r\n\r\n* IGNITE-9113: JavaDoc fix.\r\n\r\n* IGNITE-9113: Unused import removed.\r\n\r\n* IGNITE-9113: double stop fix.\r\n\r\n* IGNITE-9113: Unused import fix.\r\n\r\n* IGNITE-9113: Code review fixes.\r\n\r\n* IGNITE-9113: Tests added.\r\n\r\n* IGNITE-9113: Tests fixed.\r\n\r\n* IGNITE-9560: Fix test.",
        "parent": "https://github.com/apache/ignite/commit/48e6719f1f7156126dcf0dce54fad58c73da2392",
        "repo": "ignite",
        "unit_tests": [
            "PageMemoryImplTest.java"
        ]
    },
    "ignite_51ab35f": {
        "bug_id": "ignite_51ab35f",
        "commit": "https://github.com/apache/ignite/commit/51ab35fa094cc409bb0c20d24affecfc100a9006",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=51ab35fa094cc409bb0c20d24affecfc100a9006",
                "deletions": 2,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "patch": "@@ -2080,8 +2080,6 @@ protected void onExchange(DiscoveryDataPacket dataPacket, ClassLoader clsLdr) {\n \n     /** {@inheritDoc} */\n     @Override public void spiStart(@Nullable String igniteInstanceName) throws IgniteSpiException {\n-        sslEnable = ignite().configuration().getSslContextFactory() != null;\n-\n         initializeImpl();\n \n         registerMBean(igniteInstanceName, new TcpDiscoverySpiMBeanImpl(this), TcpDiscoverySpiMBean.class);\n@@ -2096,6 +2094,8 @@ private void initializeImpl() {\n         if (impl != null)\n             return;\n \n+        sslEnable = ignite().configuration().getSslContextFactory() != null;\n+\n         initFailureDetectionTimeout();\n \n         if (!forceSrvMode && (Boolean.TRUE.equals(ignite.configuration().isClientMode()))) {",
                "raw_url": "https://github.com/apache/ignite/raw/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "sha": "b7df2702b4c587ae9bef42bfe01008145fee938f",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/ignite/blob/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/SingleNodePersistenceSslTest.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/SingleNodePersistenceSslTest.java?ref=51ab35fa094cc409bb0c20d24affecfc100a9006",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/SingleNodePersistenceSslTest.java",
                "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence;\n+\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+/**\n+ * Checks, that cluster correct workds with enabled persistence and SSL.\n+ */\n+public class SingleNodePersistenceSslTest extends GridCommonAbstractTest {\n+    /** {@inheritDoc} */\n+    @Override public IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        return super.getConfiguration(igniteInstanceName)\n+            .setSslContextFactory(GridTestUtils.sslFactory())\n+            .setFailureHandler(new StopNodeFailureHandler())\n+            .setDataStorageConfiguration(\n+                new DataStorageConfiguration().setDefaultDataRegionConfiguration(\n+                    new DataRegionConfiguration().setPersistenceEnabled(true)\n+                )\n+            );\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /**\n+     * Checks, that cluster could be started and activated.\n+     *\n+     * @throws Exception If test failed.\n+     */\n+    @Test\n+    public void testActivate() throws Exception {\n+        startGrids(2).cluster().active(true);\n+\n+        assertTrue(grid(0).cluster().active());\n+    }\n+}",
                "raw_url": "https://github.com/apache/ignite/raw/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/SingleNodePersistenceSslTest.java",
                "sha": "118d57de9a45c7048c0e6ce6883630c9f0dceeca",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicWithPersistenceTestSuite.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicWithPersistenceTestSuite.java?ref=51ab35fa094cc409bb0c20d24affecfc100a9006",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicWithPersistenceTestSuite.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.ignite.internal.encryption.EncryptedCachePreconfiguredRestartTest;\n import org.apache.ignite.internal.encryption.EncryptedCacheRestartTest;\n import org.apache.ignite.internal.processors.cache.persistence.CheckpointReadLockFailureTest;\n+import org.apache.ignite.internal.processors.cache.persistence.SingleNodePersistenceSslTest;\n import org.apache.ignite.marshaller.GridMarshallerMappingConsistencyTest;\n import org.apache.ignite.util.GridCommandHandlerSslTest;\n import org.apache.ignite.util.GridCommandHandlerTest;\n@@ -64,6 +65,8 @@\n     EncryptedCacheNodeJoinTest.class,\n     EncryptedCacheRestartTest.class,\n     EncryptedCachePreconfiguredRestartTest.class,\n+\n+    SingleNodePersistenceSslTest.class\n })\n public class IgniteBasicWithPersistenceTestSuite {\n }",
                "raw_url": "https://github.com/apache/ignite/raw/51ab35fa094cc409bb0c20d24affecfc100a9006/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteBasicWithPersistenceTestSuite.java",
                "sha": "2e9a1325ea07a19522d01c89cb91fd05ccddc7db",
                "status": "modified"
            }
        ],
        "message": "IGNITE-11631 Fix NPE on server node start and persistence - Fixes #6344.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "parent": "https://github.com/apache/ignite/commit/18d20a632e5fbabc28f0bb355e5b458171842a0a",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpDiscoverySpi.java"
        ]
    },
    "ignite_6b1265c": {
        "bug_id": "ignite_6b1265c",
        "commit": "https://github.com/apache/ignite/commit/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "patch": "@@ -318,11 +318,6 @@\n         rmtNodes.clear();\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator auth) {\n-        // No-op.\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void sendCustomEvent(DiscoverySpiCustomMessage evt) {\n         if (segmented)",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ClientImpl.java",
                "sha": "e672d6490b14fb1048d50d90e425f54ad83cdaf7",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "deletions": 14,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "patch": "@@ -115,9 +115,6 @@\n     /** Response on join request from coordinator (in case of duplicate ID or auth failure). */\n     private final GridTuple<TcpDiscoveryAbstractMessage> joinRes = F.t1();\n \n-    /** Node authenticator. */\n-    private DiscoverySpiNodeAuthenticator nodeAuth;\n-\n     /** Mutex. */\n     private final Object mux = new Object();\n \n@@ -630,11 +627,6 @@ private boolean pingNode(TcpDiscoveryNode node) {\n         spiStop0(true);\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator nodeAuth) {\n-        this.nodeAuth = nodeAuth;\n-    }\n-\n     /** {@inheritDoc} */\n     @Override public void sendCustomEvent(DiscoverySpiCustomMessage evt) {\n         try {\n@@ -680,10 +672,10 @@ private void joinTopology() throws IgniteSpiException {\n                 if (log.isDebugEnabled())\n                     log.debug(\"Join request message has not been sent (local node is the first in the topology).\");\n \n-                if (nodeAuth != null) {\n+                if (spi.nodeAuth != null) {\n                     // Authenticate local node.\n                     try {\n-                        SecurityContext subj = nodeAuth.authenticateNode(locNode, locCred);\n+                        SecurityContext subj = spi.nodeAuth.authenticateNode(locNode, locCred);\n \n                         if (subj == null)\n                             throw new IgniteSpiException(\"Authentication failed for local node: \" + locNode.id());\n@@ -2469,12 +2461,12 @@ private void processJoinRequestMessage(TcpDiscoveryJoinRequestMessage msg) {\n                     return;\n                 }\n \n-                if (nodeAuth != null) {\n+                if (spi.nodeAuth != null) {\n                     // Authenticate node first.\n                     try {\n                         SecurityCredentials cred = unmarshalCredentials(node);\n \n-                        SecurityContext subj = nodeAuth.authenticateNode(node, cred);\n+                        SecurityContext subj = spi.nodeAuth.authenticateNode(node, cred);\n \n                         if (subj == null) {\n                             // Node has not pass authentication.\n@@ -2843,7 +2835,7 @@ private void processNodeAddedMessage(TcpDiscoveryNodeAddedMessage msg) {\n                     return;\n                 }\n \n-                if (!isLocalNodeCoordinator() && nodeAuth != null && nodeAuth.isGlobalNodeAuthentication()) {\n+                if (!isLocalNodeCoordinator() && spi.nodeAuth != null && spi.nodeAuth.isGlobalNodeAuthentication()) {\n                     boolean authFailed = true;\n \n                     try {\n@@ -2861,7 +2853,7 @@ private void processNodeAddedMessage(TcpDiscoveryNodeAddedMessage msg) {\n                             authFailed = false;\n                         }\n                         else {\n-                            SecurityContext subj = nodeAuth.authenticateNode(node, cred);\n+                            SecurityContext subj = spi.nodeAuth.authenticateNode(node, cred);\n \n                             SecurityContext coordSubj = spi.ignite().configuration().getMarshaller().unmarshal(\n                                 node.<byte[]>attribute(IgniteNodeAttributes.ATTR_SECURITY_SUBJECT),",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "sha": "57c13d668cc171c61b0c2b2fdf26cbf831ba7d75",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "deletions": 5,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "patch": "@@ -112,11 +112,6 @@ protected void onException(String msg, Exception e){\n      */\n     public abstract void disconnect() throws IgniteSpiException;\n \n-    /**\n-     * @param auth Auth.\n-     */\n-    public abstract void setAuthenticator(DiscoverySpiNodeAuthenticator auth);\n-\n     /**\n      * @param msg Message.\n      */",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoveryImpl.java",
                "sha": "f285279cda828e68f75764f20660bb5ec61e8032",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ignite/blob/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=6b1265c2b103b4131b3ffc6deecd55d440fbe9b0",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "patch": "@@ -294,6 +294,9 @@\n     @SuppressWarnings({\"FieldAccessedSynchronizedAndUnsynchronized\"})\n     protected long ipFinderCleanFreq = DFLT_IP_FINDER_CLEAN_FREQ;\n \n+    /** Node authenticator. */\n+    protected DiscoverySpiNodeAuthenticator nodeAuth;\n+\n     /** Context initialization latch. */\n     @GridToStringExclude\n     private final CountDownLatch ctxInitLatch = new CountDownLatch(1);\n@@ -353,7 +356,7 @@\n \n     /** {@inheritDoc} */\n     @Override public void setAuthenticator(DiscoverySpiNodeAuthenticator auth) {\n-        impl.setAuthenticator(auth);\n+        nodeAuth = auth;\n     }\n \n     /** {@inheritDoc} */",
                "raw_url": "https://github.com/apache/ignite/raw/6b1265c2b103b4131b3ffc6deecd55d440fbe9b0/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "sha": "1b8424ca76a1204181792e3443784581d732e0a6",
                "status": "modified"
            }
        ],
        "message": "# IGNITE-943 Bug fix: NPE in setAuthenticator",
        "parent": "https://github.com/apache/ignite/commit/2bc07956a828ac836641f4fbe6ae0db7b3cc1793",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpDiscoverySpi.java"
        ]
    },
    "ignite_74f4651": {
        "bug_id": "ignite_74f4651",
        "commit": "https://github.com/apache/ignite/commit/74f46515368df83177f1ae7e59794295f20c1774",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "patch": "@@ -2140,7 +2140,7 @@ public Serializable consistentId() {\n      *\n      * @return Wrapped DiscoverySpi SPI.\n      */\n-    private DiscoverySpi getInjectedDiscoverySpi() {\n+    public DiscoverySpi getInjectedDiscoverySpi() {\n         try {\n             inject();\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/internal/managers/discovery/GridDiscoveryManager.java",
                "sha": "261e73db97786eefd7c0c71d07c16d9d7c963347",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "patch": "@@ -68,6 +68,8 @@\n import org.apache.ignite.lang.IgniteUuid;\n import org.apache.ignite.spi.IgniteNodeValidationResult;\n import org.apache.ignite.spi.discovery.DiscoveryDataBag;\n+import org.apache.ignite.spi.discovery.DiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n import org.apache.ignite.thread.IgniteThreadPoolExecutor;\n import org.jetbrains.annotations.Nullable;\n \n@@ -451,7 +453,7 @@ public void updateUser(String login, String passwd) throws IgniteCheckedExceptio\n     @Override public void collectGridNodeData(DiscoveryDataBag dataBag) {\n         // 1. Collect users info only on coordinator\n         // 2. Doesn't collect users info to send on client node due to security reason.\n-        if (!isEnabled || !F.eq(ctx.localNodeId(), coordinator().id()) || dataBag.isJoiningNodeClient())\n+        if (!isEnabled || !isLocalNodeCoordinator() || dataBag.isJoiningNodeClient())\n             return;\n \n         synchronized (mux) {\n@@ -466,6 +468,21 @@ public void updateUser(String login, String passwd) throws IgniteCheckedExceptio\n         }\n     }\n \n+    /**\n+     * Checks whether local node is coordinator. Nodes that are leaving or failed\n+     * (but are still in topology) are removed from search.\n+     *\n+     * @return {@code true} if local node is coordinator.\n+     */\n+    private boolean isLocalNodeCoordinator() {\n+        DiscoverySpi spi = ctx.discovery().getInjectedDiscoverySpi();\n+\n+        if (spi instanceof TcpDiscoverySpi)\n+            return ((TcpDiscoverySpi)spi).isLocalNodeCoordinator();\n+        else\n+            return F.eq(ctx.localNodeId(), coordinator().id());\n+    }\n+\n     /** {@inheritDoc} */\n     @Override public void onGridDataReceived(DiscoveryDataBag.GridDiscoveryData data) {\n         initUsrs = (InitialUsersData)data.commonData();",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/internal/processors/authentication/IgniteAuthenticationProcessor.java",
                "sha": "ac713c3dce87505172715cd43b4f4248616d388d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "patch": "@@ -1473,7 +1473,7 @@ private void notifyDiscovery(int type, long topVer, TcpDiscoveryNode node) {\n      *\n      * @return {@code true} if local node is coordinator.\n      */\n-    private boolean isLocalNodeCoordinator() {\n+    public boolean isLocalNodeCoordinator() {\n         synchronized (mux) {\n             boolean crd = spiState == CONNECTED && locNode.equals(resolveCoordinator());\n ",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/ServerImpl.java",
                "sha": "6b2293a1d275c1ac4b73a9067d85226731f2c422",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "deletions": 0,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "patch": "@@ -2235,6 +2235,19 @@ public void brakeConnection() {\n         impl.brakeConnection();\n     }\n \n+    /**\n+     * Checks whether local node is coordinator. Nodes that are leaving or failed\n+     * (but are still in topology) are removed from search.\n+     *\n+     * @return {@code true} if local node is coordinator.\n+     */\n+    public boolean isLocalNodeCoordinator() {\n+        if (impl instanceof ServerImpl)\n+            return ((ServerImpl)impl).isLocalNodeCoordinator();\n+\n+        return false;\n+    }\n+\n     /**\n      * @return Marshaller.\n      */",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "sha": "801f2b65655218946e11999472002b5e3e366150",
                "status": "modified"
            },
            {
                "additions": 90,
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/test/java/org/apache/ignite/internal/processors/authentication/AuthenticationProcessorNPEOnStartTest.java",
                "changes": 90,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/internal/processors/authentication/AuthenticationProcessorNPEOnStartTest.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/internal/processors/authentication/AuthenticationProcessorNPEOnStartTest.java",
                "patch": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.authentication;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.apache.ignite.configuration.DataRegionConfiguration;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ * Test for NPE on start node simultaneous.\n+ */\n+public class AuthenticationProcessorNPEOnStartTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final TcpDiscoveryIpFinder IP_FINDER = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        TcpDiscoverySpi spi = new TcpDiscoverySpi();\n+\n+        spi.setIpFinder(IP_FINDER);\n+\n+        cfg.setDiscoverySpi(spi);\n+\n+        cfg.setAuthenticationEnabled(true);\n+\n+        cfg.setDataStorageConfiguration(new DataStorageConfiguration()\n+            .setDefaultDataRegionConfiguration(new DataRegionConfiguration()\n+                .setPersistenceEnabled(true)));\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        U.resolveWorkDirectory(U.defaultWorkDirectory(), \"db\", true);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    public void test() throws Exception {\n+        final AtomicInteger nodeIdx = new AtomicInteger();\n+\n+        GridTestUtils.runMultiThreaded(new Runnable() {\n+            @Override public void run() {\n+                try {\n+                    startGrid(nodeIdx.getAndIncrement());\n+                }\n+                catch (Exception e) {\n+                    e.printStackTrace();\n+\n+                    fail(\"Unexpected exception\");\n+                }\n+            }\n+        }, 10, \"auth-grid-starter\");\n+    }\n+}",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/test/java/org/apache/ignite/internal/processors/authentication/AuthenticationProcessorNPEOnStartTest.java",
                "sha": "9748db772747ab8c16cbc390b30bba765ae4ee1e",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java?ref=74f46515368df83177f1ae7e59794295f20c1774",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "patch": "@@ -20,6 +20,7 @@\n import junit.framework.TestSuite;\n import org.apache.ignite.internal.processors.authentication.AuthenticationConfigurationClusterTest;\n import org.apache.ignite.internal.processors.authentication.AuthenticationOnNotActiveClusterTest;\n+import org.apache.ignite.internal.processors.authentication.AuthenticationProcessorNPEOnStartTest;\n import org.apache.ignite.internal.processors.authentication.AuthenticationProcessorNodeRestartTest;\n import org.apache.ignite.internal.processors.authentication.AuthenticationProcessorSelfTest;\n import org.apache.ignite.internal.processors.cache.PartitionedAtomicCacheGetsDistributionTest;\n@@ -87,6 +88,7 @@ public static TestSuite suite() throws Exception {\n         suite.addTestSuite(AuthenticationProcessorSelfTest.class);\n         suite.addTestSuite(AuthenticationOnNotActiveClusterTest.class);\n         suite.addTestSuite(AuthenticationProcessorNodeRestartTest.class);\n+        suite.addTestSuite(AuthenticationProcessorNPEOnStartTest.class);\n \n         suite.addTestSuite(ReplicatedAtomicCacheGetsDistributionTest.class);\n         suite.addTestSuite(ReplicatedTransactionalOptimisticCacheGetsDistributionTest.class);",
                "raw_url": "https://github.com/apache/ignite/raw/74f46515368df83177f1ae7e59794295f20c1774/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteCacheTestSuite6.java",
                "sha": "a31bd7544a31d210fc47b85aa1474ecfabb318ba",
                "status": "modified"
            }
        ],
        "message": "IGNITE-8355 Fixed NPE on concurrent nodes start - Fixes #3899.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "parent": "https://github.com/apache/ignite/commit/8a7e8f07fccebb9d5786e5624e353af730d4d039",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpDiscoverySpi.java"
        ]
    },
    "ignite_7ada6a5": {
        "bug_id": "ignite_7ada6a5",
        "commit": "https://github.com/apache/ignite/commit/7ada6a5f5a339b1282bd554c068b380254f78065",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/ignite/blob/7ada6a5f5a339b1282bd554c068b380254f78065/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java?ref=7ada6a5f5a339b1282bd554c068b380254f78065",
                "deletions": 6,
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "patch": "@@ -69,7 +69,7 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                 throw new CacheException(\"Failed to find class: \" + clsName, e);\n             }\n             catch (NoSuchMethodException e) {\n-                throw new CacheException(\"Failed to find empty constructor for class: \" + clsName, e);\n+                throw new CacheException(\"Failed to find default constructor for class: \" + clsName, e);\n             }\n \n             setters = U.newHashMap(fields.size());\n@@ -87,17 +87,17 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                         getters.put(field.getJavaName(), cls.getMethod(\"is\" + prop));\n                     }\n                     catch (NoSuchMethodException e) {\n-                        throw new CacheException(\"Failed to find getter for property \" + field.getJavaName() +\n-                            \" of class: \" + cls.getName(), e);\n+                        throw new CacheException(\"Failed to find getter in pojo class [class name: \" + clsName +\n+                            \", property: \" + field.getJavaName() + \"]\", e);\n                     }\n                 }\n \n                 try {\n                     setters.put(field.getJavaName(), cls.getMethod(\"set\" + prop, field.getJavaType()));\n                 }\n                 catch (NoSuchMethodException e) {\n-                    throw new CacheException(\"Failed to find setter for property \" + field.getJavaName() +\n-                        \" of class: \" + clsName, e);\n+                    throw new CacheException(\"Failed to find setter in pojo class [class name: \" + clsName +\n+                        \", property: \" + field.getJavaName() + \"]\", e);\n                 }\n             }\n         }\n@@ -157,12 +157,19 @@ protected Object newInstance() throws CacheLoaderException {\n         Map<String, Integer> loadColIdxs, ResultSet rs) throws CacheLoaderException {\n         PojoMethodsCache mc = mtdsCache.get(cacheName).get(typeName);\n \n+        if (mc == null)\n+            throw new CacheLoaderException(\"Failed to find cache type metadata for type: \" + typeName);\n+\n         Object obj = mc.newInstance();\n \n         try {\n             for (CacheTypeFieldMetadata field : fields) {\n                 Method setter = mc.setters.get(field.getJavaName());\n \n+                if (setter == null)\n+                    throw new CacheLoaderException(\"Failed to find setter in pojo class [class name:\" + typeName +\n+                        \", property: \" + field.getJavaName() + \"]\");\n+\n                 Integer colIdx = loadColIdxs.get(field.getDatabaseName());\n \n                 setter.invoke(obj, getColumnValue(rs, colIdx, field.getJavaType()));\n@@ -181,7 +188,16 @@ protected Object newInstance() throws CacheLoaderException {\n         try {\n             PojoMethodsCache mc = mtdsCache.get(cacheName).get(typeName);\n \n-            return mc.getters.get(fieldName).invoke(obj);\n+            if (mc == null)\n+                throw new CacheException(\"Failed to find cache type metadata for type: \" + typeName);\n+\n+            Method getter = mc.getters.get(fieldName);\n+\n+            if (getter == null)\n+                throw new CacheLoaderException(\"Failed to find getter in pojo class [class name:\" + typeName +\n+                    \", property: \" + fieldName + \"]\");\n+\n+            return getter.invoke(obj);\n         }\n         catch (Exception e) {\n             throw new CacheException(\"Failed to read object of class: \" + typeName, e);",
                "raw_url": "https://github.com/apache/ignite/raw/7ada6a5f5a339b1282bd554c068b380254f78065/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "sha": "0c6292d302f76d3e1ccbb0a21de3aa0a41226eb0",
                "status": "modified"
            }
        ],
        "message": "# ignite-281 Fixed npe CacheJdbcPojoStore.",
        "parent": "https://github.com/apache/ignite/commit/dd6c24f4e45cf136aa1d496028c20ce5f0d1a35d",
        "repo": "ignite",
        "unit_tests": [
            "CacheJdbcPojoStoreTest.java"
        ]
    },
    "ignite_895771a": {
        "bug_id": "ignite_895771a",
        "commit": "https://github.com/apache/ignite/commit/895771a79d8acca3baf06c23bf3f82483ec62d6f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/895771a79d8acca3baf06c23bf3f82483ec62d6f/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=895771a79d8acca3baf06c23bf3f82483ec62d6f",
                "deletions": 1,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "patch": "@@ -1458,8 +1458,10 @@ public CommunicationListener getListener() {\n                     }\n                 };\n \n+                boolean clientMode = Boolean.TRUE.equals(ignite.configuration().isClientMode());\n+\n                 IgniteBiInClosure<GridNioSession, Integer> queueSizeMonitor =\n-                    !ignite.configuration().isClientMode() && slowClientQueueLimit > 0 ?\n+                    !clientMode && slowClientQueueLimit > 0 ?\n                     new CI2<GridNioSession, Integer>() {\n                         @Override public void apply(GridNioSession ses, Integer qSize) {\n                             checkClientQueueSize(ses, qSize);",
                "raw_url": "https://github.com/apache/ignite/raw/895771a79d8acca3baf06c23bf3f82483ec62d6f/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "sha": "bbb9b1ca06b92a3186579141f26b41b8bcbb1d20",
                "status": "modified"
            }
        ],
        "message": "# ignite-sprint-6 fixed NPE in comm spi unit tests",
        "parent": "https://github.com/apache/ignite/commit/ef4abeba881f079cab08af9ade99fe52ecf5d26d",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpCommunicationSpi.java"
        ]
    },
    "ignite_95850b4": {
        "bug_id": "ignite_95850b4",
        "commit": "https://github.com/apache/ignite/commit/95850b47bde6df109ecd029d6a3a59b8e3772f81",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java?ref=95850b47bde6df109ecd029d6a3a59b8e3772f81",
                "deletions": 2,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "patch": "@@ -1858,11 +1858,11 @@ public static synchronized boolean isLocalHostChanged() throws IOException {\n      * @return List of reachable addresses.\n      */\n     public static List<InetAddress> filterReachable(Collection<InetAddress> addrs) {\n-        final int reachTimeout = 2000;\n-\n         if (addrs.isEmpty())\n             return Collections.emptyList();\n \n+        final int reachTimeout = 2000;\n+\n         if (addrs.size() == 1) {\n             InetAddress addr = F.first(addrs);\n ",
                "raw_url": "https://github.com/apache/ignite/raw/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/internal/util/IgniteUtils.java",
                "sha": "0668708c8e15904b19bc84d92f001004d8911663",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/ignite/blob/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=95850b47bde6df109ecd029d6a3a59b8e3772f81",
                "deletions": 6,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "patch": "@@ -2885,22 +2885,27 @@ protected GridCommunicationClient createTcpClient(ClusterNode node, int connIdx)\n \n         Set<InetAddress> allInetAddrs = U.newHashSet(addrs.size());\n \n-        for (InetSocketAddress addr : addrs)\n-            allInetAddrs.add(addr.getAddress());\n+        for (InetSocketAddress addr : addrs) {\n+            // Skip unresolved as addr.getAddress() can return null.\n+            if(!addr.isUnresolved())\n+                allInetAddrs.add(addr.getAddress());\n+        }\n \n         List<InetAddress> reachableInetAddrs = U.filterReachable(allInetAddrs);\n \n         if (reachableInetAddrs.size() < allInetAddrs.size()) {\n             LinkedHashSet<InetSocketAddress> addrs0 = U.newLinkedHashSet(addrs.size());\n \n+            List<InetSocketAddress> unreachableInetAddr = new ArrayList<>(allInetAddrs.size() - reachableInetAddrs.size());\n+\n             for (InetSocketAddress addr : addrs) {\n                 if (reachableInetAddrs.contains(addr.getAddress()))\n                     addrs0.add(addr);\n+                else\n+                    unreachableInetAddr.add(addr);\n             }\n-            for (InetSocketAddress addr : addrs) {\n-                if (!reachableInetAddrs.contains(addr.getAddress()))\n-                    addrs0.add(addr);\n-            }\n+\n+            addrs0.addAll(unreachableInetAddr);\n \n             addrs = addrs0;\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/95850b47bde6df109ecd029d6a3a59b8e3772f81/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "sha": "769a02ed0da8cd26921346e9d3fca4fe45f7bcca",
                "status": "modified"
            }
        ],
        "message": "IGNITE-5225: Fix NPE caused by changes in IGNITE-4577.\n\n(cherry picked from commit d463840)",
        "parent": "https://github.com/apache/ignite/commit/dacf973ef8580ff649fc2dafd5a55a420edf7759",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpCommunicationSpi.java"
        ]
    },
    "ignite_a1ec83a": {
        "bug_id": "ignite_a1ec83a",
        "commit": "https://github.com/apache/ignite/commit/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/ignite/blob/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java?ref=a1ec83a826f1a87b88dd16f93d0ee3b3168439b9",
                "deletions": 0,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "patch": "@@ -2781,6 +2781,9 @@ private void sendMessage0(ClusterNode node, Message msg, IgniteInClosure<IgniteE\n                 while (retry);\n             }\n             catch (Throwable t) {\n+                if (stopping)\n+                    throw new IgniteSpiException(\"Node is stopping.\", t);\n+\n                 log.error(\"Failed to send message to remote node [node=\" + node + \", msg=\" + msg + ']', t);\n \n                 if (t instanceof Error)",
                "raw_url": "https://github.com/apache/ignite/raw/a1ec83a826f1a87b88dd16f93d0ee3b3168439b9/modules/core/src/main/java/org/apache/ignite/spi/communication/tcp/TcpCommunicationSpi.java",
                "sha": "243f707bce7a59038c895d4c3664eccfc03bab0b",
                "status": "modified"
            }
        ],
        "message": "IGNITE-11293 Fix of NPE in TcpCommunicationSpi caused by simultaneous node stopping. - Fixes #6081.\n\nSigned-off-by: Dmitriy Govorukhin <dmitriy.govorukhin@gmail.com>",
        "parent": "https://github.com/apache/ignite/commit/033170d90f6c0618b9d6a3fd997e13a5ec1fff89",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpCommunicationSpi.java"
        ]
    },
    "ignite_c48f3bc": {
        "bug_id": "ignite_c48f3bc",
        "commit": "https://github.com/apache/ignite/commit/c48f3bc1046b1c496e0261edf7a693efc728b8f6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ignite/blob/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=c48f3bc1046b1c496e0261edf7a693efc728b8f6",
                "deletions": 0,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "patch": "@@ -451,6 +451,10 @@ public UUID getCoordinator() {\n \n     /** {@inheritDoc} */\n     @Override public Collection<ClusterNode> getRemoteNodes() {\n+        // Return empty nodes for resolving compatibility until implementation started.\n+        if (impl == null)\n+            return Collections.emptyList();\n+\n         return impl.getRemoteNodes();\n     }\n ",
                "raw_url": "https://github.com/apache/ignite/raw/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "sha": "c48fa11325ad5aad84bacbab46b9319c382d7b43",
                "status": "modified"
            },
            {
                "additions": 172,
                "blob_url": "https://github.com/apache/ignite/blob/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/IgniteTcpCommunicationConnectOnInitTest.java",
                "changes": 172,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/IgniteTcpCommunicationConnectOnInitTest.java?ref=c48f3bc1046b1c496e0261edf7a693efc728b8f6",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/IgniteTcpCommunicationConnectOnInitTest.java",
                "patch": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.spi.communication.tcp;\n+\n+import java.net.BindException;\n+import java.net.InetSocketAddress;\n+import java.nio.channels.SocketChannel;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteInternalFuture;\n+import org.apache.ignite.internal.util.nio.GridNioServer;\n+import org.apache.ignite.internal.util.nio.GridNioServerListenerAdapter;\n+import org.apache.ignite.internal.util.nio.GridNioSession;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.IgniteSpiException;\n+import org.apache.ignite.spi.communication.tcp.messages.HandshakeWaitMessage;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.jetbrains.annotations.Nullable;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+/**\n+ * Testing {@link TcpCommunicationSpi} that will send the wait handshake message on received connections until SPI\n+ * context initialized.\n+ */\n+@RunWith(JUnit4.class)\n+public class IgniteTcpCommunicationConnectOnInitTest extends GridCommonAbstractTest {\n+    /** */\n+    private static final int START_PORT = 55443;\n+\n+    /** */\n+    private volatile CountDownLatch commStartLatch;\n+\n+    /** */\n+    private volatile int commSpiBoundedPort;\n+\n+    /** */\n+    private volatile String commSpiSrvAddr;\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setCommunicationSpi(new TestCommunicationSpi());\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testClientConnectBeforeDiscoveryStarted() throws Exception {\n+        GridNioServer<?> srvr = startServer();\n+\n+        try {\n+            commStartLatch = new CountDownLatch(1);\n+\n+            IgniteInternalFuture<Boolean> fut = GridTestUtils.runAsync(() -> {\n+                startGrid(0);\n+\n+                return true;\n+            });\n+\n+            assertTrue(commStartLatch.await(5_000, TimeUnit.MILLISECONDS));\n+\n+            SocketChannel ch = SocketChannel.open(new InetSocketAddress(commSpiSrvAddr, commSpiBoundedPort));\n+\n+            GridNioSession ses = srvr.createSession(ch, null, false, null).get();\n+\n+            boolean wait = GridTestUtils.waitForCondition(\n+                () -> ses.bytesReceived() == HandshakeWaitMessage.MESSAGE_FULL_SIZE, 1000);\n+\n+            assertTrue(\"Handshake not started.\", wait);\n+\n+            fut.get();\n+        }\n+        finally {\n+            srvr.stop();\n+        }\n+    }\n+\n+    /**\n+     * Starts custom server.\n+     *\n+     * @return Started server.\n+     * @throws Exception If failed.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    private GridNioServer<?> startServer() throws Exception {\n+        int srvPort = START_PORT;\n+\n+        for (int i = 0; i < 10; i++) {\n+            try {\n+                GridNioServerListenerAdapter lsnr = new GridNioServerListenerAdapter() {\n+                    @Override public void onConnected(GridNioSession ses) {\n+                        // No-op.\n+                    }\n+\n+                    @Override public void onDisconnected(GridNioSession ses, @Nullable Exception e) {\n+                        // No-op.\n+                    }\n+\n+                    @Override public void onMessage(GridNioSession ses, Object msg) {\n+                        // No-op.\n+                    }\n+                };\n+\n+                GridNioServer<?> srvr = GridNioServer.builder()\n+                    .address(U.getLocalHost())\n+                    .port(srvPort)\n+                    .listener(lsnr)\n+                    .logger(log)\n+                    .selectorCount(Runtime.getRuntime().availableProcessors())\n+                    .igniteInstanceName(\"nio-test-grid\")\n+                    .filters().build();\n+\n+                srvr.start();\n+\n+                return srvr;\n+            }\n+            catch (IgniteCheckedException e) {\n+                if (i < 9 && e.hasCause(BindException.class)) {\n+                    log.error(\"Failed to start server, will try another port [err=\" + e + \", port=\" + srvPort + ']');\n+\n+                    U.sleep(1000);\n+\n+                    srvPort++;\n+                }\n+                else\n+                    throw e;\n+            }\n+        }\n+\n+        fail(\"Failed to start server.\");\n+\n+        return null;\n+    }\n+\n+    /** */\n+    private class TestCommunicationSpi extends TcpCommunicationSpi {\n+        /** {@inheritDoc} */\n+        @Override public void spiStart(String igniteInstanceName) throws IgniteSpiException {\n+            super.spiStart(igniteInstanceName);\n+\n+            commSpiBoundedPort = boundPort();\n+\n+            commSpiSrvAddr = getLocalAddress();\n+\n+            commStartLatch.countDown();\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/ignite/raw/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/test/java/org/apache/ignite/spi/communication/tcp/IgniteTcpCommunicationConnectOnInitTest.java",
                "sha": "029331617fa1110b92cc074d89beea38910140bf",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteSpiCommunicationSelfTestSuite.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteSpiCommunicationSelfTestSuite.java?ref=c48f3bc1046b1c496e0261edf7a693efc728b8f6",
                "deletions": 0,
                "filename": "modules/core/src/test/java/org/apache/ignite/testsuites/IgniteSpiCommunicationSelfTestSuite.java",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.ignite.spi.communication.tcp.GridTcpCommunicationSpiTcpFailureDetectionSelfTest;\n import org.apache.ignite.spi.communication.tcp.GridTcpCommunicationSpiTcpNoDelayOffSelfTest;\n import org.apache.ignite.spi.communication.tcp.GridTcpCommunicationSpiTcpSelfTest;\n+import org.apache.ignite.spi.communication.tcp.IgniteTcpCommunicationConnectOnInitTest;\n import org.apache.ignite.spi.communication.tcp.IgniteTcpCommunicationHandshakeWaitSslTest;\n import org.apache.ignite.spi.communication.tcp.IgniteTcpCommunicationHandshakeWaitTest;\n import org.apache.ignite.spi.communication.tcp.IgniteTcpCommunicationRecoveryAckClosureSelfTest;\n@@ -92,6 +93,7 @@ public static TestSuite suite() throws Exception {\n \n         suite.addTest(new JUnit4TestAdapter(IgniteTcpCommunicationHandshakeWaitTest.class));\n         suite.addTest(new JUnit4TestAdapter(IgniteTcpCommunicationHandshakeWaitSslTest.class));\n+        suite.addTest(new JUnit4TestAdapter(IgniteTcpCommunicationConnectOnInitTest.class));\n \n         //suite.addTest(new TestSuite(GridCacheDhtLockBackupSelfTest.class));\n ",
                "raw_url": "https://github.com/apache/ignite/raw/c48f3bc1046b1c496e0261edf7a693efc728b8f6/modules/core/src/test/java/org/apache/ignite/testsuites/IgniteSpiCommunicationSelfTestSuite.java",
                "sha": "5a208e67343e1a3eb2e1e00f4f52a3849e5fcd0f",
                "status": "modified"
            }
        ],
        "message": "IGNITE-4111 Fixed NPE on client connect before disco impl is initialized - Fixes #5650.\n\nSigned-off-by: Alexey Goncharuk <alexey.goncharuk@gmail.com>",
        "parent": "https://github.com/apache/ignite/commit/4ae29fca74e814321c8448e00e9d3fdcd54733aa",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpDiscoverySpi.java"
        ]
    },
    "ignite_ce153e4": {
        "bug_id": "ignite_ce153e4",
        "commit": "https://github.com/apache/ignite/commit/ce153e4d76122d2c1f060018530e94fe443ff2bf",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/ignite/blob/ce153e4d76122d2c1f060018530e94fe443ff2bf/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java?ref=ce153e4d76122d2c1f060018530e94fe443ff2bf",
                "deletions": 8,
                "filename": "modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "patch": "@@ -87,17 +87,17 @@ public PojoMethodsCache(String clsName, Collection<CacheTypeFieldMetadata> field\n                         getters.put(field.getJavaName(), cls.getMethod(\"is\" + prop));\n                     }\n                     catch (NoSuchMethodException e) {\n-                        throw new CacheException(\"Failed to find getter in pojo class [class name: \" + clsName +\n-                            \", property: \" + field.getJavaName() + \"]\", e);\n+                        throw new CacheException(\"Failed to find getter in POJO class [class name=\" + clsName +\n+                            \", property=\" + field.getJavaName() + \"]\", e);\n                     }\n                 }\n \n                 try {\n                     setters.put(field.getJavaName(), cls.getMethod(\"set\" + prop, field.getJavaType()));\n                 }\n                 catch (NoSuchMethodException e) {\n-                    throw new CacheException(\"Failed to find setter in pojo class [class name: \" + clsName +\n-                        \", property: \" + field.getJavaName() + \"]\", e);\n+                    throw new CacheException(\"Failed to find setter in POJO class [class name=\" + clsName +\n+                        \", property=\" + field.getJavaName() + \"]\", e);\n                 }\n             }\n         }\n@@ -167,8 +167,8 @@ protected Object newInstance() throws CacheLoaderException {\n                 Method setter = mc.setters.get(field.getJavaName());\n \n                 if (setter == null)\n-                    throw new CacheLoaderException(\"Failed to find setter in pojo class [class name:\" + typeName +\n-                        \", property: \" + field.getJavaName() + \"]\");\n+                    throw new CacheLoaderException(\"Failed to find setter in POJO class [class name=\" + typeName +\n+                        \", property=\" + field.getJavaName() + \"]\");\n \n                 Integer colIdx = loadColIdxs.get(field.getDatabaseName());\n \n@@ -194,8 +194,8 @@ protected Object newInstance() throws CacheLoaderException {\n             Method getter = mc.getters.get(fieldName);\n \n             if (getter == null)\n-                throw new CacheLoaderException(\"Failed to find getter in pojo class [class name:\" + typeName +\n-                    \", property: \" + fieldName + \"]\");\n+                throw new CacheLoaderException(\"Failed to find getter in POJO class [class name=\" + typeName +\n+                    \", property=\" + fieldName + \"]\");\n \n             return getter.invoke(obj);\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/ce153e4d76122d2c1f060018530e94fe443ff2bf/modules/core/src/main/java/org/apache/ignite/cache/store/jdbc/CacheJdbcPojoStore.java",
                "sha": "f2d6cae5c79bff27a9987faba4aa10b17a846054",
                "status": "modified"
            }
        ],
        "message": "# ignite-281 Fixed npe CacheJdbcPojoStore.",
        "parent": "https://github.com/apache/ignite/commit/65a852be839581099688593dabae75490798f1b2",
        "repo": "ignite",
        "unit_tests": [
            "CacheJdbcPojoStoreTest.java"
        ]
    },
    "ignite_d0dac7d": {
        "bug_id": "ignite_d0dac7d",
        "commit": "https://github.com/apache/ignite/commit/d0dac7de1e573ae3870e20adfe18abf61caa84ec",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/ignite/blob/d0dac7de1e573ae3870e20adfe18abf61caa84ec/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java?ref=d0dac7de1e573ae3870e20adfe18abf61caa84ec",
                "deletions": 13,
                "filename": "modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "patch": "@@ -1766,7 +1766,7 @@ private void notifyDiscovery(int type, long topVer, TcpDiscoveryNode node) {\n                 log.debug(\"Discovery notification [node=\" + node + \", spiState=\" + spiState +\n                     \", type=\" + U.gridEventName(type) + \", topVer=\" + topVer + ']');\n \n-            Collection<ClusterNode> top = F.<TcpDiscoveryNode, ClusterNode>upcast(ring.visibleNodes());\n+            Collection<ClusterNode> top = F.upcast(ring.visibleNodes());\n \n             Map<Long, Collection<ClusterNode>> hist = updateTopologyHistory(topVer, top);\n \n@@ -4522,20 +4522,22 @@ private void notifyDiscoveryListener(TcpDiscoveryCustomEventMessage msg) {\n \n                 TcpDiscoveryNode node = ring.node(msg.creatorNodeId());\n \n-                try {\n-                    Serializable msgObj = marsh.unmarshal(msg.messageBytes(), U.gridClassLoader());\n+                if (node != null) {\n+                    try {\n+                        Serializable msgObj = marsh.unmarshal(msg.messageBytes(), U.gridClassLoader());\n \n-                    lsnr.onDiscovery(DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT,\n-                        msg.topologyVersion(),\n-                        node,\n-                        snapshot,\n-                        hist,\n-                        msgObj);\n+                        lsnr.onDiscovery(DiscoveryCustomEvent.EVT_DISCOVERY_CUSTOM_EVT,\n+                            msg.topologyVersion(),\n+                            node,\n+                            snapshot,\n+                            hist,\n+                            msgObj);\n \n-                    msg.messageBytes(marsh.marshal(msgObj));\n-                }\n-                catch (IgniteCheckedException e) {\n-                    U.error(log, \"Failed to unmarshal discovery custom message.\", e);\n+                        msg.messageBytes(marsh.marshal(msgObj));\n+                    }\n+                    catch (IgniteCheckedException e) {\n+                        U.error(log, \"Failed to unmarshal discovery custom message.\", e);\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/ignite/raw/d0dac7de1e573ae3870e20adfe18abf61caa84ec/modules/core/src/main/java/org/apache/ignite/spi/discovery/tcp/TcpDiscoverySpi.java",
                "sha": "8051172e63104e8a74bb6602b01d3cd3b92e942c",
                "status": "modified"
            }
        ],
        "message": "# IGNITE-831 Fix NPE",
        "parent": "https://github.com/apache/ignite/commit/5ffaa4cb6f35ead8fc94c563d52e98cc5241acbc",
        "repo": "ignite",
        "unit_tests": [
            "TestTcpDiscoverySpi.java"
        ]
    },
    "ignite_d0e6def": {
        "bug_id": "ignite_d0e6def",
        "commit": "https://github.com/apache/ignite/commit/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDataset.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDataset.java?ref=d0e6def704f2d1646f9bf5b4b9a19243f6d48f75",
                "deletions": 1,
                "filename": "modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDataset.java",
                "patch": "@@ -163,7 +163,8 @@ public CacheBasedDataset(Ignite ignite, IgniteCache<K, V> upstreamCache, IgniteB\n \n         R res = identity;\n         for (R partRes : results)\n-            res = reduce.apply(res, partRes);\n+            if (partRes != null)\n+                res = reduce.apply(res, partRes);\n \n         return res;\n     }",
                "raw_url": "https://github.com/apache/ignite/raw/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/main/java/org/apache/ignite/ml/dataset/impl/cache/CacheBasedDataset.java",
                "sha": "67e0d56fb0e05b39610c6a84b60a1a66fd2d7312",
                "status": "modified"
            },
            {
                "additions": 102,
                "blob_url": "https://github.com/apache/ignite/blob/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMBinaryTrainerIntegrationTest.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMBinaryTrainerIntegrationTest.java?ref=d0e6def704f2d1646f9bf5b4b9a19243f6d48f75",
                "deletions": 0,
                "filename": "modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMBinaryTrainerIntegrationTest.java",
                "patch": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.ml.svm;\n+\n+import java.util.Arrays;\n+import java.util.UUID;\n+import java.util.concurrent.ThreadLocalRandom;\n+import org.apache.ignite.Ignite;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.internal.util.IgniteUtils;\n+import org.apache.ignite.ml.TestUtils;\n+import org.apache.ignite.ml.math.primitives.vector.VectorUtils;\n+import org.apache.ignite.ml.math.primitives.vector.impl.DenseVector;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+\n+/**\n+ * Tests for {@link SVMLinearBinaryClassificationTrainer} that require to start the whole Ignite infrastructure.\n+ */\n+public class SVMBinaryTrainerIntegrationTest extends GridCommonAbstractTest {\n+    /** Fixed size of Dataset. */\n+    private static final int AMOUNT_OF_OBSERVATIONS = 1000;\n+\n+    /** Fixed size of columns in Dataset. */\n+    private static final int AMOUNT_OF_FEATURES = 2;\n+\n+    /** Precision in test checks. */\n+    private static final double PRECISION = 1e-2;\n+\n+    /** Number of nodes in grid */\n+    private static final int NODE_COUNT = 3;\n+\n+    /** Ignite instance. */\n+    private Ignite ignite;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        for (int i = 1; i <= NODE_COUNT; i++)\n+            startGrid(i);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() {\n+        stopAllGrids();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override protected void beforeTest() throws Exception {\n+        /* Grid instance. */\n+        ignite = grid(NODE_COUNT);\n+        ignite.configuration().setPeerClassLoadingEnabled(true);\n+        IgniteUtils.setCurrentIgniteName(ignite.configuration().getIgniteInstanceName());\n+    }\n+\n+    /**\n+     * Test trainer on classification model y = x.\n+     */\n+    public void testTrainWithTheLinearlySeparableCase() {\n+        IgniteCache<Integer, double[]> data = ignite.getOrCreateCache(UUID.randomUUID().toString());\n+\n+        ThreadLocalRandom rndX = ThreadLocalRandom.current();\n+        ThreadLocalRandom rndY = ThreadLocalRandom.current();\n+\n+        for (int i = 0; i < AMOUNT_OF_OBSERVATIONS; i++) {\n+            double x = rndX.nextDouble(-1000, 1000);\n+            double y = rndY.nextDouble(-1000, 1000);\n+            double[] vec = new double[AMOUNT_OF_FEATURES + 1];\n+            vec[0] = y - x > 0 ? 1 : -1; // assign label.\n+            vec[1] = x;\n+            vec[2] = y;\n+            data.put(i, vec);\n+        }\n+\n+        SVMLinearBinaryClassificationTrainer trainer = new SVMLinearBinaryClassificationTrainer();\n+\n+        SVMLinearBinaryClassificationModel mdl = trainer.fit(\n+            ignite,\n+            data,\n+            (k, v) -> VectorUtils.of(Arrays.copyOfRange(v, 1, v.length)),\n+            (k, v) -> v[0]\n+        );\n+\n+        TestUtils.assertEquals(-1, mdl.apply(new DenseVector(new double[]{100, 10})), PRECISION);\n+        TestUtils.assertEquals(1, mdl.apply(new DenseVector(new double[]{10, 100})), PRECISION);\n+    }\n+}",
                "raw_url": "https://github.com/apache/ignite/raw/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMBinaryTrainerIntegrationTest.java",
                "sha": "d227de7e329e07ae1f498fab11888908b7528325",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ignite/blob/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMTestSuite.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMTestSuite.java?ref=d0e6def704f2d1646f9bf5b4b9a19243f6d48f75",
                "deletions": 1,
                "filename": "modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMTestSuite.java",
                "patch": "@@ -27,7 +27,8 @@\n @Suite.SuiteClasses({\n     SVMModelTest.class,\n     SVMBinaryTrainerTest.class,\n-    SVMMultiClassTrainerTest.class\n+    SVMMultiClassTrainerTest.class,\n+    SVMBinaryTrainerIntegrationTest.class\n })\n public class SVMTestSuite {\n     // No-op.",
                "raw_url": "https://github.com/apache/ignite/raw/d0e6def704f2d1646f9bf5b4b9a19243f6d48f75/modules/ml/src/test/java/org/apache/ignite/ml/svm/SVMTestSuite.java",
                "sha": "822ad184ea929405ed01cd8fa7ddc8ce79925d71",
                "status": "modified"
            }
        ],
        "message": "IGNITE-9055: [ML] SVM throws NPE in case of empty partitions\n\nthis closes #4412",
        "parent": "https://github.com/apache/ignite/commit/13e2a314b72d9155ce7f0126651805064e20358c",
        "repo": "ignite",
        "unit_tests": [
            "CacheBasedDatasetTest.java"
        ]
    },
    "ignite_f2a5a93": {
        "bug_id": "ignite_f2a5a93",
        "commit": "https://github.com/apache/ignite/commit/f2a5a93f0748f905ede77ff84787947a0893c3f8",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/ignite/blob/f2a5a93f0748f905ede77ff84787947a0893c3f8/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/ignite/contents/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java?ref=f2a5a93f0748f905ede77ff84787947a0893c3f8",
                "deletions": 7,
                "filename": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "patch": "@@ -1014,14 +1014,21 @@ private void copyInBuffer(long absPtr, ByteBuffer tmpBuf) {\n     @Override public long loadedPages() {\n         long total = 0;\n \n-        for (Segment seg : segments) {\n-            seg.readLock().lock();\n+        Segment[] segments = this.segments;\n \n-            try {\n-                total += seg.loadedPages.size();\n-            }\n-            finally {\n-                seg.readLock().unlock();\n+        if (segments != null) {\n+            for (Segment seg : segments) {\n+                if (seg == null)\n+                    break;\n+\n+                seg.readLock().lock();\n+\n+                try {\n+                    total += seg.loadedPages.size();\n+                }\n+                finally {\n+                    seg.readLock().unlock();\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/ignite/raw/f2a5a93f0748f905ede77ff84787947a0893c3f8/modules/core/src/main/java/org/apache/ignite/internal/processors/cache/persistence/pagemem/PageMemoryImpl.java",
                "sha": "6bb5c337db0f90056259b2699753771461259513",
                "status": "modified"
            }
        ],
        "message": "Quick fix for NPE in PageMemoryImpl.loadedPages",
        "parent": "https://github.com/apache/ignite/commit/fd09d301b14a2e20774503359bcef4280a67da92",
        "repo": "ignite",
        "unit_tests": [
            "PageMemoryImplTest.java"
        ]
    }
}