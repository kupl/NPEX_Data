{
    "activemq-artemis_028529b": {
        "bug_id": "activemq-artemis_028529b",
        "commit": "https://github.com/apache/activemq-artemis/commit/028529b8a910af3d1d8c941c48184d1730ae4973",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/028529b8a910af3d1d8c941c48184d1730ae4973/artemis-protocols/artemis-proton-plug/src/test/java/org/proton/plug/test/minimalserver/MinimalServer.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-protocols/artemis-proton-plug/src/test/java/org/proton/plug/test/minimalserver/MinimalServer.java?ref=028529b8a910af3d1d8c941c48184d1730ae4973",
                "deletions": 2,
                "filename": "artemis-protocols/artemis-proton-plug/src/test/java/org/proton/plug/test/minimalserver/MinimalServer.java",
                "patch": "@@ -155,8 +155,15 @@ protected void decode(final ChannelHandlerContext ctx, ByteBuf byteIn, List<Obje\n \n    public synchronized void stop()\n    {\n-      serverChannelGroup.close().awaitUninterruptibly();\n-      ChannelGroupFuture future = channelGroup.close().awaitUninterruptibly();\n+      if (serverChannelGroup != null)\n+      {\n+         serverChannelGroup.close().awaitUninterruptibly();\n+      }\n+\n+      if (channelGroup != null)\n+      {\n+         ChannelGroupFuture future = channelGroup.close().awaitUninterruptibly();\n+      }\n    }\n \n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/028529b8a910af3d1d8c941c48184d1730ae4973/artemis-protocols/artemis-proton-plug/src/test/java/org/proton/plug/test/minimalserver/MinimalServer.java",
                "sha": "8351396b54b46e5c7702eb1b53232d115d0b7c5f",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/028529b8a910af3d1d8c941c48184d1730ae4973/artemis-server/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyAcceptor.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyAcceptor.java?ref=028529b8a910af3d1d8c941c48184d1730ae4973",
                "deletions": 17,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyAcceptor.java",
                "patch": "@@ -546,19 +546,26 @@ public synchronized void stop()\n \n \n       // serverChannelGroup has been unbound in pause()\n-      serverChannelGroup.close().awaitUninterruptibly();\n-      ChannelGroupFuture future = channelGroup.close().awaitUninterruptibly();\n+      if (serverChannelGroup != null)\n+      {\n+         serverChannelGroup.close().awaitUninterruptibly();\n+      }\n \n-      if (!future.isSuccess())\n+      if (channelGroup != null)\n       {\n-         ActiveMQServerLogger.LOGGER.nettyChannelGroupError();\n-         Iterator<Channel> iterator = future.group().iterator();\n-         while (iterator.hasNext())\n+         ChannelGroupFuture future = channelGroup.close().awaitUninterruptibly();\n+\n+         if (!future.isSuccess())\n          {\n-            Channel channel = iterator.next();\n-            if (channel.isActive())\n+            ActiveMQServerLogger.LOGGER.nettyChannelGroupError();\n+            Iterator<Channel> iterator = future.group().iterator();\n+            while (iterator.hasNext())\n             {\n-               ActiveMQServerLogger.LOGGER.nettyChannelStillOpen(channel, channel.remoteAddress());\n+               Channel channel = iterator.next();\n+               if (channel.isActive())\n+               {\n+                  ActiveMQServerLogger.LOGGER.nettyChannelStillOpen(channel, channel.remoteAddress());\n+               }\n             }\n          }\n       }\n@@ -617,17 +624,20 @@ public synchronized void pause()\n       }\n \n       // We *pause* the acceptor so no new connections are made\n-      ChannelGroupFuture future = serverChannelGroup.close().awaitUninterruptibly();\n-      if (!future.isSuccess())\n+      if (serverChannelGroup != null)\n       {\n-         ActiveMQServerLogger.LOGGER.nettyChannelGroupBindError();\n-         Iterator<Channel> iterator = future.group().iterator();\n-         while (iterator.hasNext())\n+         ChannelGroupFuture future = serverChannelGroup.close().awaitUninterruptibly();\n+         if (!future.isSuccess())\n          {\n-            Channel channel = iterator.next();\n-            if (channel.isActive())\n+            ActiveMQServerLogger.LOGGER.nettyChannelGroupBindError();\n+            Iterator<Channel> iterator = future.group().iterator();\n+            while (iterator.hasNext())\n             {\n-               ActiveMQServerLogger.LOGGER.nettyChannelStillBound(channel, channel.remoteAddress());\n+               Channel channel = iterator.next();\n+               if (channel.isActive())\n+               {\n+                  ActiveMQServerLogger.LOGGER.nettyChannelStillBound(channel, channel.remoteAddress());\n+               }\n             }\n          }\n       }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/028529b8a910af3d1d8c941c48184d1730ae4973/artemis-server/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyAcceptor.java",
                "sha": "8ed06be4eb5fb2c386979750108166ce9b68b043",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPEs seen on tests",
        "parent": "https://github.com/apache/activemq-artemis/commit/791cc5c50c914bfc22dd7adc3fc74e5ff1705929",
        "repo": "activemq-artemis",
        "unit_tests": [
            "NettyAcceptorTest.java"
        ]
    },
    "activemq-artemis_0a9a6c9": {
        "bug_id": "activemq-artemis_0a9a6c9",
        "commit": "https://github.com/apache/activemq-artemis/commit/0a9a6c92f4d2713ffe01639296587ab00566630a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/0a9a6c92f4d2713ffe01639296587ab00566630a/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/ClusterConnectionConfiguration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/ClusterConnectionConfiguration.java?ref=0a9a6c92f4d2713ffe01639296587ab00566630a",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/config/ClusterConnectionConfiguration.java",
                "patch": "@@ -377,7 +377,7 @@ public ClusterConnectionConfiguration setClusterNotificationAttempts(int cluster\n          return list.toArray(new TransportConfiguration[list.size()]);\n       }\n       else {\n-         return configuration.getTransportConfigurations(staticConnectors);\n+         return staticConnectors != null ? configuration.getTransportConfigurations(staticConnectors) : null;\n       }\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/0a9a6c92f4d2713ffe01639296587ab00566630a/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/ClusterConnectionConfiguration.java",
                "sha": "3c715af6c491a494915fcaf2714a4aa028df5f30",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-347 Fixing NPE",
        "parent": "https://github.com/apache/activemq-artemis/commit/2d4654ca2631b98094c4021411447e201593b44d",
        "repo": "activemq-artemis",
        "unit_tests": [
            "ClusterConnectionConfigurationTest.java"
        ]
    },
    "activemq-artemis_16446c1": {
        "bug_id": "activemq-artemis_16446c1",
        "commit": "https://github.com/apache/activemq-artemis/commit/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/ActiveMQRALogger.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/ActiveMQRALogger.java?ref=16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2",
                "deletions": 0,
                "filename": "artemis-ra/src/main/java/org/apache/activemq/artemis/ra/ActiveMQRALogger.java",
                "patch": "@@ -24,6 +24,8 @@\n import org.jboss.logging.annotations.Message;\n import org.jboss.logging.annotations.MessageLogger;\n \n+import javax.jms.IllegalStateException;\n+\n /**\n  * Logger Code 15\n  * <br>\n@@ -144,4 +146,7 @@\n    @LogMessage(level = Logger.Level.DEBUG)\n    @Message(id = 153001, value = \"using different ActiveMQRAConnectionFactory\", format = Message.Format.MESSAGE_FORMAT)\n    void warnDifferentConnectionfactory();\n+\n+   @Message(id = 153002, value = \"Cannot create a subscriber on the durable subscription since it already has subscriber(s)\")\n+   IllegalStateException canNotCreatedNonSharedSubscriber();\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/ActiveMQRALogger.java",
                "sha": "99fb031872de525cd30a6ba6bce7407ad9f167a4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivationSpec.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivationSpec.java?ref=16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2",
                "deletions": 1,
                "filename": "artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivationSpec.java",
                "patch": "@@ -96,7 +96,7 @@\n    /**\n     * If this is true, a durable subscription could be shared by multiple MDB instances\n     */\n-   private Boolean shareSubscriptions;\n+   private Boolean shareSubscriptions = false;\n \n    /**\n     * The user",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivationSpec.java",
                "sha": "fed36db895f4da028778ad2919ad7bc18e3b5ef1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQMessageHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQMessageHandler.java?ref=16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2",
                "deletions": 1,
                "filename": "artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQMessageHandler.java",
                "patch": "@@ -122,7 +122,7 @@ public void setup() throws Exception {\n             // As a deployed MDB could set up multiple instances in order to process messages in parallel.\n             if (sessionNr == 0 && subResponse.getConsumerCount() > 0) {\n                if (!spec.isShareSubscriptions()) {\n-                  throw new javax.jms.IllegalStateException(\"Cannot create a subscriber on the durable subscription since it already has subscriber(s)\");\n+                  throw ActiveMQRALogger.LOGGER.canNotCreatedNonSharedSubscriber();\n                } else if (ActiveMQRALogger.LOGGER.isDebugEnabled()) {\n                   logger.debug(\"the mdb on destination \" + queueName + \" already had \" +\n                                                    subResponse.getConsumerCount() +",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/16446c1a6e6fdae9e0f35bb2211e45b8da5bfbc2/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQMessageHandler.java",
                "sha": "9133cdf462e9d0bb87527602fdb9064715fc4d56",
                "status": "modified"
            }
        ],
        "message": "[ARTEMIS-1475] Fix NPE in ActiveMQMessageHandler#setup\n\n* initialize ActiveMQActivationSpec#shareSubscriptions to false\n* i18n of the exception thrown by ActiveMQMessageHandler if it is not\n  possible to create a non-shared subscriber\n\nJIRA: https://issues.apache.org/jira/browse/ARTEMIS-1475",
        "parent": "https://github.com/apache/activemq-artemis/commit/0ef2c15ab7236890df1e853ce419b5dcfa225b71",
        "repo": "activemq-artemis",
        "unit_tests": [
            "ActiveMQMessageHandlerTest.java"
        ]
    },
    "activemq-artemis_2c32dda": {
        "bug_id": "activemq-artemis_2c32dda",
        "commit": "https://github.com/apache/activemq-artemis/commit/2c32dda39e4edab7d34e3fb0db8217944df33977",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/2c32dda39e4edab7d34e3fb0db8217944df33977/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashSet.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashSet.java?ref=2c32dda39e4edab7d34e3fb0db8217944df33977",
                "deletions": 2,
                "filename": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashSet.java",
                "patch": "@@ -165,7 +165,7 @@ public void forEach(ConsumerLong processor) {\n       // Keys and values are stored interleaved in the table array\n       private long[] table;\n \n-      private int capacity;\n+      private volatile int capacity;\n       private volatile int size;\n       private int usedBuckets;\n       private int resizeThreshold;\n@@ -374,9 +374,9 @@ private void rehash() {\n             }\n          }\n \n-         capacity = newCapacity;\n          table = newTable;\n          usedBuckets = size;\n+         capacity = newCapacity;\n          resizeThreshold = (int) (capacity * SetFillFactor);\n       }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/2c32dda39e4edab7d34e3fb0db8217944df33977/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashSet.java",
                "sha": "8344c57f642b700808626d8b066ce20df3998a3d",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1664 fix npe bug while getting element in the process of rehash\n\nApply same fix to ConcurrentLongHashSet",
        "parent": "https://github.com/apache/activemq-artemis/commit/6509c078fb4e4a60b40a4a44528453541caabb4b",
        "repo": "activemq-artemis",
        "unit_tests": [
            "ConcurrentLongHashSetTest.java"
        ]
    },
    "activemq-artemis_33cab06": {
        "bug_id": "activemq-artemis_33cab06",
        "commit": "https://github.com/apache/activemq-artemis/commit/33cab063eab6e45a594132e4a19d41da98ac70db",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/33cab063eab6e45a594132e4a19d41da98ac70db/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/jdbc/ActiveMQScheduledLeaseLock.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/jdbc/ActiveMQScheduledLeaseLock.java?ref=33cab063eab6e45a594132e4a19d41da98ac70db",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/jdbc/ActiveMQScheduledLeaseLock.java",
                "patch": "@@ -92,7 +92,7 @@ public void run() {\n       }\n       //logic to detect slowness of DB and/or the scheduled executor service\n       detectAndReportRenewSlowness(lockName, lastRenewStart, renewStart, renewPeriodMillis, lock.expirationMillis());\n-      this.lastLockRenewStart = lastRenewStart;\n+      this.lastLockRenewStart = renewStart;\n    }\n \n    private static void detectAndReportRenewSlowness(String lockName,",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/33cab063eab6e45a594132e4a19d41da98ac70db/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/jdbc/ActiveMQScheduledLeaseLock.java",
                "sha": "89762dc4b5348b0de0c70bfc9fbe17aa3afa4291",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/33cab063eab6e45a594132e4a19d41da98ac70db/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/jdbc/JdbcNodeManager.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/jdbc/JdbcNodeManager.java?ref=33cab063eab6e45a594132e4a19d41da98ac70db",
                "deletions": 4,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/jdbc/JdbcNodeManager.java",
                "patch": "@@ -28,6 +28,8 @@\n import org.apache.activemq.artemis.core.server.ActivateCallback;\n import org.apache.activemq.artemis.core.server.ActiveMQServerLogger;\n import org.apache.activemq.artemis.core.server.NodeManager;\n+import org.apache.activemq.artemis.jdbc.store.drivers.JDBCUtils;\n+import org.apache.activemq.artemis.jdbc.store.sql.GenericSQLProvider;\n import org.apache.activemq.artemis.jdbc.store.sql.SQLProvider;\n import org.apache.activemq.artemis.utils.ExecutorFactory;\n import org.apache.activemq.artemis.utils.UUID;\n@@ -56,11 +58,13 @@ public static JdbcNodeManager with(DatabaseStorageConfiguration configuration,\n                                       ExecutorFactory executorFactory,\n                                       IOCriticalErrorListener ioCriticalErrorListener) {\n       if (configuration.getDataSource() != null) {\n+         final SQLProvider.Factory sqlProviderFactory = configuration.getSqlProviderFactory() == null ? new GenericSQLProvider.Factory() : configuration.getSqlProviderFactory();\n          final String brokerId = java.util.UUID.randomUUID().toString();\n-         return usingDataSource(brokerId, configuration.getJdbcLockExpirationMillis(), configuration.getJdbcLockRenewPeriodMillis(), configuration.getJdbcLockAcquisitionTimeoutMillis(), configuration.getDataSource(), configuration.getSqlProviderFactory().create(configuration.getNodeManagerStoreTableName(), SQLProvider.DatabaseStoreType.NODE_MANAGER), scheduledExecutorService, executorFactory, ioCriticalErrorListener);\n+         return usingDataSource(brokerId, configuration.getJdbcLockExpirationMillis(), configuration.getJdbcLockRenewPeriodMillis(), configuration.getJdbcLockAcquisitionTimeoutMillis(), configuration.getDataSource(), sqlProviderFactory.create(configuration.getNodeManagerStoreTableName(), SQLProvider.DatabaseStoreType.NODE_MANAGER), scheduledExecutorService, executorFactory, ioCriticalErrorListener);\n       } else {\n+         final SQLProvider sqlProvider = JDBCUtils.getSQLProvider(configuration.getJdbcDriverClassName(), configuration.getNodeManagerStoreTableName(), SQLProvider.DatabaseStoreType.NODE_MANAGER);\n          final String brokerId = java.util.UUID.randomUUID().toString();\n-         return usingConnectionUrl(brokerId, configuration.getJdbcLockExpirationMillis(), configuration.getJdbcLockRenewPeriodMillis(), configuration.getJdbcLockAcquisitionTimeoutMillis(), configuration.getJdbcConnectionUrl(), configuration.getJdbcDriverClassName(), configuration.getSqlProviderFactory().create(configuration.getNodeManagerStoreTableName(), SQLProvider.DatabaseStoreType.NODE_MANAGER), scheduledExecutorService, executorFactory, ioCriticalErrorListener);\n+         return usingConnectionUrl(brokerId, configuration.getJdbcLockExpirationMillis(), configuration.getJdbcLockRenewPeriodMillis(), configuration.getJdbcLockAcquisitionTimeoutMillis(), configuration.getJdbcConnectionUrl(), configuration.getJdbcDriverClassName(), sqlProvider, scheduledExecutorService, executorFactory, ioCriticalErrorListener);\n       }\n    }\n \n@@ -101,8 +105,8 @@ private JdbcNodeManager(final SharedStateManager sharedStateManager,\n       this.lockRenewPeriodMillis = lockRenewPeriodMillis;\n       this.pauser = LeaseLock.Pauser.sleep(Math.min(this.lockRenewPeriodMillis, MAX_PAUSE_MILLIS), TimeUnit.MILLISECONDS);\n       this.sharedStateManager = sharedStateManager;\n-      this.scheduledLiveLock = ScheduledLeaseLock.of(scheduledExecutorService, executorFactory.getExecutor(), \"live\", this.sharedStateManager.liveLock(), lockRenewPeriodMillis, ioCriticalErrorListener);\n-      this.scheduledBackupLock = ScheduledLeaseLock.of(scheduledExecutorService, executorFactory.getExecutor(), \"backup\", this.sharedStateManager.backupLock(), lockRenewPeriodMillis, ioCriticalErrorListener);\n+      this.scheduledLiveLock = ScheduledLeaseLock.of(scheduledExecutorService, executorFactory != null ? executorFactory.getExecutor() : null, \"live\", this.sharedStateManager.liveLock(), lockRenewPeriodMillis, ioCriticalErrorListener);\n+      this.scheduledBackupLock = ScheduledLeaseLock.of(scheduledExecutorService, executorFactory != null ? executorFactory.getExecutor() : null, \"backup\", this.sharedStateManager.backupLock(), lockRenewPeriodMillis, ioCriticalErrorListener);\n       this.ioCriticalErrorListener = ioCriticalErrorListener;\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/33cab063eab6e45a594132e4a19d41da98ac70db/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/jdbc/JdbcNodeManager.java",
                "sha": "8cb852d9715fcc476b26cf915e05e752cd82a400",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1447 JDBC NodeManager to support JDBC HA Shared Store\n\nIt fixes the NPE on server start due to:\n - missing SqlProviderFactory\n - missing executor factory/scheduled pool (ie using exclusive scheduled pools)\n\nIt fixes the WARNINGS due to wrong slowness detection while renewing JdbcLeaseLock.",
        "parent": "https://github.com/apache/activemq-artemis/commit/dc4681b0d7010684a0b848ea2eea2b78b2eac14c",
        "repo": "activemq-artemis",
        "unit_tests": [
            "JdbcNodeManagerTest.java"
        ]
    },
    "activemq-artemis_45121ea": {
        "bug_id": "activemq-artemis_45121ea",
        "commit": "https://github.com/apache/activemq-artemis/commit/45121eade2035f470d4d092cc82c17ff39bf549a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/45121eade2035f470d4d092cc82c17ff39bf549a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java?ref=45121eade2035f470d4d092cc82c17ff39bf549a",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java",
                "patch": "@@ -3016,7 +3016,7 @@ private void deployQueuesFromListCoreQueueConfiguration(List<CoreQueueConfigurat\n             long delayBeforeDispatch = config.getDelayBeforeDispatch() == null ? as.getDefaultDelayBeforeDispatch() : config.getDelayBeforeDispatch();\n \n             if (locateQueue(queueName) != null && locateQueue(queueName).getAddress().toString().equals(config.getAddress())) {\n-               updateQueue(config.getName(), config.getRoutingType(), config.getFilterString(), maxConsumers, config.getPurgeOnNoConsumers(), isExclusive, groupRebalance, groupBuckets, groupFirstKey.toString(), isNonDestructive, consumersBeforeDispatch, delayBeforeDispatch, config.getUser(), true);\n+               updateQueue(config.getName(), config.getRoutingType(), config.getFilterString(), maxConsumers, config.getPurgeOnNoConsumers(), isExclusive, groupRebalance, groupBuckets, groupFirstKey != null ? groupFirstKey.toString() : null, isNonDestructive, consumersBeforeDispatch, delayBeforeDispatch, config.getUser(), true);\n             } else {\n                // if the address::queue doesn't exist then create it\n                try {",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/45121eade2035f470d4d092cc82c17ff39bf549a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/ActiveMQServerImpl.java",
                "sha": "a4766efb244b6b4cecdcfbd569fb570c7bd2a2d2",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2306 Fixing Test and possible NPE",
        "parent": "https://github.com/apache/activemq-artemis/commit/214dd0d6641289a0b78ce2f255ab980233a06694",
        "repo": "activemq-artemis",
        "unit_tests": [
            "ActiveMQServerImplTest.java"
        ]
    },
    "activemq-artemis_4bab1f0": {
        "bug_id": "activemq-artemis_4bab1f0",
        "commit": "https://github.com/apache/activemq-artemis/commit/4bab1f06442fc27770d03b18af61c23168a30d52",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4bab1f06442fc27770d03b18af61c23168a30d52/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java?ref=4bab1f06442fc27770d03b18af61c23168a30d52",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "patch": "@@ -1151,7 +1151,10 @@ public ConfigurationImpl addResourceLimitSettings(ResourceLimitSettings resource\n    @Override\n    public Map<String, Set<Role>> getSecurityRoles() {\n       for (SecuritySettingPlugin securitySettingPlugin : securitySettingPlugins) {\n-         securitySettings.putAll(securitySettingPlugin.getSecurityRoles());\n+         Map<String, Set<Role>> securitySettings = securitySettingPlugin.getSecurityRoles();\n+         if (securitySettings != null) {\n+            securitySettings.putAll(securitySettings);\n+         }\n       }\n       return securitySettings;\n    }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4bab1f06442fc27770d03b18af61c23168a30d52/artemis-server/src/main/java/org/apache/activemq/artemis/core/config/impl/ConfigurationImpl.java",
                "sha": "bedfa56de05064954be15bc25c32c0ed3ab94537",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/4bab1f06442fc27770d03b18af61c23168a30d52/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LegacyLDAPSecuritySettingPlugin.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LegacyLDAPSecuritySettingPlugin.java?ref=4bab1f06442fc27770d03b18af61c23168a30d52",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LegacyLDAPSecuritySettingPlugin.java",
                "patch": "@@ -398,7 +398,9 @@ public SecuritySettingPlugin stop() {\n       }\n \n       try {\n-         context.close();\n+         if (context != null) {\n+            context.close();\n+         }\n       }\n       catch (NamingException e) {\n          // ignore",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/4bab1f06442fc27770d03b18af61c23168a30d52/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/LegacyLDAPSecuritySettingPlugin.java",
                "sha": "6a0710aa09def50836d0470277c180ff46642a93",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-512 NPEs in LDAP authz",
        "parent": "https://github.com/apache/activemq-artemis/commit/b863e69eb77369e6ff82a049606371a5f1337300",
        "repo": "activemq-artemis",
        "unit_tests": [
            "LegacyLDAPSecuritySettingPluginTest.java"
        ]
    },
    "activemq-artemis_6315e3f": {
        "bug_id": "activemq-artemis_6315e3f",
        "commit": "https://github.com/apache/activemq-artemis/commit/6315e3faf010c198d173ca406db278b17eab9d29",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6315e3faf010c198d173ca406db278b17eab9d29/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/openmbean/OpenTypeSupport.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/openmbean/OpenTypeSupport.java?ref=6315e3faf010c198d173ca406db278b17eab9d29",
                "deletions": 6,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/openmbean/OpenTypeSupport.java",
                "patch": "@@ -267,10 +267,14 @@ protected void init() throws OpenDataException {\n       public Map<String, Object> getFields(MessageReference ref) throws OpenDataException {\n          Map<String, Object> rc = super.getFields(ref);\n          ICoreMessage m = ref.getMessage().toCore();\n-         ActiveMQBuffer bodyCopy = m.getReadOnlyBodyBuffer();\n-         byte[] bytes = new byte[bodyCopy.readableBytes()];\n-         bodyCopy.readBytes(bytes);\n-         rc.put(CompositeDataConstants.BODY, bytes);\n+         if (!m.isLargeMessage()) {\n+            ActiveMQBuffer bodyCopy = m.getReadOnlyBodyBuffer();\n+            byte[] bytes = new byte[bodyCopy.readableBytes()];\n+            bodyCopy.readBytes(bytes);\n+            rc.put(CompositeDataConstants.BODY, bytes);\n+         } else {\n+            rc.put(CompositeDataConstants.BODY, new byte[0]);\n+         }\n          return rc;\n       }\n    }\n@@ -288,8 +292,12 @@ protected void init() throws OpenDataException {\n       public Map<String, Object> getFields(MessageReference ref) throws OpenDataException {\n          Map<String, Object> rc = super.getFields(ref);\n          ICoreMessage m = ref.getMessage().toCore();\n-         SimpleString text = m.getReadOnlyBodyBuffer().readNullableSimpleString();\n-         rc.put(CompositeDataConstants.TEXT_BODY, text != null ? text.toString() : \"\");\n+         if (!m.isLargeMessage()) {\n+            SimpleString text = m.getReadOnlyBodyBuffer().readNullableSimpleString();\n+            rc.put(CompositeDataConstants.TEXT_BODY, text != null ? text.toString() : \"\");\n+         } else {\n+            rc.put(CompositeDataConstants.TEXT_BODY, \"\");\n+         }\n          return rc;\n       }\n    }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6315e3faf010c198d173ca406db278b17eab9d29/artemis-server/src/main/java/org/apache/activemq/artemis/core/management/impl/openmbean/OpenTypeSupport.java",
                "sha": "bcda8c4b9ee12d8b49ed854a50859ff95c4b9e49",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1505: NPE prevents browsing queue with large messages",
        "parent": "https://github.com/apache/activemq-artemis/commit/92ce07a58427b6cd7efc04fcd0a3b5f1b8f638a5",
        "repo": "activemq-artemis",
        "unit_tests": [
            "OpenTypeSupportTest.java"
        ]
    },
    "activemq-artemis_6509c07": {
        "bug_id": "activemq-artemis_6509c07",
        "commit": "https://github.com/apache/activemq-artemis/commit/6509c078fb4e4a60b40a4a44528453541caabb4b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/6509c078fb4e4a60b40a4a44528453541caabb4b/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashMap.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashMap.java?ref=6509c078fb4e4a60b40a4a44528453541caabb4b",
                "deletions": 2,
                "filename": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashMap.java",
                "patch": "@@ -199,7 +199,7 @@ public ConcurrentLongHashSet keysLongHashSet() {\n       private long[] keys;\n       private V[] values;\n \n-      private int capacity;\n+      private volatile int capacity;\n       private volatile int size;\n       private int usedBuckets;\n       private int resizeThreshold;\n@@ -457,10 +457,10 @@ private void rehash() {\n             }\n          }\n \n-         capacity = newCapacity;\n          keys = newKeys;\n          values = newValues;\n          usedBuckets = size;\n+         capacity = newCapacity;\n          resizeThreshold = (int) (capacity * MapFillFactor);\n       }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/6509c078fb4e4a60b40a4a44528453541caabb4b/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/collections/ConcurrentLongHashMap.java",
                "sha": "34a0e60dc0c520b3eca68fc1bb24183fc09bb38e",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1664 fix npe bug while getting element in the process of rehash",
        "parent": "https://github.com/apache/activemq-artemis/commit/3ff0dc2e6900a4fea7bc4a484dcfc2b1407f41c0",
        "repo": "activemq-artemis",
        "unit_tests": [
            "ConcurrentLongHashMapTest.java"
        ]
    },
    "activemq-artemis_77989c3": {
        "bug_id": "activemq-artemis_77989c3",
        "commit": "https://github.com/apache/activemq-artemis/commit/77989c3763c477de4bc45d2d0a8824201735235a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/77989c3763c477de4bc45d2d0a8824201735235a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/management/impl/ManagementServiceImpl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/management/impl/ManagementServiceImpl.java?ref=77989c3763c477de4bc45d2d0a8824201735235a",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/management/impl/ManagementServiceImpl.java",
                "patch": "@@ -550,7 +550,10 @@ public void start() throws Exception {\n          @Override\n          public void activated() {\n             try {\n-               messagingServer.addAddressInfo(new AddressInfo(managementNotificationAddress, RoutingType.MULTICAST));\n+               ActiveMQServer usedServer = messagingServer;\n+               if (usedServer != null) {\n+                  usedServer.addAddressInfo(new AddressInfo(managementNotificationAddress, RoutingType.MULTICAST));\n+               }\n             } catch (Exception e) {\n                ActiveMQServerLogger.LOGGER.unableToCreateManagementNotificationAddress(managementNotificationAddress, e);\n             }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/77989c3763c477de4bc45d2d0a8824201735235a/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/management/impl/ManagementServiceImpl.java",
                "sha": "ad888d007737b317ee9a1bc0d98d1f6b45584749",
                "status": "modified"
            }
        ],
        "message": "NO-JIRA avoiding a NPE if the server is stopped",
        "parent": "https://github.com/apache/activemq-artemis/commit/3e4d65e14c1252539a77262b4eba2cb7cab98f00",
        "repo": "activemq-artemis",
        "unit_tests": [
            "ManagementServiceImplTest.java"
        ]
    },
    "activemq-artemis_81b5563": {
        "bug_id": "activemq-artemis_81b5563",
        "commit": "https://github.com/apache/activemq-artemis/commit/81b5563a52ab56cbc30e91fcdd274985af13d0d8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/81b5563a52ab56cbc30e91fcdd274985af13d0d8/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java?ref=81b5563a52ab56cbc30e91fcdd274985af13d0d8",
                "deletions": 0,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "patch": "@@ -1574,4 +1574,7 @@ void slowConsumerDetected(String sessionID,\n    @Message(id = 224075, value = \"Cannot find pageTX id = {0}\", format = Message.Format.MESSAGE_FORMAT)\n    void journalCannotFindPageTX(Long id);\n \n+   @LogMessage(level = Logger.Level.ERROR)\n+   @Message(id = 224076, value = \"No cluster locator found. This server will not participate in a cluster. Ensure a valid cluster-connection is configured.\", format = Message.Format.MESSAGE_FORMAT)\n+   void noClusterLocatorFound();\n }",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/81b5563a52ab56cbc30e91fcdd274985af13d0d8/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/ActiveMQServerLogger.java",
                "sha": "4ef12fa7504b1382718138cc5a7cfb5af82a4c85",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/81b5563a52ab56cbc30e91fcdd274985af13d0d8/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java?ref=81b5563a52ab56cbc30e91fcdd274985af13d0d8",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java",
                "patch": "@@ -106,6 +106,9 @@ public void start() throws Exception {\n       } else {\n          replicationLocator = defaultLocator;\n       }\n+      if (replicationLocator == null) {\n+         ActiveMQServerLogger.LOGGER.noClusterLocatorFound();\n+      }\n       //latch so we know once we are connected\n       replicationClusterConnectedLatch = new CountDownLatch(1);\n       //and add the quorum manager as a topology listener\n@@ -198,7 +201,9 @@ private void configAndAdd(SimpleString name,\n     * @param listener\n     */\n    public void addClusterTopologyListenerForReplication(ClusterTopologyListener listener) {\n-      replicationLocator.addClusterTopologyListener(listener);\n+      if (replicationLocator != null) {\n+         replicationLocator.addClusterTopologyListener(listener);\n+      }\n    }\n \n    /**",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/81b5563a52ab56cbc30e91fcdd274985af13d0d8/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/cluster/ClusterController.java",
                "sha": "0849d0e733cf473ad0c595e46b5322ae4f6596ab",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-992 NPE on startup",
        "parent": "https://github.com/apache/activemq-artemis/commit/fd0513e4f5f17d86e4fd81b8eea6d801e2c41fb3",
        "repo": "activemq-artemis",
        "unit_tests": [
            "ClusterControllerTest.java"
        ]
    },
    "activemq-artemis_84a098a": {
        "bug_id": "activemq-artemis_84a098a",
        "commit": "https://github.com/apache/activemq-artemis/commit/84a098a4f4901732d347533ef0ee3a16d8ccd68e",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/84a098a4f4901732d347533ef0ee3a16d8ccd68e/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java?ref=84a098a4f4901732d347533ef0ee3a16d8ccd68e",
                "deletions": 1,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "patch": "@@ -644,8 +644,11 @@ public Message setLastValueProperty(SimpleString lastValueName) {\n \n    @Override\n    public int getEncodeSize() {\n+      if (buffer == null) {\n+         return -1;\n+      }\n       checkEncode();\n-      return buffer == null ? -1 : buffer.writerIndex();\n+      return buffer.writerIndex();\n    }\n \n    @Override",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/84a098a4f4901732d347533ef0ee3a16d8ccd68e/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "sha": "5ed46cdd41c9650e850612033c3e269c0fec05bb",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1743 fix NPE in server log when Artemis trace logging is enabled",
        "parent": "https://github.com/apache/activemq-artemis/commit/a00245dd067123574efa14a378d2017ddb33c817",
        "repo": "activemq-artemis",
        "unit_tests": [
            "CoreMessageTest.java"
        ]
    },
    "activemq-artemis_9c840bd": {
        "bug_id": "activemq-artemis_9c840bd",
        "commit": "https://github.com/apache/activemq-artemis/commit/9c840bdeb8107ce1570c3f5d7cabd6edb37356b0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/9c840bdeb8107ce1570c3f5d7cabd6edb37356b0/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivation.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivation.java?ref=9c840bdeb8107ce1570c3f5d7cabd6edb37356b0",
                "deletions": 2,
                "filename": "artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivation.java",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.activemq.artemis.api.core.ActiveMQNonExistentQueueException;\n import org.apache.activemq.artemis.api.core.ActiveMQNotConnectedException;\n import org.apache.activemq.artemis.api.core.SimpleString;\n+import org.apache.activemq.artemis.api.core.client.ActiveMQClient;\n import org.apache.activemq.artemis.api.core.client.ClientSession;\n import org.apache.activemq.artemis.api.core.client.ClientSessionFactory;\n import org.apache.activemq.artemis.api.core.client.ClusterTopologyListener;\n@@ -360,6 +361,8 @@ protected synchronized void setup() throws Exception {\n    protected synchronized void teardown() {\n       ActiveMQRALogger.LOGGER.debug(\"Tearing down \" + spec);\n \n+      long timeout = factory == null ? ActiveMQClient.DEFAULT_CALL_TIMEOUT : factory.getCallTimeout();\n+\n       if (resourceRecovery != null) {\n          ra.getRecoveryManager().unRegister(resourceRecovery);\n       }\n@@ -385,7 +388,7 @@ protected synchronized void teardown() {\n       }\n \n       //wait for all the consumers to complete any onmessage calls\n-      boolean stuckThreads = !future.await(factory.getCallTimeout());\n+      boolean stuckThreads = !future.await(timeout);\n       //if any are stuck then we need to interrupt them\n       if (stuckThreads) {\n          for (Thread interruptThread : interruptThreads) {\n@@ -413,7 +416,7 @@ public void run() {\n       threadTearDown.start();\n \n       try {\n-         threadTearDown.join(factory.getCallTimeout());\n+         threadTearDown.join(timeout);\n       }\n       catch (InterruptedException e) {\n          // nothing to be done on this context.. we will just keep going as we need to send an interrupt to threadTearDown and give up",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/9c840bdeb8107ce1570c3f5d7cabd6edb37356b0/artemis-ra/src/main/java/org/apache/activemq/artemis/ra/inflow/ActiveMQActivation.java",
                "sha": "510e6803c6a60019ddd92a9a2fc7c77eedd7f7ce",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-459 NPE during RA tearDown",
        "parent": "https://github.com/apache/activemq-artemis/commit/7d9d3086ab74713b84aaf5deea7357bd6432c030",
        "repo": "activemq-artemis",
        "unit_tests": [
            "ActiveMQActivationTest.java"
        ]
    },
    "activemq-artemis_b8dd021": {
        "bug_id": "activemq-artemis_b8dd021",
        "commit": "https://github.com/apache/activemq-artemis/commit/b8dd0219a3576094fcdba08ef8c6489eafabf814",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/b8dd0219a3576094fcdba08ef8c6489eafabf814/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java?ref=b8dd0219a3576094fcdba08ef8c6489eafabf814",
                "deletions": 1,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "patch": "@@ -2603,7 +2603,9 @@ public void postAcknowledge(final MessageReference ref) {\n          message = null;\n       }\n \n-      boolean durableRef = message != null && message.isDurable() && queue.durable;\n+      if (message == null) return;\n+\n+      boolean durableRef = message.isDurable() && queue.durable;\n \n       try {\n          message.decrementRefCount();",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/b8dd0219a3576094fcdba08ef8c6489eafabf814/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/QueueImpl.java",
                "sha": "0d58eed160cc2de6a5c245017d3256601617a4aa",
                "status": "modified"
            }
        ],
        "message": "eliminated NPE possibility in QueueImpl class",
        "parent": "https://github.com/apache/activemq-artemis/commit/e0f5cb6eeeb13c191b825836203cb6568c2ddf4a",
        "repo": "activemq-artemis",
        "unit_tests": [
            "QueueImplTest.java"
        ]
    },
    "activemq-artemis_d5eaccf": {
        "bug_id": "activemq-artemis_d5eaccf",
        "commit": "https://github.com/apache/activemq-artemis/commit/d5eaccf3ba8088c9308837a2e4173320d366038c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/d5eaccf3ba8088c9308837a2e4173320d366038c/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/UUIDGenerator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/UUIDGenerator.java?ref=d5eaccf3ba8088c9308837a2e4173320d366038c",
                "deletions": 0,
                "filename": "artemis-commons/src/main/java/org/apache/activemq/artemis/utils/UUIDGenerator.java",
                "patch": "@@ -247,6 +247,10 @@ private static String asString(final byte[] bytes) {\n       try {\n          networkInterfaces = NetworkInterface.getNetworkInterfaces();\n \n+         if (networkInterfaces == null) {\n+            return Collections.emptyList();\n+         }\n+\n          List<NetworkInterface> ifaces = new ArrayList<>();\n          while (networkInterfaces.hasMoreElements()) {\n             ifaces.add(networkInterfaces.nextElement());",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/d5eaccf3ba8088c9308837a2e4173320d366038c/artemis-commons/src/main/java/org/apache/activemq/artemis/utils/UUIDGenerator.java",
                "sha": "111d8f03cc0981a5f980b52a8fc3b8a5e5e4adf9",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-709 Possible NPE on UUIDGenerator.getAllNetworkInterfaces()",
        "parent": "https://github.com/apache/activemq-artemis/commit/63172e7d361d1e03b907636379d84dcbebf97dfe",
        "repo": "activemq-artemis",
        "unit_tests": [
            "UUIDGeneratorTest.java"
        ]
    },
    "activemq-artemis_dac332f": {
        "bug_id": "activemq-artemis_dac332f",
        "commit": "https://github.com/apache/activemq-artemis/commit/dac332fe1fca33343a8fe3f7ea6c29ee772d32bc",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/dac332fe1fca33343a8fe3f7ea6c29ee772d32bc/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java?ref=dac332fe1fca33343a8fe3f7ea6c29ee772d32bc",
                "deletions": 24,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java",
                "patch": "@@ -30,7 +30,6 @@\n import io.netty.channel.ChannelFutureListener;\n import io.netty.channel.ChannelPromise;\n import io.netty.channel.EventLoop;\n-import io.netty.handler.ssl.SslHandler;\n import org.apache.activemq.artemis.api.core.ActiveMQBuffer;\n import org.apache.activemq.artemis.api.core.ActiveMQInterruptedException;\n import org.apache.activemq.artemis.api.core.TransportConfiguration;\n@@ -238,12 +237,10 @@ public final void close() {\n       boolean inEventLoop = eventLoop.inEventLoop();\n       //if we are in an event loop we need to close the channel after the writes have finished\n       if (!inEventLoop) {\n-         final SslHandler sslHandler = (SslHandler) channel.pipeline().get(\"ssl\");\n-         closeSSLAndChannel(sslHandler, channel, false);\n+         closeChannel(channel, false);\n       } else {\n          eventLoop.execute(() -> {\n-            final SslHandler sslHandler = (SslHandler) channel.pipeline().get(\"ssl\");\n-            closeSSLAndChannel(sslHandler, channel, true);\n+            closeChannel(channel, true);\n          });\n       }\n \n@@ -555,26 +552,12 @@ public final String toString() {\n       return super.toString() + \"[ID=\" + getID() + \", local= \" + channel.localAddress() + \", remote=\" + channel.remoteAddress() + \"]\";\n    }\n \n-   private void closeSSLAndChannel(SslHandler sslHandler, final Channel channel, boolean inEventLoop) {\n+   private void closeChannel(final Channel channel, boolean inEventLoop) {\n       checkFlushBatchBuffer();\n-      if (sslHandler != null) {\n-         try {\n-            ChannelFuture sslCloseFuture = sslHandler.close();\n-            sslCloseFuture.addListener(future -> channel.close());\n-            if (!inEventLoop && !sslCloseFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {\n-               ActiveMQClientLogger.LOGGER.timeoutClosingSSL();\n-            }\n-         } catch (Throwable t) {\n-            // ignore\n-            if (ActiveMQClientLogger.LOGGER.isTraceEnabled()) {\n-               ActiveMQClientLogger.LOGGER.trace(t.getMessage(), t);\n-            }\n-         }\n-      } else {\n-         ChannelFuture closeFuture = channel.close();\n-         if (!inEventLoop && !closeFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {\n-            ActiveMQClientLogger.LOGGER.timeoutClosingNettyChannel();\n-         }\n+      // closing the channel results in closing any sslHandler first; SslHandler#close() was deprecated by netty\n+      ChannelFuture closeFuture = channel.close();\n+      if (!inEventLoop && !closeFuture.awaitUninterruptibly(DEFAULT_WAIT_MILLIS)) {\n+         ActiveMQClientLogger.LOGGER.timeoutClosingNettyChannel();\n       }\n    }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/dac332fe1fca33343a8fe3f7ea6c29ee772d32bc/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/remoting/impl/netty/NettyConnection.java",
                "sha": "f8195fbdcedcf3f2243159df3acea8c5fcbd942a",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-1804 deprecated Netty SslHandler.close() causing NPE\n\nThe NPE can appear when an OpenWire client which is using SSL disconnects.",
        "parent": "https://github.com/apache/activemq-artemis/commit/acc34d90881313d5c94a5a377aac9438175e55ef",
        "repo": "activemq-artemis",
        "unit_tests": [
            "NettyConnectionTest.java"
        ]
    },
    "activemq-artemis_e2d6d07": {
        "bug_id": "activemq-artemis_e2d6d07",
        "commit": "https://github.com/apache/activemq-artemis/commit/e2d6d0729818ea9ba8b1bcd5781d2702502dd9b1",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/e2d6d0729818ea9ba8b1bcd5781d2702502dd9b1/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/FileLockNodeManager.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/FileLockNodeManager.java?ref=e2d6d0729818ea9ba8b1bcd5781d2702502dd9b1",
                "deletions": 6,
                "filename": "artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/FileLockNodeManager.java",
                "patch": "@@ -106,12 +106,14 @@ protected synchronized void setUpServerLockFile() throws IOException {\n    @Override\n    public synchronized void stop() throws Exception {\n       for (FileChannel channel : lockChannels) {\n-         try {\n-            channel.close();\n-         } catch (Throwable e) {\n-            // I do not want to interrupt a shutdown. If anything is wrong here, just log it\n-            // it could be a critical error or something like that throwing the system down\n-            logger.warn(e.getMessage(), e);\n+         if (channel != null && channel.isOpen()) {\n+            try {\n+               channel.close();\n+            } catch (Throwable e) {\n+               // I do not want to interrupt a shutdown. If anything is wrong here, just log it\n+               // it could be a critical error or something like that throwing the system down\n+               logger.warn(e.getMessage(), e);\n+            }\n          }\n       }\n ",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/e2d6d0729818ea9ba8b1bcd5781d2702502dd9b1/artemis-server/src/main/java/org/apache/activemq/artemis/core/server/impl/FileLockNodeManager.java",
                "sha": "66ebbdc63955809b7f9b6fc060c36a75e1565849",
                "status": "modified"
            }
        ],
        "message": "ARTEMIS-2441 Avoiding NPE on FileLockNodeManager",
        "parent": "https://github.com/apache/activemq-artemis/commit/7fa4d5fa70a74b0455d491f45bbd45e04ff79606",
        "repo": "activemq-artemis",
        "unit_tests": [
            "FileLockNodeManagerTest.java"
        ]
    },
    "activemq-artemis_f09ee40": {
        "bug_id": "activemq-artemis_f09ee40",
        "commit": "https://github.com/apache/activemq-artemis/commit/f09ee40b538ec739b745cb9678131cf706fb1f08",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/activemq-artemis/blob/f09ee40b538ec739b745cb9678131cf706fb1f08/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/activemq-artemis/contents/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java?ref=f09ee40b538ec739b745cb9678131cf706fb1f08",
                "deletions": 1,
                "filename": "artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "patch": "@@ -437,7 +437,11 @@ public CoreMessage setMessageID(long messageID) {\n \n    @Override\n    public CoreMessage setAddress(SimpleString address) {\n-      if (validBuffer && !address.equals(this.address)) {\n+      if (address == null && this.address == null) {\n+         // no-op so just return\n+         return this;\n+      }\n+      if (validBuffer && (address == null || !address.equals(this.address))) {\n          messageChanged();\n       }\n       this.address = address;",
                "raw_url": "https://github.com/apache/activemq-artemis/raw/f09ee40b538ec739b745cb9678131cf706fb1f08/artemis-core-client/src/main/java/org/apache/activemq/artemis/core/message/impl/CoreMessage.java",
                "sha": "0fb7c3e6691fae54c26c21515d9e95d4ef041308",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when setting null address",
        "parent": "https://github.com/apache/activemq-artemis/commit/9c40a514f26c28b591516fa89f761740f1bc29dd",
        "repo": "activemq-artemis",
        "unit_tests": [
            "CoreMessageTest.java"
        ]
    }
}