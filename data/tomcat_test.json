{
    "tomcat_0483c93": {
        "bug_id": "tomcat_0483c93",
        "commit": "https://github.com/apache/tomcat/commit/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
                "deletions": 2,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -816,7 +816,7 @@ protected boolean postParseRequest(org.apache.coyote.Request req, Request reques\n             if (wrapper != null) {\n                 String[] methods = wrapper.getServletMethods();\n                 if (methods != null) {\n-                    for (int i=0; i<methods.length; i++) {\n+                    for (int i=0; i < methods.length; i++) {\n                         if (\"TRACE\".equals(methods[i])) {\n                             continue;\n                         }\n@@ -828,7 +828,9 @@ protected boolean postParseRequest(org.apache.coyote.Request req, Request reques\n                     }\n                 }\n             }\n-            res.addHeader(\"Allow\", header);\n+            if (header != null) {\n+                res.addHeader(\"Allow\", header);\n+            }\n             response.sendError(405, \"TRACE method is not allowed\");\n             // Safe to skip the remainder of this method.\n             return true;",
                "raw_url": "https://github.com/apache/tomcat/raw/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "de572e603b467544c2ff0c13aa807ad05d3948df",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -72,6 +72,10 @@\n         Ensure that the default servlet reads the entire global XSLT file if\n         one is defined. Identified by Coverity Scan. (markt)\n       </fix>\n+      <fix>\n+        Avoid potential <code>NullPointerException</code> when generating an\n+        HTTP <code>Allow</code> header. Identified by Coverity Scan. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/webapps/docs/changelog.xml",
                "sha": "24cc2b067a9b35bae5ecde3eeb191a26209bb0b8",
                "status": "modified"
            }
        ],
        "message": "Fix rare potential NPE identified by Coverity Scan.",
        "parent": "https://github.com/apache/tomcat/commit/21ee1c0b33aed7908a7aa5f415ff8775cfd92119",
        "patched_files": [
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_2f51425": {
        "bug_id": "tomcat_2f51425",
        "commit": "https://github.com/apache/tomcat/commit/2f514255fc0032786de3a12fb3656c76c9c7e457",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/2f514255fc0032786de3a12fb3656c76c9c7e457/java/org/apache/catalina/webresources/CachedResource.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/CachedResource.java?ref=2f514255fc0032786de3a12fb3656c76c9c7e457",
                "deletions": 0,
                "filename": "java/org/apache/catalina/webresources/CachedResource.java",
                "patch": "@@ -26,6 +26,7 @@\n import java.net.URLStreamHandler;\n import java.security.Permission;\n import java.security.cert.Certificate;\n+import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n \n@@ -557,5 +558,14 @@ private WebResource getResource() {\n         public JarFile getJarFile() throws IOException {\n             return ((JarURLConnection) resourceURL.openConnection()).getJarFile();\n         }\n+\n+        @Override\n+        public JarEntry getJarEntry() throws IOException {\n+            if (getEntryName() == null) {\n+                return null;\n+            } else {\n+                return super.getJarEntry();\n+            }\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/tomcat/raw/2f514255fc0032786de3a12fb3656c76c9c7e457/java/org/apache/catalina/webresources/CachedResource.java",
                "sha": "712a46374764e962095531148b5ebbae901fccb7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/2f514255fc0032786de3a12fb3656c76c9c7e457/webapps/docs/changelog.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=2f514255fc0032786de3a12fb3656c76c9c7e457",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -55,6 +55,11 @@\n         Avoid useless environment restore when not using GSSCredential\n         in JNDIRealm. (remm)\n       </fix>\n+      <fix>\n+        <bug>64005</bug>: Correct a regression in the static resource caching\n+        changes introduced in 9.0.28. Avoid a <code>NullPointerException</code>\n+        when working with the URL provided for the root of a packed WAR. (markt)\n+      </fix>\n       <fix>\n         <bug>64006</bug>: Provide default configuration source based on the\n         current directory if none has been set, for full compatibility with",
                "raw_url": "https://github.com/apache/tomcat/raw/2f514255fc0032786de3a12fb3656c76c9c7e457/webapps/docs/changelog.xml",
                "sha": "f69a9710e95c8f3e40225d3f83ee36e4f8d2ec41",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=64005 avoid NPE\n\nAvoid the NPE when working with the URL for the root of a packed WAR",
        "parent": "https://github.com/apache/tomcat/commit/65bf0dba83cde35bdf39629c300d5a113bcca5dd",
        "patched_files": [
            "CachedResource.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCachedResource.java"
        ]
    },
    "tomcat_3d73dfc": {
        "bug_id": "tomcat_3d73dfc",
        "commit": "https://github.com/apache/tomcat/commit/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11Processor.java?ref=3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11Processor.java",
                "patch": "@@ -995,7 +995,10 @@ private static boolean isConnectionToken(MimeHeaders headers, String token) thro\n         Enumeration<String> values = headers.values(Constants.CONNECTION);\n         Set<String> result = new HashSet<>();\n         while (values.hasMoreElements()) {\n-            TokenList.parseTokenList(new StringReader(values.nextElement()), result);\n+            String nextHeaderValue = values.nextElement();\n+            if (nextHeaderValue != null) {\n+                TokenList.parseTokenList(new StringReader(nextHeaderValue), result);\n+            }\n         }\n \n         return result.contains(token);",
                "raw_url": "https://github.com/apache/tomcat/raw/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "sha": "24fd9e97e88a133936f3493d4800b2f6bcd59baa",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE with excessive header size",
        "parent": "https://github.com/apache/tomcat/commit/c298138dc774ec1844c929413f11e08855e17c87",
        "patched_files": [
            "Http11Processor.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestHttp11Processor.java"
        ]
    },
    "tomcat_5bf2a85": {
        "bug_id": "tomcat_5bf2a85",
        "commit": "https://github.com/apache/tomcat/commit/5bf2a8504f5965410e82242667b71f54912fe766",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/LocalStrings.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/LocalStrings.properties?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/LocalStrings.properties",
                "patch": "@@ -35,6 +35,7 @@ caseInsensitiveKeyMap.nullKey=Null keys are not permitted\n \n futureToSendHandler.timeout=Operation timed out after waiting [{0}] [{1}] to complete\n \n+perMessageDeflate.alreadyClosed=The transformer has been closed and may no longer be used\n perMessageDeflate.deflateFailed=Failed to decompress a compressed WebSocket frame\n perMessageDeflate.duplicateParameter=Duplicate definition of the [{0}] extension parameter\n perMessageDeflate.invalidState=Invalid state",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/LocalStrings.properties",
                "sha": "744619aafe4d19401b20be05c628e2114b6dbd18",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/PerMessageDeflate.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 9,
                "filename": "java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "patch": "@@ -204,6 +204,8 @@ public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteB\n                         dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());\n             } catch (DataFormatException e) {\n                 throw new IOException(sm.getString(\"perMessageDeflate.deflateFailed\"), e);\n+            } catch (NullPointerException e) {\n+                throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n             }\n             dest.position(dest.position() + written);\n \n@@ -229,7 +231,11 @@ public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteB\n             } else if (written == 0) {\n                 if (fin && (isServer && !clientContextTakeover ||\n                         !isServer && !serverContextTakeover)) {\n-                    inflater.reset();\n+                    try {\n+                        inflater.reset();\n+                    } catch (NullPointerException e) {\n+                        throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                    }\n                 }\n                 return TransformationResult.END_OF_FRAME;\n             }\n@@ -314,7 +320,7 @@ public boolean validateRsvBits(int i) {\n \n \n     @Override\n-    public List<MessagePart> sendMessagePart(List<MessagePart> uncompressedParts) {\n+    public List<MessagePart> sendMessagePart(List<MessagePart> uncompressedParts) throws IOException {\n         List<MessagePart> allCompressedParts = new ArrayList<>();\n \n         for (MessagePart uncompressedPart : uncompressedParts) {\n@@ -345,10 +351,14 @@ public boolean validateRsvBits(int i) {\n                 while (deflateRequired) {\n                     ByteBuffer compressedPayload = writeBuffer;\n \n-                    int written = deflater.deflate(compressedPayload.array(),\n-                            compressedPayload.arrayOffset() + compressedPayload.position(),\n-                            compressedPayload.remaining(), flush);\n-                    compressedPayload.position(compressedPayload.position() + written);\n+                    try {\n+                        int written = deflater.deflate(compressedPayload.array(),\n+                                compressedPayload.arrayOffset() + compressedPayload.position(),\n+                                compressedPayload.remaining(), flush);\n+                        compressedPayload.position(compressedPayload.position() + written);\n+                    } catch (NullPointerException e) {\n+                        throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                    }\n \n                     if (!uncompressedPart.isFin() && compressedPayload.hasRemaining() && deflater.needsInput()) {\n                         // This message part has been fully processed by the\n@@ -401,7 +411,12 @@ public boolean validateRsvBits(int i) {\n                         // - in middle of EOM bytes\n                         // - about to write EOM bytes\n                         // - more data to write\n-                        int eomBufferWritten = deflater.deflate(EOM_BUFFER, 0, EOM_BUFFER.length, Deflater.SYNC_FLUSH);\n+                        int eomBufferWritten;\n+                        try {\n+                            eomBufferWritten = deflater.deflate(EOM_BUFFER, 0, EOM_BUFFER.length, Deflater.SYNC_FLUSH);\n+                        } catch (NullPointerException e) {\n+                            throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                        }\n                         if (eomBufferWritten < EOM_BUFFER.length) {\n                             // EOM has just been completed\n                             compressedPayload.limit(compressedPayload.limit() - EOM_BYTES.length + eomBufferWritten);\n@@ -447,11 +462,15 @@ public boolean validateRsvBits(int i) {\n     }\n \n \n-    private void startNewMessage() {\n+    private void startNewMessage() throws IOException {\n         firstCompressedFrameWritten = false;\n         emptyMessage = true;\n         if (isServer && !serverContextTakeover || !isServer && !clientContextTakeover) {\n-            deflater.reset();\n+            try {\n+                deflater.reset();\n+            } catch (NullPointerException e) {\n+                throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "sha": "afcfcf02eb68ca851d53059a8355862127b74ebc",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/Transformation.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Transformation.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/Transformation.java",
                "patch": "@@ -101,8 +101,11 @@\n      * @return  The list of messages after this any any subsequent\n      *          transformations have been applied. The size of the returned list\n      *          may be bigger or smaller than the size of the input list\n+     *\n+     * @throws IOException If an error occurs during the transformation of the\n+     *                     message parts\n      */\n-    List<MessagePart> sendMessagePart(List<MessagePart> messageParts);\n+    List<MessagePart> sendMessagePart(List<MessagePart> messageParts) throws IOException;\n \n     /**\n      * Clean-up any resources that were used by the transformation.",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/Transformation.java",
                "sha": "14d809303fcfe2edea9cdb6106e805b8c0e51112",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "patch": "@@ -338,7 +338,12 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n                 intermediateMessageHandler,\n                 new EndMessageHandler(this, handler), -1));\n \n-        messageParts = transformation.sendMessagePart(messageParts);\n+        try {\n+            messageParts = transformation.sendMessagePart(messageParts);\n+        } catch (IOException ioe) {\n+            handler.onResult(new SendResult(ioe));\n+            return;\n+        }\n \n         // Some extensions/transformations may buffer messages so it is possible\n         // that no message parts will be returned. If this is the case the",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "sha": "f022132bb1de3291a8f31a68cf2a359b2af2f44f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 1,
                "filename": "test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "patch": "@@ -34,7 +34,7 @@\n      * https://bz.apache.org/bugzilla/show_bug.cgi?id=61491\n      */\n     @Test\n-    public void testSendEmptyMessagePartWithContextTakeover() {\n+    public void testSendEmptyMessagePartWithContextTakeover() throws IOException {\n \n         // Set up the extension using defaults\n         List<Parameter> parameters = Collections.emptyList();",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "sha": "9139460c7402e0c02fee3a345c41e0add54e4da1",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/webapps/docs/changelog.xml",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -157,6 +157,17 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"WebSocket\">\n+    <changelog>\n+      <fix>\n+        <bug>63913</bug>: Wrap any <code>NullPointerException</code>s throw by\n+        the <code>Inflater</code> or <code>Deflater</code> used by the\n+        <code>PerMessageDeflate</code> extension in an <code>IOException</code>\n+        so that the error can be caught and handled by the WebSocket error\n+        handling mechanism. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Web applications\">\n     <changelog>\n       <fix>",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/webapps/docs/changelog.xml",
                "sha": "8a19840ab9dcbcc7970394638b9063cbeb715e4b",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63913 Wrap NPEs\n\nWrap any NullPointerExceptions throw by the Inflater or Deflater used by\nthe PerMessageDeflate extension in an IOException so that the error can\nbe caught and handled by the WebSocket error handling mechanism.",
        "parent": "https://github.com/apache/tomcat/commit/163c0ad70540e59b75fc922d6fd19eacc7febd3e",
        "patched_files": [
            "WsRemoteEndpointImplBase.java",
            "LocalStrings.java",
            "changelog.java",
            "PerMessageDeflate.java",
            "Transformation.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestPerMessageDeflate.java"
        ]
    },
    "tomcat_659b28c": {
        "bug_id": "tomcat_659b28c",
        "commit": "https://github.com/apache/tomcat/commit/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11OutputBuffer.java?ref=659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "patch": "@@ -303,7 +303,10 @@ protected void commit() throws IOException {\n             // Sending the response header buffer\n             headerBuffer.flip();\n             try {\n-                socketWrapper.write(isBlocking(), headerBuffer);\n+                SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n+                if (socketWrapper != null) {\n+                    socketWrapper.write(isBlocking(), headerBuffer);\n+                }\n             } finally {\n                 headerBuffer.position(0).limit(headerBuffer.capacity());\n             }",
                "raw_url": "https://github.com/apache/tomcat/raw/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "sha": "62d5223226d84bf4e9d3f478372d2476a603bcc3",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -75,6 +75,10 @@\n         was the only other sensible value, but without and impact beyond\n         certain microbenchmarks. (remm)\n       </fix>\n+      <fix>\n+        Avoid possible NPE in <code>Http11OutputBuffer.commit</code> on\n+        connector stopclose. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Other\">",
                "raw_url": "https://github.com/apache/tomcat/raw/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/webapps/docs/changelog.xml",
                "sha": "a11513764d9fc054e0c1c2ee2ed08e97b446d446",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE on commit",
        "parent": "https://github.com/apache/tomcat/commit/e9e9b2201069f8b0857c541018a7aa81a9cebe52",
        "patched_files": [
            "Http11OutputBuffer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestHttp11OutputBuffer.java"
        ]
    },
    "tomcat_6d6e1c4": {
        "bug_id": "tomcat_6d6e1c4",
        "commit": "https://github.com/apache/tomcat/commit/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "deletions": 1,
                "filename": "java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "patch": "@@ -265,7 +265,7 @@ private String getClientIdentifier(Host host, Context context, String clientIp)\n         if (isHostAware) {\n             result.append('-').append(host.getName());\n         }\n-        if (isContextAware) {\n+        if (isContextAware && context != null) {\n             result.append(context.getName());\n         }\n         return result.toString();",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "sha": "da01da8cbcd70ea5519ddbef2843830cae217e31",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "deletions": 6,
                "filename": "test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "patch": "@@ -97,6 +97,18 @@ public void testCrawlerMultipleHostsHostAware() throws Exception {\n         verifyCrawlingLocalhost(valve, \"example.invalid\");\n     }\n \n+    @Test\n+    public void testCrawlerMultipleContextsContextAware() throws Exception {\n+        CrawlerSessionManagerValve valve = new CrawlerSessionManagerValve();\n+        valve.setCrawlerUserAgents(valve.getCrawlerUserAgents());\n+        valve.setHostAware(true);\n+        valve.setContextAware(true);\n+        valve.setNext(EasyMock.createMock(Valve.class));\n+\n+        verifyCrawlingContext(valve, \"/examples\");\n+        verifyCrawlingContext(valve, null);\n+    }\n+\n     @Test\n     public void testCrawlersSessionIdIsRemovedAfterSessionExpiry() throws IOException, ServletException {\n         CrawlerSessionManagerValve valve = new CrawlerSessionManagerValve();\n@@ -127,7 +139,20 @@ public void testCrawlersSessionIdIsRemovedAfterSessionExpiry() throws IOExceptio\n     private void verifyCrawlingLocalhost(CrawlerSessionManagerValve valve, String hostname)\n             throws IOException, ServletException {\n         HttpSession session = createSessionExpectations(valve, true);\n-        Request request = createRequestExpectations(\"127.0.0.1\", session, true, hostname, \"tomcatBot 1.0\");\n+        Request request = createRequestExpectations(\"127.0.0.1\", session, true, hostname, \"/examples\", \"tomcatBot 1.0\");\n+\n+        EasyMock.replay(request, session);\n+\n+        valve.invoke(request, EasyMock.createMock(Response.class));\n+\n+        EasyMock.verify(request, session);\n+    }\n+\n+\n+    private void verifyCrawlingContext(CrawlerSessionManagerValve valve, String contextPath)\n+            throws IOException, ServletException {\n+        HttpSession session = createSessionExpectations(valve, true);\n+        Request request = createRequestExpectations(\"127.0.0.1\", session, true, \"localhost\", contextPath, \"tomcatBot 1.0\");\n \n         EasyMock.replay(request, session);\n \n@@ -151,14 +176,15 @@ private HttpSession createSessionExpectations(CrawlerSessionManagerValve valve,\n \n \n     private Request createRequestExpectations(String ip, HttpSession session, boolean isBot) {\n-        return createRequestExpectations(ip, session, isBot, \"localhost\", \"something 1.0\");\n+        return createRequestExpectations(ip, session, isBot, \"localhost\", \"/examples\", \"something 1.0\");\n     }\n \n-    private Request createRequestExpectations(String ip, HttpSession session, boolean isBot, String hostname, String userAgent) {\n+    private Request createRequestExpectations(String ip, HttpSession session, boolean isBot, String hostname,\n+            String contextPath, String userAgent) {\n         Request request = EasyMock.createMock(Request.class);\n         EasyMock.expect(request.getRemoteAddr()).andReturn(ip);\n         EasyMock.expect(request.getHost()).andReturn(simpleHostWithName(hostname));\n-        EasyMock.expect(request.getContext()).andReturn(simpleContextWithName());\n+        EasyMock.expect(request.getContext()).andReturn(simpleContextWithName(contextPath));\n         IExpectationSetters<HttpSession> setter = EasyMock.expect(request.getSession(false))\n                 .andReturn(null);\n         if (isBot) {\n@@ -175,9 +201,12 @@ private Host simpleHostWithName(String hostname) {\n         return host;\n     }\n \n-    private Context simpleContextWithName() {\n+    private Context simpleContextWithName(String contextPath) {\n+        if (contextPath == null) {\n+            return null;\n+        }\n         Context context = EasyMock.createMock(Context.class);\n-        EasyMock.expect(context.getName()).andReturn(\"/examples\");\n+        EasyMock.expect(context.getName()).andReturn(contextPath);\n         EasyMock.replay(context);\n         return context;\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "sha": "56d07b82024110482996f693628f7fc5c88f3793",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/webapps/docs/changelog.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -87,6 +87,12 @@\n         for patterns used with the <code>RewriteValve</code> with the\n         description in the documentation. (markt)\n       </fix>\n+      <fix>\n+        Avoid a <code>NullPointerException</code> in the\n+        <code>CrawlerSessionManagerValve</code> if no ROOT Context is deployed\n+        and a request does not map to any of the other deployed Contexts. Patch\n+        provided by Jop Zinkweg. (markt)\n+      </fix>\n      </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/webapps/docs/changelog.xml",
                "sha": "7e544a2131efe6bdcf8d614f1a291b7744644ef2",
                "status": "modified"
            }
        ],
        "message": "Fix https://github.com/apache/tomcat/pull/187 Avoid NPE\n\nAvoid a NullPointerException in the CrawlerSessionManagerValve if no\nROOT Context is deployed and a request does not map to any of the other\ndeployed Contexts.\nPatch provided by Jop Zinkweg.",
        "parent": "https://github.com/apache/tomcat/commit/4aac8d4b06bcf5a0ff5246d54d4fa4e00372f743",
        "patched_files": [
            "CrawlerSessionManagerValve.java",
            "changelog.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCrawlerSessionManagerValve.java"
        ]
    },
    "tomcat_ae08feb": {
        "bug_id": "tomcat_ae08feb",
        "commit": "https://github.com/apache/tomcat/commit/ae08febd4d053d38df876b039d4b632a79465510",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/StaticFieldELResolver.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 4,
                "filename": "java/javax/el/StaticFieldELResolver.java",
                "patch": "@@ -113,11 +113,13 @@ public Object invoke(ELContext context, Object base, Object method,\n                 return result;\n \n             } else {\n-                Method match =\n-                        Util.findMethod(clazz, base, methodName, paramTypes, params);\n+                // Static method so base should be null\n+                Method match = Util.findMethod(clazz, null, methodName, paramTypes, params);\n \n-                int modifiers = match.getModifiers();\n-                if (!Modifier.isStatic(modifiers)) {\n+                // Note: On Java 9 and above, the isStatic check becomes\n+                // unnecessary because the canAccess() call in Util.findMethod()\n+                // effectively performs the same check\n+                if (match == null || !Modifier.isStatic(match.getModifiers())) {\n                     throw new MethodNotFoundException(Util.message(context,\n                             \"staticFieldELResolver.methodNotFound\", methodName,\n                             clazz.getName()));",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "sha": "d6a902770e139489b401abaf65096b5946684978",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/Util.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 1,
                "filename": "java/javax/el/Util.java",
                "patch": "@@ -541,7 +541,11 @@ private static boolean isCoercibleFrom(Object src, Class<?> target) {\n      */\n     static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "sha": "2e06837233b0efd09bb25f33cccc769e96df6092",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/util/ReflectionUtil.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 1,
                "filename": "java/org/apache/el/util/ReflectionUtil.java",
                "patch": "@@ -424,7 +424,11 @@ private static boolean isCoercibleFrom(EvaluationContext ctx, Object src, Class<\n      */\n     private static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "sha": "c9f1f2e285eef363bbd159f4513f3bb809e4a767",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs when looking for static methods",
        "parent": "https://github.com/apache/tomcat/commit/2fb245b844fc9fefaa5e0c8002a481a72c502963",
        "patched_files": [
            "ReflectionUtil.java",
            "StaticFieldELResolver.java",
            "Util.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStaticFieldELResolver.java",
            "TestReflectionUtil.java",
            "TestUtil.java"
        ]
    },
    "tomcat_e469527": {
        "bug_id": "tomcat_e469527",
        "commit": "https://github.com/apache/tomcat/commit/e469527d8da572b0483b485d7ed8cd1b998497ba",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/e469527d8da572b0483b485d7ed8cd1b998497ba/java/org/apache/catalina/core/NamingContextListener.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/NamingContextListener.java?ref=e469527d8da572b0483b485d7ed8cd1b998497ba",
                "deletions": 1,
                "filename": "java/org/apache/catalina/core/NamingContextListener.java",
                "patch": "@@ -1102,7 +1102,11 @@ public void addResourceLink(ContextResourceLink resourceLink) {\n     private javax.naming.Context getGlobalNamingContext() {\n         if (container instanceof Context) {\n             Engine e = (Engine) ((Context) container).getParent().getParent();\n-            return e.getService().getServer().getGlobalNamingContext();\n+            Server s = e.getService().getServer();\n+            // When the Service is an embedded Service, there is no Server\n+            if (s != null) {\n+                return s.getGlobalNamingContext();\n+            }\n         }\n         return null;\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/e469527d8da572b0483b485d7ed8cd1b998497ba/java/org/apache/catalina/core/NamingContextListener.java",
                "sha": "0cacd3feaffb0680c0bb7d501e230380b0fd57b2",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/e469527d8da572b0483b485d7ed8cd1b998497ba/webapps/docs/changelog.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e469527d8da572b0483b485d7ed8cd1b998497ba",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -61,6 +61,11 @@\n         <code>Host</code> is configured with an <code>xmlBase</code>. Patch\n         provided by uk4sx. (markt)\n       </fix>\n+      <fix>\n+        Avoid a potential <code>NullPointerException</code> on Service stop if a\n+        Service is embedded directly (i.e. with no Server) in an applciation\n+        and JNDI is enabled. Patch provided by S. Ali Tokmen. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/e469527d8da572b0483b485d7ed8cd1b998497ba/webapps/docs/changelog.xml",
                "sha": "3b19889069a23fffa49c782e2feed957da5af6fb",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE in some embedding scenarios.\n\nWhen embedding a Service directly and JNDI is enabled there is no Server",
        "parent": "https://github.com/apache/tomcat/commit/bee2dbb19986dbc060de30c31c3956ee31b04a01",
        "patched_files": [
            "NamingContextListener.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestNamingContextListener.java"
        ]
    },
    "tomcat_eb2db58": {
        "bug_id": "tomcat_eb2db58",
        "commit": "https://github.com/apache/tomcat/commit/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/java/org/apache/catalina/core/AsyncContextImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
                "deletions": 3,
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "patch": "@@ -176,7 +176,7 @@ public void dispatch(String path) {\n     }\n \n     @Override\n-    public void dispatch(ServletContext context, String path) {\n+    public void dispatch(ServletContext servletContext, String path) {\n         synchronized (asyncContextLock) {\n             if (log.isDebugEnabled()) {\n                 logDebug(\"dispatch   \");\n@@ -193,7 +193,7 @@ public void dispatch(ServletContext context, String path) {\n                 request.setAttribute(ASYNC_PATH_INFO, request.getPathInfo());\n                 request.setAttribute(ASYNC_QUERY_STRING, request.getQueryString());\n             }\n-            final RequestDispatcher requestDispatcher = context.getRequestDispatcher(path);\n+            final RequestDispatcher requestDispatcher = servletContext.getRequestDispatcher(path);\n             if (!(requestDispatcher instanceof AsyncDispatcher)) {\n                 throw new UnsupportedOperationException(\n                         sm.getString(\"asyncContextImpl.noAsyncDispatcher\"));\n@@ -202,11 +202,16 @@ public void dispatch(ServletContext context, String path) {\n                     (AsyncDispatcher) requestDispatcher;\n             final ServletRequest servletRequest = getRequest();\n             final ServletResponse servletResponse = getResponse();\n+            // https://bz.apache.org/bugzilla/show_bug.cgi?id=63246\n+            // Take a local copy as the dispatch may complete the\n+            // request/response and that in turn may trigger recycling of this\n+            // object before the in-progress count can be decremented\n+            final Context context = this.context;\n             this.dispatch = new AsyncRunnable(\n                     request, applicationDispatcher, servletRequest, servletResponse);\n             this.request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCH, null);\n             clearServletRequestResponse();\n-            this.context.decrementInProgressAsyncCount();\n+            context.decrementInProgressAsyncCount();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/java/org/apache/catalina/core/AsyncContextImpl.java",
                "sha": "46216449add1b563f59b51247f143ed8b888bf60",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -88,6 +88,10 @@\n         thanks to YourKit Java profiler for helping to track down the wasted\n         memory and the root causes. (markt)\n       </fix>\n+      <fix>\n+        <bug>63246</bug>: Fix a potential <code>NullPointerException</code> when\n+        calling <code>AsyncContext.dispatch()</code>. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/webapps/docs/changelog.xml",
                "sha": "cc21008244ac457d7d4bc56e957f15c3d02c5b2b",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63246\n\nFix a potential NullPointerException when calling\nAsyncContext.dispatch()",
        "parent": "https://github.com/apache/tomcat/commit/a1cb1ac77e3a8fec1b00eb0e944842555da14f7d",
        "patched_files": [
            "AsyncContextImpl.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAsyncContextImpl.java"
        ]
    },
    "tomcat_f562edd": {
        "bug_id": "tomcat_f562edd",
        "commit": "https://github.com/apache/tomcat/commit/f562edd3302866f34c0ca9fa97f6ff414450f1ae",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/catalina/core/StandardWrapperValve.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardWrapperValve.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/StandardWrapperValve.java",
                "patch": "@@ -29,6 +29,7 @@\n import javax.servlet.UnavailableException;\n import javax.servlet.http.HttpServletResponse;\n \n+import org.apache.catalina.Container;\n import org.apache.catalina.Context;\n import org.apache.catalina.Globals;\n import org.apache.catalina.LifecycleException;\n@@ -174,6 +175,7 @@ public final void invoke(Request request, Response response)\n \n         // Call the filter chain for this request\n         // NOTE: This also calls the servlet's service() method\n+        Container container = this.container;\n         try {\n             if ((servlet != null) && (filterChain != null)) {\n                 // Swallow output if needed",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/catalina/core/StandardWrapperValve.java",
                "sha": "aff0b425b6775f2ea7d10b72517aa1c0982702cb",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11InputBuffer.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11InputBuffer.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11InputBuffer.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n \n+import org.apache.coyote.CloseNowException;\n import org.apache.coyote.InputBuffer;\n import org.apache.coyote.Request;\n import org.apache.juli.logging.Log;\n@@ -728,7 +729,13 @@ private boolean fill(boolean block) throws IOException {\n             byteBuffer.position(byteBuffer.limit());\n         }\n         byteBuffer.limit(byteBuffer.capacity());\n-        int nRead = wrapper.read(block, byteBuffer);\n+        SocketWrapperBase<?> socketWrapper = this.wrapper;\n+        int nRead = -1;\n+        if (socketWrapper != null) {\n+            nRead = socketWrapper.read(block, byteBuffer);\n+        } else {\n+            throw new CloseNowException(sm.getString(\"iib.eof.error\"));\n+        }\n         byteBuffer.limit(byteBuffer.position()).reset();\n         if (nRead > 0) {\n             return true;",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11InputBuffer.java",
                "sha": "5632de212c8d3704fea71bf7b0ff130588a33529",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11OutputBuffer.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n \n import org.apache.coyote.ActionCode;\n+import org.apache.coyote.CloseNowException;\n import org.apache.coyote.Response;\n import org.apache.tomcat.util.buf.ByteChunk;\n import org.apache.tomcat.util.buf.MessageBytes;\n@@ -306,6 +307,8 @@ protected void commit() throws IOException {\n                 SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n                 if (socketWrapper != null) {\n                     socketWrapper.write(isBlocking(), headerBuffer);\n+                } else {\n+                    throw new CloseNowException(sm.getString(\"iob.failedwrite\"));\n                 }\n             } finally {\n                 headerBuffer.position(0).limit(headerBuffer.capacity());\n@@ -530,7 +533,12 @@ boolean isChunking() {\n         public int doWrite(ByteBuffer chunk) throws IOException {\n             try {\n                 int len = chunk.remaining();\n-                socketWrapper.write(isBlocking(), chunk);\n+                SocketWrapperBase<?> socketWrapper = Http11OutputBuffer.this.socketWrapper;\n+                if (socketWrapper != null) {\n+                    socketWrapper.write(isBlocking(), chunk);\n+                } else {\n+                    throw new CloseNowException(sm.getString(\"iob.failedwrite\"));\n+                }\n                 len -= chunk.remaining();\n                 byteCount += len;\n                 return len;",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "sha": "c369837b42587d06ff9aa45d1db104ed669bc4d8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/webapps/docs/changelog.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "deletions": 2,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -81,8 +81,7 @@\n         certain microbenchmarks. (remm)\n       </fix>\n       <fix>\n-        Avoid possible NPE in <code>Http11OutputBuffer.commit</code> on\n-        connector stopclose. (remm)\n+        Avoid possible NPEs in on connector stop. (remm)\n       </fix>\n     </changelog>\n   </subsection>",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/webapps/docs/changelog.xml",
                "sha": "194686319384f6de2b3f20a1f642f67696339385",
                "status": "modified"
            }
        ],
        "message": "Avoid other cases of NPEs on stop\n\nAs found in the CI logs.",
        "parent": "https://github.com/apache/tomcat/commit/dc3741107ee6ffcbe0860e46d7f7d05a4d9f63c4",
        "patched_files": [
            "Http11OutputBuffer.java",
            "Http11InputBuffer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestHttp11InputBuffer.java",
            "TestHttp11OutputBuffer.java"
        ]
    }
}