{
    "tomcat_005b44a": {
        "bug_id": "tomcat_005b44a",
        "commit": "https://github.com/apache/tomcat/commit/005b44a7c483f18e4d88b87c66810c4f0f9f63cc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/005b44a7c483f18e4d88b87c66810c4f0f9f63cc/java/org/apache/catalina/webresources/StandardRoot.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=005b44a7c483f18e4d88b87c66810c4f0f9f63cc",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "patch": "@@ -592,7 +592,7 @@ public void deregisterTrackedResource(TrackedWebResource trackedResource) {\n     // ----------------------------------------------------------- JMX Lifecycle\n     @Override\n     protected String getDomainInternal() {\n-        return context.getDomain();\n+        return (context != null) ? context.getDomain() : null;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/tomcat/raw/005b44a7c483f18e4d88b87c66810c4f0f9f63cc/java/org/apache/catalina/webresources/StandardRoot.java",
                "sha": "07f90d40f3234bc389ba42f3360a9e496129018b",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE with storeconfig.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1605723 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/8cb48b378a8986f9c4aacb18d0282b5d261f9794",
        "patched_files": [
            "StandardRoot.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardRoot.java"
        ]
    },
    "tomcat_00d920d": {
        "bug_id": "tomcat_00d920d",
        "commit": "https://github.com/apache/tomcat/commit/00d920d0d2177fadb52242f694b62d1221fd5b4a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/00d920d0d2177fadb52242f694b62d1221fd5b4a/java/org/apache/catalina/realm/RealmBase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/RealmBase.java?ref=00d920d0d2177fadb52242f694b62d1221fd5b4a",
                "deletions": 1,
                "filename": "java/org/apache/catalina/realm/RealmBase.java",
                "patch": "@@ -1200,7 +1200,7 @@ protected String digest(String credentials)  {\n     }\n \n     protected boolean hasMessageDigest() {\n-        return !(getDigest() == null && getDigest().length() > 0);\n+        return getDigest() != null;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/tomcat/raw/00d920d0d2177fadb52242f694b62d1221fd5b4a/java/org/apache/catalina/realm/RealmBase.java",
                "sha": "cedb63a5457f817521ea549e6d31c6fc1f0887af",
                "status": "modified"
            }
        ],
        "message": "Doh! Fix NPE.\nNote digest isn't tested for zero length anywhere else so don't introduce a test here.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1623851 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/f45739e7a39500d757208d68152a79d0176e6e4f",
        "patched_files": [
            "RealmBase.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRealmBase.java"
        ]
    },
    "tomcat_0173dbc": {
        "bug_id": "tomcat_0173dbc",
        "commit": "https://github.com/apache/tomcat/commit/0173dbc402b1611c101921839cc3775e46a5f82f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/0173dbc402b1611c101921839cc3775e46a5f82f/java/org/apache/tomcat/util/descriptor/web/WebXml.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/descriptor/web/WebXml.java?ref=0173dbc402b1611c101921839cc3775e46a5f82f",
                "deletions": 2,
                "filename": "java/org/apache/tomcat/util/descriptor/web/WebXml.java",
                "patch": "@@ -615,7 +615,7 @@ public String getRequestEncoding() {\n         return requestEncoding;\n     }\n     public void setRequestEncoding(String requestEncoding) {\n-        if (requestEncoding == null) {\n+        if (requestEncoding != null) {\n             try {\n                 B2CConverter.getCharset(requestEncoding);\n             } catch (UnsupportedEncodingException e) {\n@@ -630,7 +630,7 @@ public String getResponseEncoding() {\n         return responseEncoding;\n     }\n     public void setResponseEncoding(String responseEncoding) {\n-        if (responseEncoding == null) {\n+        if (responseEncoding != null) {\n             try {\n                 B2CConverter.getCharset(responseEncoding);\n             } catch (UnsupportedEncodingException e) {",
                "raw_url": "https://github.com/apache/tomcat/raw/0173dbc402b1611c101921839cc3775e46a5f82f/java/org/apache/tomcat/util/descriptor/web/WebXml.java",
                "sha": "6441571da7d77c4e0b194c6ff546defc945297b0",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/0173dbc402b1611c101921839cc3775e46a5f82f/webapps/docs/changelog.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0173dbc402b1611c101921839cc3775e46a5f82f",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -52,6 +52,13 @@\n         <code>HttpHeaderSecurityFilter</code> for the HSTS preload parameter.\n         (markt)\n       </add>\n+      <fix>\n+        Correct a bug in the implementation of the Servlet 4.0 feature that\n+        allows specifying a default request and/or response character encoding\n+        per web application. <code>null</code> values passed via the\n+        programmatic interface no longer trigger a\n+        <code>NullPointerException</code>. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/0173dbc402b1611c101921839cc3775e46a5f82f/webapps/docs/changelog.xml",
                "sha": "5b292bfc5c70235e4fdcd12bc89ec8879fbf873f",
                "status": "modified"
            }
        ],
        "message": "Correct a bug in the implementation of the new Servlet 4.0 feature that allows specifying a default request and/or response character encoding per web application. null values passed via the programmatic interface no longer trigger a NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1786375 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/687f3a2e2647287638b372e88f3a9fe57626efc4",
        "patched_files": [
            "WebXml.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebXml.java"
        ]
    },
    "tomcat_01960e2": {
        "bug_id": "tomcat_01960e2",
        "commit": "https://github.com/apache/tomcat/commit/01960e2b1f30b8b722d9954c039f5b3d89993a99",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "patch": "@@ -111,7 +111,7 @@ protected void createSSLContext(SSLHostConfig sslHostConfig) throws IllegalArgum\n                 sslContext = sslUtil.createSSLContext(negotiableProtocols);\n                 sslContext.init(sslUtil.getKeyManagers(), sslUtil.getTrustManagers(), null);\n             } catch (Exception e) {\n-                throw new IllegalArgumentException(e);\n+                throw new IllegalArgumentException(e.getMessage(), e);\n             }\n \n             SSLSessionContext sessionContext = sslContext.getServerSessionContext();",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/AbstractJsseEndpoint.java",
                "sha": "d4cd9132cc79113e7940f8dc379dea79844bafab",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/LocalStrings.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/LocalStrings.properties?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/util/net/LocalStrings.properties",
                "patch": "@@ -146,6 +146,7 @@ sslHostConfig.prefix_missing=The protocol [{0}] was added to the list of protoco\n sslHostConfigCertificate.mismatch=The property [{0}] was set on the SSLHostConfigCertificate named [{1}] and is for certificate storage type [{2}] but the certificate is being used with a storage of type [{3}]\n sslHostConfig.opensslconf.null=Attempt to set null OpenSSLConf ignored\n sslHostConfig.opensslconf.alreadyset=Attempt to set another OpenSSLConf ignored\n+sslHostConfig.fileNotFound=Configured file [{0}] does not exist\n \n sslImplementation.cnfe= Unable to create SSLImplementation for class [{0}]\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/LocalStrings.properties",
                "sha": "b344e884ae399d6ca5edf2324a9f60ff7b5de689",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/SSLHostConfig.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SSLHostConfig.java?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "deletions": 3,
                "filename": "java/org/apache/tomcat/util/net/SSLHostConfig.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.tomcat.util.net;\n \n import java.io.File;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.Serializable;\n import java.security.KeyStore;\n@@ -824,7 +825,7 @@ public boolean getInsecureRenegotiation() {\n \n     // --------------------------------------------------------- Support methods\n \n-    public static String adjustRelativePath(String path) {\n+    public static String adjustRelativePath(String path) throws FileNotFoundException {\n         // Empty or null path can't point to anything useful. The assumption is\n         // that the value is deliberately empty / null so leave it that way.\n         if (path == null || path.length() == 0) {\n@@ -837,8 +838,7 @@ public static String adjustRelativePath(String path) {\n             f = new File(newPath);\n         }\n         if (!f.exists()) {\n-            // TODO i18n, sm\n-            log.warn(\"configured file:[\"+newPath+\"] does not exist.\");\n+            throw new FileNotFoundException(sm.getString(\"sslHostConfig.fileNotFound\", newPath));\n         }\n         return newPath;\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/SSLHostConfig.java",
                "sha": "c11b31ab5d84750dbe8656b33473adc4470960cd",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/SSLUtilBase.java?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "deletions": 2,
                "filename": "java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "patch": "@@ -138,8 +138,6 @@ static KeyStore getStore(String type, String provider, String path,\n             }\n             ks.load(istream, storePass);\n         } catch (FileNotFoundException fnfe) {\n-            log.error(sm.getString(\"jsse.keystore_load_failed\", type, path,\n-                    fnfe.getMessage()), fnfe);\n             throw fnfe;\n         } catch (IOException ioe) {\n             // May be expected when working with a trust store",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/SSLUtilBase.java",
                "sha": "f72b52b6963ccb6ff404f576087b19bacd4a2fd1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "patch": "@@ -199,6 +199,10 @@ public SSLContext createSSLContext(List<String> negotiableProtocols) throws NoSu\n         char[] keyPassArray = keyPass.toCharArray();\n \n         if (ks == null) {\n+            if (certificate.getCertificateFile() == null) {\n+                throw new IOException(sm.getString(\"jsse.noCertFile\"));\n+            }\n+\n             PEMFile privateKeyFile = new PEMFile(SSLHostConfig.adjustRelativePath\n                     (certificate.getCertificateKeyFile() != null ? certificate.getCertificateKeyFile() : certificate.getCertificateFile()),\n                     keyPass);",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/jsse/JSSEUtil.java",
                "sha": "7b5b80666a44a59cdda9795395b8f1baa09206a1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/jsse/LocalStrings.properties",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/LocalStrings.properties?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/util/net/jsse/LocalStrings.properties",
                "patch": "@@ -25,6 +25,7 @@ jsse.noDefaultProtocols=Unable to determine a default for sslEnabledProtocols. S\n jsse.noKeys=No aliases for private keys found in key store\n jsse.exceptionOnClose=Failure to close socket.\n jsse.pemParseError=Unable to parse the key from [{0}]\n+jsse.noCertFile=SSLHostConfig attribute certificateFile must be defined when using an SSL connector\n \n jsseSupport.clientCertError=Error trying to obtain a certificate from the client\n jseeSupport.certTranslationError=Error translating certificate [{0}]\n@@ -38,4 +39,4 @@ jsseUtil.invalidTrustCert=The certificate for [{0}] in the trust store is not va\n jsseUtil.noCrlSupport=The truststoreProvider [{0}] does not support the certificateRevocationFile configuration option\n jsseUtil.noVerificationDepth=The truststoreProvider [{0}] does not support the certificateVerificationDepth configuration option\n jsseUtil.trustedCertNotChecked=The validity dates of the trusted certificate with alias [{0}] were not checked as the certificate was of an unknown type\n-jsseUtil.trustedCertNotValid=The trusted certificate with alias [{0}] and DN [{1}] is not valid due to [{2}]. Certificates signed by this trusted certificate WILL be accepted\n\\ No newline at end of file\n+jsseUtil.trustedCertNotValid=The trusted certificate with alias [{0}] and DN [{1}] is not valid due to [{2}]. Certificates signed by this trusted certificate WILL be accepted",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/java/org/apache/tomcat/util/net/jsse/LocalStrings.properties",
                "sha": "aa3fe77c8be3135b40add94656b69b1c20ac9ea1",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/01960e2b1f30b8b722d9954c039f5b3d89993a99/webapps/docs/changelog.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=01960e2b1f30b8b722d9954c039f5b3d89993a99",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -73,6 +73,12 @@\n         <bug>62023</bug>: Log error reporting multiple SSLHostConfig elements\n         when using the APR Connector instead of crashing Tomcat. (csutherl)\n       </fix>\n+      <fix>\n+        <bug>62032</bug>: Fix NullPointerException when certificateFile is not\n+        defined on an SSLHostConfig and unify the behavior when a\n+        certificateFile is defined but the file does not exist for both\n+        JKS and PEM file types.\n+      </fix>\n     </changelog>\n   </subsection>\n </section>",
                "raw_url": "https://github.com/apache/tomcat/raw/01960e2b1f30b8b722d9954c039f5b3d89993a99/webapps/docs/changelog.xml",
                "sha": "7e50e193c2840fcb4d7d6d8d989129e86610e23c",
                "status": "modified"
            }
        ],
        "message": "Fixed https://bz.apache.org/bugzilla/show_bug.cgi?id=62032\nFix NullPointerException when certificateFile is not defined on an SSLHostConfig and unify the behavior when a certificateFile is defined but the file does not exist for both JKS and PEM file types.\n\nI also fixed one TODO in SSLHostConfig and changed how the IllegalArgumentException is thrown in AbstractJsseEndpoint so that it's message is consistent with other logging messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1822150 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/d6945a8dd9916e68dcb2b92d055af8aae1bd3c8d",
        "patched_files": [
            "SSLHostConfig.java",
            "LocalStrings.properties",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestSSLHostConfig.java"
        ]
    },
    "tomcat_0483c93": {
        "bug_id": "tomcat_0483c93",
        "commit": "https://github.com/apache/tomcat/commit/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
                "deletions": 2,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -816,7 +816,7 @@ protected boolean postParseRequest(org.apache.coyote.Request req, Request reques\n             if (wrapper != null) {\n                 String[] methods = wrapper.getServletMethods();\n                 if (methods != null) {\n-                    for (int i=0; i<methods.length; i++) {\n+                    for (int i=0; i < methods.length; i++) {\n                         if (\"TRACE\".equals(methods[i])) {\n                             continue;\n                         }\n@@ -828,7 +828,9 @@ protected boolean postParseRequest(org.apache.coyote.Request req, Request reques\n                     }\n                 }\n             }\n-            res.addHeader(\"Allow\", header);\n+            if (header != null) {\n+                res.addHeader(\"Allow\", header);\n+            }\n             response.sendError(405, \"TRACE method is not allowed\");\n             // Safe to skip the remainder of this method.\n             return true;",
                "raw_url": "https://github.com/apache/tomcat/raw/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "de572e603b467544c2ff0c13aa807ad05d3948df",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -72,6 +72,10 @@\n         Ensure that the default servlet reads the entire global XSLT file if\n         one is defined. Identified by Coverity Scan. (markt)\n       </fix>\n+      <fix>\n+        Avoid potential <code>NullPointerException</code> when generating an\n+        HTTP <code>Allow</code> header. Identified by Coverity Scan. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/0483c93ddd4ab0ac7742e154d1e1e1b3c4475f6c/webapps/docs/changelog.xml",
                "sha": "24cc2b067a9b35bae5ecde3eeb191a26209bb0b8",
                "status": "modified"
            }
        ],
        "message": "Fix rare potential NPE identified by Coverity Scan.",
        "parent": "https://github.com/apache/tomcat/commit/21ee1c0b33aed7908a7aa5f415ff8775cfd92119",
        "patched_files": [
            "changelog.xml",
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_0bd720d": {
        "bug_id": "tomcat_0bd720d",
        "commit": "https://github.com/apache/tomcat/commit/0bd720df61ac1c9520455ae68f71d02a8d76e030",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/0bd720df61ac1c9520455ae68f71d02a8d76e030/test/org/apache/juli/TestFileHandlerNonRotatable.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/juli/TestFileHandlerNonRotatable.java?ref=0bd720df61ac1c9520455ae68f71d02a8d76e030",
                "deletions": 0,
                "filename": "test/org/apache/juli/TestFileHandlerNonRotatable.java",
                "patch": "@@ -31,6 +31,8 @@\n \n     @BeforeClass\n     public static void setUpPerTestClass() throws Exception {\n+        LoggingBaseTest.setUpPerTestClass();\n+\n         System.setProperty(\"java.util.logging.manager\",\n                 \"org.apache.juli.ClassLoaderLogManager\");\n         String configLoggingPath = TestFileHandlerNonRotatable.class",
                "raw_url": "https://github.com/apache/tomcat/raw/0bd720df61ac1c9520455ae68f71d02a8d76e030/test/org/apache/juli/TestFileHandlerNonRotatable.java",
                "sha": "5b9124544abef897835c305279b1663fd4c31363",
                "status": "modified"
            }
        ],
        "message": "Fix regression (NPE) caused by r1845903\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1845923 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/8ea043d94472f4befd3eda7125b06fee734f6eaa",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TestFileHandlerNonRotatable.java"
        ]
    },
    "tomcat_0f0dbda": {
        "bug_id": "tomcat_0f0dbda",
        "commit": "https://github.com/apache/tomcat/commit/0f0dbda485bad6a1c3dca6d4ccc3c28846ebe0b8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/0f0dbda485bad6a1c3dca6d4ccc3c28846ebe0b8/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=0f0dbda485bad6a1c3dca6d4ccc3c28846ebe0b8",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -451,6 +451,9 @@ ExecutorService getExecutorService() {\n \n \n     void shutdownExecutor() {\n+        if (executorService == null) {\n+            return;\n+        }\n         executorService.shutdown();\n         try {\n             executorService.awaitTermination(10, TimeUnit.SECONDS);",
                "raw_url": "https://github.com/apache/tomcat/raw/0f0dbda485bad6a1c3dca6d4ccc3c28846ebe0b8/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "ff3f636e01b3284957340c2bf860662b9b218f11",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE on shutdown if application doesn't use WebSocket\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1551481 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/6119681cbe3722bcbc03157dc2e76dccf582639d",
        "patched_files": [
            "WsServerContainer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat_0ff4217": {
        "bug_id": "tomcat_0ff4217",
        "commit": "https://github.com/apache/tomcat/commit/0ff4217e05fef6cb3de0f2857fc378471386cc71",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/tomcat/blob/0ff4217e05fef6cb3de0f2857fc378471386cc71/java/org/apache/tomcat/util/file/ConfigFileLoader.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/file/ConfigFileLoader.java?ref=0ff4217e05fef6cb3de0f2857fc378471386cc71",
                "deletions": 5,
                "filename": "java/org/apache/tomcat/util/file/ConfigFileLoader.java",
                "patch": "@@ -24,19 +24,30 @@\n import java.net.URI;\n import java.net.URL;\n \n+import org.apache.tomcat.util.res.StringManager;\n+\n /**\n  * This class is used to obtain {@link InputStream}s for configuration files\n  * from a given location String. This allows greater flexibility than these\n  * files having to be loaded directly from a file system.\n  */\n public class ConfigFileLoader {\n \n+    private static final StringManager sm = StringManager.getManager(ConfigFileLoader.class\n+            .getPackage().getName());\n+\n     private static final File CATALINA_BASE_FILE;\n     private static final URI CATALINA_BASE_URI;\n \n     static {\n-        CATALINA_BASE_FILE = new File(System.getProperty(\"catalina.base\"));\n-        CATALINA_BASE_URI = CATALINA_BASE_FILE.toURI();\n+        String catalinaBase = System.getProperty(\"catalina.base\");\n+        if (catalinaBase != null) {\n+            CATALINA_BASE_FILE = new File(catalinaBase);\n+            CATALINA_BASE_URI = CATALINA_BASE_FILE.toURI();\n+        } else {\n+            CATALINA_BASE_FILE = null;\n+            CATALINA_BASE_URI = null;\n+        }\n     }\n \n     private ConfigFileLoader() {\n@@ -72,10 +83,19 @@ public static InputStream getInputStream(String location) throws IOException {\n         // File didn't work so try URI.\n         // Using resolve() enables the code to handle relative paths that did\n         // not point to a file\n-        URI uri = CATALINA_BASE_URI.resolve(location);\n+        URI uri;\n+        if (CATALINA_BASE_URI != null) {\n+            uri = CATALINA_BASE_URI.resolve(location);\n+        } else {\n+            uri = URI.create(location);\n+        }\n \n         // Obtain the input stream we need\n-        URL url = uri.toURL();\n-        return url.openConnection().getInputStream();\n+        try {\n+            URL url = uri.toURL();\n+            return url.openConnection().getInputStream();\n+        } catch (IllegalArgumentException e) {\n+            throw new IOException(sm.getString(\"configFileLoader.cannotObtainURL\", location), e);\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/tomcat/raw/0ff4217e05fef6cb3de0f2857fc378471386cc71/java/org/apache/tomcat/util/file/ConfigFileLoader.java",
                "sha": "12cc533276d87c05e47a32b2ea7b74afd4f239c4",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/tomcat/blob/0ff4217e05fef6cb3de0f2857fc378471386cc71/java/org/apache/tomcat/util/file/LocalStrings.properties",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/file/LocalStrings.properties?ref=0ff4217e05fef6cb3de0f2857fc378471386cc71",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/util/file/LocalStrings.properties",
                "patch": "@@ -0,0 +1,16 @@\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+\n+configFileLoader.cannotObtainURL=Cannot obtain URL for the relative path [{0}]. Check that catalina.base is set.\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/tomcat/raw/0ff4217e05fef6cb3de0f2857fc378471386cc71/java/org/apache/tomcat/util/file/LocalStrings.properties",
                "sha": "5bbf626ba2a62320493984e1086fb0ba9da612e1",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/0ff4217e05fef6cb3de0f2857fc378471386cc71/webapps/docs/changelog.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=0ff4217e05fef6cb3de0f2857fc378471386cc71",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -52,6 +52,11 @@\n         date formatting in Tomcat's internal request object. Based on a patch\n         provided by Ondrej Medek. (markt)\n       </fix>\n+      <fix>\n+        <bug>59206</bug>: Ensure NPE will not be thrown by\n+        <code>o.a.tomcat.util.file.ConfigFileLoader</code> when\n+        <code>catalina.base</code> is not specified. (violetagg)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/0ff4217e05fef6cb3de0f2857fc378471386cc71/webapps/docs/changelog.xml",
                "sha": "c25c408e9e5fc09d13299ab8cf0381cc0e4fb30f",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=59206\nEnsure NPE will not be thrown by when catalina.base is not specified.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1736209 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/f0687f6f8068a6487d968b0212ebb8eeac66c129",
        "patched_files": [
            "LocalStrings.properties",
            "ConfigFileLoader.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestConfigFileLoader.java"
        ]
    },
    "tomcat_153b0df": {
        "bug_id": "tomcat_153b0df",
        "commit": "https://github.com/apache/tomcat/commit/153b0df7d2dba5eeef1917766fc8578387841867",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/tomcat/blob/153b0df7d2dba5eeef1917766fc8578387841867/java/org/apache/tomcat/websocket/Util.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Util.java?ref=153b0df7d2dba5eeef1917766fc8578387841867",
                "deletions": 14,
                "filename": "java/org/apache/tomcat/websocket/Util.java",
                "patch": "@@ -332,21 +332,23 @@ public static Object coerceToType(Class<?> type, String value) {\n                     throws DeploymentException{\n \n         List<DecoderEntry> result = new ArrayList<>();\n-        for (Class<? extends Decoder> decoderClazz : decoderClazzes) {\n-            // Need to instantiate decoder to ensure it is valid and that\n-            // deployment can be failed if it is not\n-            @SuppressWarnings(\"unused\")\n-            Decoder instance;\n-            try {\n-                instance = decoderClazz.newInstance();\n-            } catch (InstantiationException | IllegalAccessException e) {\n-                throw new DeploymentException(\n-                        sm.getString(\"pojoMethodMapping.invalidDecoder\",\n-                                decoderClazz.getName()), e);\n+        if (decoderClazzes != null) {\n+            for (Class<? extends Decoder> decoderClazz : decoderClazzes) {\n+                // Need to instantiate decoder to ensure it is valid and that\n+                // deployment can be failed if it is not\n+                @SuppressWarnings(\"unused\")\n+                Decoder instance;\n+                try {\n+                    instance = decoderClazz.newInstance();\n+                } catch (InstantiationException | IllegalAccessException e) {\n+                    throw new DeploymentException(\n+                            sm.getString(\"pojoMethodMapping.invalidDecoder\",\n+                                    decoderClazz.getName()), e);\n+                }\n+                DecoderEntry entry = new DecoderEntry(\n+                        Util.getDecoderType(decoderClazz), decoderClazz);\n+                result.add(entry);\n             }\n-            DecoderEntry entry = new DecoderEntry(\n-                    Util.getDecoderType(decoderClazz), decoderClazz);\n-            result.add(entry);\n         }\n \n         return result;",
                "raw_url": "https://github.com/apache/tomcat/raw/153b0df7d2dba5eeef1917766fc8578387841867/java/org/apache/tomcat/websocket/Util.java",
                "sha": "22d3b4514d1a79e8f2407efd3b3235646a1107a0",
                "status": "modified"
            }
        ],
        "message": "NPE protection. Note NPE only possible with test code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1630199 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/68bdec3732b8b34d95a88117453f480b1d86ec07",
        "patched_files": [
            "Util.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestUtil.java"
        ]
    },
    "tomcat_15afcc8": {
        "bug_id": "tomcat_15afcc8",
        "commit": "https://github.com/apache/tomcat/commit/15afcc8bd79d949508987e9d1a8b5c11235f5d0c",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/tomcat/blob/15afcc8bd79d949508987e9d1a8b5c11235f5d0c/test/org/apache/catalina/valves/TestRemoteIpValve.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/valves/TestRemoteIpValve.java?ref=15afcc8bd79d949508987e9d1a8b5c11235f5d0c",
                "deletions": 12,
                "filename": "test/org/apache/catalina/valves/TestRemoteIpValve.java",
                "patch": "@@ -70,7 +70,14 @@ public void invoke(Request request, Response response) throws IOException, Servl\n             this.serverPort = request.getServerPort();\n         }\n     }\n-    \n+\n+    public static class MockRequest extends Request {\n+        @Override\n+        public void setAttribute(String name, Object value) {\n+            // NOOP. Prevents NPE during testing.\n+        }\n+    }\n+\n     public void testListToCommaDelimitedString() {\n         List<String> elements = Arrays.asList(\"element1\", \"element2\", \"element3\");\n         String actual = RemoteIpValve.listToCommaDelimitedString(elements);\n@@ -98,7 +105,7 @@ public void testInvokeAllowedRemoteAddrWithNullRemoteIpHeader() throws Exception\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -138,7 +145,7 @@ public void testInvokeAllProxiesAreTrusted() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -178,7 +185,7 @@ public void testInvokeAllProxiesAreTrustedOrInternal() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -219,7 +226,7 @@ public void testInvokeAllProxiesAreInternal() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -259,7 +266,7 @@ public void testInvokeAllProxiesAreTrustedAndRemoteAddrMatchRegexp() throws Exce\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");\n@@ -299,7 +306,7 @@ public void testInvokeXforwardedProtoSaysHttpsForIncomingHttpRequest() throws Ex\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         // client ip\n         request.setRemoteAddr(\"192.168.0.10\");\n@@ -363,7 +370,7 @@ public void testInvokeXforwardedProtoIsNullForIncomingHttpRequest() throws Excep\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         // client ip\n         request.setRemoteAddr(\"192.168.0.10\");\n@@ -427,7 +434,7 @@ public void testInvokeXforwardedProtoSaysHttpForIncomingHttpsRequest() throws Ex\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         // client ip\n         request.setRemoteAddr(\"192.168.0.10\");\n@@ -491,7 +498,7 @@ public void testInvokeXforwardedProtoIsNullForIncomingHttpsRequest() throws Exce\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         // client ip\n         request.setRemoteAddr(\"192.168.0.10\");\n@@ -556,7 +563,7 @@ public void testInvokeNotAllowedRemoteAddr() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"not-allowed-internal-proxy\");\n         request.setRemoteHost(\"not-allowed-internal-proxy-host\");\n@@ -595,7 +602,7 @@ public void testInvokeUntrustedProxyInTheChain() throws Exception {\n         RemoteAddrAndHostTrackerValve remoteAddrAndHostTrackerValve = new RemoteAddrAndHostTrackerValve();\n         remoteIpValve.setNext(remoteAddrAndHostTrackerValve);\n         \n-        Request request = new Request();\n+        Request request = new MockRequest();\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n         request.setRemoteAddr(\"192.168.0.10\");\n         request.setRemoteHost(\"remote-host-original-value\");",
                "raw_url": "https://github.com/apache/tomcat/raw/15afcc8bd79d949508987e9d1a8b5c11235f5d0c/test/org/apache/catalina/valves/TestRemoteIpValve.java",
                "sha": "13812533fe71d2e464b1fe4275c5a7af6b37448d",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE in unit tests as a result of r1067718\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1071559 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/ff80284498395f24e05728e1c5fc2ca52cd6448b",
        "patched_files": [
            "RemoteIpValve.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRemoteIpValve.java"
        ]
    },
    "tomcat_15c23b5": {
        "bug_id": "tomcat_15c23b5",
        "commit": "https://github.com/apache/tomcat/commit/15c23b522ef46f3cea851cc1c3721d0cc94069b7",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/15c23b522ef46f3cea851cc1c3721d0cc94069b7/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=15c23b522ef46f3cea851cc1c3721d0cc94069b7",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -403,7 +403,10 @@ private void registerAuthenticatedSession(WsSession wsSession,\n     private void unregisterAuthenticatedSession(WsSession wsSession,\n             String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);\n-        wsSessions.remove(wsSession);\n+        // wsSessions will be null if the HTTP session has ended\n+        if (wsSessions != null) {\n+            wsSessions.remove(wsSession);\n+        }\n     }\n \n ",
                "raw_url": "https://github.com/apache/tomcat/raw/15c23b522ef46f3cea851cc1c3721d0cc94069b7/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "4f196825dcd3b43783345bbaf7b851cf60b86bc2",
                "status": "modified"
            }
        ],
        "message": "Fix NPE reported on users list when HTTP session ends\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1546372 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/571b7b0cd63ce09dc1fb266aa30aca8a94539b4b",
        "patched_files": [
            "WsServerContainer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat_1d442a7": {
        "bug_id": "tomcat_1d442a7",
        "commit": "https://github.com/apache/tomcat/commit/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=1d442a735cc3fd793030d05a0f8b9bbe71cb16cf",
                "deletions": 0,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -415,6 +415,15 @@ public void service(org.apache.coyote.Request req,\n     }\n \n \n+    @Override\n+    public boolean prepare(org.apache.coyote.Request req, org.apache.coyote.Response res)\n+            throws IOException, ServletException {\n+        Request request = (Request) req.getNote(ADAPTER_NOTES);\n+        Response response = (Response) res.getNote(ADAPTER_NOTES);\n+\n+        return postParseRequest(req, request, res, response);\n+    }\n+\n \n     @Override\n     public void errorDispatch(org.apache.coyote.Request req,",
                "raw_url": "https://github.com/apache/tomcat/raw/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "8b65005332d8f1b8d4f566f0a460af359bd6967d",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/tomcat/blob/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/catalina/valves/rewrite/RewriteValve.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/rewrite/RewriteValve.java?ref=1d442a735cc3fd793030d05a0f8b9bbe71cb16cf",
                "deletions": 3,
                "filename": "java/org/apache/catalina/valves/rewrite/RewriteValve.java",
                "patch": "@@ -41,6 +41,8 @@\n import org.apache.catalina.Lifecycle;\n import org.apache.catalina.LifecycleException;\n import org.apache.catalina.LifecycleListener;\n+import org.apache.catalina.Pipeline;\n+import org.apache.catalina.connector.Connector;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.connector.Response;\n import org.apache.catalina.util.LifecycleSupport;\n@@ -486,8 +488,14 @@ else if (index == urlString.length() - 1) {\n                     request.getMappingData().recycle();\n                     // Reinvoke the whole request recursively\n                     try {\n-                        request.getConnector().getProtocolHandler().getAdapter().service\n-                        (request.getCoyoteRequest(), response.getCoyoteResponse());\n+                        Connector connector = request.getConnector();\n+                        if (!connector.getProtocolHandler().getAdapter().prepare(\n+                                request.getCoyoteRequest(), response.getCoyoteResponse())) {\n+                            return;\n+                        }\n+                        Pipeline pipeline = connector.getService().getContainer().getPipeline();\n+                        request.setAsyncSupported(pipeline.isAsyncSupported());\n+                        pipeline.getFirst().invoke(request, response);\n                     } catch (Exception e) {\n                         // This doesn't actually happen in the Catalina adapter implementation\n                     }\n@@ -552,7 +560,9 @@ protected String getHostConfigPath(String resourceName) {\n      * Example:\n      *  RewriteCond %{REMOTE_HOST}  ^host1.*  [OR]\n      *\n-     * @param line\n+     * @param line A line from the rewrite configuration\n+     *\n+     * @return The condition, rule or map resulting from parsing the line\n      */\n     public static Object parse(String line) {\n         StringTokenizer tokenizer = new StringTokenizer(line);",
                "raw_url": "https://github.com/apache/tomcat/raw/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/catalina/valves/rewrite/RewriteValve.java",
                "sha": "5b15f359294b63fd61fa2f7eed16420651d36188",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tomcat/blob/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/coyote/Adapter.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/Adapter.java?ref=1d442a735cc3fd793030d05a0f8b9bbe71cb16cf",
                "deletions": 2,
                "filename": "java/org/apache/coyote/Adapter.java",
                "patch": "@@ -30,6 +30,9 @@\n     /**\n      * Call the service method, and notify all listeners\n      *\n+     * @param req The request object\n+     * @param res The response object\n+     *\n      * @exception Exception if an error happens during handling of\n      *   the request. Common errors are:\n      *   <ul><li>IOException if an input/output error occurs and we are\n@@ -42,8 +45,23 @@\n      *  Tomcat should be able to handle and log any other exception ( including\n      *  runtime exceptions )\n      */\n-    public void service(Request req, Response res)\n-            throws Exception;\n+    public void service(Request req, Response res) throws Exception;\n+\n+    /**\n+     * Prepare the given request/response for processing. This method requires\n+     * that the request object has been populated with the information available\n+     * from the HTTP headers.\n+     *\n+     * @param req The request object\n+     * @param res The response object\n+     *\n+     * @return <code>true</code> if processing can continue, otherwise\n+     *         <code>false</code> in which case an appropriate error will have\n+     *         been set on the response\n+     *\n+     * @throws Exception If the processing fails unexpectedly\n+     */\n+    public boolean prepare(Request req, Response res) throws Exception;\n \n     public boolean asyncDispatch(Request req,Response res, SocketStatus status)\n             throws Exception;",
                "raw_url": "https://github.com/apache/tomcat/raw/1d442a735cc3fd793030d05a0f8b9bbe71cb16cf/java/org/apache/coyote/Adapter.java",
                "sha": "ecae1d94472ae5f4705ac089e6c49f735d0af7cb",
                "status": "modified"
            }
        ],
        "message": "Provide a better mechanism for the RewriteValve to inject a re-written request that avoids:\n- NPEs appearing in the log every time the Valve re-writes a request.\n- unnecessary duplication of post-processing in the adapter\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1644935 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/71c3ea89be771550bb8e0a07d26ba2e0d5f5b8b4",
        "patched_files": [
            "RewriteValve.java",
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRewriteValve.java",
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_1df18a4": {
        "bug_id": "tomcat_1df18a4",
        "commit": "https://github.com/apache/tomcat/commit/1df18a4fe73729d9a4deda143ddedd2b3de8d408",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/1df18a4fe73729d9a4deda143ddedd2b3de8d408/test/org/apache/catalina/startup/TomcatBaseTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/startup/TomcatBaseTest.java?ref=1df18a4fe73729d9a4deda143ddedd2b3de8d408",
                "deletions": 1,
                "filename": "test/org/apache/catalina/startup/TomcatBaseTest.java",
                "patch": "@@ -304,7 +304,7 @@ public int getLength() {\n \n             @Override\n             public int available() {\n-                if (done) return 0;\n+                if (done || body == null) return 0;\n                 else return body.length;\n             }\n         };",
                "raw_url": "https://github.com/apache/tomcat/raw/1df18a4fe73729d9a4deda143ddedd2b3de8d408/test/org/apache/catalina/startup/TomcatBaseTest.java",
                "sha": "fd03a912861a28bfb1d8d07e9aea05a29005bbec",
                "status": "modified"
            }
        ],
        "message": "Fix NPE triggered by r1356852\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1356867 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/bc782575de0aa9487861d26fe3994b49d57f6106",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TomcatBaseTest.java"
        ]
    },
    "tomcat_1e43950": {
        "bug_id": "tomcat_1e43950",
        "commit": "https://github.com/apache/tomcat/commit/1e43950a5980fd88c27cad203eb022dcc751a81c",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/1e43950a5980fd88c27cad203eb022dcc751a81c/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java?ref=1e43950a5980fd88c27cad203eb022dcc751a81c",
                "deletions": 3,
                "filename": "java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "patch": "@@ -156,11 +156,15 @@ public void reset() throws IOException {\n         if (multiRelease == null) {\n             if (JreCompat.isJre9Available()) {\n                 Manifest manifest = jarInputStream.getManifest();\n-                String mrValue = manifest.getMainAttributes().getValue(\"Multi-Release\");\n-                if (mrValue == null) {\n+                if (manifest == null) {\n                     multiRelease = Boolean.FALSE;\n                 } else {\n-                    multiRelease = Boolean.valueOf(mrValue);\n+                    String mrValue = manifest.getMainAttributes().getValue(\"Multi-Release\");\n+                    if (mrValue == null) {\n+                        multiRelease = Boolean.FALSE;\n+                    } else {\n+                        multiRelease = Boolean.valueOf(mrValue);\n+                    }\n                 }\n             } else {\n                 multiRelease = Boolean.FALSE;",
                "raw_url": "https://github.com/apache/tomcat/raw/1e43950a5980fd88c27cad203eb022dcc751a81c/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "sha": "4d1d6ac31efbccd9190ac8fb2199b46c94167293",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE if no manifest is present.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815325 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/4e2e6b6d730823e027b6c4bdf2ec4872f95799b7",
        "patched_files": [
            "AbstractInputStreamJar.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAbstractInputStreamJar.java"
        ]
    },
    "tomcat_1f32fb3": {
        "bug_id": "tomcat_1f32fb3",
        "commit": "https://github.com/apache/tomcat/commit/1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java?ref=1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "patch": "@@ -172,8 +172,16 @@ public TagLibraryInfoImpl(JspCompilationContext ctxt, ParserController pc,\n             }\n \n             // Get the representation of the TLD\n+            System.out.println(\"tldResourcePath: \" + tldResourcePath.getUrl());\n+            if (tldResourcePath.getUrl() == null) {\n+                err.jspError(\"jsp.error.tld.missing\", prefix, uri);\n+            }\n             TaglibXml taglibXml =\n                     ctxt.getOptions().getTldCache().getTaglibXml(tldResourcePath);\n+            System.out.println(\"taglibXml: \" + taglibXml);\n+            if (taglibXml == null) {\n+                err.jspError(\"jsp.error.tld.missing\", prefix, uri);\n+            }\n \n             // Populate the TagLibraryInfo attributes\n             this.jspversion = taglibXml.getJspVersion();",
                "raw_url": "https://github.com/apache/tomcat/raw/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "sha": "48bd789db1e8b2bf1da13faede737224e07ea1f3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/compiler/TldCache.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/TldCache.java?ref=1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/TldCache.java",
                "patch": "@@ -93,6 +93,9 @@ public TldResourcePath getTldResourcePath(String uri) {\n \n     public TaglibXml getTaglibXml(TldResourcePath tldResourcePath) throws JasperException {\n         TaglibXmlCacheEntry cacheEntry = tldResourcePathTaglibXmlMap.get(tldResourcePath);\n+        if (cacheEntry == null) {\n+            return null;\n+        }\n         long lastModified[] = getLastModified(tldResourcePath);\n         if (lastModified[0] != cacheEntry.getWebAppPathLastModified() ||\n                 lastModified[1] != cacheEntry.getEntryLastModified()) {",
                "raw_url": "https://github.com/apache/tomcat/raw/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/compiler/TldCache.java",
                "sha": "60daed583daf61a1fc617b29cd05008988ac040a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/resources/LocalStrings.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/resources/LocalStrings.properties?ref=1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
                "deletions": 0,
                "filename": "java/org/apache/jasper/resources/LocalStrings.properties",
                "patch": "@@ -140,6 +140,7 @@ jsp.error.file.not.found=File [{0}] not found\n jsp.error.missing_attribute=According to the TLD or the tag file, attribute {0} is mandatory for tag {1}\n jsp.error.bad_attribute=Attribute {0} invalid for tag {1} according to TLD\n jsp.error.tld.unable_to_get_jar=Unable to get JAR resource \\\"{0}\\\" containing TLD: {1}\n+jsp.error.tld.missing=Unable to find taglib \\\"{0}\\\" for URI: {1}\n jsp.error.tld.missing_jar=Missing JAR resource \\\"{0}\\\" containing TLD\n jsp.error.unable.to_find_method=Unable to find setter method for attribute: {0}\n jsp.error.bad_tag=No tag \\\"{0}\\\" defined in tag library imported with prefix \\\"{1}\\\"",
                "raw_url": "https://github.com/apache/tomcat/raw/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/java/org/apache/jasper/resources/LocalStrings.properties",
                "sha": "7473095f27b147f03aaf57915acdc710934889f8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/webapps/docs/changelog.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=1f32fb3eaff6cff6ec0e9997e3207a37767b057b",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -283,6 +283,9 @@\n         JAR has been exploded into <code>WEB-INF/classes</code> and the web\n         application is deployed as a packed WAR. (markt)\n       </fix>\n+      <fix>\n+        NPEs with not found TLDs. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"WebSocket\">",
                "raw_url": "https://github.com/apache/tomcat/raw/1f32fb3eaff6cff6ec0e9997e3207a37767b057b/webapps/docs/changelog.xml",
                "sha": "b43da71fed7de1c7c1f2a98ebde5859941b6be8c",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs with not found TLDs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1742984 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/44dec3f746c07a15063a57b4352a612e2d2a8591",
        "patched_files": [
            "TagLibraryInfoImpl.java",
            "LocalStrings.properties",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestTagLibraryInfoImpl.java"
        ]
    },
    "tomcat_210bf11": {
        "bug_id": "tomcat_210bf11",
        "commit": "https://github.com/apache/tomcat/commit/210bf11a31e3cdcceac0afdd35bfac5747bcec99",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/210bf11a31e3cdcceac0afdd35bfac5747bcec99/test/org/apache/catalina/valves/TestRequestFilterValve.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/valves/TestRequestFilterValve.java?ref=210bf11a31e3cdcceac0afdd35bfac5747bcec99",
                "deletions": 5,
                "filename": "test/org/apache/catalina/valves/TestRequestFilterValve.java",
                "patch": "@@ -24,6 +24,7 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.fail;\n \n+import org.junit.Assert;\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n@@ -97,9 +98,7 @@ private void oneTest(String allow, String deny, boolean denyStatus,\n         request.getMappingData().context = context;\n         request.setCoyoteRequest(new org.apache.coyote.Request());\n \n-        if (type == null) {\n-            fail(\"Invalid test with null type\");\n-        }\n+        Assert.assertNotNull(\"Invalid test with null type\", type);\n         if (property != null) {\n             if (type.equals(\"Addr\")) {\n                 valve = new RemoteAddrValve();\n@@ -109,10 +108,9 @@ private void oneTest(String allow, String deny, boolean denyStatus,\n                 valve = new RemoteHostValve();\n                 request.setRemoteHost(property);\n                 msg.append(\" host='\" + property + \"'\");\n-            } else {\n-                fail(\"Invalid test type\" + type);\n             }\n         }\n+        Assert.assertNotNull(\"Invalid test type\" + type, valve);\n         valve.setNext(new TerminatingValve());\n \n         if (allow != null) {",
                "raw_url": "https://github.com/apache/tomcat/raw/210bf11a31e3cdcceac0afdd35bfac5747bcec99/test/org/apache/catalina/valves/TestRequestFilterValve.java",
                "sha": "3ddcf2f7acdba50c8ceeb05d74eaacb5ce38efef",
                "status": "modified"
            }
        ],
        "message": "Refactor test to stop IDE complaining about possible NPEs.\nAlso requires slightly less code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1643128 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/962fc58c18783fc914b69ac96cad67ca605ab10c",
        "patched_files": [
            "RequestFilterValve.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRequestFilterValve.java"
        ]
    },
    "tomcat_24713fa": {
        "bug_id": "tomcat_24713fa",
        "commit": "https://github.com/apache/tomcat/commit/24713fab3d5f35d86f709f40c29a65d528edab4c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/24713fab3d5f35d86f709f40c29a65d528edab4c/java/org/apache/catalina/startup/WebappServiceLoader.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/WebappServiceLoader.java?ref=24713fab3d5f35d86f709f40c29a65d528edab4c",
                "deletions": 1,
                "filename": "java/org/apache/catalina/startup/WebappServiceLoader.java",
                "patch": "@@ -114,7 +114,9 @@ public WebappServiceLoader(Context context) {\n             // Ordered libs so only use services defined in those libs and any\n             // in WEB-INF/classes\n             URL unpacked = servletContext.getResource(CLASSES + configFile);\n-            parseConfigFile(applicationServicesFound, unpacked);\n+            if (unpacked != null) {\n+                parseConfigFile(applicationServicesFound, unpacked);\n+            }\n \n             for (String lib : orderedLibs) {\n                 URL jarUrl = servletContext.getResource(LIB + lib);",
                "raw_url": "https://github.com/apache/tomcat/raw/24713fab3d5f35d86f709f40c29a65d528edab4c/java/org/apache/catalina/startup/WebappServiceLoader.java",
                "sha": "bd3bfe54d72b5a216de52ad7d63d5db3a18b6bc0",
                "status": "modified"
            }
        ],
        "message": "Fix NPE reported by CI system",
        "parent": "https://github.com/apache/tomcat/commit/9e50f37d6aa0c6726a82eca70bd559753d72794f",
        "patched_files": [
            "WebappServiceLoader.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebappServiceLoader.java"
        ]
    },
    "tomcat_2732a76": {
        "bug_id": "tomcat_2732a76",
        "commit": "https://github.com/apache/tomcat/commit/2732a76d1da6509ffbcdc490b5357f5c86614133",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/2732a76d1da6509ffbcdc490b5357f5c86614133/java/org/apache/catalina/connector/Request.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=2732a76d1da6509ffbcdc490b5357f5c86614133",
                "deletions": 2,
                "filename": "java/org/apache/catalina/connector/Request.java",
                "patch": "@@ -2826,8 +2826,7 @@ private void parseParts(boolean explicit) {\n                         String name = part.getName();\n                         String value = null;\n                         try {\n-                            Charset paramCharset = parameters.getCharset();\n-                            value = part.getString(paramCharset.name());\n+                            value = part.getString(charset.name());\n                         } catch (UnsupportedEncodingException uee) {\n                             // Not possible\n                         }",
                "raw_url": "https://github.com/apache/tomcat/raw/2732a76d1da6509ffbcdc490b5357f5c86614133/java/org/apache/catalina/connector/Request.java",
                "sha": "4fa593e4c837ab87242eb47915ece21fa6f8f89f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/2732a76d1da6509ffbcdc490b5357f5c86614133/java/org/apache/tomcat/util/http/Parameters.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/http/Parameters.java?ref=2732a76d1da6509ffbcdc490b5357f5c86614133",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/util/http/Parameters.java",
                "patch": "@@ -129,7 +129,7 @@ public void recycle() {\n         parameterCount = 0;\n         paramHashValues.clear();\n         didQueryParameters = false;\n-        charset = null;\n+        charset = DEFAULT_BODY_CHARSET;\n         decodedQuery.recycle();\n         parseFailedReason = null;\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/2732a76d1da6509ffbcdc490b5357f5c86614133/java/org/apache/tomcat/util/http/Parameters.java",
                "sha": "5bd9ba73eae2fa299412410979d36beaa2c7c20d",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793910 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/92567fd01d590f4885bccbf600d9e2c0e28c7e44",
        "patched_files": [
            "Parameters.java",
            "Request.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestParameters.java",
            "TestRequest.java"
        ]
    },
    "tomcat_277d583": {
        "bug_id": "tomcat_277d583",
        "commit": "https://github.com/apache/tomcat/commit/277d583b32b874357626f16182eebbc30cc8d1d8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/277d583b32b874357626f16182eebbc30cc8d1d8/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java?ref=277d583b32b874357626f16182eebbc30cc8d1d8",
                "deletions": 1,
                "filename": "java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "patch": "@@ -243,7 +243,7 @@ public boolean removeRegistration(String registrationID) {\n     public String[] detachListener(RegistrationListener listener, String layer, String appContext) {\n         String registrationID = getRegistrationID(layer, appContext);\n         RegistrationContextImpl registrationContext = findRegistrationContextImpl(layer, appContext);\n-        if (registrationContext.removeListener(listener)) {\n+        if (registrationContext != null && registrationContext.removeListener(listener)) {\n             return new String[] { registrationID };\n         }\n         return EMPTY_STRING_ARRAY;",
                "raw_url": "https://github.com/apache/tomcat/raw/277d583b32b874357626f16182eebbc30cc8d1d8/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "sha": "e2c7e311d539e2a415cf91422683e2b565c98dc6",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/tomcat/blob/277d583b32b874357626f16182eebbc30cc8d1d8/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java?ref=277d583b32b874357626f16182eebbc30cc8d1d8",
                "deletions": 0,
                "filename": "test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "patch": "@@ -244,6 +244,21 @@ private void doTestRegistrationInsert(String newLayer, String newAppContext,\n     }\n \n \n+    @Test\n+    public void testDetachListenerNonexistingRegistration() {\n+        AuthConfigFactory factory = new AuthConfigFactoryImpl();\n+        AuthConfigProvider acp1 = new SimpleAuthConfigProvider(null, null);\n+        String registrationId = factory.registerConfigProvider(acp1, \"L_1\", \"AC_1\", null);\n+\n+        SimpleRegistrationListener listener1 = new SimpleRegistrationListener(\"L_1\", \"AC_1\");\n+        factory.getConfigProvider(\"L_1\", \"AC_1\", listener1);\n+\n+        factory.removeRegistration(registrationId);\n+        String[] registrationIds = factory.detachListener(listener1, \"L_1\", \"AC_1\");\n+        Assert.assertTrue(registrationIds.length == 0);\n+    }\n+\n+\n     private static class SimpleRegistrationListener implements RegistrationListener {\n \n         private final String layer;",
                "raw_url": "https://github.com/apache/tomcat/raw/277d583b32b874357626f16182eebbc30cc8d1d8/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "sha": "524e524d5ed48c61ee778e6b430134cfe435dd2c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/277d583b32b874357626f16182eebbc30cc8d1d8/webapps/docs/changelog.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=277d583b32b874357626f16182eebbc30cc8d1d8",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -82,6 +82,11 @@\n         Avoid a possible <code>NullPointerException</code> when timing out\n         <code>AsyncContext</code> instances during shut down. (markt)\n       </fix>\n+      <fix>\n+        <bug>61777</bug>: Avoid a <code>NullPointerException</code> when\n+        detaching a JASPIC <code>RegistrationListener</code>. Patch provided by\n+        Lazar. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/277d583b32b874357626f16182eebbc30cc8d1d8/webapps/docs/changelog.xml",
                "sha": "107d104b6430bdebe9f943522844dc42f924b044",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61777\nAvoid a NullPointerException when detaching a JASPIC RegistrationListener.\nPatch provided by Lazar.\nThis closes #85\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815793 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/12967ea85ef26450854a7b13ca14c26fa9e281e3",
        "patched_files": [
            "AuthConfigFactoryImpl.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAuthConfigFactoryImpl.java"
        ]
    },
    "tomcat_2a22bfc": {
        "bug_id": "tomcat_2a22bfc",
        "commit": "https://github.com/apache/tomcat/commit/2a22bfc02d40db038932e95103709c41e849972b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/2a22bfc02d40db038932e95103709c41e849972b/java/org/apache/jasper/compiler/ELParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/ELParser.java?ref=2a22bfc02d40db038932e95103709c41e849972b",
                "deletions": 2,
                "filename": "java/org/apache/jasper/compiler/ELParser.java",
                "patch": "@@ -152,7 +152,7 @@ private boolean parseFunction() {\n                 if (hasNext()) {\n                     Token t2 = nextToken();\n                     if (t2 instanceof Id) {\n-                        s1 = s2;\n+                        s1 = s2.trim();\n                         s2 = t2.toString();\n                         if (hasNext()) {\n                             curToken = nextToken();\n@@ -161,7 +161,7 @@ private boolean parseFunction() {\n                 }\n             }\n             if (curToken.toChar() == '(') {\n-                ELexpr.add(new ELNode.Function(s1.trim(), s2.trim()));\n+                ELexpr.add(new ELNode.Function(s1, s2.trim()));\n                 return true;\n             }\n             curToken = original;",
                "raw_url": "https://github.com/apache/tomcat/raw/2a22bfc02d40db038932e95103709c41e849972b/java/org/apache/jasper/compiler/ELParser.java",
                "sha": "c4e22b3ee3d297135b3c61de2f04212c3498f9e5",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE introduced by r1559707 that caused ELParser test to fail.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1559798 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/66430452a5b8793c689486ea5ae72a3991a19527",
        "patched_files": [
            "ELParser.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestELParser.java"
        ]
    },
    "tomcat_2cea9f9": {
        "bug_id": "tomcat_2cea9f9",
        "commit": "https://github.com/apache/tomcat/commit/2cea9f903f7399d948fd782239ad11cea9942edb",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/2cea9f903f7399d948fd782239ad11cea9942edb/java/org/apache/coyote/AbstractProcessor.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/AbstractProcessor.java?ref=2cea9f903f7399d948fd782239ad11cea9942edb",
                "deletions": 11,
                "filename": "java/org/apache/coyote/AbstractProcessor.java",
                "patch": "@@ -59,22 +59,12 @@\n     private ErrorState errorState = ErrorState.NONE;\n \n \n-    /**\n-     * Used by HTTP/2.\n-     * @param coyoteRequest The request\n-     * @param coyoteResponse The response\n-     */\n-    protected AbstractProcessor(Request coyoteRequest, Response coyoteResponse) {\n-        this(null, coyoteRequest, coyoteResponse);\n-    }\n-\n-\n     public AbstractProcessor(AbstractEndpoint<?> endpoint) {\n         this(endpoint, new Request(), new Response());\n     }\n \n \n-    private AbstractProcessor(AbstractEndpoint<?> endpoint, Request coyoteRequest,\n+    protected AbstractProcessor(AbstractEndpoint<?> endpoint, Request coyoteRequest,\n             Response coyoteResponse) {\n         this.endpoint = endpoint;\n         asyncStateMachine = new AsyncStateMachine(this);",
                "raw_url": "https://github.com/apache/tomcat/raw/2cea9f903f7399d948fd782239ad11cea9942edb/java/org/apache/coyote/AbstractProcessor.java",
                "sha": "c01ae23e21f4b7256c21120f36aded3a0368eae7",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/2cea9f903f7399d948fd782239ad11cea9942edb/java/org/apache/coyote/http2/StreamProcessor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/StreamProcessor.java?ref=2cea9f903f7399d948fd782239ad11cea9942edb",
                "deletions": 2,
                "filename": "java/org/apache/coyote/http2/StreamProcessor.java",
                "patch": "@@ -43,8 +43,9 @@\n     private final Stream stream;\n \n \n-    StreamProcessor(Http2UpgradeHandler handler, Stream stream, Adapter adapter, SocketWrapperBase<?> socketWrapper) {\n-        super(stream.getCoyoteRequest(), stream.getCoyoteResponse());\n+    StreamProcessor(Http2UpgradeHandler handler, Stream stream, Adapter adapter,\n+            SocketWrapperBase<?> socketWrapper) {\n+        super(socketWrapper.getEndpoint(), stream.getCoyoteRequest(), stream.getCoyoteResponse());\n         this.handler = handler;\n         this.stream = stream;\n         setAdapter(adapter);",
                "raw_url": "https://github.com/apache/tomcat/raw/2cea9f903f7399d948fd782239ad11cea9942edb/java/org/apache/coyote/http2/StreamProcessor.java",
                "sha": "7ac856f74bf94a09af1c29df521785ac0bd94644",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when starting async\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1772607 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/0e5f9fdd9dcb16e39215f6ce58d67dcbf93b4add",
        "patched_files": [
            "StreamProcessor.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStreamProcessor.java"
        ]
    },
    "tomcat_2f51425": {
        "bug_id": "tomcat_2f51425",
        "commit": "https://github.com/apache/tomcat/commit/2f514255fc0032786de3a12fb3656c76c9c7e457",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/2f514255fc0032786de3a12fb3656c76c9c7e457/java/org/apache/catalina/webresources/CachedResource.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/CachedResource.java?ref=2f514255fc0032786de3a12fb3656c76c9c7e457",
                "deletions": 0,
                "filename": "java/org/apache/catalina/webresources/CachedResource.java",
                "patch": "@@ -26,6 +26,7 @@\n import java.net.URLStreamHandler;\n import java.security.Permission;\n import java.security.cert.Certificate;\n+import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n \n@@ -557,5 +558,14 @@ private WebResource getResource() {\n         public JarFile getJarFile() throws IOException {\n             return ((JarURLConnection) resourceURL.openConnection()).getJarFile();\n         }\n+\n+        @Override\n+        public JarEntry getJarEntry() throws IOException {\n+            if (getEntryName() == null) {\n+                return null;\n+            } else {\n+                return super.getJarEntry();\n+            }\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/tomcat/raw/2f514255fc0032786de3a12fb3656c76c9c7e457/java/org/apache/catalina/webresources/CachedResource.java",
                "sha": "712a46374764e962095531148b5ebbae901fccb7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/2f514255fc0032786de3a12fb3656c76c9c7e457/webapps/docs/changelog.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=2f514255fc0032786de3a12fb3656c76c9c7e457",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -55,6 +55,11 @@\n         Avoid useless environment restore when not using GSSCredential\n         in JNDIRealm. (remm)\n       </fix>\n+      <fix>\n+        <bug>64005</bug>: Correct a regression in the static resource caching\n+        changes introduced in 9.0.28. Avoid a <code>NullPointerException</code>\n+        when working with the URL provided for the root of a packed WAR. (markt)\n+      </fix>\n       <fix>\n         <bug>64006</bug>: Provide default configuration source based on the\n         current directory if none has been set, for full compatibility with",
                "raw_url": "https://github.com/apache/tomcat/raw/2f514255fc0032786de3a12fb3656c76c9c7e457/webapps/docs/changelog.xml",
                "sha": "f69a9710e95c8f3e40225d3f83ee36e4f8d2ec41",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=64005 avoid NPE\n\nAvoid the NPE when working with the URL for the root of a packed WAR",
        "parent": "https://github.com/apache/tomcat/commit/65bf0dba83cde35bdf39629c300d5a113bcca5dd",
        "patched_files": [
            "CachedResource.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCachedResource.java"
        ]
    },
    "tomcat_329bdf6": {
        "bug_id": "tomcat_329bdf6",
        "commit": "https://github.com/apache/tomcat/commit/329bdf6f96609e2e643b8ef0fc9159c14387232d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/329bdf6f96609e2e643b8ef0fc9159c14387232d/java/org/apache/tomcat/util/res/StringManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/res/StringManager.java?ref=329bdf6f96609e2e643b8ef0fc9159c14387232d",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/util/res/StringManager.java",
                "patch": "@@ -109,7 +109,10 @@ public String getString(String key) {\n         String str = null;\n \n         try {\n-            str = bundle.getString(key);\n+            // Avoid NPE if bundle is null and treat it like an MRE\n+            if (bundle != null) {\n+                str = bundle.getString(key);\n+            }\n         } catch(MissingResourceException mre) {\n             //bad: shouldn't mask an exception the following way:\n             //   str = \"[cannot find message associated with key '\" + key + \"' due to \" + mre + \"]\";",
                "raw_url": "https://github.com/apache/tomcat/raw/329bdf6f96609e2e643b8ef0fc9159c14387232d/java/org/apache/tomcat/util/res/StringManager.java",
                "sha": "4f3eb189e803b275d44db891ed3ede214229e8de",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if bundle is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898297 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/dcf28d75bfa1da72fa90e8d2ba025419a9d6e28f",
        "patched_files": [
            "StringManager.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStringManager.java"
        ]
    },
    "tomcat_3792c68": {
        "bug_id": "tomcat_3792c68",
        "commit": "https://github.com/apache/tomcat/commit/3792c68ced15ce707f112a5044a78dc7880fb7ba",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/3792c68ced15ce707f112a5044a78dc7880fb7ba/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=3792c68ced15ce707f112a5044a78dc7880fb7ba",
                "deletions": 3,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -980,9 +980,11 @@ protected void parseSessionSslId(Request request) {\n                 SSL_ONLY.equals(request.getServletContext()\n                         .getEffectiveSessionTrackingModes()) &&\n                         request.connector.secure) {\n-            request.setRequestedSessionId(\n-                    request.getAttribute(SSLSupport.SESSION_ID_KEY).toString());\n-            request.setRequestedSessionSSL(true);\n+            String sessionId = (String) request.getAttribute(SSLSupport.SESSION_ID_KEY);\n+            if (sessionId != null) {\n+                request.setRequestedSessionId(sessionId.toString());\n+                request.setRequestedSessionSSL(true);\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/3792c68ced15ce707f112a5044a78dc7880fb7ba/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "c0d73ffa382a00b82b6c5c0a52873f2a8a2af550",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/3792c68ced15ce707f112a5044a78dc7880fb7ba/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=3792c68ced15ce707f112a5044a78dc7880fb7ba",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -93,6 +93,10 @@\n         single utility class and update the code to use the new utility class.\n         (markt)\n       </scode>\n+      <fix>\n+        <bug>60911</bug>: Ensure NPE will not be thrown when looking for SSL\n+        session ID. Based on a pacth by Didier Gutacker. (violetagg)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/3792c68ced15ce707f112a5044a78dc7880fb7ba/webapps/docs/changelog.xml",
                "sha": "5b7691398572b75121bd8b86eb8319f6b0c7cc16",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60911\nEnsure NPE will not be thrown when looking for SSL session ID. Based on a pacth by Didier Gutacker.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1788741 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/ed9c8b665ae52176cd415228a972f4381a68e411",
        "patched_files": [
            "changelog.xml",
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_3927743": {
        "bug_id": "tomcat_3927743",
        "commit": "https://github.com/apache/tomcat/commit/3927743c96ce2fc2ecec63321ae05109caa2b5aa",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/Util.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Util.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "deletions": 4,
                "filename": "java/org/apache/tomcat/websocket/Util.java",
                "patch": "@@ -331,7 +331,7 @@ public static Object coerceToType(Class<?> type, String value) {\n \n \n     public static List<DecoderEntry> getDecoders(\n-            Class<? extends Decoder>[] decoderClazzes)\n+            List<Class<? extends Decoder>> decoderClazzes)\n                     throws DeploymentException{\n \n         List<DecoderEntry> result = new ArrayList<>();\n@@ -464,9 +464,7 @@ private static DecoderMatch matchDecoders(Class<?> target,\n         try {\n             List<Class<? extends Decoder>> decoders =\n                     endpointConfig.getDecoders();\n-            @SuppressWarnings(\"unchecked\")\n-            List<DecoderEntry> decoderEntries = getDecoders(\n-                    decoders.toArray(new Class[decoders.size()]));\n+            List<DecoderEntry> decoderEntries = getDecoders(decoders);\n             decoderMatch = new DecoderMatch(target, decoderEntries);\n         } catch (DeploymentException e) {\n             throw new IllegalArgumentException(e);",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/Util.java",
                "sha": "228ac8c127384932de0f195f506153d4dd3a36a1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "patch": "@@ -108,7 +108,7 @@ public Session connectToServer(Object pojo, URI path)\n                             pojo.getClass().getName()));\n         }\n \n-        Endpoint ep = new PojoEndpointClient(pojo, annotation.decoders());\n+        Endpoint ep = new PojoEndpointClient(pojo, Arrays.asList(annotation.decoders()));\n \n         Class<? extends ClientEndpointConfig.Configurator> configuratorClazz =\n                 annotation.configurator();",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "sha": "5017ef7956858540b1ccad58e1268383f2492578",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.tomcat.websocket.pojo;\n \n import java.util.Collections;\n+import java.util.List;\n \n import javax.websocket.Decoder;\n import javax.websocket.DeploymentException;\n@@ -32,7 +33,7 @@\n public class PojoEndpointClient extends PojoEndpointBase {\n \n     public PojoEndpointClient(Object pojo,\n-            Class<? extends Decoder>[] decoders) throws DeploymentException {\n+            List<Class<? extends Decoder>> decoders) throws DeploymentException {\n         setPojo(pojo);\n         setMethodMapping(\n                 new PojoMethodMapping(pojo.getClass(), decoders, null));",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/pojo/PojoEndpointClient.java",
                "sha": "f4d0567a3b1dd23c78a6ac1e1e6204ad2c38569c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "patch": "@@ -71,7 +71,7 @@\n \n \n     public PojoMethodMapping(Class<?> clazzPojo,\n-            Class<? extends Decoder>[] decoderClazzes, String wsPath)\n+            List<Class<? extends Decoder>> decoderClazzes, String wsPath)\n                     throws DeploymentException {\n \n         this.wsPath = wsPath;",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "sha": "32060f7b8b2cc7b79ce4ec7abced8b1709e95b11",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "deletions": 7,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -182,6 +182,13 @@ public void addEndpoint(ServerEndpointConfig sec)\n         }\n         String path = sec.getPath();\n \n+        // Add method mapping to user properties\n+        PojoMethodMapping methodMapping = new PojoMethodMapping(sec.getEndpointClass(),\n+                sec.getDecoders(), path);\n+        sec.getUserProperties().put(\n+                org.apache.tomcat.websocket.pojo.Constants.POJO_METHOD_MAPPING_KEY,\n+                methodMapping);\n+\n         UriTemplate uriTemplate = new UriTemplate(path);\n         if (uriTemplate.hasParameters()) {\n             Integer key = Integer.valueOf(uriTemplate.getSegmentCount());\n@@ -239,10 +246,6 @@ public void addEndpoint(Class<?> pojo) throws DeploymentException {\n         // Validate encoders\n         validateEncoders(annotation.encoders());\n \n-        // Method mapping\n-        PojoMethodMapping methodMapping = new PojoMethodMapping(pojo,\n-                annotation.decoders(), path);\n-\n         // ServerEndpointConfig\n         ServerEndpointConfig sec;\n         Class<? extends Configurator> configuratorClazz =\n@@ -264,9 +267,6 @@ public void addEndpoint(Class<?> pojo) throws DeploymentException {\n                 subprotocols(Arrays.asList(annotation.subprotocols())).\n                 configurator(configurator).\n                 build();\n-        sec.getUserProperties().put(\n-                org.apache.tomcat.websocket.pojo.Constants.POJO_METHOD_MAPPING_KEY,\n-                methodMapping);\n \n         addEndpoint(sec);\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "7a3788cbd20eb593a71bb394927e7f7fb3e17423",
                "status": "modified"
            },
            {
                "additions": 47,
                "blob_url": "https://github.com/apache/tomcat/blob/3927743c96ce2fc2ecec63321ae05109caa2b5aa/test/org/apache/tomcat/websocket/server/TestWsServerContainer.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/websocket/server/TestWsServerContainer.java?ref=3927743c96ce2fc2ecec63321ae05109caa2b5aa",
                "deletions": 0,
                "filename": "test/org/apache/tomcat/websocket/server/TestWsServerContainer.java",
                "patch": "@@ -16,8 +16,16 @@\n  */\n package org.apache.tomcat.websocket.server;\n \n+import java.net.URI;\n+import java.util.Queue;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n import javax.servlet.ServletContextEvent;\n+import javax.websocket.ContainerProvider;\n import javax.websocket.DeploymentException;\n+import javax.websocket.Session;\n+import javax.websocket.WebSocketContainer;\n import javax.websocket.server.ServerContainer;\n import javax.websocket.server.ServerEndpointConfig;\n \n@@ -31,6 +39,8 @@\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n import org.apache.tomcat.websocket.TesterEchoServer;\n+import org.apache.tomcat.websocket.TesterMessageCountClient.BasicText;\n+import org.apache.tomcat.websocket.pojo.TesterUtil.SimpleClient;\n \n \n public class TestWsServerContainer extends TomcatBaseTest {\n@@ -50,6 +60,43 @@ public void testBug54807() throws Exception {\n     }\n \n \n+    @Test\n+    public void testBug58232() throws Exception {\n+        Tomcat tomcat = getTomcatInstance();\n+        // No file system docBase required\n+        Context ctx = tomcat.addContext(\"\", null);\n+        ctx.addApplicationListener(Bug54807Config.class.getName());\n+        Tomcat.addServlet(ctx, \"default\", new DefaultServlet());\n+        ctx.addServletMapping(\"/\", \"default\");\n+\n+        WebSocketContainer wsContainer =\n+                ContainerProvider.getWebSocketContainer();\n+\n+        tomcat.start();\n+\n+        Assert.assertEquals(LifecycleState.STARTED, ctx.getState());\n+\n+        SimpleClient client = new SimpleClient();\n+        URI uri = new URI(\"ws://localhost:\" + getPort() + \"/echoBasic\");\n+\n+        try (Session session = wsContainer.connectToServer(client, uri);) {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            BasicText handler = new BasicText(latch);\n+            session.addMessageHandler(handler);\n+            session.getBasicRemote().sendText(\"echoBasic\");\n+\n+            boolean latchResult = handler.getLatch().await(10, TimeUnit.SECONDS);\n+            Assert.assertTrue(latchResult);\n+\n+            Queue<String> messages = handler.getMessages();\n+            Assert.assertEquals(1, messages.size());\n+            for (String message : messages) {\n+                Assert.assertEquals(\"echoBasic\", message);\n+            }\n+        }\n+    }\n+\n+\n     public static class Bug54807Config extends WsContextListener {\n \n         @Override",
                "raw_url": "https://github.com/apache/tomcat/raw/3927743c96ce2fc2ecec63321ae05109caa2b5aa/test/org/apache/tomcat/websocket/server/TestWsServerContainer.java",
                "sha": "558c70a9523f1b2d9a0a792c97680e6029ff8b26",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58232\nWhen ServerEndpointConfig is added programatically and the endpoint class that it provides is annotated, NPE is thrown while initializing HTTP upgrade handler.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1695706 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/16b4854c01d3407209877d729f2daea2b44a6c8a",
        "patched_files": [
            "WsWebSocketContainer.java",
            "PojoMethodMapping.java",
            "Util.java",
            "PojoEndpointClient.java",
            "WsServerContainer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestUtil.java",
            "TestPojoMethodMapping.java",
            "TestWsServerContainer.java",
            "TestWsWebSocketContainer.java"
        ]
    },
    "tomcat_39aff4e": {
        "bug_id": "tomcat_39aff4e",
        "commit": "https://github.com/apache/tomcat/commit/39aff4e3310797fc1e1a1ce772f6b10359cd3dea",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/java/org/apache/catalina/core/ApplicationMapping.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationMapping.java?ref=39aff4e3310797fc1e1a1ce772f6b10359cd3dea",
                "deletions": 2,
                "filename": "java/org/apache/catalina/core/ApplicationMapping.java",
                "patch": "@@ -57,8 +57,13 @@ public ServletMapping getServletMapping() {\n                             \"*\" + path.substring(extIndex), mappingData.matchType, servletName);\n                     break;\n                 case PATH:\n-                    mapping = new MappingImpl(mappingData.pathInfo.toString().substring(1),\n-                            mappingData.wrapperPath.toString() + \"/*\",\n+                    String matchValue;\n+                    if (mappingData.pathInfo.isNull()) {\n+                        matchValue = null;\n+                    } else {\n+                        matchValue = mappingData.pathInfo.toString().substring(1);\n+                    }\n+                    mapping = new MappingImpl(matchValue, mappingData.wrapperPath.toString() + \"/*\",\n                             mappingData.matchType, servletName);\n                     break;\n                 case UNKNOWN:",
                "raw_url": "https://github.com/apache/tomcat/raw/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/java/org/apache/catalina/core/ApplicationMapping.java",
                "sha": "42a5865c99c1a3350a63f99cbecac19ed8c4b380",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/test/org/apache/catalina/core/TestApplicationMapping.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestApplicationMapping.java?ref=39aff4e3310797fc1e1a1ce772f6b10359cd3dea",
                "deletions": 0,
                "filename": "test/org/apache/catalina/core/TestApplicationMapping.java",
                "patch": "@@ -58,6 +58,16 @@ public void testContextNonRootMappingExact() throws Exception {\n         doTestMapping(\"/dummy\", \"/foo/bar\", \"/foo/bar\", \"foo/bar\", \"EXACT\");\n     }\n \n+    @Test\n+    public void testContextNonRootMappingPathNone() throws Exception {\n+        doTestMapping(\"/dummy\", \"/foo/bar/*\", \"/foo/bar\", null, \"PATH\");\n+    }\n+\n+    @Test\n+    public void testContextNonRootMappingPathSeparatorOnly() throws Exception {\n+        doTestMapping(\"/dummy\", \"/foo/bar/*\", \"/foo/bar/\", \"\", \"PATH\");\n+    }\n+\n     @Test\n     public void testContextNonRootMappingPath() throws Exception {\n         doTestMapping(\"/dummy\", \"/foo/bar/*\", \"/foo/bar/foo2\", \"foo2\", \"PATH\");",
                "raw_url": "https://github.com/apache/tomcat/raw/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/test/org/apache/catalina/core/TestApplicationMapping.java",
                "sha": "b3a8382e91c804fd4c3fbf8bdd68eeacb5cf9e69",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/webapps/docs/changelog.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=39aff4e3310797fc1e1a1ce772f6b10359cd3dea",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -69,6 +69,12 @@\n         by the <code>Rfc6265CookieProcessor</code> are aligned with the\n         specification. Patch provided by Jim Griswold. (markt)\n       </fix>\n+      <fix>\n+        <bug>60882</bug>: Fix a <code>NullPointerException</code> when obtaining\n+        a <code>RequestDispatcher</code> for a request that will not have any\n+        pathInfo associated with it. This was a regression in the changes in\n+        9.0.0.M18 for the Servlet 4.0 API changes. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/39aff4e3310797fc1e1a1ce772f6b10359cd3dea/webapps/docs/changelog.xml",
                "sha": "a5eeb46e5cad571088c8e610f17e6ecd3f4f8580",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=60882\nFix a NullPointerException when obtaining a RequestDispatcher for a request that will not have any pathInfo associated with it.\nThis was a regression in the changes in 9.0.0.M18 for the Servlet 4.0 API changes.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1787405 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/f678f956cfcd32ba30df0905a2cb9b457da67e6e",
        "patched_files": [
            "changelog.xml",
            "ApplicationMapping.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestApplicationMapping.java"
        ]
    },
    "tomcat_3d73dfc": {
        "bug_id": "tomcat_3d73dfc",
        "commit": "https://github.com/apache/tomcat/commit/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11Processor.java?ref=3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11Processor.java",
                "patch": "@@ -995,7 +995,10 @@ private static boolean isConnectionToken(MimeHeaders headers, String token) thro\n         Enumeration<String> values = headers.values(Constants.CONNECTION);\n         Set<String> result = new HashSet<>();\n         while (values.hasMoreElements()) {\n-            TokenList.parseTokenList(new StringReader(values.nextElement()), result);\n+            String nextHeaderValue = values.nextElement();\n+            if (nextHeaderValue != null) {\n+                TokenList.parseTokenList(new StringReader(nextHeaderValue), result);\n+            }\n         }\n \n         return result.contains(token);",
                "raw_url": "https://github.com/apache/tomcat/raw/3d73dfc42e13a5d0eeb4c0e50009cdb67e1ab7dd/java/org/apache/coyote/http11/Http11Processor.java",
                "sha": "24fd9e97e88a133936f3493d4800b2f6bcd59baa",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE with excessive header size",
        "parent": "https://github.com/apache/tomcat/commit/c298138dc774ec1844c929413f11e08855e17c87",
        "patched_files": [
            "Http11Processor.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestHttp11Processor.java"
        ]
    },
    "tomcat_3dc8a68": {
        "bug_id": "tomcat_3dc8a68",
        "commit": "https://github.com/apache/tomcat/commit/3dc8a68d6cbf4fc31ae8dbb030c6148c36cc623e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/3dc8a68d6cbf4fc31ae8dbb030c6148c36cc623e/test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java?ref=3dc8a68d6cbf4fc31ae8dbb030c6148c36cc623e",
                "deletions": 2,
                "filename": "test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java",
                "patch": "@@ -41,8 +41,8 @@ public SSLHostConfig initOpenSSLConfCmdCipher(String name, String value) throws\n         String protocol = tomcat.getConnector().getProtocolHandlerClassName();\n         // The tests are only supported for APR and OpenSSL\n         if (!protocol.contains(\"Apr\")) {\n-            String sslImplementation =\n-                tomcat.getConnector().getProperty(\"sslImplementationName\").toString();\n+            String sslImplementation = String.valueOf(\n+                    tomcat.getConnector().getProperty(\"sslImplementationName\"));\n             Assume.assumeTrue(\"This test is only for OpenSSL based SSL connectors\",\n                 sslImplementation.contains(\"openssl\"));\n         }",
                "raw_url": "https://github.com/apache/tomcat/raw/3dc8a68d6cbf4fc31ae8dbb030c6148c36cc623e/test/org/apache/tomcat/util/net/openssl/TestOpenSSLConf.java",
                "sha": "2739569fb169ba6ac06352b4d306a7cb0b498236",
                "status": "modified"
            }
        ],
        "message": "Handle possible NPE in unit test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1807755 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/956893e387af4ffbbba83afc6bc22907abb9c889",
        "patched_files": [
            "OpenSSLConf.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestOpenSSLConf.java"
        ]
    },
    "tomcat_3fa27bb": {
        "bug_id": "tomcat_3fa27bb",
        "commit": "https://github.com/apache/tomcat/commit/3fa27bb9956d707ae6225af886d3e8ac61162425",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/3fa27bb9956d707ae6225af886d3e8ac61162425/java/org/apache/catalina/connector/Connector.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Connector.java?ref=3fa27bb9956d707ae6225af886d3e8ac61162425",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/Connector.java",
                "patch": "@@ -765,7 +765,11 @@ public String getURIEncodingLower() {\n       */\n      public void setURIEncoding(String URIEncoding) {\n          this.URIEncoding = URIEncoding;\n-         this.URIEncodingLower = URIEncoding.toLowerCase(Locale.US);\n+         if (URIEncoding == null) {\n+             URIEncodingLower = null;\n+         } else {\n+             this.URIEncodingLower = URIEncoding.toLowerCase(Locale.US);\n+         }\n          setProperty(\"uRIEncoding\", URIEncoding);\n      }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/3fa27bb9956d707ae6225af886d3e8ac61162425/java/org/apache/catalina/connector/Connector.java",
                "sha": "05a66365a5177b055e7ad8c776df3843efaf54a4",
                "status": "modified"
            }
        ],
        "message": "FindBugs: Avoid possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401092 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/1f2933fae204d0aefd4f7e2e623f3d8fa7c788a8",
        "patched_files": [
            "Connector.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestConnector.java"
        ]
    },
    "tomcat_459b921": {
        "bug_id": "tomcat_459b921",
        "commit": "https://github.com/apache/tomcat/commit/459b921d6d852ae542fd14af3ebce5a6eb238621",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/459b921d6d852ae542fd14af3ebce5a6eb238621/test/org/apache/catalina/filters/TestRemoteIpFilter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/filters/TestRemoteIpFilter.java?ref=459b921d6d852ae542fd14af3ebce5a6eb238621",
                "deletions": 0,
                "filename": "test/org/apache/catalina/filters/TestRemoteIpFilter.java",
                "patch": "@@ -118,6 +118,11 @@ public void addHeader(String name, String value) {\n         public void setScheme(String scheme) {\n             getCoyoteRequest().scheme().setString(scheme);\n         }\n+\n+        @Override\n+        public void setAttribute(String name, Object value) {\n+            // NOOP. Prevents NPE during testing.\n+        }\n     }\n \n     public static final String TEMP_DIR = System.getProperty(\"java.io.tmpdir\");",
                "raw_url": "https://github.com/apache/tomcat/raw/459b921d6d852ae542fd14af3ebce5a6eb238621/test/org/apache/catalina/filters/TestRemoteIpFilter.java",
                "sha": "4c3be0f9cc392f791a8e73aac02ae5dab3ef0071",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE in unit tests as a result of r1067718\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1071556 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/9b1f855256ab63434eb2cc4b3e9df3dd5a4a01b9",
        "patched_files": [
            "RemoteIpFilter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRemoteIpFilter.java"
        ]
    },
    "tomcat_4618e42": {
        "bug_id": "tomcat_4618e42",
        "commit": "https://github.com/apache/tomcat/commit/4618e42968e29d1049b2c6fb70189fcc1b1a4c0e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/4618e42968e29d1049b2c6fb70189fcc1b1a4c0e/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/VirtualWebappLoader.java?ref=4618e42968e29d1049b2c6fb70189fcc1b1a4c0e",
                "deletions": 1,
                "filename": "java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "patch": "@@ -57,7 +57,7 @@\n     /**\n      * <code>;</code> separated list of additional path elements.\n      */\n-    private String virtualClasspath;\n+    private String virtualClasspath = \"\";\n \n     /**\n      * Construct a new WebappLoader with no defined parent class loader (so that",
                "raw_url": "https://github.com/apache/tomcat/raw/4618e42968e29d1049b2c6fb70189fcc1b1a4c0e/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "sha": "2d69c4cee05ad8c69f5e84a525852e0476fba7a5",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in unconfigured VirtualWebappLoader.\nStringTokenizer throws the NPE if the virtualClassPath\nwasn't explicitely configured (null by default).\n\nThis might not be observed in the wild because a\nVirtualWebappLoader without a configured virtualClassPath\nisn't expected. But if you extend the class and add\nfeatures, then this might well happen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401472 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/f99273f634a5dd9926d9f4cf762ab1e140be9881",
        "patched_files": [
            "VirtualWebappLoader.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestVirtualWebappLoader.java"
        ]
    },
    "tomcat_483f586": {
        "bug_id": "tomcat_483f586",
        "commit": "https://github.com/apache/tomcat/commit/483f58649c1e1081a3423aa09e9ddea5df95c295",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/483f58649c1e1081a3423aa09e9ddea5df95c295/java/org/apache/el/lang/ELSupport.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/lang/ELSupport.java?ref=483f58649c1e1081a3423aa09e9ddea5df95c295",
                "deletions": 1,
                "filename": "java/org/apache/el/lang/ELSupport.java",
                "patch": "@@ -341,7 +341,7 @@ public final static void checkType(final Object obj, final Class type)\n     public final static Object coerceToType(final Object obj, final Class type)\n             throws IllegalArgumentException {\n         if (type == null || Object.class.equals(type) ||\n-                type.equals(obj.getClass())) {\n+                (obj != null && type.equals(obj.getClass()))) {\n             return obj;\n         }\n         if (String.class.equals(type)) {",
                "raw_url": "https://github.com/apache/tomcat/raw/483f58649c1e1081a3423aa09e9ddea5df95c295/java/org/apache/el/lang/ELSupport.java",
                "sha": "5bddf4fc91bde4bca552c233ccad267ffce59ce0",
                "status": "modified"
            }
        ],
        "message": "Add Remy's NPE fix to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@653038 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/e2524a84edf4265e1f5ddccfe445e07be126f589",
        "patched_files": [
            "ELSupport.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestELSupport.java"
        ]
    },
    "tomcat_497e3d0": {
        "bug_id": "tomcat_497e3d0",
        "commit": "https://github.com/apache/tomcat/commit/497e3d05f7156fd9529fc6571a949d6721da1700",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/tomcat/blob/497e3d05f7156fd9529fc6571a949d6721da1700/java/org/apache/catalina/webresources/StandardRoot.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=497e3d05f7156fd9529fc6571a949d6721da1700",
                "deletions": 0,
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "patch": "@@ -117,6 +117,9 @@ public StandardRoot(Context context) {\n         if (validate) {\n             path = validate(path);\n         }\n+        if (path == null) {\n+            return new String[] {};\n+        }\n \n         // Set because we don't want duplicates\n         // LinkedHashSet to retain the order. It is the order of the\n@@ -140,6 +143,9 @@ public StandardRoot(Context context) {\n     @Override\n     public Set<String> listWebAppPaths(String path) {\n         path = validate(path);\n+        if (path == null) {\n+            return null;\n+        }\n \n         // Set because we don't want duplicates\n         HashSet<String> result = new HashSet<>();\n@@ -159,6 +165,9 @@ public StandardRoot(Context context) {\n     @Override\n     public boolean mkdir(String path) {\n         path = validate(path);\n+        if (path == null) {\n+            return false;\n+        }\n \n         if (preResourceExists(path)) {\n             return false;\n@@ -170,6 +179,9 @@ public boolean mkdir(String path) {\n     @Override\n     public boolean write(String path, InputStream is, boolean overwrite) {\n         path = validate(path);\n+        if (path == null) {\n+            return false;\n+        }\n \n         if (!overwrite && preResourceExists(path)) {\n             return false;\n@@ -198,6 +210,9 @@ private WebResource getResource(String path, boolean validate,\n         if (validate) {\n             path = validate(path);\n         }\n+        if (path == null) {\n+            return null;\n+        }\n \n         if (isCachingAllowed()) {\n             return cache.getResource(path, useClassLoaderResources);\n@@ -280,6 +295,9 @@ protected final WebResource getResourceInternal(String path,\n     private WebResource[] getResources(String path,\n             boolean useClassLoaderResources) {\n         path = validate(path);\n+        if (path == null) {\n+            return new WebResource[] {};\n+        }\n \n         ArrayList<WebResource> result = new ArrayList<>();\n         for (ArrayList<WebResourceSet> list : allResources) {\n@@ -309,6 +327,9 @@ protected final WebResource getResourceInternal(String path,\n         if (validate) {\n             path = validate(path);\n         }\n+        if (path == null) {\n+            return new WebResource[] {};\n+        }\n \n         String[] resources = list(path, false);\n         WebResource[] result = new WebResource[resources.length];",
                "raw_url": "https://github.com/apache/tomcat/raw/497e3d05f7156fd9529fc6571a949d6721da1700/java/org/apache/catalina/webresources/StandardRoot.java",
                "sha": "16aa5ede9275616a65dac2bc49eaca6b7d0c8c0b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/497e3d05f7156fd9529fc6571a949d6721da1700/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=497e3d05f7156fd9529fc6571a949d6721da1700",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -74,6 +74,10 @@\n         elements and attributes supported by the Servlet version of the merged\n         file. (markt)\n       </fix>\n+      <fix>\n+        Avoid internal <code>NullPointerException</code>s if a resource is\n+        requested from outside the web application root. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/497e3d05f7156fd9529fc6571a949d6721da1700/webapps/docs/changelog.xml",
                "sha": "bbb5d0efff926a06afebb2083c21e72333c15039",
                "status": "modified"
            }
        ],
        "message": "Avoid internal NullPointerExceptions if a resource is requested from outside the web application root.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1573321 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/27715340cba5f8517e2959363830edce9ddee6e5",
        "patched_files": [
            "StandardRoot.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardRoot.java"
        ]
    },
    "tomcat_4a33344": {
        "bug_id": "tomcat_4a33344",
        "commit": "https://github.com/apache/tomcat/commit/4a333449a56163c5c66f0eaf34393e654b7547fa",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/4a333449a56163c5c66f0eaf34393e654b7547fa/java/org/apache/catalina/mapper/LocalStrings.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/LocalStrings.properties?ref=4a333449a56163c5c66f0eaf34393e654b7547fa",
                "deletions": 0,
                "filename": "java/org/apache/catalina/mapper/LocalStrings.properties",
                "patch": "@@ -14,6 +14,8 @@\n # limitations under the License.\n \n mapper.removeWrapper=Removing wrapper from Context [{0}] with path [{1}]\n+mapper.duplicateHost=Duplicate Host [{0}]. The name is already used by Host [{1}]. This Host will be ignored.\n+mapper.duplicateHostAlias=Duplicate host Alias [{0}] in Host [{1}]. The name is already used by Host [{2}]. This Alias will be ignored.\n \n mapperListener.unknownDefaultHost=Unknown default host [{0}] for service [{1}]\n mapperListener.registerHost=Register host [{0}] at domain [{1}] for service [{2}]",
                "raw_url": "https://github.com/apache/tomcat/raw/4a333449a56163c5c66f0eaf34393e654b7547fa/java/org/apache/catalina/mapper/LocalStrings.properties",
                "sha": "df0734c091c3b386e6e96faf69794d24e0626a8d",
                "status": "modified"
            },
            {
                "additions": 273,
                "blob_url": "https://github.com/apache/tomcat/blob/4a333449a56163c5c66f0eaf34393e654b7547fa/java/org/apache/catalina/mapper/Mapper.java",
                "changes": 543,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/Mapper.java?ref=4a333449a56163c5c66f0eaf34393e654b7547fa",
                "deletions": 270,
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "patch": "@@ -94,16 +94,16 @@ public synchronized void addHost(String name, String[] aliases,\n         newHost.object = host;\n         if (insertMap(hosts, newHosts, newHost)) {\n             hosts = newHosts;\n+        } else {\n+            MappedHost duplicate = hosts[find(hosts, name)];\n+            String duplicateHostName = duplicate.object.getName();\n+            log.error(sm.getString(\"mapper.duplicateHost\", name,\n+                    duplicateHostName));\n+            // Do not add aliases, as removeHost(hostName) won't be able to remove them\n+            return;\n         }\n-        for (int i = 0; i < aliases.length; i++) {\n-            newHosts = new MappedHost[hosts.length + 1];\n-            newHost = new MappedHost();\n-            newHost.name = aliases[i];\n-            newHost.contextList = contextList;\n-            newHost.object = host;\n-            if (insertMap(hosts, newHosts, newHost)) {\n-                hosts = newHosts;\n-            }\n+        for (String alias : aliases) {\n+            addHostAliasImpl(newHost, alias);\n         }\n     }\n \n@@ -115,15 +115,16 @@ public synchronized void addHost(String name, String[] aliases,\n      */\n     public synchronized void removeHost(String name) {\n         // Find and remove the old host\n-        int pos = find(hosts, name);\n-        if (pos < 0) {\n+        MappedHost mappedHost = exactFind(hosts, name);\n+        if (mappedHost == null) {\n             return;\n         }\n-        Host host = hosts[pos].object;\n+        Host host = mappedHost.object;\n         MappedHost[] newHosts = new MappedHost[hosts.length - 1];\n         if (removeMap(hosts, newHosts, name)) {\n             hosts = newHosts;\n         }\n+\n         // Remove all aliases (they will map to the same host object)\n         for (int i = 0; i < newHosts.length; i++) {\n             if (newHosts[i].object == host) {\n@@ -141,21 +142,34 @@ public synchronized void removeHost(String name) {\n      * @param alias The alias to add\n      */\n     public synchronized void addHostAlias(String name, String alias) {\n-        int pos = find(hosts, name);\n-        if (pos < 0) {\n+        MappedHost realHost = exactFind(hosts, name);\n+        if (realHost == null) {\n             // Should not be adding an alias for a host that doesn't exist but\n             // just in case...\n             return;\n         }\n-        MappedHost realHost = hosts[pos];\n+        addHostAliasImpl(realHost, alias);\n+    }\n \n+    private void addHostAliasImpl(MappedHost realHost, String alias) {\n+        if (alias.equals(realHost.name)) {\n+            // An Alias with the same name as its own Host.\n+            // A harmless redundancy. E.g.\n+            // <Host name=\"localhost\"><Alias>localhost</Alias></Host>\n+            return;\n+        }\n         MappedHost[] newHosts = new MappedHost[hosts.length + 1];\n         MappedHost newHost = new MappedHost();\n         newHost.name = alias;\n         newHost.contextList = realHost.contextList;\n         newHost.object = realHost.object;\n         if (insertMap(hosts, newHosts, newHost)) {\n             hosts = newHosts;\n+        } else {\n+            MappedHost duplicate = hosts[find(hosts, alias)];\n+            String duplicateHostName = duplicate.object.getName();\n+            log.error(sm.getString(\"mapper.duplicateHostAlias\", alias,\n+                    realHost.name, duplicateHostName));\n         }\n     }\n \n@@ -165,8 +179,7 @@ public synchronized void addHostAlias(String name, String alias) {\n      */\n     public synchronized void removeHostAlias(String alias) {\n         // Find and remove the alias\n-        int pos = find(hosts, alias);\n-        if (pos < 0) {\n+        if (exactFind(hosts, alias) == null) {\n             return;\n         }\n         MappedHost[] newHosts = new MappedHost[hosts.length - 1];\n@@ -193,52 +206,51 @@ public void addContextVersion(String hostName, Host host, String path,\n             WebResourceRoot resources) {\n \n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if( pos <0 ) {\n+        MappedHost mappedHost = exactFind(hosts, hostName);\n+        if (mappedHost == null) {\n             addHost(hostName, new String[0], host);\n             hosts = this.hosts;\n-            pos = find(hosts, hostName);\n-        }\n-        if (pos < 0) {\n-            log.error(\"No host found: \" + hostName);\n+            mappedHost = exactFind(hosts, hostName);\n+            if (mappedHost == null) {\n+                log.error(\"No host found: \" + hostName);\n+                return;\n+            }\n         }\n-        MappedHost mappedHost = hosts[pos];\n-        if (mappedHost.name.equals(hostName)) {\n-            int slashCount = slashCount(path);\n-            synchronized (mappedHost) {\n+        int slashCount = slashCount(path);\n+        synchronized (mappedHost) {\n+            // Update nesting\n+            if (slashCount > mappedHost.contextList.nesting) {\n+                mappedHost.contextList.nesting = slashCount;\n+            }\n+            MappedContext mappedContext;\n+            {\n                 MappedContext[] contexts = mappedHost.contextList.contexts;\n-                // Update nesting\n-                if (slashCount > mappedHost.contextList.nesting) {\n-                    mappedHost.contextList.nesting = slashCount;\n-                }\n-                int pos2 = find(contexts, path);\n-                if (pos2 < 0 || !path.equals(contexts[pos2].name)) {\n-                    MappedContext newContext = new MappedContext();\n-                    newContext.name = path;\n+                mappedContext = exactFind(contexts, path);\n+                if (mappedContext == null) {\n+                    mappedContext = new MappedContext();\n+                    mappedContext.name = path;\n                     MappedContext[] newContexts = new MappedContext[contexts.length + 1];\n-                    if (insertMap(contexts, newContexts, newContext)) {\n+                    if (insertMap(contexts, newContexts, mappedContext)) {\n                         mappedHost.contextList.contexts = newContexts;\n+                        // contexts = newContexts;\n                     }\n-                    pos2 = find(newContexts, path);\n                 }\n+            }\n \n-                MappedContext mappedContext = mappedHost.contextList.contexts[pos2];\n-\n-                ContextVersion[] contextVersions = mappedContext.versions;\n-                ContextVersion[] newContextVersions =\n-                    new ContextVersion[contextVersions.length + 1];\n-                ContextVersion newContextVersion = new ContextVersion();\n-                newContextVersion.path = path;\n-                newContextVersion.slashCount = slashCount;\n-                newContextVersion.name = version;\n-                newContextVersion.object = context;\n-                newContextVersion.welcomeResources = welcomeResources;\n-                newContextVersion.resources = resources;\n-                if (insertMap(contextVersions, newContextVersions, newContextVersion)) {\n-                    mappedContext.versions = newContextVersions;\n-                    contextObjectToContextVersionMap.put(\n-                            context, newContextVersion);\n-                }\n+            ContextVersion[] contextVersions = mappedContext.versions;\n+            ContextVersion[] newContextVersions =\n+                new ContextVersion[contextVersions.length + 1];\n+            ContextVersion newContextVersion = new ContextVersion();\n+            newContextVersion.path = path;\n+            newContextVersion.slashCount = slashCount;\n+            newContextVersion.name = version;\n+            newContextVersion.object = context;\n+            newContextVersion.welcomeResources = welcomeResources;\n+            newContextVersion.resources = resources;\n+            if (insertMap(contextVersions, newContextVersions, newContextVersion)) {\n+                mappedContext.versions = newContextVersions;\n+                contextObjectToContextVersionMap.put(\n+                        context, newContextVersion);\n             }\n         }\n \n@@ -258,43 +270,39 @@ public void removeContextVersion(Context ctxt, String hostName,\n \n         contextObjectToContextVersionMap.remove(ctxt);\n \n-        MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(this.hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            synchronized (host) {\n-                MappedContext[] contexts = host.contextList.contexts;\n-                if (contexts.length == 0 ){\n-                    return;\n-                }\n \n-                int pos2 = find(contexts, path);\n-                if (pos2 < 0 || !path.equals(contexts[pos2].name)) {\n-                    return;\n-                }\n-                MappedContext context = contexts[pos2];\n-\n-                ContextVersion[] contextVersions = context.versions;\n-                ContextVersion[] newContextVersions =\n-                    new ContextVersion[contextVersions.length - 1];\n-                if (removeMap(contextVersions, newContextVersions, version)) {\n-                    context.versions = newContextVersions;\n-\n-                    if (context.versions.length == 0) {\n-                        // Remove the context\n-                        MappedContext[] newContexts = new MappedContext[contexts.length -1];\n-                        if (removeMap(contexts, newContexts, path)) {\n-                            host.contextList.contexts = newContexts;\n-                            // Recalculate nesting\n-                            host.contextList.nesting = 0;\n-                            for (int i = 0; i < newContexts.length; i++) {\n-                                int slashCount = slashCount(newContexts[i].name);\n-                                if (slashCount > host.contextList.nesting) {\n-                                    host.contextList.nesting = slashCount;\n-                                }\n+        synchronized (host) {\n+            MappedContext[] contexts = host.contextList.contexts;\n+            if (contexts.length == 0 ){\n+                return;\n+            }\n+\n+            MappedContext context = exactFind(contexts, path);\n+            if (context == null) {\n+                return;\n+            }\n+\n+            ContextVersion[] contextVersions = context.versions;\n+            ContextVersion[] newContextVersions =\n+                new ContextVersion[contextVersions.length - 1];\n+            if (removeMap(contextVersions, newContextVersions, version)) {\n+                context.versions = newContextVersions;\n+\n+                if (context.versions.length == 0) {\n+                    // Remove the context\n+                    MappedContext[] newContexts = new MappedContext[contexts.length -1];\n+                    if (removeMap(contexts, newContexts, path)) {\n+                        host.contextList.contexts = newContexts;\n+                        // Recalculate nesting\n+                        host.contextList.nesting = 0;\n+                        for (int i = 0; i < newContexts.length; i++) {\n+                            int slashCount = slashCount(newContexts[i].name);\n+                            if (slashCount > host.contextList.nesting) {\n+                                host.contextList.nesting = slashCount;\n                             }\n                         }\n                     }\n@@ -308,34 +316,24 @@ public void addWrapper(String hostName, String contextPath, String version,\n                            String path, Wrapper wrapper, boolean jspWildCard,\n                            boolean resourceOnly) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                log.error(\"No context found: \" + contextPath );\n-                return;\n-            }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    log.error(\"No context version found: \" + contextPath + \" \" +\n-                            version);\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    addWrapper(contextVersion, path, wrapper, jspWildCard,\n-                            resourceOnly);\n-                }\n-            }\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            log.error(\"No context found: \" + contextPath );\n+            return;\n+        }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            log.error(\"No context version found: \" + contextPath + \" \" +\n+                    version);\n+            return;\n         }\n+        addWrapper(contextVersion, path, wrapper, jspWildCard, resourceOnly);\n     }\n \n \n@@ -411,33 +409,24 @@ protected void addWrapper(ContextVersion context, String path,\n      * @param contextPath Context path this wrapper belongs to\n      * @param path Wrapper mapping\n      */\n-    public void removeWrapper\n-        (String hostName, String contextPath, String version, String path) {\n+    public void removeWrapper(String hostName, String contextPath,\n+            String version, String path) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                return;\n-            }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    removeWrapper(contextVersion, path);\n-                }\n-            }\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            return;\n+        }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            return;\n         }\n+        removeWrapper(contextVersion, path);\n     }\n \n     protected void removeWrapper(ContextVersion context, String path) {\n@@ -516,41 +505,31 @@ protected void removeWrapper(ContextVersion context, String path) {\n     public void addWelcomeFile(String hostName, String contextPath,\n             String version, String welcomeFile) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                log.error(\"No context found: \" + contextPath );\n-                return;\n-            }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    log.error(\"No context version found: \" + contextPath + \" \" +\n-                            version);\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    int len = contextVersion.welcomeResources.length + 1;\n-                    String[] newWelcomeResources = new String[len];\n-                    System.arraycopy(contextVersion.welcomeResources, 0,\n-                            newWelcomeResources, 0, len - 1);\n-                    newWelcomeResources[len - 1] = welcomeFile;\n-                    contextVersion.welcomeResources = newWelcomeResources;\n-                }\n-            }\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            log.error(\"No context found: \" + contextPath);\n+            return;\n         }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            log.error(\"No context version found: \" + contextPath + \" \"\n+                    + version);\n+            return;\n+        }\n+        int len = contextVersion.welcomeResources.length + 1;\n+        String[] newWelcomeResources = new String[len];\n+        System.arraycopy(contextVersion.welcomeResources, 0,\n+                newWelcomeResources, 0, len - 1);\n+        newWelcomeResources[len - 1] = welcomeFile;\n+        contextVersion.welcomeResources = newWelcomeResources;\n     }\n \n-\n     /**\n      * Remove a welcome file from the given context.\n      *\n@@ -561,53 +540,43 @@ public void addWelcomeFile(String hostName, String contextPath,\n     public void removeWelcomeFile(String hostName, String contextPath,\n             String version, String welcomeFile) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                log.error(\"No context found: \" + contextPath );\n-                return;\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            log.error(\"No context found: \" + contextPath);\n+            return;\n+        }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            log.error(\"No context version found: \" + contextPath + \" \"\n+                    + version);\n+            return;\n+        }\n+        int match = -1;\n+        for (int i = 0; i < contextVersion.welcomeResources.length; i++) {\n+            if (welcomeFile.equals(contextVersion.welcomeResources[i])) {\n+                match = i;\n+                break;\n             }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    log.error(\"No context version found: \" + contextPath + \" \" +\n-                            version);\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    int match = -1;\n-                    for (int i = 0; i < contextVersion.welcomeResources.length; i++) {\n-                        if (welcomeFile.equals(contextVersion.welcomeResources[i])) {\n-                            match = i;\n-                            break;\n-                        }\n-                    }\n-                    if (match > -1) {\n-                        int len = contextVersion.welcomeResources.length - 1;\n-                        String[] newWelcomeResources = new String[len];\n-                        System.arraycopy(contextVersion.welcomeResources, 0,\n-                                newWelcomeResources, 0, match);\n-                        if (match < len) {\n-                            System.arraycopy(contextVersion.welcomeResources, match + 1,\n-                                    newWelcomeResources, match, len - match);\n-                        }\n-                        contextVersion.welcomeResources = newWelcomeResources;\n-                    }\n-                }\n+        }\n+        if (match > -1) {\n+            int len = contextVersion.welcomeResources.length - 1;\n+            String[] newWelcomeResources = new String[len];\n+            System.arraycopy(contextVersion.welcomeResources, 0,\n+                    newWelcomeResources, 0, match);\n+            if (match < len) {\n+                System.arraycopy(contextVersion.welcomeResources, match + 1,\n+                        newWelcomeResources, match, len - match);\n             }\n+            contextVersion.welcomeResources = newWelcomeResources;\n         }\n     }\n \n-\n     /**\n      * Clear the welcome files for the given context.\n      *\n@@ -617,36 +586,26 @@ public void removeWelcomeFile(String hostName, String contextPath,\n     public void clearWelcomeFiles(String hostName, String contextPath,\n             String version) {\n         MappedHost[] hosts = this.hosts;\n-        int pos = find(hosts, hostName);\n-        if (pos < 0) {\n+        MappedHost host = exactFind(hosts, hostName);\n+        if (host == null) {\n             return;\n         }\n-        MappedHost host = hosts[pos];\n-        if (host.name.equals(hostName)) {\n-            MappedContext[] contexts = host.contextList.contexts;\n-            int pos2 = find(contexts, contextPath);\n-            if (pos2 < 0) {\n-                log.error(\"No context found: \" + contextPath );\n-                return;\n-            }\n-            MappedContext context = contexts[pos2];\n-            if (context.name.equals(contextPath)) {\n-                ContextVersion[] contextVersions = context.versions;\n-                int pos3 = find(contextVersions, version);\n-                if( pos3<0 ) {\n-                    log.error(\"No context version found: \" + contextPath + \" \" +\n-                            version);\n-                    return;\n-                }\n-                ContextVersion contextVersion = contextVersions[pos3];\n-                if (contextVersion.name.equals(version)) {\n-                    contextVersion.welcomeResources = new String[0];\n-                }\n-            }\n+        MappedContext[] contexts = host.contextList.contexts;\n+        MappedContext context = exactFind(contexts, contextPath);\n+        if (context == null) {\n+            log.error(\"No context found: \" + contextPath);\n+            return;\n+        }\n+        ContextVersion[] contextVersions = context.versions;\n+        ContextVersion contextVersion = exactFind(contextVersions, version);\n+        if (contextVersion == null) {\n+            log.error(\"No context version found: \" + contextPath + \" \"\n+                    + version);\n+            return;\n         }\n+        contextVersion.welcomeResources = new String[0];\n     }\n \n-\n     /**\n      * Map the specified host name and URI, mutating the given mapping data.\n      *\n@@ -712,24 +671,19 @@ private final void internalMap(CharChunk host, CharChunk uri,\n         // Virtual host mapping\n         if (mappingData.host == null) {\n             MappedHost[] hosts = this.hosts;\n-            int pos = findIgnoreCase(hosts, host);\n-            if ((pos != -1) && (host.equalsIgnoreCase(hosts[pos].name))) {\n-                mappingData.host = hosts[pos].object;\n-                contexts = hosts[pos].contextList.contexts;\n-                nesting = hosts[pos].contextList.nesting;\n-            } else {\n+            MappedHost mappedHost = exactFindIgnoreCase(hosts, host);\n+            if (mappedHost == null) {\n                 if (defaultHostName == null) {\n                     return;\n                 }\n-                pos = find(hosts, defaultHostName);\n-                if ((pos != -1) && (defaultHostName.equals(hosts[pos].name))) {\n-                    mappingData.host = hosts[pos].object;\n-                    contexts = hosts[pos].contextList.contexts;\n-                    nesting = hosts[pos].contextList.nesting;\n-                } else {\n+                mappedHost = exactFind(hosts, defaultHostName);\n+                if (mappedHost == null) {\n                     return;\n                 }\n             }\n+            mappingData.host = mappedHost.object;\n+            contexts = mappedHost.contextList.contexts;\n+            nesting = mappedHost.contextList.nesting;\n         }\n \n         // Context mapping\n@@ -764,13 +718,12 @@ private final void internalMap(CharChunk host, CharChunk uri,\n             }\n             uri.setEnd(uriEnd);\n \n-            if (!found) {\n-                if (contexts[0].name.equals(\"\")) {\n-                    context = contexts[0];\n-                }\n-            } else {\n+            if (found) {\n                 context = contexts[pos];\n+            } else if (contexts[0].name.equals(\"\")) {\n+                context = contexts[0];\n             }\n+\n             if (context != null) {\n                 mappingData.contextPath.setString(context.name);\n             }\n@@ -787,17 +740,12 @@ private final void internalMap(CharChunk host, CharChunk uri,\n                 mappingData.contexts = contextObjects;\n             }\n \n-            if (version == null) {\n+            if (version != null) {\n+                contextVersion = exactFind(contextVersions, version);\n+            }\n+            if (contextVersion == null) {\n                 // Return the latest version\n                 contextVersion = contextVersions[versionCount - 1];\n-            } else {\n-                int pos = find(contextVersions, version);\n-                if (pos < 0 || !contextVersions[pos].name.equals(version)) {\n-                    // Return the latest version\n-                    contextVersion = contextVersions[versionCount - 1];\n-                } else {\n-                    contextVersion = contextVersions[pos];\n-                }\n             }\n             mappingData.context = contextVersion.object;\n             mappingData.contextSlashCount = contextVersion.slashCount;\n@@ -1015,18 +963,18 @@ private final void internalMapWrapper(ContextVersion contextVersion,\n      */\n     private final void internalMapExactWrapper\n         (MappedWrapper[] wrappers, CharChunk path, MappingData mappingData) {\n-        int pos = find(wrappers, path);\n-        if ((pos != -1) && (path.equals(wrappers[pos].name))) {\n-            mappingData.requestPath.setString(wrappers[pos].name);\n-            mappingData.wrapper = wrappers[pos].object;\n+        MappedWrapper wrapper = exactFind(wrappers, path);\n+        if (wrapper != null) {\n+            mappingData.requestPath.setString(wrapper.name);\n+            mappingData.wrapper = wrapper.object;\n             if (path.equals(\"/\")) {\n                 // Special handling for Context Root mapped servlet\n                 mappingData.pathInfo.setString(\"/\");\n                 mappingData.wrapperPath.setString(\"\");\n                 // This seems wrong but it is what the spec says...\n                 mappingData.contextPath.setString(\"\");\n             } else {\n-                mappingData.wrapperPath.setString(wrappers[pos].name);\n+                mappingData.wrapperPath.setString(wrapper.name);\n             }\n         }\n     }\n@@ -1114,14 +1062,14 @@ private final void internalMapExtensionWrapper(MappedWrapper[] wrappers,\n             if (period >= 0) {\n                 path.setOffset(period + 1);\n                 path.setEnd(pathEnd);\n-                int pos = find(wrappers, path);\n-                if ((pos != -1) && (path.equals(wrappers[pos].name)) &&\n-                        (resourceExpected || !wrappers[pos].resourceOnly)) {\n-                    mappingData.wrapperPath.setChars\n-                        (buf, servletPath, pathEnd - servletPath);\n-                    mappingData.requestPath.setChars\n-                        (buf, servletPath, pathEnd - servletPath);\n-                    mappingData.wrapper = wrappers[pos].object;\n+                MappedWrapper wrapper = exactFind(wrappers, path);\n+                if (wrapper != null\n+                        && (resourceExpected || !wrapper.resourceOnly)) {\n+                    mappingData.wrapperPath.setChars(buf, servletPath, pathEnd\n+                            - servletPath);\n+                    mappingData.requestPath.setChars(buf, servletPath, pathEnd\n+                            - servletPath);\n+                    mappingData.wrapper = wrapper.object;\n                 }\n                 path.setOffset(servletPath);\n                 path.setEnd(pathEnd);\n@@ -1246,6 +1194,7 @@ private final void internalMapExtensionWrapper(MappedWrapper[] wrappers,\n      * Find a map element given its name in a sorted array of map elements.\n      * This will return the index for the closest inferior or equal item in the\n      * given array.\n+     * @see #exactFind(MapElement[], String)\n      */\n     private static final <T> int find(MapElement<T>[] map, String name) {\n \n@@ -1288,6 +1237,60 @@ private final void internalMapExtensionWrapper(MappedWrapper[] wrappers,\n     }\n \n \n+    /**\n+     * Find a map element given its name in a sorted array of map elements. This\n+     * will return the element that you were searching for. Otherwise it will\n+     * return <code>null</code>.\n+     * @see #find(MapElement[], String)\n+     */\n+    private static final <T, E extends MapElement<T>> E exactFind(E[] map,\n+            String name) {\n+        int pos = find(map, name);\n+        if (pos >= 0) {\n+            E result = map[pos];\n+            if (name.equals(result.name)) {\n+                return result;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Find a map element given its name in a sorted array of map elements. This\n+     * will return the element that you were searching for. Otherwise it will\n+     * return <code>null</code>.\n+     */\n+    private static final <T, E extends MapElement<T>> E exactFind(E[] map,\n+            CharChunk name) {\n+        int pos = find(map, name);\n+        if (pos >= 0) {\n+            E result = map[pos];\n+            if (name.equals(result.name)) {\n+                return result;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Find a map element given its name in a sorted array of map elements. This\n+     * will return the element that you were searching for. Otherwise it will\n+     * return <code>null</code>.\n+     * @see #findIgnoreCase(MapElement[], CharChunk)\n+     */\n+    private static final <T, E extends MapElement<T>> E exactFindIgnoreCase(\n+            E[] map, CharChunk name) {\n+        int pos = findIgnoreCase(map, name);\n+        if (pos >= 0) {\n+            E result = map[pos];\n+            if (name.equalsIgnoreCase(result.name)) {\n+                return result;\n+            }\n+        }\n+        return null;\n+    }\n+\n+\n     /**\n      * Compare given char chunk with String.\n      * Return -1, 0 or +1 if inferior, equal, or superior to the String.",
                "raw_url": "https://github.com/apache/tomcat/raw/4a333449a56163c5c66f0eaf34393e654b7547fa/java/org/apache/catalina/mapper/Mapper.java",
                "sha": "7a963a558edf777b189ef5019e2e76332a8e76f4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/4a333449a56163c5c66f0eaf34393e654b7547fa/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=4a333449a56163c5c66f0eaf34393e654b7547fa",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -47,6 +47,10 @@\n <section name=\"Tomcat 8.0.10 (markt)\">\n   <subsection name=\"Catalina\">\n     <changelog>\n+      <fix>\n+        <bug>44312</bug>: Log an error if there is a conflict between Host and\n+        Alias names. (kkolinko)\n+      </fix>\n       <scode>\n         <bug>56611</bug>: Refactor code to remove inefficient calls to\n         <code>Method.isAnnotationPresent()</code>. Based on a patch by Jian Mou.",
                "raw_url": "https://github.com/apache/tomcat/raw/4a333449a56163c5c66f0eaf34393e654b7547fa/webapps/docs/changelog.xml",
                "sha": "5e0c393e9c202cce1b93ce4852c03c2361ac66c4",
                "status": "modified"
            }
        ],
        "message": "Fix http://issues.apache.org/bugzilla/show_bug.cgi?id=44312\nLog an error if there is a conflict between Host and Alias names.\n\nThis also includes the following:\n\n1. Implemented exactFind() methods that combine find() with a check that an exact match was found.\nThis allows to simplify the code.\n\n2. Fixed behaviour of Mapper.removeHost() in case if the host is not found. Now it won't throw an NPE.\n\n3. Fixed error logging of various Mapper.removeXxx() methods, where only \"(pos<0)\" case was logged as \"not found\". The change is that now it logs in wrong-match-found case as well.\nI did not introduce i18n there, as I do not see a real use case for those messages.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1604066 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/08f457c81313b4e500f8ce0a49ab54873dd4bc1f",
        "patched_files": [
            "changelog.xml",
            "LocalStrings.properties",
            "Mapper.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestMapper.java"
        ]
    },
    "tomcat_4ad2bff": {
        "bug_id": "tomcat_4ad2bff",
        "commit": "https://github.com/apache/tomcat/commit/4ad2bffd5e922156182b1eebe775c1e1019a4595",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsFrameClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsFrameClient.java?ref=4ad2bffd5e922156182b1eebe775c1e1019a4595",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/WsFrameClient.java",
                "patch": "@@ -37,7 +37,10 @@ public WsFrameClient(ByteBuffer response, AsyncChannelWrapper channel,\n         this.response = response;\n         this.channel = channel;\n         this.handler = new WsFrameClientCompletionHandler();\n+    }\n+\n \n+    void startInputProcessing() {\n         try {\n             processSocketRead();\n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/tomcat/raw/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsFrameClient.java",
                "sha": "41cf71287fe18937d559e046ea7a06e1a0d5ead2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=4ad2bffd5e922156182b1eebe775c1e1019a4595",
                "deletions": 3,
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "patch": "@@ -260,9 +260,7 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n         messageParts.add(new MessagePart(opCode, payload, last,\n                 new EndMessageHandler(this, handler)));\n \n-        if (transformation != null) {\n-            messageParts = transformation.sendMessagePart(messageParts);\n-        }\n+        messageParts = transformation.sendMessagePart(messageParts);\n \n         MessagePart mp = messageParts.remove(0);\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "sha": "e4a16e04bad51ca96b4ea09611ea255bb279576c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=4ad2bffd5e922156182b1eebe775c1e1019a4595",
                "deletions": 6,
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "patch": "@@ -316,22 +316,24 @@ public Session connectToServer(Endpoint endpoint,\n                     sm.getString(\"wsWebSocketContainer.httpRequestFailed\"), e);\n         }\n \n-        // TODO Add extension/transformation support to the client\n-\n         // Switch to WebSocket\n         WsRemoteEndpointImplClient wsRemoteEndpointClient = new WsRemoteEndpointImplClient(channel);\n \n         WsSession wsSession = new WsSession(endpoint, wsRemoteEndpointClient,\n                 this, null, null, null, null, null, subProtocol,\n                 Collections.<String, String> emptyMap(), secure,\n                 clientEndpointConfiguration);\n-        endpoint.onOpen(wsSession, clientEndpointConfiguration);\n-        registerSession(endpoint, wsSession);\n \n-        // Object creation will trigger input processing\n-        @SuppressWarnings(\"unused\")\n         WsFrameClient wsFrameClient = new WsFrameClient(response, channel,\n                 wsSession);\n+        // WsFrame adds the necessary final transformations. Copy the\n+        // completed transformation chain to the remote end point.\n+        wsRemoteEndpointClient.setTransformation(wsFrameClient.getTransformation());\n+\n+        endpoint.onOpen(wsSession, clientEndpointConfiguration);\n+        registerSession(endpoint, wsSession);\n+\n+        wsFrameClient.startInputProcessing();\n \n         return wsSession;\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/4ad2bffd5e922156182b1eebe775c1e1019a4595/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "sha": "591e42965df958a2121c2f99a9e8590fbe99dd56",
                "status": "modified"
            }
        ],
        "message": "Fix root cause of NPE when using WebSocket clients.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1606653 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/a135d07df4215861b262bde5aa199a694e745543",
        "patched_files": [
            "WsWebSocketContainer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWsWebSocketContainer.java"
        ]
    },
    "tomcat_4c97c10": {
        "bug_id": "tomcat_4c97c10",
        "commit": "https://github.com/apache/tomcat/commit/4c97c10e49e65c7abe5e8065438cf9df71441054",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/tomcat/blob/4c97c10e49e65c7abe5e8065438cf9df71441054/java/org/apache/catalina/startup/WebXml.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/WebXml.java?ref=4c97c10e49e65c7abe5e8065438cf9df71441054",
                "deletions": 13,
                "filename": "java/org/apache/catalina/startup/WebXml.java",
                "patch": "@@ -590,9 +590,11 @@ public String toXml() {\n             appendElement(sb, INDENT4, \"enabled\", servletDef.getEnabled());\n             appendElement(sb, INDENT4, \"async-supported\",\n                     servletDef.getAsyncSupported());\n-            sb.append(\"    <run-as>\\n\");\n-            appendElement(sb, INDENT6, \"role-name\", servletDef.getRunAs());\n-            sb.append(\"    </run-as>\\n\");\n+            if (servletDef.getRunAs() != null) {\n+                sb.append(\"    <run-as>\\n\");\n+                appendElement(sb, INDENT6, \"role-name\", servletDef.getRunAs());\n+                sb.append(\"    </run-as>\\n\");\n+            }\n             for (SecurityRoleRef roleRef : servletDef.getSecurityRoleRefs()) {\n                 sb.append(\"    <security-role-ref>\\n\");\n                 appendElement(sb, INDENT6, \"role-name\", roleRef.getName());\n@@ -1491,8 +1493,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setSessionTimeout(\n-                    temp.getSessionConfig().getSessionTimeout().toString());\n+            if (temp.getSessionConfig().getSessionTimeout() != null) {\n+                sessionConfig.setSessionTimeout(\n+                        temp.getSessionConfig().getSessionTimeout().toString());\n+            }\n         }\n         \n         if (sessionConfig.getCookieName() == null) {\n@@ -1597,8 +1601,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieHttpOnly(\n-                    temp.getSessionConfig().getCookieHttpOnly().toString());\n+            if (temp.getSessionConfig().getCookieHttpOnly() != null) {\n+                sessionConfig.setCookieHttpOnly(\n+                        temp.getSessionConfig().getCookieHttpOnly().toString());\n+            }\n         }\n         if (sessionConfig.getCookieSecure() == null) {\n             for (WebXml fragment : fragments) {\n@@ -1618,8 +1624,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieSecure(\n-                    temp.getSessionConfig().getCookieSecure().toString());\n+            if (temp.getSessionConfig().getCookieSecure() != null) {\n+                sessionConfig.setCookieSecure(\n+                        temp.getSessionConfig().getCookieSecure().toString());\n+            }\n         }\n         if (sessionConfig.getCookieMaxAge() == null) {\n             for (WebXml fragment : fragments) {\n@@ -1639,8 +1647,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieMaxAge(\n-                    temp.getSessionConfig().getCookieMaxAge().toString());\n+            if (temp.getSessionConfig().getCookieMaxAge() != null) {\n+                sessionConfig.setCookieMaxAge(\n+                        temp.getSessionConfig().getCookieMaxAge().toString());\n+            }\n         }\n \n         if (sessionConfig.getSessionTrackingModes().size() == 0) {\n@@ -1662,8 +1672,8 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setSessionTimeout(\n-                    temp.getSessionConfig().getSessionTimeout().toString());\n+            sessionConfig.getSessionTrackingModes().addAll(\n+                    temp.getSessionConfig().getSessionTrackingModes());\n         }\n         \n         for (WebXml fragment : fragments) {",
                "raw_url": "https://github.com/apache/tomcat/raw/4c97c10e49e65c7abe5e8065438cf9df71441054/java/org/apache/catalina/startup/WebXml.java",
                "sha": "64d0d91826f6d0968cfc8366c740866a401a8592",
                "status": "modified"
            }
        ],
        "message": "XML output tweaks\nFix some NPEs in the merge of session-config elements\nFix a copy and paste error in the merge of session-config elements\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@894457 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/5fe4b535da9b030328d98fe523d4a269cedfa4b9",
        "patched_files": [
            "WebXml.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebXml.java"
        ]
    },
    "tomcat_50c1a3f": {
        "bug_id": "tomcat_50c1a3f",
        "commit": "https://github.com/apache/tomcat/commit/50c1a3f47409e50cb5b5d9936c7994365b063d87",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/50c1a3f47409e50cb5b5d9936c7994365b063d87/java/org/apache/juli/FileHandler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/juli/FileHandler.java?ref=50c1a3f47409e50cb5b5d9936c7994365b063d87",
                "deletions": 1,
                "filename": "java/org/apache/juli/FileHandler.java",
                "patch": "@@ -542,7 +542,11 @@ private void clean() {\n     }\n \n     private String obtainDateFromPath(Path path) {\n-        String date = path.getFileName().toString();\n+        Path fileName = path.getFileName();\n+        if (fileName == null) {\n+            return null;\n+        }\n+        String date = fileName.toString();\n         if (pattern.matcher(date).matches()) {\n             date = date.substring(prefix.length());\n             return date.substring(0, date.length() - suffix.length());",
                "raw_url": "https://github.com/apache/tomcat/raw/50c1a3f47409e50cb5b5d9936c7994365b063d87/java/org/apache/juli/FileHandler.java",
                "sha": "a6f8d614c958adbe18b43ad8d0a38ba28ec59fd5",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE.\nReported by FindBugs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800981 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/82ba6fc37616c553d7a4b4f68763d78663bcdddf",
        "patched_files": [
            "FileHandler.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestFileHandler.java"
        ]
    },
    "tomcat_557ef4e": {
        "bug_id": "tomcat_557ef4e",
        "commit": "https://github.com/apache/tomcat/commit/557ef4ecccddbedffe26ae6e7cd192c6b499b99d",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tomcat/blob/557ef4ecccddbedffe26ae6e7cd192c6b499b99d/java/org/apache/jasper/compiler/Generator.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Generator.java?ref=557ef4ecccddbedffe26ae6e7cd192c6b499b99d",
                "deletions": 5,
                "filename": "java/org/apache/jasper/compiler/Generator.java",
                "patch": "@@ -1868,18 +1868,24 @@ public void visit(Node.JspElement n) throws JasperException {\n                 if (attrs[i].isNamedAttribute()) {\n                     NamedAttribute attr = attrs[i].getNamedAttributeNode();\n                     Node.JspAttribute omitAttr = attr.getOmit();\n-                    String omit = attributeValue(omitAttr, false, boolean.class);\n-                    if (\"true\".equals(omit)) {\n-                        continue;\n+                    String omit;\n+                    if (omitAttr == null) {\n+                        omit = \"false\";\n+                    } else {\n+                        omit = attributeValue(omitAttr, false, boolean.class);\n+                        if (\"true\".equals(omit)) {\n+                            continue;\n+                        }\n                     }\n                     value = generateNamedAttributeValue(\n                             attrs[i].getNamedAttributeNode());\n                     if (\"false\".equals(omit)) {\n                         nvp = \" + \\\" \" + attrs[i].getName() + \"=\\\\\\\"\\\" + \" +\n                                 value + \" + \\\"\\\\\\\"\\\"\";\n                     } else {\n-                        nvp = \" + (Boolean.valueOf(\" + omit + \")?\\\"\\\":\\\" \" + attrs[i].getName() +\n-                                \"=\\\\\\\"\\\" + \" + value + \" + \\\"\\\\\\\"\\\")\";\n+                        nvp = \" + (Boolean.valueOf(\" + omit + \")?\\\"\\\":\\\" \" +\n+                                attrs[i].getName() + \"=\\\\\\\"\\\" + \" + value +\n+                                \" + \\\"\\\\\\\"\\\")\";\n                     }\n                 } else {\n                     value = attributeValue(attrs[i], false, Object.class);",
                "raw_url": "https://github.com/apache/tomcat/raw/557ef4ecccddbedffe26ae6e7cd192c6b499b99d/java/org/apache/jasper/compiler/Generator.java",
                "sha": "0d4321e10adbe300b26fc378a515bb33f7e092c3",
                "status": "modified"
            }
        ],
        "message": "Fix NPE and TCK failures caused by previous fix for bug 49799.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1003891 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/b893eee710c64a9ade486b6729794047c6882a61",
        "patched_files": [
            "Generator.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestGenerator.java"
        ]
    },
    "tomcat_5ace8c3": {
        "bug_id": "tomcat_5ace8c3",
        "commit": "https://github.com/apache/tomcat/commit/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b/java/org/apache/catalina/connector/Request.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b",
                "deletions": 0,
                "filename": "java/org/apache/catalina/connector/Request.java",
                "patch": "@@ -1522,6 +1522,9 @@ public void setAttribute(String name, Object value) {\n     private void notifyAttributeAssigned(String name, Object value,\n             Object oldValue) {\n         Context context = getContext();\n+        if (context == null) {\n+            return;\n+        }\n         Object listeners[] = context.getApplicationEventListeners();\n         if ((listeners == null) || (listeners.length == 0)) {\n             return;",
                "raw_url": "https://github.com/apache/tomcat/raw/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b/java/org/apache/catalina/connector/Request.java",
                "sha": "09f99c2bd285dddcbe40a905289f78578c77bfb0",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b/webapps/docs/changelog.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -45,6 +45,15 @@\n   issues do not \"pop up\" wrt. others).\n -->\n <section name=\"Tomcat 9.0.8 (markt)\" rtext=\"in development\">\n+  <subsection name=\"Catalina\">\n+    <changelog>\n+      <fix>\n+        <bug>62263</bug>: Avoid a <code>NullPointerException</code> when the\n+        <code>RemoteIpValve</code> processes a request for which no Context can\n+        be found. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Coyote\">\n     <changelog>\n       <fix>",
                "raw_url": "https://github.com/apache/tomcat/raw/5ace8c3e883c36a4dc6d20523c4ca6ee7f8bcd1b/webapps/docs/changelog.xml",
                "sha": "e2b74f0934c458b22cde4cd5dc91b10114f66647",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=62263\nAvoid a NullPointerException when the RemoteIpValve processes a request for which no Context can be found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1828565 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/61c3a72b3f5eaa3cf043530f49c5cd0442fc9997",
        "patched_files": [
            "changelog.xml",
            "Request.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRequest.java"
        ]
    },
    "tomcat_5bf2a85": {
        "bug_id": "tomcat_5bf2a85",
        "commit": "https://github.com/apache/tomcat/commit/5bf2a8504f5965410e82242667b71f54912fe766",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/LocalStrings.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/LocalStrings.properties?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/LocalStrings.properties",
                "patch": "@@ -35,6 +35,7 @@ caseInsensitiveKeyMap.nullKey=Null keys are not permitted\n \n futureToSendHandler.timeout=Operation timed out after waiting [{0}] [{1}] to complete\n \n+perMessageDeflate.alreadyClosed=The transformer has been closed and may no longer be used\n perMessageDeflate.deflateFailed=Failed to decompress a compressed WebSocket frame\n perMessageDeflate.duplicateParameter=Duplicate definition of the [{0}] extension parameter\n perMessageDeflate.invalidState=Invalid state",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/LocalStrings.properties",
                "sha": "744619aafe4d19401b20be05c628e2114b6dbd18",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/PerMessageDeflate.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 9,
                "filename": "java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "patch": "@@ -204,6 +204,8 @@ public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteB\n                         dest.array(), dest.arrayOffset() + dest.position(), dest.remaining());\n             } catch (DataFormatException e) {\n                 throw new IOException(sm.getString(\"perMessageDeflate.deflateFailed\"), e);\n+            } catch (NullPointerException e) {\n+                throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n             }\n             dest.position(dest.position() + written);\n \n@@ -229,7 +231,11 @@ public TransformationResult getMoreData(byte opCode, boolean fin, int rsv, ByteB\n             } else if (written == 0) {\n                 if (fin && (isServer && !clientContextTakeover ||\n                         !isServer && !serverContextTakeover)) {\n-                    inflater.reset();\n+                    try {\n+                        inflater.reset();\n+                    } catch (NullPointerException e) {\n+                        throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                    }\n                 }\n                 return TransformationResult.END_OF_FRAME;\n             }\n@@ -314,7 +320,7 @@ public boolean validateRsvBits(int i) {\n \n \n     @Override\n-    public List<MessagePart> sendMessagePart(List<MessagePart> uncompressedParts) {\n+    public List<MessagePart> sendMessagePart(List<MessagePart> uncompressedParts) throws IOException {\n         List<MessagePart> allCompressedParts = new ArrayList<>();\n \n         for (MessagePart uncompressedPart : uncompressedParts) {\n@@ -345,10 +351,14 @@ public boolean validateRsvBits(int i) {\n                 while (deflateRequired) {\n                     ByteBuffer compressedPayload = writeBuffer;\n \n-                    int written = deflater.deflate(compressedPayload.array(),\n-                            compressedPayload.arrayOffset() + compressedPayload.position(),\n-                            compressedPayload.remaining(), flush);\n-                    compressedPayload.position(compressedPayload.position() + written);\n+                    try {\n+                        int written = deflater.deflate(compressedPayload.array(),\n+                                compressedPayload.arrayOffset() + compressedPayload.position(),\n+                                compressedPayload.remaining(), flush);\n+                        compressedPayload.position(compressedPayload.position() + written);\n+                    } catch (NullPointerException e) {\n+                        throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                    }\n \n                     if (!uncompressedPart.isFin() && compressedPayload.hasRemaining() && deflater.needsInput()) {\n                         // This message part has been fully processed by the\n@@ -401,7 +411,12 @@ public boolean validateRsvBits(int i) {\n                         // - in middle of EOM bytes\n                         // - about to write EOM bytes\n                         // - more data to write\n-                        int eomBufferWritten = deflater.deflate(EOM_BUFFER, 0, EOM_BUFFER.length, Deflater.SYNC_FLUSH);\n+                        int eomBufferWritten;\n+                        try {\n+                            eomBufferWritten = deflater.deflate(EOM_BUFFER, 0, EOM_BUFFER.length, Deflater.SYNC_FLUSH);\n+                        } catch (NullPointerException e) {\n+                            throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+                        }\n                         if (eomBufferWritten < EOM_BUFFER.length) {\n                             // EOM has just been completed\n                             compressedPayload.limit(compressedPayload.limit() - EOM_BYTES.length + eomBufferWritten);\n@@ -447,11 +462,15 @@ public boolean validateRsvBits(int i) {\n     }\n \n \n-    private void startNewMessage() {\n+    private void startNewMessage() throws IOException {\n         firstCompressedFrameWritten = false;\n         emptyMessage = true;\n         if (isServer && !serverContextTakeover || !isServer && !clientContextTakeover) {\n-            deflater.reset();\n+            try {\n+                deflater.reset();\n+            } catch (NullPointerException e) {\n+                throw new IOException(sm.getString(\"perMessageDeflate.alreadyClosed\"), e);\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/PerMessageDeflate.java",
                "sha": "afcfcf02eb68ca851d53059a8355862127b74ebc",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/Transformation.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Transformation.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/Transformation.java",
                "patch": "@@ -101,8 +101,11 @@\n      * @return  The list of messages after this any any subsequent\n      *          transformations have been applied. The size of the returned list\n      *          may be bigger or smaller than the size of the input list\n+     *\n+     * @throws IOException If an error occurs during the transformation of the\n+     *                     message parts\n      */\n-    List<MessagePart> sendMessagePart(List<MessagePart> messageParts);\n+    List<MessagePart> sendMessagePart(List<MessagePart> messageParts) throws IOException;\n \n     /**\n      * Clean-up any resources that were used by the transformation.",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/Transformation.java",
                "sha": "14d809303fcfe2edea9cdb6106e805b8c0e51112",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "patch": "@@ -338,7 +338,12 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n                 intermediateMessageHandler,\n                 new EndMessageHandler(this, handler), -1));\n \n-        messageParts = transformation.sendMessagePart(messageParts);\n+        try {\n+            messageParts = transformation.sendMessagePart(messageParts);\n+        } catch (IOException ioe) {\n+            handler.onResult(new SendResult(ioe));\n+            return;\n+        }\n \n         // Some extensions/transformations may buffer messages so it is possible\n         // that no message parts will be returned. If this is the case the",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "sha": "f022132bb1de3291a8f31a68cf2a359b2af2f44f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 1,
                "filename": "test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "patch": "@@ -34,7 +34,7 @@\n      * https://bz.apache.org/bugzilla/show_bug.cgi?id=61491\n      */\n     @Test\n-    public void testSendEmptyMessagePartWithContextTakeover() {\n+    public void testSendEmptyMessagePartWithContextTakeover() throws IOException {\n \n         // Set up the extension using defaults\n         List<Parameter> parameters = Collections.emptyList();",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/test/org/apache/tomcat/websocket/TestPerMessageDeflate.java",
                "sha": "9139460c7402e0c02fee3a345c41e0add54e4da1",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tomcat/blob/5bf2a8504f5965410e82242667b71f54912fe766/webapps/docs/changelog.xml",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5bf2a8504f5965410e82242667b71f54912fe766",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -157,6 +157,17 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"WebSocket\">\n+    <changelog>\n+      <fix>\n+        <bug>63913</bug>: Wrap any <code>NullPointerException</code>s throw by\n+        the <code>Inflater</code> or <code>Deflater</code> used by the\n+        <code>PerMessageDeflate</code> extension in an <code>IOException</code>\n+        so that the error can be caught and handled by the WebSocket error\n+        handling mechanism. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Web applications\">\n     <changelog>\n       <fix>",
                "raw_url": "https://github.com/apache/tomcat/raw/5bf2a8504f5965410e82242667b71f54912fe766/webapps/docs/changelog.xml",
                "sha": "8a19840ab9dcbcc7970394638b9063cbeb715e4b",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63913 Wrap NPEs\n\nWrap any NullPointerExceptions throw by the Inflater or Deflater used by\nthe PerMessageDeflate extension in an IOException so that the error can\nbe caught and handled by the WebSocket error handling mechanism.",
        "parent": "https://github.com/apache/tomcat/commit/163c0ad70540e59b75fc922d6fd19eacc7febd3e",
        "patched_files": [
            "changelog.xml",
            "PerMessageDeflate.java",
            "LocalStrings.properties",
            "Transformation.java",
            "WsRemoteEndpointImplBase.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestPerMessageDeflate.java"
        ]
    },
    "tomcat_5d55842": {
        "bug_id": "tomcat_5d55842",
        "commit": "https://github.com/apache/tomcat/commit/5d5584294d08c7a8f531b266d2d0de517787036b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/5d5584294d08c7a8f531b266d2d0de517787036b/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=5d5584294d08c7a8f531b266d2d0de517787036b",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -500,7 +500,7 @@ public void log(org.apache.coyote.Request req,\n                             request, response, time, true);\n                 } else if (request.mappingData.host != null) {\n                     logged = true;\n-                    ((Context) request.mappingData.context).logAccess(\n+                    ((Host) request.mappingData.host).logAccess(\n                             request, response, time, true);\n                 }\n             }",
                "raw_url": "https://github.com/apache/tomcat/raw/5d5584294d08c7a8f531b266d2d0de517787036b/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "428868164369c064569838e5b54b2554ca35dbf3",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51658\nFix copy/paste error that could trigger an NPE.\nBased on a suggestion by Felix Schumacher\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1158155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/f82aea1d7c8e36b79d8dda00482790774774401b",
        "patched_files": [
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_5f7c28a": {
        "bug_id": "tomcat_5f7c28a",
        "commit": "https://github.com/apache/tomcat/commit/5f7c28ac317aba3eaba0f797a7fd587abd53bea6",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tomcat/blob/5f7c28ac317aba3eaba0f797a7fd587abd53bea6/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=5f7c28ac317aba3eaba0f797a7fd587abd53bea6",
                "deletions": 12,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -276,8 +276,9 @@ public boolean asyncDispatch(org.apache.coyote.Request req, org.apache.coyote.Re\n                 if (req.getStartTime() != -1) {\n                     time = System.currentTimeMillis() - req.getStartTime();\n                 }\n-                if (request.getMappingData().context != null) {\n-                    request.getMappingData().context.logAccess(request, response, time, false);\n+                Context context = request.getContext();\n+                if (context != null) {\n+                    context.logAccess(request, response, time, false);\n                 } else {\n                     log(req, res, time);\n                 }\n@@ -390,8 +391,16 @@ public void service(org.apache.coyote.Request req, org.apache.coyote.Response re\n             if (!async && postParseSuccess) {\n                 // Log only if processing was invoked.\n                 // If postParseRequest() failed, it has already logged it.\n-                request.getMappingData().context.logAccess(request, response,\n-                        System.currentTimeMillis() - req.getStartTime(), false);\n+                Context context = request.getContext();\n+                // If the context is null, it is likely that the endpoint was\n+                // shutdown, this connection closed and the request recycled in\n+                // a different thread. That thread will have updated the access\n+                // log so it is OK not to update the access log here in that\n+                // case.\n+                if (context != null) {\n+                    context.logAccess(request, response,\n+                            System.currentTimeMillis() - req.getStartTime(), false);\n+                }\n             }\n \n             req.getRequestProcessor().setWorkerThreadName(null);\n@@ -446,18 +455,17 @@ public void log(org.apache.coyote.Request req,\n             // Log at the lowest level available. logAccess() will be\n             // automatically called on parent containers.\n             boolean logged = false;\n-            if (request.mappingData.context != null) {\n+            Context context = request.mappingData.context;\n+            Host host = request.mappingData.host;\n+            if (context != null) {\n                 logged = true;\n-                request.mappingData.context.logAccess(\n-                        request, response, time, true);\n-            } else if (request.mappingData.host != null) {\n+                context.logAccess(request, response, time, true);\n+            } else if (host != null) {\n                 logged = true;\n-                request.mappingData.host.logAccess(\n-                        request, response, time, true);\n+                host.logAccess(request, response, time, true);\n             }\n             if (!logged) {\n-                connector.getService().getContainer().logAccess(\n-                        request, response, time, true);\n+                connector.getService().getContainer().logAccess(request, response, time, true);\n             }\n         } catch (Throwable t) {\n             ExceptionUtils.handleThrowable(t);",
                "raw_url": "https://github.com/apache/tomcat/raw/5f7c28ac317aba3eaba0f797a7fd587abd53bea6/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "66574d6bc9459e5619c49b13bc80301d85b7fa2d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/5f7c28ac317aba3eaba0f797a7fd587abd53bea6/webapps/docs/changelog.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=5f7c28ac317aba3eaba0f797a7fd587abd53bea6",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -85,6 +85,11 @@\n         failure to load this class masking the true problem during error\n         handling. (markt)\n       </fix>\n+      <fix>\n+        Avoid potential <code>NullPointerException</code>s related to access\n+        logging during shutdown, some of which have been observed when running\n+        the unit tests. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "raw_url": "https://github.com/apache/tomcat/raw/5f7c28ac317aba3eaba0f797a7fd587abd53bea6/webapps/docs/changelog.xml",
                "sha": "77d09720cef1746e4abfaa56ccf52032bb8c1639",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NullPointerExceptions related to access logging during shutdown, some of which have been observed when running the unit tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1790991 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/c4c3d5fb4a4a5bcda801acd33c5bcfddb0f2c8c0",
        "patched_files": [
            "changelog.xml",
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_61bb48a": {
        "bug_id": "tomcat_61bb48a",
        "commit": "https://github.com/apache/tomcat/commit/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2/java/org/apache/catalina/core/ApplicationContext.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationContext.java?ref=61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2",
                "deletions": 8,
                "filename": "java/org/apache/catalina/core/ApplicationContext.java",
                "patch": "@@ -1248,16 +1248,18 @@ public void addListener(Class<? extends EventListener> listenerClass) {\n     public void addListener(String className) {\n \n         try {\n-            Object obj = context.getInstanceManager().newInstance(className);\n+            if (context.getInstanceManager() != null) {\n+                Object obj = context.getInstanceManager().newInstance(className);\n \n-            if (!(obj instanceof EventListener)) {\n-                throw new IllegalArgumentException(sm.getString(\n-                        \"applicationContext.addListener.iae.wrongType\",\n-                        className));\n-            }\n+                if (!(obj instanceof EventListener)) {\n+                    throw new IllegalArgumentException(sm.getString(\n+                            \"applicationContext.addListener.iae.wrongType\",\n+                            className));\n+                }\n \n-            EventListener listener = (EventListener) obj;\n-            addListener(listener);\n+                EventListener listener = (EventListener) obj;\n+                addListener(listener);\n+            }\n         } catch (IllegalAccessException e) {\n             throw new IllegalArgumentException(sm.getString(\n                     \"applicationContext.addListener.iae.cnfe\", className),",
                "raw_url": "https://github.com/apache/tomcat/raw/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2/java/org/apache/catalina/core/ApplicationContext.java",
                "sha": "4c8805f2d9dae74ddd552aa23891d9c648a45798",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2/java/org/apache/catalina/core/StandardContext.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2",
                "deletions": 4,
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "patch": "@@ -4644,7 +4644,7 @@ public boolean listenerStart() {\n                     listeners[i] + \"'\");\n             try {\n                 String listener = listeners[i];\n-                results[i] = instanceManager.newInstance(listener);\n+                results[i] = getInstanceManager().newInstance(listener);\n             } catch (Throwable t) {\n                 t = ExceptionUtils.unwrapInvocationTargetException(t);\n                 ExceptionUtils.handleThrowable(t);\n@@ -4782,7 +4782,9 @@ public boolean listenerStop() {\n                     }\n                 }\n                 try {\n-                    getInstanceManager().destroyInstance(listeners[j]);\n+                    if (getInstanceManager() != null) {\n+                        getInstanceManager().destroyInstance(listeners[j]);\n+                    }\n                 } catch (Throwable t) {\n                     t = ExceptionUtils.unwrapInvocationTargetException(t);\n                     ExceptionUtils.handleThrowable(t);\n@@ -4802,7 +4804,9 @@ public boolean listenerStop() {\n                 if (listeners[j] == null)\n                     continue;\n                 try {\n-                    getInstanceManager().destroyInstance(listeners[j]);\n+                    if (getInstanceManager() != null) {\n+                        getInstanceManager().destroyInstance(listeners[j]);\n+                    }\n                 } catch (Throwable t) {\n                     t = ExceptionUtils.unwrapInvocationTargetException(t);\n                     ExceptionUtils.handleThrowable(t);\n@@ -5452,7 +5456,7 @@ protected synchronized void stopInternal() throws LifecycleException {\n         }\n \n         //reset the instance manager\n-        instanceManager = null;\n+        setInstanceManager(null);\n \n         if (log.isDebugEnabled())\n             log.debug(\"Stopping complete\");",
                "raw_url": "https://github.com/apache/tomcat/raw/61bb48a7ac7965fcbd2911c25fb26bf1916dc7b2/java/org/apache/catalina/core/StandardContext.java",
                "sha": "9abe57a71d6c72e5303a8c9000e6c5ecce6959bd",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57704\nAccess instanceManager via get/set methods.\nFix potential NPEs. In web app start if a problem occur prior to instanceManager initialization then:\n- SCI.onStart will fail if it tries to use instanceManager\n- During web app stop, StandardContext.listenerStop will fail if it tries to use instanceManager\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1666649 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/65873d94cf6d5e8ca90503d5c721d94becb0c8db",
        "patched_files": [
            "StandardContext.java",
            "ApplicationContext.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardContext.java",
            "TestApplicationContext.java"
        ]
    },
    "tomcat_6226860": {
        "bug_id": "tomcat_6226860",
        "commit": "https://github.com/apache/tomcat/commit/62268605c5dcda064fb69ea587e4d0fbfce7f8fc",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/java/org/apache/el/Messages.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/Messages.properties?ref=62268605c5dcda064fb69ea587e4d0fbfce7f8fc",
                "deletions": 0,
                "filename": "java/org/apache/el/Messages.properties",
                "patch": "@@ -21,6 +21,8 @@ error.unreachable.base=Target Unreachable, identifier ''{0}'' resolved to null\n error.unreachable.property=Target Unreachable, ''{0}'' returned null\n error.resolver.unhandled=ELResolver did not handle type: {0} with property of ''{1}''\n error.resolver.unhandled.null=ELResolver cannot handle a null base Object with identifier ''{0}''\n+error.invoke.wrongParams=The method [{0}] was called with [{1}] parameter(s) when it expected [{2}]\n+error.invoke.tooFewParams=The method [{0}] was called with [{1}] parameter(s) when it expected at least [{2}]\n \n # ValueExpressionLiteral\n error.value.literal.write=ValueExpression is a literal and not writable: {0}",
                "raw_url": "https://github.com/apache/tomcat/raw/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/java/org/apache/el/Messages.properties",
                "sha": "f3d87089a630e3d8ad8e85cb821429b123d29731",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/tomcat/blob/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/java/org/apache/el/parser/AstValue.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/parser/AstValue.java?ref=62268605c5dcda064fb69ea587e4d0fbfce7f8fc",
                "deletions": 1,
                "filename": "java/org/apache/el/parser/AstValue.java",
                "patch": "@@ -237,7 +237,7 @@ public Object invoke(EvaluationContext ctx,\n         }\n         m = ReflectionUtil.getMethod(ctx, t.base, t.property, types, values);\n \n-        // Handle varArgs and any co-ercion required\n+        // Handle varArgs and any coercion required\n         values = convertArgs(ctx, values, m);\n \n         Object result = null;\n@@ -268,6 +268,24 @@ public Object invoke(EvaluationContext ctx,\n \n         int paramCount = types.length;\n \n+        if (paramCount > 0 && src == null ||\n+                m.isVarArgs() && src.length < paramCount ||\n+                !m.isVarArgs() && src.length != paramCount) {\n+            String inputParamCount = null;\n+            if (src != null) {\n+                inputParamCount = Integer.toString(src.length);\n+            }\n+            String msg;\n+            if (m.isVarArgs()) {\n+                msg = MessageFactory.get(\"error.invoke.tooFewParams\",\n+                        m.getName(), inputParamCount, Integer.toString(paramCount));\n+            } else {\n+                msg = MessageFactory.get(\"error.invoke.wrongParams\",\n+                        m.getName(), inputParamCount, Integer.toString(paramCount));\n+            }\n+            throw new IllegalArgumentException(msg);\n+        }\n+\n         Object[] dest = new Object[paramCount];\n \n         for (int i = 0; i < paramCount - 1; i++) {",
                "raw_url": "https://github.com/apache/tomcat/raw/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/java/org/apache/el/parser/AstValue.java",
                "sha": "f20b170200e3a1f2a086ebf5d986f8e66be43a39",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/tomcat/blob/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/test/org/apache/el/TestMethodExpressionImpl.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/el/TestMethodExpressionImpl.java?ref=62268605c5dcda064fb69ea587e4d0fbfce7f8fc",
                "deletions": 0,
                "filename": "test/org/apache/el/TestMethodExpressionImpl.java",
                "patch": "@@ -482,4 +482,20 @@ public void testBug56797b() {\n         Object r = me.invoke(context, null);\n         assertEquals(\"AA2Hello World!\", r.toString());\n     }\n+\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testBug57855a() {\n+        MethodExpression me = factory.createMethodExpression(context,\n+                \"${beanAA.echo2}\", null , new Class[]{String.class});\n+        me.invoke(context, new Object[0]);\n+    }\n+\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testBug57855b() {\n+        MethodExpression me = factory.createMethodExpression(context,\n+                \"${beanAA.echo2}\", null , new Class[]{String.class});\n+        me.invoke(context, null);\n+    }\n }",
                "raw_url": "https://github.com/apache/tomcat/raw/62268605c5dcda064fb69ea587e4d0fbfce7f8fc/test/org/apache/el/TestMethodExpressionImpl.java",
                "sha": "1ddea069db1e1c93866cc17bf603e3e1851fcf6e",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57855\nExplicitly handle the case where a MethodExpression is invoked with null or the wrong number of parameters. Rather than failing with ArrayIndexOutOfBoundsException or NullPointerException throw an IllegalArgumentException with a useful error message.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1676231 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/ea094b25e08f5cf24e81850542145f442a7da28f",
        "patched_files": [
            "Messages.properties",
            "MethodExpressionImpl.java",
            "AstValue.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestMethodExpressionImpl.java"
        ]
    },
    "tomcat_6536c0e": {
        "bug_id": "tomcat_6536c0e",
        "commit": "https://github.com/apache/tomcat/commit/6536c0e0a6bb96667eb1acfd2b7308780b6b2d15",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/6536c0e0a6bb96667eb1acfd2b7308780b6b2d15/java/org/apache/catalina/connector/Response.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Response.java?ref=6536c0e0a6bb96667eb1acfd2b7308780b6b2d15",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/Response.java",
                "patch": "@@ -272,7 +272,7 @@ public void recycle() {\n                 writer.clear();\n                 writer = null;\n             }\n-        } else {\n+        } else if (writer != null) {\n             writer.recycle();\n         }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/6536c0e0a6bb96667eb1acfd2b7308780b6b2d15/java/org/apache/catalina/connector/Response.java",
                "sha": "84517bcfcca1d65a21371183e3a2c4d4afdced83",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE on response recycle.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1777167 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/e26c36265dd75ac9fe160634c883773591ad8757",
        "patched_files": [
            "Response.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestResponse.java"
        ]
    },
    "tomcat_659b28c": {
        "bug_id": "tomcat_659b28c",
        "commit": "https://github.com/apache/tomcat/commit/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11OutputBuffer.java?ref=659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "patch": "@@ -303,7 +303,10 @@ protected void commit() throws IOException {\n             // Sending the response header buffer\n             headerBuffer.flip();\n             try {\n-                socketWrapper.write(isBlocking(), headerBuffer);\n+                SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n+                if (socketWrapper != null) {\n+                    socketWrapper.write(isBlocking(), headerBuffer);\n+                }\n             } finally {\n                 headerBuffer.position(0).limit(headerBuffer.capacity());\n             }",
                "raw_url": "https://github.com/apache/tomcat/raw/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "sha": "62d5223226d84bf4e9d3f478372d2476a603bcc3",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=659b28c00d94e2a9049e0a8ac1e02bd4d36dd005",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -75,6 +75,10 @@\n         was the only other sensible value, but without and impact beyond\n         certain microbenchmarks. (remm)\n       </fix>\n+      <fix>\n+        Avoid possible NPE in <code>Http11OutputBuffer.commit</code> on\n+        connector stopclose. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Other\">",
                "raw_url": "https://github.com/apache/tomcat/raw/659b28c00d94e2a9049e0a8ac1e02bd4d36dd005/webapps/docs/changelog.xml",
                "sha": "a11513764d9fc054e0c1c2ee2ed08e97b446d446",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE on commit",
        "parent": "https://github.com/apache/tomcat/commit/e9e9b2201069f8b0857c541018a7aa81a9cebe52",
        "patched_files": [
            "Http11OutputBuffer.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestHttp11OutputBuffer.java"
        ]
    },
    "tomcat_6857b05": {
        "bug_id": "tomcat_6857b05",
        "commit": "https://github.com/apache/tomcat/commit/6857b05b1d8ec5b577a09b15a6a070f725f5386c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/6857b05b1d8ec5b577a09b15a6a070f725f5386c/java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/AbstractHttp11Processor.java?ref=6857b05b1d8ec5b577a09b15a6a070f725f5386c",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "patch": "@@ -898,7 +898,10 @@ public final void action(ActionCode actionCode, Object param) {\n             break;\n         }\n         case DISPATCH_EXECUTE: {\n-            getEndpoint().executeNonBlockingDispatches(socketWrapper);\n+            SocketWrapper<S> wrapper = socketWrapper;\n+            if (wrapper != null) {\n+                getEndpoint().executeNonBlockingDispatches(wrapper);\n+            }\n             break;\n         }\n         case CLOSE_NOW: {",
                "raw_url": "https://github.com/apache/tomcat/raw/6857b05b1d8ec5b577a09b15a6a070f725f5386c/java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "sha": "57f66cb542f1d301e6730d8c55abc6705773c0ae",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE (unlikely but observed while stepping through code investogating BZ 56739)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1616204 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/661d6f38dc88f861b05d2cb5468b18376c985302",
        "patched_files": [
            "AbstractHttp11Processor.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAbstractHttp11Processor.java"
        ]
    },
    "tomcat_6afe001": {
        "bug_id": "tomcat_6afe001",
        "commit": "https://github.com/apache/tomcat/commit/6afe00181775e027cedd87a9f0cf1b2e0a6e5d2c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/6afe00181775e027cedd87a9f0cf1b2e0a6e5d2c/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java?ref=6afe00181775e027cedd87a9f0cf1b2e0a6e5d2c",
                "deletions": 1,
                "filename": "test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java",
                "patch": "@@ -36,7 +36,8 @@ public void testTimerThreadLeak() throws Exception {\n         // If the thread still exists, we have a thread/memory leak\n         Thread[] threads = getThreads();\n         for (Thread thread : threads) {\n-            if (thread.getName().equals(TaskServlet.TIMER_THREAD_NAME)) {\n+            if (thread != null &&\n+                    TaskServlet.TIMER_THREAD_NAME.equals(thread.getName())) {\n                 fail(\"Timer thread still running\");\n             }\n         }",
                "raw_url": "https://github.com/apache/tomcat/raw/6afe00181775e027cedd87a9f0cf1b2e0a6e5d2c/test/org/apache/catalina/loader/TestWebappClassLoaderMemoryLeak.java",
                "sha": "52882bd68e7d16e8979e67509f705814e8ebb113",
                "status": "modified"
            }
        ],
        "message": "Protect against NPE whilst running the test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@907651 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/9252fc38e80b3def1b15df7f532c3956799551b2",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebappClassLoaderMemoryLeak.java"
        ]
    },
    "tomcat_6ce21f4": {
        "bug_id": "tomcat_6ce21f4",
        "commit": "https://github.com/apache/tomcat/commit/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48/java/org/apache/catalina/core/StandardContext.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48",
                "deletions": 3,
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "patch": "@@ -1760,9 +1760,13 @@ public void setNamingResources(NamingResources namingResources) {\n         support.firePropertyChange(\"namingResources\",\n                                    oldNamingResources, this.namingResources);\n         \n-        unregister(onameNamingResources);\n-        onameNamingResources = register(namingResources,\n-                \"type=NamingResources,\" + getObjectKeyPropertiesNameOnly());\n+        // If set from server.xml, getObjectKeyPropertiesNameOnly() will\n+        // trigger an NPE. Initial registration takes place on INIT. \n+        if (getState() != LifecycleState.NEW) {\n+            unregister(onameNamingResources);\n+            onameNamingResources = register(namingResources,\n+                    \"type=NamingResources,\" + getObjectKeyPropertiesNameOnly());\n+        }\n     }\n \n ",
                "raw_url": "https://github.com/apache/tomcat/raw/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48/java/org/apache/catalina/core/StandardContext.java",
                "sha": "e810ebf38dba7291a070d21b9eac83438571cf5e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -103,6 +103,10 @@\n         <bug>50017</bug>: Code clean-up. No functional change. Patch provided by\n         sebb. (markt)\n       </update>\n+      <fix>\n+        <bug>50027</bug>: Avoid NPE on start when a Context is defined in\n+        server.xml with one or more JNDI resources. (markt)\n+      </fix>\n       <fix>\n         <bug>50059</bug>: JARs should always be searched for static resources\n         even if the web application is marked as meta-data complete. (markt)",
                "raw_url": "https://github.com/apache/tomcat/raw/6ce21f42c96b5c9b3a1d10b25e26d7fd91137b48/webapps/docs/changelog.xml",
                "sha": "9175867b56af57c14d57ae5d8a1b9d882f578dc3",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50027\nAvoid NPE on start when a Context is defined in server.xml with one or more JNDI resources.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1006037 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/da36bd1fd5642993e66e13a149a71f8c9cffeb30",
        "patched_files": [
            "StandardContext.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardContext.java"
        ]
    },
    "tomcat_6cfc356": {
        "bug_id": "tomcat_6cfc356",
        "commit": "https://github.com/apache/tomcat/commit/6cfc356d855f32911a30b70a9d2c39963be09980",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/6cfc356d855f32911a30b70a9d2c39963be09980/java/org/apache/catalina/connector/Request.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=6cfc356d855f32911a30b70a9d2c39963be09980",
                "deletions": 0,
                "filename": "java/org/apache/catalina/connector/Request.java",
                "patch": "@@ -2892,6 +2892,10 @@ protected void convertCookies() {\n \n         cookiesConverted = true;\n \n+        if (getContext() == null) {\n+            return;\n+        }\n+\n         parseCookies();\n \n         ServerCookies serverCookies = coyoteRequest.getCookies();",
                "raw_url": "https://github.com/apache/tomcat/raw/6cfc356d855f32911a30b70a9d2c39963be09980/java/org/apache/catalina/connector/Request.java",
                "sha": "048ac8b6618d06713e0c484d1e6f265d0d811abf",
                "status": "modified"
            }
        ],
        "message": "58578: Avoid NPE when trying to do access logging on cookies for an unmapped request.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712357 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/0054ac699bece117427d426a7b509eb9753ecf18",
        "patched_files": [
            "Request.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRequest.java"
        ]
    },
    "tomcat_6d6e1c4": {
        "bug_id": "tomcat_6d6e1c4",
        "commit": "https://github.com/apache/tomcat/commit/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "deletions": 1,
                "filename": "java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "patch": "@@ -265,7 +265,7 @@ private String getClientIdentifier(Host host, Context context, String clientIp)\n         if (isHostAware) {\n             result.append('-').append(host.getName());\n         }\n-        if (isContextAware) {\n+        if (isContextAware && context != null) {\n             result.append(context.getName());\n         }\n         return result.toString();",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "sha": "da01da8cbcd70ea5519ddbef2843830cae217e31",
                "status": "modified"
            },
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "deletions": 6,
                "filename": "test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "patch": "@@ -97,6 +97,18 @@ public void testCrawlerMultipleHostsHostAware() throws Exception {\n         verifyCrawlingLocalhost(valve, \"example.invalid\");\n     }\n \n+    @Test\n+    public void testCrawlerMultipleContextsContextAware() throws Exception {\n+        CrawlerSessionManagerValve valve = new CrawlerSessionManagerValve();\n+        valve.setCrawlerUserAgents(valve.getCrawlerUserAgents());\n+        valve.setHostAware(true);\n+        valve.setContextAware(true);\n+        valve.setNext(EasyMock.createMock(Valve.class));\n+\n+        verifyCrawlingContext(valve, \"/examples\");\n+        verifyCrawlingContext(valve, null);\n+    }\n+\n     @Test\n     public void testCrawlersSessionIdIsRemovedAfterSessionExpiry() throws IOException, ServletException {\n         CrawlerSessionManagerValve valve = new CrawlerSessionManagerValve();\n@@ -127,7 +139,20 @@ public void testCrawlersSessionIdIsRemovedAfterSessionExpiry() throws IOExceptio\n     private void verifyCrawlingLocalhost(CrawlerSessionManagerValve valve, String hostname)\n             throws IOException, ServletException {\n         HttpSession session = createSessionExpectations(valve, true);\n-        Request request = createRequestExpectations(\"127.0.0.1\", session, true, hostname, \"tomcatBot 1.0\");\n+        Request request = createRequestExpectations(\"127.0.0.1\", session, true, hostname, \"/examples\", \"tomcatBot 1.0\");\n+\n+        EasyMock.replay(request, session);\n+\n+        valve.invoke(request, EasyMock.createMock(Response.class));\n+\n+        EasyMock.verify(request, session);\n+    }\n+\n+\n+    private void verifyCrawlingContext(CrawlerSessionManagerValve valve, String contextPath)\n+            throws IOException, ServletException {\n+        HttpSession session = createSessionExpectations(valve, true);\n+        Request request = createRequestExpectations(\"127.0.0.1\", session, true, \"localhost\", contextPath, \"tomcatBot 1.0\");\n \n         EasyMock.replay(request, session);\n \n@@ -151,14 +176,15 @@ private HttpSession createSessionExpectations(CrawlerSessionManagerValve valve,\n \n \n     private Request createRequestExpectations(String ip, HttpSession session, boolean isBot) {\n-        return createRequestExpectations(ip, session, isBot, \"localhost\", \"something 1.0\");\n+        return createRequestExpectations(ip, session, isBot, \"localhost\", \"/examples\", \"something 1.0\");\n     }\n \n-    private Request createRequestExpectations(String ip, HttpSession session, boolean isBot, String hostname, String userAgent) {\n+    private Request createRequestExpectations(String ip, HttpSession session, boolean isBot, String hostname,\n+            String contextPath, String userAgent) {\n         Request request = EasyMock.createMock(Request.class);\n         EasyMock.expect(request.getRemoteAddr()).andReturn(ip);\n         EasyMock.expect(request.getHost()).andReturn(simpleHostWithName(hostname));\n-        EasyMock.expect(request.getContext()).andReturn(simpleContextWithName());\n+        EasyMock.expect(request.getContext()).andReturn(simpleContextWithName(contextPath));\n         IExpectationSetters<HttpSession> setter = EasyMock.expect(request.getSession(false))\n                 .andReturn(null);\n         if (isBot) {\n@@ -175,9 +201,12 @@ private Host simpleHostWithName(String hostname) {\n         return host;\n     }\n \n-    private Context simpleContextWithName() {\n+    private Context simpleContextWithName(String contextPath) {\n+        if (contextPath == null) {\n+            return null;\n+        }\n         Context context = EasyMock.createMock(Context.class);\n-        EasyMock.expect(context.getName()).andReturn(\"/examples\");\n+        EasyMock.expect(context.getName()).andReturn(contextPath);\n         EasyMock.replay(context);\n         return context;\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/test/org/apache/catalina/valves/TestCrawlerSessionManagerValve.java",
                "sha": "56d07b82024110482996f693628f7fc5c88f3793",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/webapps/docs/changelog.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -87,6 +87,12 @@\n         for patterns used with the <code>RewriteValve</code> with the\n         description in the documentation. (markt)\n       </fix>\n+      <fix>\n+        Avoid a <code>NullPointerException</code> in the\n+        <code>CrawlerSessionManagerValve</code> if no ROOT Context is deployed\n+        and a request does not map to any of the other deployed Contexts. Patch\n+        provided by Jop Zinkweg. (markt)\n+      </fix>\n      </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/6d6e1c4c7a51e1db61cdd6ef52ef73bb7158f5af/webapps/docs/changelog.xml",
                "sha": "7e544a2131efe6bdcf8d614f1a291b7744644ef2",
                "status": "modified"
            }
        ],
        "message": "Fix https://github.com/apache/tomcat/pull/187 Avoid NPE\n\nAvoid a NullPointerException in the CrawlerSessionManagerValve if no\nROOT Context is deployed and a request does not map to any of the other\ndeployed Contexts.\nPatch provided by Jop Zinkweg.",
        "parent": "https://github.com/apache/tomcat/commit/4aac8d4b06bcf5a0ff5246d54d4fa4e00372f743",
        "patched_files": [
            "CrawlerSessionManagerValve.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCrawlerSessionManagerValve.java"
        ]
    },
    "tomcat_6e424d9": {
        "bug_id": "tomcat_6e424d9",
        "commit": "https://github.com/apache/tomcat/commit/6e424d91405fee4210f6b6400c07f545f6ec2e3b",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/tomcat/blob/6e424d91405fee4210f6b6400c07f545f6ec2e3b/test/org/apache/catalina/websocket/TestWebSocket.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/websocket/TestWebSocket.java?ref=6e424d91405fee4210f6b6400c07f545f6ec2e3b",
                "deletions": 23,
                "filename": "test/org/apache/catalina/websocket/TestWebSocket.java",
                "patch": "@@ -38,10 +38,7 @@\n import javax.naming.NamingException;\n import javax.servlet.http.HttpServletRequest;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n-\n+import org.junit.Assert;\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n@@ -84,19 +81,20 @@ public void testSimple() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n \n         // Swallow the headers\n         String responseHeaderLine = client.reader.readLine();\n-        while (!responseHeaderLine.equals(\"\")) {\n+        while (!\"\".equals(responseHeaderLine)) {\n             responseHeaderLine = client.reader.readLine();\n         }\n \n         // Now we can do WebSocket\n         client.sendMessage(\"foo\", false);\n         client.sendMessage(\"foo\", true);\n \n-        assertEquals(\"foofoo\", client.readMessage());\n+        Assert.assertEquals(\"foofoo\", client.readMessage());\n \n         // Finished with the socket\n         client.close();\n@@ -123,17 +121,18 @@ public void testDetectWrongVersion() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 426\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 426\"));\n \n-        List<String> headerlines = new ArrayList<String>();\n+        List<String> headerlines = new ArrayList<>();\n \n         String responseHeaderLine = client.reader.readLine();\n-        while (!responseHeaderLine.equals(\"\")) {\n+        while (!\"\".equals(responseHeaderLine)) {\n             headerlines.add(responseHeaderLine);\n             responseHeaderLine = client.reader.readLine();\n         }\n \n-        assertTrue(headerlines.contains(\"Sec-WebSocket-Version: 13\"));\n+        Assert.assertTrue(headerlines.contains(\"Sec-WebSocket-Version: 13\"));\n         // Finished with the socket\n         client.close();\n     }\n@@ -159,7 +158,8 @@ public void testNoConnection() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 400\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 400\"));\n \n         // Finished with the socket\n         client.close();\n@@ -186,7 +186,8 @@ public void testNoUpgrade() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 400\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 400\"));\n \n         // Finished with the socket\n         client.close();\n@@ -213,28 +214,29 @@ public void testKey() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n \n         String accept = null;\n         String responseHeaderLine = client.reader.readLine();\n-        while (!responseHeaderLine.equals(\"\")) {\n+        while (!\"\".equals(responseHeaderLine)) {\n             if(responseHeaderLine.startsWith(\"Sec-WebSocket-Accept: \")) {\n                 accept = responseHeaderLine.substring(responseHeaderLine.indexOf(\":\")+2);\n                 break;\n             }\n             responseHeaderLine = client.reader.readLine();\n         }\n-        assertTrue(accept != null);\n+        Assert.assertTrue(accept != null);\n         MessageDigest sha1Helper = MessageDigest.getInstance(\"SHA1\");\n         sha1Helper.reset();\n         sha1Helper.update(\"TODO\".getBytes(B2CConverter.ISO_8859_1));\n         String source = Base64.encode(sha1Helper.digest(WS_ACCEPT));\n-        assertEquals(source,accept);\n+        Assert.assertEquals(source,accept);\n \n         sha1Helper.reset();\n         sha1Helper.update(\"TOD\".getBytes(B2CConverter.ISO_8859_1));\n         source = Base64.encode(sha1Helper.digest(WS_ACCEPT));\n-        assertFalse(source.equals(accept));\n+        Assert.assertFalse(source.equals(accept));\n         // Finished with the socket\n         client.close();\n     }\n@@ -275,17 +277,18 @@ public void testBug53339() throws Exception {\n \n         // Make sure we got an upgrade response\n         String responseLine = client.reader.readLine();\n-        assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n+        Assert.assertNotNull(responseLine);\n+        Assert.assertTrue(responseLine.startsWith(\"HTTP/1.1 101\"));\n \n         // Swallow the headers\n         String responseHeaderLine = client.reader.readLine();\n-        while (!responseHeaderLine.equals(\"\")) {\n+        while (!\"\".equals(responseHeaderLine)) {\n             responseHeaderLine = client.reader.readLine();\n         }\n \n         // Now we can do WebSocket\n         String msg = client.readMessage();\n-        assertEquals(Bug53339WsInbound.TEST_MESSAGE, msg);\n+        Assert.assertEquals(Bug53339WsInbound.TEST_MESSAGE, msg);\n \n         // Finished with the socket\n         client.close();\n@@ -377,7 +380,7 @@ private void sendMessage(String message, boolean finalFragment)\n             c2b.flushBuffer();\n \n             int len = bc.getLength();\n-            assertTrue(len < 126);\n+            Assert.assertTrue(len < 126);\n \n             byte first;\n             if (isContinuation) {\n@@ -416,7 +419,7 @@ private String readMessage() throws IOException {\n \n             // Get payload length\n             int len = is.read() & 0x7F;\n-            assertTrue(len < 126);\n+            Assert.assertTrue(len < 126);\n \n             // Read payload\n             int read = 0;",
                "raw_url": "https://github.com/apache/tomcat/raw/6e424d91405fee4210f6b6400c07f545f6ec2e3b/test/org/apache/catalina/websocket/TestWebSocket.java",
                "sha": "0f4b4e4a0a02cc05bb12adee9611e936f3952d0d",
                "status": "modified"
            }
        ],
        "message": "Clean-up\n- Fix FindBugs NPE warnings\n- Java 7 <>\n- Remove static imports (auto completes are easier without them)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1377835 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/af3e70b58bbc773aff26b64cd7cd001d8054c3d8",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebSocket.java"
        ]
    },
    "tomcat_702fd3c": {
        "bug_id": "tomcat_702fd3c",
        "commit": "https://github.com/apache/tomcat/commit/702fd3c53d45e3a8d7c4c860083e2fccb6344868",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/702fd3c53d45e3a8d7c4c860083e2fccb6344868/java/javax/el/ELContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/ELContext.java?ref=702fd3c53d45e3a8d7c4c860083e2fccb6344868",
                "deletions": 0,
                "filename": "java/javax/el/ELContext.java",
                "patch": "@@ -77,7 +77,14 @@ public void putContext(@SuppressWarnings(\"rawtypes\") Class key,\n     }\n \n     // Can't use Class<?> because API needs to match specification\n+    /**\n+     * @throws NullPointerException\n+     *              If the key is <code>null</code>\n+     */\n     public Object getContext(@SuppressWarnings(\"rawtypes\") Class key) {\n+        if (key == null) {\n+            throw new NullPointerException();\n+        }\n         if (this.map == null) {\n             return null;\n         }",
                "raw_url": "https://github.com/apache/tomcat/raw/702fd3c53d45e3a8d7c4c860083e2fccb6344868/java/javax/el/ELContext.java",
                "sha": "014e802d4c259b4bd78b48fa5aed7fe3153a27af",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/tomcat/blob/702fd3c53d45e3a8d7c4c860083e2fccb6344868/test/javax/el/TestELContext.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/javax/el/TestELContext.java?ref=702fd3c53d45e3a8d7c4c860083e2fccb6344868",
                "deletions": 0,
                "filename": "test/javax/el/TestELContext.java",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package javax.el;\n+\n+import org.junit.Test;\n+\n+public class TestELContext {\n+\n+    /**\n+     * Tests that a null key results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testGetContext() {\n+        ELContext elContext = new TesterELContext();\n+        elContext.getContext(null);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/tomcat/raw/702fd3c53d45e3a8d7c4c860083e2fccb6344868/test/javax/el/TestELContext.java",
                "sha": "d59b19a5e46b738878505df81ea0a2c0605feb64",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/tomcat/blob/702fd3c53d45e3a8d7c4c860083e2fccb6344868/test/javax/el/TesterELContext.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/javax/el/TesterELContext.java?ref=702fd3c53d45e3a8d7c4c860083e2fccb6344868",
                "deletions": 0,
                "filename": "test/javax/el/TesterELContext.java",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package javax.el;\n+\n+public class TesterELContext extends ELContext {\n+\n+    @Override\n+    public ELResolver getELResolver() {\n+        return null;\n+    }\n+\n+    @Override\n+    public FunctionMapper getFunctionMapper() {\n+        return null;\n+    }\n+\n+    @Override\n+    public VariableMapper getVariableMapper() {\n+        return null;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/tomcat/raw/702fd3c53d45e3a8d7c4c860083e2fccb6344868/test/javax/el/TesterELContext.java",
                "sha": "c0fd1a2f7c1ddf2cac43c0f64463a1888da788ce",
                "status": "added"
            }
        ],
        "message": "Since EL 2.2 javadoc ELContext.getContext must throw NPE when the key that is provided in NULL.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499953 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/8e81e493c584bda010d071bfd254a79a06f4cc9f",
        "patched_files": [
            "ELContext.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestELContext.java",
            "TesterELContext.java"
        ]
    },
    "tomcat_70e6f4c": {
        "bug_id": "tomcat_70e6f4c",
        "commit": "https://github.com/apache/tomcat/commit/70e6f4c26fa3677dd19db8debd2d4282d80473e6",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/70e6f4c26fa3677dd19db8debd2d4282d80473e6/java/org/apache/catalina/core/LocalStrings.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/LocalStrings.properties?ref=70e6f4c26fa3677dd19db8debd2d4282d80473e6",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/LocalStrings.properties",
                "patch": "@@ -185,6 +185,7 @@ standardHost.noContext=No Context configured to process this request\n standardHost.notContext=Child of a Host must be a Context\n standardHost.nullName=Host name is required\n standardHost.problematicAppBase=Using an empty string for appBase on host [{0}] will set it to CATALINA_BASE, which is a bad idea\n+standardHostValue.customStatusFailed=Custom error page [{0}] could not be dispatched correctly\n standardServer.accept.timeout=The socket listening for the shutdown command experienced an unexpected timeout [{0}] milliseconds after the call to accept(). Is this an instance of bug 56684?\n standardServer.shutdownViaPort=A valid shutdown command was received via the shutdown port. Stopping the Server instance.\n standardServer.storeConfig.notAvailable=No StoreConfig implementation was registered as an MBean named [{0}] so no configuration could be saved. A suitable MBean is normally registered via the StoreConfigLifecyleListener.",
                "raw_url": "https://github.com/apache/tomcat/raw/70e6f4c26fa3677dd19db8debd2d4282d80473e6/java/org/apache/catalina/core/LocalStrings.properties",
                "sha": "6df94be23971c6ffb02a5abd6bb11bc886e078ca",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/70e6f4c26fa3677dd19db8debd2d4282d80473e6/java/org/apache/catalina/core/StandardHostValve.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardHostValve.java?ref=70e6f4c26fa3677dd19db8debd2d4282d80473e6",
                "deletions": 1,
                "filename": "java/org/apache/catalina/core/StandardHostValve.java",
                "patch": "@@ -231,7 +231,7 @@ private void status(Request request, Response response) {\n             // Look for a default error page\n             errorPage = context.findErrorPage(0);\n         }\n-        if (errorPage != null && response.setErrorReported()) {\n+        if (errorPage != null && response.isErrorReportRequired()) {\n             response.setAppCommitted(false);\n             request.setAttribute(RequestDispatcher.ERROR_STATUS_CODE,\n                               Integer.valueOf(statusCode));\n@@ -255,6 +255,7 @@ private void status(Request request, Response response) {\n             request.setAttribute(RequestDispatcher.ERROR_REQUEST_URI,\n                                  request.getRequestURI());\n             if (custom(request, response, errorPage)) {\n+                response.setErrorReported();\n                 try {\n                     response.finishResponse();\n                 } catch (ClientAbortException e) {\n@@ -379,6 +380,12 @@ private boolean custom(Request request, Response response,\n             RequestDispatcher rd =\n                 servletContext.getRequestDispatcher(errorPage.getLocation());\n \n+            if (rd == null) {\n+                container.getLogger().error(\n+                    sm.getString(\"standardHostValue.customStatusFailed\", errorPage.getLocation()));\n+                return false;\n+            }\n+\n             if (response.isCommitted()) {\n                 // Response is committed - including the error page is the\n                 // best we can do",
                "raw_url": "https://github.com/apache/tomcat/raw/70e6f4c26fa3677dd19db8debd2d4282d80473e6/java/org/apache/catalina/core/StandardHostValve.java",
                "sha": "d9384df51b67d19ebb7e87f3f2d9bcbf95432b2f",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58581\nIf custom error page fails, fall back to standard error page rather than throwing an NPE.\nBased on a patch by Huxing Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1712974 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/571dc79448655caa6fd1e809c9c603efc57098b1",
        "patched_files": [
            "StandardHostValve.java",
            "LocalStrings.properties"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardHostValve.java"
        ]
    },
    "tomcat_71b18c8": {
        "bug_id": "tomcat_71b18c8",
        "commit": "https://github.com/apache/tomcat/commit/71b18c88ad15a1754de63ce05a41371e587fd627",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/71b18c88ad15a1754de63ce05a41371e587fd627/java/org/apache/catalina/servlets/WebdavServlet.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/servlets/WebdavServlet.java?ref=71b18c88ad15a1754de63ce05a41371e587fd627",
                "deletions": 7,
                "filename": "java/org/apache/catalina/servlets/WebdavServlet.java",
                "patch": "@@ -1337,13 +1337,15 @@ protected void doLock(HttpServletRequest req, HttpServletResponse resp)\n             LockInfo toRenew = resourceLocks.get(path);\n             Enumeration<String> tokenList = null;\n \n-            // At least one of the tokens of the locks must have been given\n-            tokenList = toRenew.tokens.elements();\n-            while (tokenList.hasMoreElements()) {\n-                String token = tokenList.nextElement();\n-                if (ifHeader.indexOf(token) != -1) {\n-                    toRenew.expiresAt = lock.expiresAt;\n-                    lock = toRenew;\n+            if (toRenew != null) {\n+                // At least one of the tokens of the locks must have been given\n+                tokenList = toRenew.tokens.elements();\n+                while (tokenList.hasMoreElements()) {\n+                    String token = tokenList.nextElement();\n+                    if (ifHeader.indexOf(token) != -1) {\n+                        toRenew.expiresAt = lock.expiresAt;\n+                        lock = toRenew;\n+                    }\n                 }\n             }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/71b18c88ad15a1754de63ce05a41371e587fd627/java/org/apache/catalina/servlets/WebdavServlet.java",
                "sha": "d08dbd0207b2d76f9ef28e2dec898005cf6d3fbb",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/71b18c88ad15a1754de63ce05a41371e587fd627/webapps/docs/changelog.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=71b18c88ad15a1754de63ce05a41371e587fd627",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -85,6 +85,9 @@\n         <bug>51344</bug>: Fix problem with Lifecycle re-factoring for deprecated\n         embedded class that prevented events being triggered. (markt) \n       </fix>\n+      <fix>\n+        Prevent possible NPE when processing WebDAV locks. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/71b18c88ad15a1754de63ce05a41371e587fd627/webapps/docs/changelog.xml",
                "sha": "9545dcecf1d6c72dcce4376492ae69b7d70d4da4",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51348\nPrevent possible NPE when processing WebDAV locks.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1134048 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/4892b57de2aa75872c2f1203680e4da30468c8cb",
        "patched_files": [
            "WebdavServlet.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebdavServlet.java"
        ]
    },
    "tomcat_72627da": {
        "bug_id": "tomcat_72627da",
        "commit": "https://github.com/apache/tomcat/commit/72627da6afca2f54a8b205519a4f62f182d08910",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/72627da6afca2f54a8b205519a4f62f182d08910/java/org/apache/catalina/core/ApplicationContext.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationContext.java?ref=72627da6afca2f54a8b205519a4f62f182d08910",
                "deletions": 2,
                "filename": "java/org/apache/catalina/core/ApplicationContext.java",
                "patch": "@@ -690,9 +690,10 @@ public void removeAttribute(String name) {\n     @Override\n     public void setAttribute(String name, Object value) {\n         // Name cannot be null\n-        if (name == null)\n-            throw new IllegalArgumentException\n+        if (name == null) {\n+            throw new NullPointerException\n                 (sm.getString(\"applicationContext.setAttribute.namenull\"));\n+        }\n \n         // Null value is the same as removeAttribute()\n         if (value == null) {\n@@ -1053,6 +1054,11 @@ public void setSessionTrackingModes(Set<SessionTrackingMode> sessionTrackingMode\n \n     @Override\n     public boolean setInitParameter(String name, String value) {\n+        // Name cannot be null\n+        if (name == null) {\n+            throw new NullPointerException\n+                (sm.getString(\"applicationContext.setAttribute.namenull\"));\n+        }\n         if (!context.getState().equals(LifecycleState.STARTING_PREP)) {\n             throw new IllegalStateException(\n                     sm.getString(\"applicationContext.setInitParam.ise\",",
                "raw_url": "https://github.com/apache/tomcat/raw/72627da6afca2f54a8b205519a4f62f182d08910/java/org/apache/catalina/core/ApplicationContext.java",
                "sha": "09d611059dd3fac0f18ba7aefbc2a77c0751c9ce",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/72627da6afca2f54a8b205519a4f62f182d08910/webapps/docs/changelog.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=72627da6afca2f54a8b205519a4f62f182d08910",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -45,6 +45,13 @@\n   issues do not \"pop up\" wrt. others).\n -->\n <section name=\"Tomcat 9.0.3 (markt)\" rtext=\"in development\">\n+  <subsection name=\"Catalina\">\n+    <changelog>\n+      <fix>\n+        Add some missing NPEs to ServletContext. (remm)\n+      </fix>\n+    </changelog>\n+  </subsection>\n </section>\n <section name=\"Tomcat 9.0.2 (markt)\" rtext=\"release in progress\">\n   <subsection name=\"Catalina\">",
                "raw_url": "https://github.com/apache/tomcat/raw/72627da6afca2f54a8b205519a4f62f182d08910/webapps/docs/changelog.xml",
                "sha": "20bd47b00ef27436aee4861baac2db3d932c1bbe",
                "status": "modified"
            }
        ],
        "message": "Add NPEs to ServletContext to match the javadoc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1816541 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/a34bf2d74d0aaf78ea2027c68a5df0838f2bf514",
        "patched_files": [
            "changelog.xml",
            "ApplicationContext.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestApplicationContext.java"
        ]
    },
    "tomcat_7524163": {
        "bug_id": "tomcat_7524163",
        "commit": "https://github.com/apache/tomcat/commit/7524163c9d4ac865cbb71bbfe4119df788e2b663",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/7524163c9d4ac865cbb71bbfe4119df788e2b663/java/org/apache/catalina/core/StandardContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=7524163c9d4ac865cbb71bbfe4119df788e2b663",
                "deletions": 1,
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "patch": "@@ -5755,7 +5755,7 @@ protected ClassLoader bindThread() {\n         ClassLoader oldContextClassLoader =\n             Thread.currentThread().getContextClassLoader();\n \n-        if (getLoader().getClassLoader() != null) {\n+        if (getLoader() != null && getLoader().getClassLoader() != null) {\n             Thread.currentThread().setContextClassLoader\n                 (getLoader().getClassLoader());\n         }",
                "raw_url": "https://github.com/apache/tomcat/raw/7524163c9d4ac865cbb71bbfe4119df788e2b663/java/org/apache/catalina/core/StandardContext.java",
                "sha": "ceee4af447aa6a75bcc2e909e76eeb75f3a3ee05",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/7524163c9d4ac865cbb71bbfe4119df788e2b663/java/org/apache/catalina/webresources/StandardRoot.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=7524163c9d4ac865cbb71bbfe4119df788e2b663",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "patch": "@@ -486,7 +486,9 @@ protected void stopInternal() throws LifecycleException {\n             }\n         }\n \n-        main.destroy();\n+        if (main != null) {\n+            main.destroy();\n+        }\n         mainResources.clear();\n \n         for (WebResourceSet webResourceSet : jarResources) {",
                "raw_url": "https://github.com/apache/tomcat/raw/7524163c9d4ac865cbb71bbfe4119df788e2b663/java/org/apache/catalina/webresources/StandardRoot.java",
                "sha": "047783c0be32542cb60f028a39d3fa5deec040b4",
                "status": "modified"
            }
        ],
        "message": "Avoid NPEs when attempting to destroy contexts that failed to start.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1482602 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/43006577c9663ef078d517f611f0759d878b3804",
        "patched_files": [
            "StandardContext.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardContext.java"
        ]
    },
    "tomcat_77b1a50": {
        "bug_id": "tomcat_77b1a50",
        "commit": "https://github.com/apache/tomcat/commit/77b1a501e35f35947835ab83340fee437e0889ab",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/77b1a501e35f35947835ab83340fee437e0889ab/java/org/apache/juli/FileHandler.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/juli/FileHandler.java?ref=77b1a501e35f35947835ab83340fee437e0889ab",
                "deletions": 3,
                "filename": "java/org/apache/juli/FileHandler.java",
                "patch": "@@ -106,9 +106,13 @@\n \n                 {\n                     SecurityManager s = System.getSecurityManager();\n-                    this.isSecurityEnabled = s != null;\n-                    this.group = isSecurityEnabled ? s.getThreadGroup()\n-                            : Thread.currentThread().getThreadGroup();\n+                    if (s == null) {\n+                        this.isSecurityEnabled = false;\n+                        this.group = Thread.currentThread().getThreadGroup();\n+                    } else {\n+                        this.isSecurityEnabled = true;\n+                        this.group = s.getThreadGroup();\n+                    }\n                 }\n \n                 @Override",
                "raw_url": "https://github.com/apache/tomcat/raw/77b1a501e35f35947835ab83340fee437e0889ab/java/org/apache/juli/FileHandler.java",
                "sha": "b6a5d5e2dc0f9c100e03dc79ed75a5b412e11dd1",
                "status": "modified"
            }
        ],
        "message": "Refactor.\nIt is more verbose but it stops Eclipse complaining about a possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800202 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/93ae8bd2a6adf9f615bf14eca23e1ec406d777f6",
        "patched_files": [
            "FileHandler.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestFileHandler.java"
        ]
    },
    "tomcat_788126b": {
        "bug_id": "tomcat_788126b",
        "commit": "https://github.com/apache/tomcat/commit/788126b22629c843d487917d62530af106f428af",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/788126b22629c843d487917d62530af106f428af/java/javax/servlet/jsp/PageContext.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/servlet/jsp/PageContext.java?ref=788126b22629c843d487917d62530af106f428af",
                "deletions": 2,
                "filename": "java/javax/servlet/jsp/PageContext.java",
                "patch": "@@ -513,10 +513,18 @@ public BodyContent pushBody() {\n      * @since 2.0\n      */\n     public ErrorData getErrorData() {\n+        int status = 0;\n+        \n+        Integer status_code = (Integer)getRequest().getAttribute( \n+                \"javax.servlet.error.status_code\");\n+        // Avoid NPE if attribute is not set\n+        if (status_code != null) {\n+            status = status_code.intValue();\n+        }\n+\n         return new ErrorData( \n             (Throwable)getRequest().getAttribute( \"javax.servlet.error.exception\" ),\n-            ((Integer)getRequest().getAttribute( \n-                \"javax.servlet.error.status_code\" )).intValue(),\n+            status,\n             (String)getRequest().getAttribute( \"javax.servlet.error.request_uri\" ),\n             (String)getRequest().getAttribute( \"javax.servlet.error.servlet_name\" ) );\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/788126b22629c843d487917d62530af106f428af/java/javax/servlet/jsp/PageContext.java",
                "sha": "b3507fa7ff596be198368dbb58e92cf67a349125",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49196\nAvoid NPE on PageContext.getErrorData()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@948057 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/88adbcb0351ae276421d3f0631fcb1a649858bdf",
        "patched_files": [
            "PageContext.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestPageContext.java"
        ]
    },
    "tomcat_78ea65b": {
        "bug_id": "tomcat_78ea65b",
        "commit": "https://github.com/apache/tomcat/commit/78ea65bba2a03faa6c9cb5e081ce985920f2c929",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/78ea65bba2a03faa6c9cb5e081ce985920f2c929/java/org/apache/catalina/startup/WebappServiceLoader.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/WebappServiceLoader.java?ref=78ea65bba2a03faa6c9cb5e081ce985920f2c929",
                "deletions": 1,
                "filename": "java/org/apache/catalina/startup/WebappServiceLoader.java",
                "patch": "@@ -34,6 +34,7 @@\n import javax.servlet.ServletContext;\n \n import org.apache.catalina.Context;\n+import org.apache.tomcat.util.scan.JarFactory;\n \n /**\n  * A variation of Java's JAR ServiceLoader that respects exclusion rules for\n@@ -112,7 +113,7 @@ public WebappServiceLoader(Context context) {\n                 if (base.endsWith(\"/\")) {\n                     url = new URL(base + configFile);\n                 } else {\n-                    url = new URL(\"jar:\" + base + \"!/\" + configFile);\n+                    url = JarFactory.getJarEntryURL(jarUrl, configFile);\n                 }\n                 try {\n                     parseConfigFile(applicationServicesFound, url);",
                "raw_url": "https://github.com/apache/tomcat/raw/78ea65bba2a03faa6c9cb5e081ce985920f2c929/java/org/apache/catalina/startup/WebappServiceLoader.java",
                "sha": "03811a4eb23c9823e84f67624011375f13642a0c",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=58490\nFix NPE when searching for SCIs in case the web app is not extracted \n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1710134 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/0ab607c6c2ec33ccc209e4a938b7076837cd0459",
        "patched_files": [
            "WebappServiceLoader.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebappServiceLoader.java"
        ]
    },
    "tomcat_7952f97": {
        "bug_id": "tomcat_7952f97",
        "commit": "https://github.com/apache/tomcat/commit/7952f97e4b2cee0067e7cc01a60377256b2153e3",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/tomcat/blob/7952f97e4b2cee0067e7cc01a60377256b2153e3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=7952f97e4b2cee0067e7cc01a60377256b2153e3",
                "deletions": 12,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -25,6 +25,7 @@\n import javax.servlet.ReadListener;\n import javax.servlet.RequestDispatcher;\n import javax.servlet.SessionTrackingMode;\n+import javax.servlet.WriteListener;\n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.catalina.Context;\n@@ -313,14 +314,15 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n                 Throwable t = (Throwable)req.getAttribute(\n                         RequestDispatcher.ERROR_EXCEPTION);\n                 req.getAttributes().remove(RequestDispatcher.ERROR_EXCEPTION);\n-                if (req.getReadListener() != null) {\n+                ReadListener readListener = req.getReadListener();\n+                if (readListener != null) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n-                        req.getReadListener().onError(t);\n+                        readListener.onError(t);\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);\n                     }\n@@ -355,41 +357,42 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n \n             // Check to see if non-blocking writes or reads are being used\n             if (!request.isAsyncDispatching() && request.isAsync()) {\n-                if (res.getWriteListener() != null &&\n-                        status == SocketStatus.OPEN_WRITE) {\n+                WriteListener writeListener = res.getWriteListener();\n+                ReadListener readListener = req.getReadListener();\n+                if (writeListener != null && status == SocketStatus.OPEN_WRITE) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n                         res.onWritePossible();\n-                        if (request.isFinished() && req.sendAllDataReadEvent()) {\n-                            req.getReadListener().onAllDataRead();\n+                        if (request.isFinished() && req.sendAllDataReadEvent() &&\n+                                readListener != null) {\n+                            readListener.onAllDataRead();\n                         }\n                     } catch (Throwable t) {\n                         ExceptionUtils.handleThrowable(t);\n-                        res.getWriteListener().onError(t);\n+                        writeListener.onError(t);\n                         throw t;\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);\n                     }\n                     success = true;\n-                } else if (req.getReadListener() != null &&\n-                        status == SocketStatus.OPEN_READ) {\n+                } else if (readListener != null && status == SocketStatus.OPEN_READ) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n-                        req.getReadListener().onDataAvailable();\n+                        readListener.onDataAvailable();\n                         if (request.isFinished() && req.sendAllDataReadEvent()) {\n-                            req.getReadListener().onAllDataRead();\n+                            readListener.onAllDataRead();\n                         }\n                     } catch (Throwable t) {\n                         ExceptionUtils.handleThrowable(t);\n-                        req.getReadListener().onError(t);\n+                        readListener.onError(t);\n                         throw t;\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);",
                "raw_url": "https://github.com/apache/tomcat/raw/7952f97e4b2cee0067e7cc01a60377256b2153e3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "c59b5ffdbf48fdcef108e76cf5bda99fe3ead964",
                "status": "modified"
            }
        ],
        "message": "Avoid NPEs if asyncContext is completed by listener\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1545801 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/55a694ca6b475cc4f9f12cf8866cce6b7d48e804",
        "patched_files": [
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_7af96a2": {
        "bug_id": "tomcat_7af96a2",
        "commit": "https://github.com/apache/tomcat/commit/7af96a21715e6fc86c3727ed665c68d45240144d",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/7af96a21715e6fc86c3727ed665c68d45240144d/java/org/apache/jasper/compiler/Compiler.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Compiler.java?ref=7af96a21715e6fc86c3727ed665c68d45240144d",
                "deletions": 4,
                "filename": "java/org/apache/jasper/compiler/Compiler.java",
                "patch": "@@ -255,10 +255,12 @@ public void init(JspCompilationContext ctxt, JspServletWrapper jsw) {\n             // to be GC'd and save memory.\n             ctxt.setWriter(null);\n \n-            // Need to know if the JSP is an error page at runtime to determine\n-            // which HTTP methods are permitted. Error pages permit any. Normal\n-            // pages only permit GET, POST or HEAD.\n-            jsw.setErrorPage(pageInfo.isErrorPage());\n+            if (jsw != null) {\n+                // Need to know if the JSP is an error page at runtime to determine\n+                // which HTTP methods are permitted. Error pages permit any. Normal\n+                // pages only permit GET, POST or HEAD.\n+                jsw.setErrorPage(pageInfo.isErrorPage());\n+            }\n \n             if (log.isDebugEnabled()) {\n                 t4 = System.currentTimeMillis();",
                "raw_url": "https://github.com/apache/tomcat/raw/7af96a21715e6fc86c3727ed665c68d45240144d/java/org/apache/jasper/compiler/Compiler.java",
                "sha": "6d2182273ea420c83c5977ecf890f681c346a046",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when using JspC\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1620822 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/40378221b1824612beccb4940fd9d2315b275fbb",
        "patched_files": [
            "Compiler.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCompiler.java"
        ]
    },
    "tomcat_7bbef5a": {
        "bug_id": "tomcat_7bbef5a",
        "commit": "https://github.com/apache/tomcat/commit/7bbef5aa8a73cad65899995a39ca78cbce02e9e2",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/java/org/apache/catalina/realm/MemoryRealm.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/realm/MemoryRealm.java?ref=7bbef5aa8a73cad65899995a39ca78cbce02e9e2",
                "deletions": 1,
                "filename": "java/org/apache/catalina/realm/MemoryRealm.java",
                "patch": "@@ -113,7 +113,12 @@ public Principal authenticate(String username, String credentials) {\n \n         GenericPrincipal principal = principals.get(username);\n \n-        boolean validated = compareCredentials(credentials, principal.getPassword());\n+        boolean validated;\n+        if (principal == null) {\n+            validated = false;\n+        } else {\n+            validated = compareCredentials(credentials, principal.getPassword());\n+        }\n \n         if (validated) {\n             if (log.isDebugEnabled())",
                "raw_url": "https://github.com/apache/tomcat/raw/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/java/org/apache/catalina/realm/MemoryRealm.java",
                "sha": "52aad26752aebdbe7cfa91c5ae100fef9203433d",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/tomcat/blob/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/test/org/apache/catalina/realm/TestMemoryRealm.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/realm/TestMemoryRealm.java?ref=7bbef5aa8a73cad65899995a39ca78cbce02e9e2",
                "deletions": 0,
                "filename": "test/org/apache/catalina/realm/TestMemoryRealm.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+* Licensed to the Apache Software Foundation (ASF) under one or more\n+* contributor license agreements.  See the NOTICE file distributed with\n+* this work for additional information regarding copyright ownership.\n+* The ASF licenses this file to You under the Apache License, Version 2.0\n+* (the \"License\"); you may not use this file except in compliance with\n+* the License.  You may obtain a copy of the License at\n+*\n+*     http://www.apache.org/licenses/LICENSE-2.0\n+*\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+*/\n+package org.apache.catalina.realm;\n+\n+import java.security.Principal;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestMemoryRealm {\n+\n+    /**\n+     * Unknown user triggers NPE.\n+     */\n+    @Test\n+    public void testBug56246() {\n+        MemoryRealm memoryRealm = new MemoryRealm();\n+\n+        Principal p = memoryRealm.authenticate(\"foo\", \"bar\");\n+\n+        Assert.assertNull(p);\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomcat/raw/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/test/org/apache/catalina/realm/TestMemoryRealm.java",
                "sha": "27c1af172be84688fe0fdc9028623cefb3626dee",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=7bbef5aa8a73cad65899995a39ca78cbce02e9e2",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -108,6 +108,10 @@\n         Add methods of get the idle time from last client access time to\n         <code>org.apache.catalina.Session</code>. (kfujino)\n       </add>\n+      <fix>\n+        <bug>56246</bug>: Fix NullPointerException in MemoryRealm when\n+        authenticating an unknown user. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/7bbef5aa8a73cad65899995a39ca78cbce02e9e2/webapps/docs/changelog.xml",
                "sha": "22a882d50443f0e2c73afd58593fac90bc87315e",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56246\nFix NullPointerException in MemoryRealm when authenticating an unknown user.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1576768 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/c9473af059e62c0ea03bdc47d9203526b6c3cf95",
        "patched_files": [
            "MemoryRealm.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestMemoryRealm.java"
        ]
    },
    "tomcat_7c01898": {
        "bug_id": "tomcat_7c01898",
        "commit": "https://github.com/apache/tomcat/commit/7c018980950d39b12959adf37ff5175a4fc02bc5",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/7c018980950d39b12959adf37ff5175a4fc02bc5/java/org/apache/jasper/compiler/Validator.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Validator.java?ref=7c018980950d39b12959adf37ff5175a4fc02bc5",
                "deletions": 6,
                "filename": "java/org/apache/jasper/compiler/Validator.java",
                "patch": "@@ -652,6 +652,7 @@ public void visit(Node.UseBean n) throws JasperException {\n             visitBody(n);\n         }\n \n+        @SuppressWarnings(\"null\") // type can't be null after initial test\n         @Override\n         public void visit(Node.PlugIn n) throws JasperException {\n             JspUtil.checkAttributes(\"Plugin\", n, plugInAttrs, err);\n@@ -803,6 +804,7 @@ private boolean containsDeferredSyntax(String value) {\n             return false;\n         }\n \n+        @SuppressWarnings(\"null\") // tagInfo can't be null after initial test\n         @Override\n         public void visit(Node.CustomTag n) throws JasperException {\n \n@@ -1071,9 +1073,6 @@ private void checkXmlAttributes(Node.CustomTag n,\n                 throws JasperException {\n \n             TagInfo tagInfo = n.getTagInfo();\n-            if (tagInfo == null) {\n-                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n-            }\n             TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n             Attributes attrs = n.getAttributes();\n \n@@ -1279,9 +1278,6 @@ private void checkNamedAttributes(Node.CustomTag n,\n                 throws JasperException {\n \n             TagInfo tagInfo = n.getTagInfo();\n-            if (tagInfo == null) {\n-                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n-            }\n             TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n             Node.Nodes naNodes = n.getNamedAttributeNodes();\n \n@@ -1663,6 +1659,7 @@ public Method resolveFunction(String prefix, String localName) {\n                     this.fmapper = fmapper;\n                 }\n \n+                @SuppressWarnings(\"null\") // c can't be null after catch block\n                 @Override\n                 public void visit(ELNode.Function n) throws JasperException {\n \n@@ -1726,6 +1723,7 @@ public void visit(Node.CustomTag n) throws JasperException {\n                 err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n             }\n \n+            @SuppressWarnings(\"null\") // tagInfo can't be null here\n             ValidationMessage[] errors = tagInfo.validate(n.getTagData());\n             if (errors != null && errors.length != 0) {\n                 StringBuilder errMsg = new StringBuilder();",
                "raw_url": "https://github.com/apache/tomcat/raw/7c018980950d39b12959adf37ff5175a4fc02bc5/java/org/apache/jasper/compiler/Validator.java",
                "sha": "0d3a5ad6147a25c30dfaa0caa00dd2439389a929",
                "status": "modified"
            }
        ],
        "message": "Clean-up\n- fix false positive NPE warnings by removing redundant tests and suppressing remaining warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1380380 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/f557a283c4426f79f701d6b6a3946fa3d5d16585",
        "patched_files": [
            "Validator.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestValidator.java"
        ]
    },
    "tomcat_7f8fa74": {
        "bug_id": "tomcat_7f8fa74",
        "commit": "https://github.com/apache/tomcat/commit/7f8fa746e81fb3dd851a107717e37d519b922157",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/7f8fa746e81fb3dd851a107717e37d519b922157/java/org/apache/tomcat/util/http/Parameters.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/http/Parameters.java?ref=7f8fa746e81fb3dd851a107717e37d519b922157",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/util/http/Parameters.java",
                "patch": "@@ -122,6 +122,9 @@ public void addParameterValues( String key, String[] newValues) {\n         handleQueryParameters();\n         // no \"facade\"\n         ArrayList<String> values = paramHashValues.get(name);\n+        if (values == null) {\n+            return null;\n+        }\n         return values.toArray(new String[values.size()]);\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/7f8fa746e81fb3dd851a107717e37d519b922157/java/org/apache/tomcat/util/http/Parameters.java",
                "sha": "8270e1e55b213d46aa3979f2c2a2271290a5c577",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in parameter re-factoring identified by JSP TCK.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1190481 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/e06c7d5f6f6bc3c6401c95bebbd7abd20ace96e3",
        "patched_files": [
            "Parameters.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestParameters.java"
        ]
    },
    "tomcat_825fe2c": {
        "bug_id": "tomcat_825fe2c",
        "commit": "https://github.com/apache/tomcat/commit/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859/java/org/apache/jasper/servlet/TldScanner.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/servlet/TldScanner.java?ref=825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859",
                "deletions": 0,
                "filename": "java/org/apache/jasper/servlet/TldScanner.java",
                "patch": "@@ -391,6 +391,9 @@ public void scanWebInfClasses() throws IOException {\n             // IDEs.\n \n             Set<String> paths = context.getResourcePaths(WEB_INF + \"classes/META-INF\");\n+            if (paths == null) {\n+                return;\n+            }\n \n             for (String path : paths) {\n                 if (path.endsWith(TLD_EXT)) {",
                "raw_url": "https://github.com/apache/tomcat/raw/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859/java/org/apache/jasper/servlet/TldScanner.java",
                "sha": "f6c64b44cb1819947c550a2033e23367a438c21d",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859/webapps/docs/changelog.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -74,6 +74,14 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"Jasper\">\n+    <changelog>\n+      <fix>\n+        <bug>59567</bug>: Fix NPE scanning webapps for TLDs when an exploded\n+        JAR has an empty WEB-INF/classes/META-INF folder. (remm)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Other\">\n     <changelog>\n       <update>",
                "raw_url": "https://github.com/apache/tomcat/raw/825fe2cfa661d7e492b8e0d1cdd04dcc5ca31859/webapps/docs/changelog.xml",
                "sha": "2cc40f85dc4e68b936fca57f11560b485664c758",
                "status": "modified"
            }
        ],
        "message": "59567: Fix a rare NPE case scanning TLDs [if no files are found, then the return value of getResourcePaths is null, that is correct].\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1744432 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/05f900ca5ed7cbccb62ea76f703c391a89bf8358",
        "patched_files": [
            "TldScanner.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestTldScanner.java"
        ]
    },
    "tomcat_82d2c0e": {
        "bug_id": "tomcat_82d2c0e",
        "commit": "https://github.com/apache/tomcat/commit/82d2c0e07f6bb63604ba1af67f0858a4eca809b8",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tomcat/blob/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/java/org/apache/catalina/ha/context/ReplicatedContext.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/ha/context/ReplicatedContext.java?ref=82d2c0e07f6bb63604ba1af67f0858a4eca809b8",
                "deletions": 3,
                "filename": "java/org/apache/catalina/ha/context/ReplicatedContext.java",
                "patch": "@@ -83,13 +83,15 @@ protected synchronized void startInternal() throws LifecycleException {\n     @Override\n     protected synchronized void stopInternal() throws LifecycleException {\n \n+        Map<String, Object> map = ((ReplApplContext) this.context)\n+                .getAttributeMap();\n+\n         super.stopInternal();\n \n-        Map<String,Object> map =\n-                ((ReplApplContext)this.context).getAttributeMap();\n         if (map instanceof ReplicatedMap) {\n-            ((ReplicatedMap<?,?>)map).breakdown();\n+            ((ReplicatedMap<?, ?>) map).breakdown();\n         }\n+\n     }\n \n \n@@ -160,6 +162,13 @@ public void removeAttribute(String name) {\n \n         @Override\n         public void setAttribute(String name, Object value) {\n+            if (name == null) {\n+                throw new IllegalArgumentException(sm.getString(\"applicationContext.setAttribute.namenull\"));\n+            }\n+            if (value == null) {\n+                removeAttribute(name);\n+                return;\n+            }\n             if ( (!getParent().getState().isAvailable()) || \"org.apache.jasper.runtime.JspApplicationContextImpl\".equals(name) ){\n                 tomcatAttributes.put(name,value);\n             } else",
                "raw_url": "https://github.com/apache/tomcat/raw/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/java/org/apache/catalina/ha/context/ReplicatedContext.java",
                "sha": "c0b5bb5c4d9e4926c7a0f49c66be1e2409160390",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/tomcat/blob/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/test/org/apache/catalina/ha/context/TestReplicatedContext.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/ha/context/TestReplicatedContext.java?ref=82d2c0e07f6bb63604ba1af67f0858a4eca809b8",
                "deletions": 0,
                "filename": "test/org/apache/catalina/ha/context/TestReplicatedContext.java",
                "patch": "@@ -0,0 +1,56 @@\n+package org.apache.catalina.ha.context;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.apache.catalina.Context;\n+import org.apache.catalina.Host;\n+import org.apache.catalina.LifecycleException;\n+import org.apache.catalina.core.StandardHost;\n+import org.apache.catalina.startup.Tomcat;\n+import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.tomcat.util.buf.ByteChunk;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class TestReplicatedContext extends TomcatBaseTest {\n+\n+    @Test\n+    public void testBug57425() throws LifecycleException, IOException, ServletException {\n+        Tomcat tomcat = getTomcatInstance();\n+        Host host = tomcat.getHost();\n+        if (host instanceof StandardHost) {\n+            ((StandardHost) host).setContextClass(ReplicatedContext.class.getName());\n+        }\n+\n+        File root = new File(\"test/webapp\");\n+        Context context = tomcat.addWebapp(host, \"\", \"\", root.getAbsolutePath());\n+\n+        Tomcat.addServlet(context, \"test\", new AccessContextServlet());\n+        context.addServletMapping(\"/access\", \"test\");\n+\n+        tomcat.start();\n+\n+        ByteChunk result = getUrl(\"http://localhost:\" + getPort() + \"/access\");\n+\n+        Assert.assertEquals(\"OK\", result.toString());\n+\n+    }\n+\n+    private static class AccessContextServlet extends HttpServlet {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        @Override\n+        protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+                throws ServletException, IOException {\n+            getServletContext().setAttribute(\"NULL\", null);\n+            resp.getWriter().print(\"OK\");\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomcat/raw/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/test/org/apache/catalina/ha/context/TestReplicatedContext.java",
                "sha": "ab0c978e4961bb7fb2a9079b4cd3779effc4459b",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/webapps/docs/changelog.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=82d2c0e07f6bb63604ba1af67f0858a4eca809b8",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -62,6 +62,9 @@\n   </subsection>\n   <subsection name=\"Catalina\">\n     <changelog>\n+      <fix>\n+        <bug>57425</bug> Don't add attributes with null value or name to the replicated context. (fschumacher)\n+      </fix>\n       <add>\n         <bug>57431</bug> Enable usage of custom class for context creation when using embedded tomcat. (fschumacher)\n       </add>",
                "raw_url": "https://github.com/apache/tomcat/raw/82d2c0e07f6bb63604ba1af67f0858a4eca809b8/webapps/docs/changelog.xml",
                "sha": "fa620e170e9c0fe57548701b7069d3ce7ffd9a31",
                "status": "modified"
            }
        ],
        "message": "Don't add orderedLibs attribute if it is null.\nReplicatedContext will fail otherwise.\n\nAvoid NPE on shutdown of ReplicatedContext.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1651120 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/498216a7eb36ccb4b2bd225465e19897db230c48",
        "patched_files": [
            "ReplicatedContext.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestReplicatedContext.java"
        ]
    },
    "tomcat_82dd643": {
        "bug_id": "tomcat_82dd643",
        "commit": "https://github.com/apache/tomcat/commit/82dd643d8c48b87bd847641bbfdc7f443cd993ad",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomcat/blob/82dd643d8c48b87bd847641bbfdc7f443cd993ad/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/DefaultInstanceManager.java?ref=82dd643d8c48b87bd847641bbfdc7f443cd993ad",
                "deletions": 5,
                "filename": "java/org/apache/catalina/core/DefaultInstanceManager.java",
                "patch": "@@ -423,11 +423,6 @@ protected void populateAnnotationsCache(Class<?> clazz,\n                             new WeakReference<List<AnnotationCacheEntry>>(\n                                     annotations));\n                 }\n-            } else {\n-                // If the annotations for this class have been cached, the\n-                // annotations for all the super classes will have been cachced\n-                // as well\n-                break;\n             }\n             clazz = clazz.getSuperclass();\n         }",
                "raw_url": "https://github.com/apache/tomcat/raw/82dd643d8c48b87bd847641bbfdc7f443cd993ad/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "sha": "eaac06f76936b5d27e37ac7727e42ee140deaf3b",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52042\nCorrect threading issue in annotation caching that could lead to an\nNPE if multiple threads were processing the same class hierarchy for\nannotations\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1186042 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/1aa53d0ffa4ca233fa32e3c48812756fde69e7a5",
        "patched_files": [
            "DefaultInstanceManager.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestDefaultInstanceManager.java"
        ]
    },
    "tomcat_83239f1": {
        "bug_id": "tomcat_83239f1",
        "commit": "https://github.com/apache/tomcat/commit/83239f1f0af63c480bb168b29afe27ecaa3a4415",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/83239f1f0af63c480bb168b29afe27ecaa3a4415/java/org/apache/coyote/Response.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/Response.java?ref=83239f1f0af63c480bb168b29afe27ecaa3a4415",
                "deletions": 4,
                "filename": "java/org/apache/coyote/Response.java",
                "patch": "@@ -464,11 +464,14 @@ public void setContentType(String type) {\n \n         this.contentType = m.toStringNoCharset();\n \n-        String charsetValue = m.getCharset().trim();\n+        String charsetValue = m.getCharset();\n \n-        if (charsetValue != null && charsetValue.length() > 0) {\n-            charsetSet = true;\n-            this.characterEncoding = charsetValue;\n+        if (charsetValue != null) {\n+            charsetValue = charsetValue.trim();\n+            if (charsetValue.length() > 0) {\n+                charsetSet = true;\n+                this.characterEncoding = charsetValue;\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/83239f1f0af63c480bb168b29afe27ecaa3a4415/java/org/apache/coyote/Response.java",
                "sha": "b2eca8fe7ffa9fa5fc9d4575a156893ae8f8cc38",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1552804 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/bdfb26a3586536c9921aa22d1bc183a3a07dc950",
        "patched_files": [
            "Response.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestResponse.java"
        ]
    },
    "tomcat_8353b96": {
        "bug_id": "tomcat_8353b96",
        "commit": "https://github.com/apache/tomcat/commit/8353b96e2b252484389f3de74c2fc34c7f056e7d",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/8353b96e2b252484389f3de74c2fc34c7f056e7d/test/org/apache/coyote/http11/upgrade/TestUpgrade.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/coyote/http11/upgrade/TestUpgrade.java?ref=8353b96e2b252484389f3de74c2fc34c7f056e7d",
                "deletions": 1,
                "filename": "test/org/apache/coyote/http11/upgrade/TestUpgrade.java",
                "patch": "@@ -132,12 +132,15 @@ private UpgradeConnection doUpgrade(\n \n         String status = reader.readLine();\n \n+        Assert.assertNotNull(status);\n         Assert.assertEquals(\"HTTP/1.1 101 Switching Protocols\",\n                 status.substring(0, 32));\n \n         // Skip the remaining response headers\n-        while (reader.readLine().length() > 0) {\n+        String line = reader.readLine();\n+        while (line != null && line.length() > 0) {\n             // Skip\n+            line = reader.readLine();\n         }\n \n         return new UpgradeConnection(writer, reader);",
                "raw_url": "https://github.com/apache/tomcat/raw/8353b96e2b252484389f3de74c2fc34c7f056e7d/test/org/apache/coyote/http11/upgrade/TestUpgrade.java",
                "sha": "f01730925feb2e1abce3670b8cc67e6fad74ad76",
                "status": "modified"
            }
        ],
        "message": "FindBugs - avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1434735 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/1777669b9a0595dde2b0fae7a1b6f3669c2d53cc",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TestUpgrade.java"
        ]
    },
    "tomcat_860a0e6": {
        "bug_id": "tomcat_860a0e6",
        "commit": "https://github.com/apache/tomcat/commit/860a0e6dde5639dba70d53fa706b8dc65340c902",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/860a0e6dde5639dba70d53fa706b8dc65340c902/java/org/apache/catalina/core/AsyncContextImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=860a0e6dde5639dba70d53fa706b8dc65340c902",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "patch": "@@ -123,6 +123,8 @@ public void fireOnComplete() {\n     public boolean timeout() {\n         AtomicBoolean result = new AtomicBoolean();\n         request.getCoyoteRequest().action(ActionCode.ASYNC_TIMEOUT, result);\n+        // Avoids NPEs during shutdown. A call to recycle will null this field.\n+        Context context = this.context;\n \n         if (result.get()) {\n             ClassLoader oldCL = context.bind(false, null);",
                "raw_url": "https://github.com/apache/tomcat/raw/860a0e6dde5639dba70d53fa706b8dc65340c902/java/org/apache/catalina/core/AsyncContextImpl.java",
                "sha": "16cb8f21e7f41bb3de44f46d1951287bc391fd69",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/860a0e6dde5639dba70d53fa706b8dc65340c902/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=860a0e6dde5639dba70d53fa706b8dc65340c902",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -78,6 +78,10 @@\n         <code>javax.security.auth.message.config.AuthConfigFactory</code> in the\n         JASPIC API implementation. Based on a patch by Pavan Kumar. (markt)\n       </fix>\n+      <fix>\n+        Avoid a possible <code>NullPointerException</code> when timing out\n+        <code>AsyncContext</code> instances during shut down. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/860a0e6dde5639dba70d53fa706b8dc65340c902/webapps/docs/changelog.xml",
                "sha": "d52a3d12f5c79c6c2a84b6e90ccf6137fa04c680",
                "status": "modified"
            }
        ],
        "message": "Avoid a possible NullPointerException when timing out AsyncContext instances during shut down.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815505 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/badf6363c5eca4e313323f50789c0eec7e1c625e",
        "patched_files": [
            "AsyncContextImpl.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAsyncContextImpl.java"
        ]
    },
    "tomcat_8733b98": {
        "bug_id": "tomcat_8733b98",
        "commit": "https://github.com/apache/tomcat/commit/8733b9835f17219048d3e51c0318a36400929476",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/8733b9835f17219048d3e51c0318a36400929476/java/org/apache/catalina/core/AsyncContextImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=8733b9835f17219048d3e51c0318a36400929476",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "patch": "@@ -407,6 +407,10 @@ public void setErrorState(Throwable t, boolean fireOnError) {\n         if (result.get()) {\n             // No listener called dispatch() or complete(). This is an error.\n             // SRV.2.3.3.3 (search for \"error dispatch\")\n+            // Take a local copy to avoid threading issues if another thread\n+            // clears this (can happen during error handling with non-container\n+            // threads)\n+            ServletResponse servletResponse = this.servletResponse;\n             if (servletResponse instanceof HttpServletResponse) {\n                 ((HttpServletResponse) servletResponse).setStatus(\n                         HttpServletResponse.SC_INTERNAL_SERVER_ERROR);",
                "raw_url": "https://github.com/apache/tomcat/raw/8733b9835f17219048d3e51c0318a36400929476/java/org/apache/catalina/core/AsyncContextImpl.java",
                "sha": "522768535cbb3dd2c074390bf176a723b81bcb71",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE during non-container thread error handling\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1799916 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/7702811772709abdcb9b4c2107f9bfacec78de90",
        "patched_files": [
            "AsyncContextImpl.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAsyncContextImpl.java"
        ]
    },
    "tomcat_8745b96": {
        "bug_id": "tomcat_8745b96",
        "commit": "https://github.com/apache/tomcat/commit/8745b9677b78920dd24e8bc09a688effc816d582",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/8745b9677b78920dd24e8bc09a688effc816d582/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=8745b9677b78920dd24e8bc09a688effc816d582",
                "deletions": 4,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -426,10 +426,12 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n             if (!request.isAsync() && !comet) {\n                 request.finishRequest();\n                 response.finishResponse();\n-                request.getMappingData().context.logAccess(\n-                        request, response,\n-                        System.currentTimeMillis() - req.getStartTime(),\n-                        false);\n+                if (request.getMappingData().context != null) {\n+                    request.getMappingData().context.logAccess(\n+                            request, response,\n+                            System.currentTimeMillis() - req.getStartTime(),\n+                            false);\n+                }\n             }\n \n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/tomcat/raw/8745b9677b78920dd24e8bc09a688effc816d582/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "296a7cb3b664bf8dba6b9d6725526462da6c0e48",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1574167 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/1984c834e6b577a0a33a22da2d2c4e75f24c2005",
        "patched_files": [
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_8953fc3": {
        "bug_id": "tomcat_8953fc3",
        "commit": "https://github.com/apache/tomcat/commit/8953fc375e00efad97d64a73116c912766828ae7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/JspUtil.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/JspUtil.java?ref=8953fc375e00efad97d64a73116c912766828ae7",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/JspUtil.java",
                "patch": "@@ -119,6 +119,7 @@ public static void checkAttributes(String typeOfTag, Node n,\n         int tempLength = (attrs == null) ? 0 : attrs.getLength();\n         Vector<String> temp = new Vector<String>(tempLength, 1);\n         for (int i = 0; i < tempLength; i++) {\n+            @SuppressWarnings(\"null\")  // If attrs==null, tempLength == 0\n             String qName = attrs.getQName(i);\n             if ((!qName.equals(\"xmlns\")) && (!qName.startsWith(\"xmlns:\")))\n                 temp.addElement(qName);",
                "raw_url": "https://github.com/apache/tomcat/raw/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/JspUtil.java",
                "sha": "1383f16d3d109da1c02a96a59a2d3ad1e97e6079",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/PageDataImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/PageDataImpl.java?ref=8953fc375e00efad97d64a73116c912766828ae7",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/PageDataImpl.java",
                "patch": "@@ -510,6 +510,7 @@ private void appendPageDirective(Node.PageDirective n) {\n             Attributes attrs = n.getAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (!\"pageEncoding\".equals(attrName)\n                         && !\"contentType\".equals(attrName)) {\n@@ -530,6 +531,7 @@ private void appendPageDirective(Node.PageDirective n) {\n \n             // append remaining attributes\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (\"import\".equals(attrName) || \"contentType\".equals(attrName)\n                         || \"pageEncoding\".equals(attrName)) {\n@@ -601,6 +603,7 @@ private void appendTagDirective(Node.TagDirective n)\n             Attributes attrs = n.getAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (!\"pageEncoding\".equals(attrName)) {\n                     append = true;\n@@ -696,6 +699,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             Attributes attrs = n.getTaglibAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\").append(value).append(\"\\\"\\n\");\n@@ -708,6 +712,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             len = (attrs == null) ? 0 : attrs.getLength();\n             boolean defaultNSSeen = false;\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\").append(value).append(\"\\\"\\n\");\n@@ -724,6 +729,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             attrs = n.getAttributes();\n             len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\");",
                "raw_url": "https://github.com/apache/tomcat/raw/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/PageDataImpl.java",
                "sha": "665d74393d9042d9ef8be44f36a455bb7734a8b2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/Validator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/Validator.java?ref=8953fc375e00efad97d64a73116c912766828ae7",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/Validator.java",
                "patch": "@@ -896,6 +896,7 @@ public void visit(Node.JspElement n) throws JasperException {\n             if (attrs == null) {\n                 err.jspError(n, \"jsp.error.jspelement.missing.name\");\n             }\n+            @SuppressWarnings(\"null\") // Exception will have been thrown above\n             int xmlAttrLen = attrs.getLength();\n \n             Node.Nodes namedAttrs = n.getNamedAttributeNodes();",
                "raw_url": "https://github.com/apache/tomcat/raw/8953fc375e00efad97d64a73116c912766828ae7/java/org/apache/jasper/compiler/Validator.java",
                "sha": "ce6ee9f3b9f9a41b5cbabd0ec743d376328cdbd6",
                "status": "modified"
            }
        ],
        "message": "Fix some false npe warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1154579 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/7be73e4ea17e68bb455177c9a1c1f32844c0feb7",
        "patched_files": [
            "Validator.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestValidator.java"
        ]
    },
    "tomcat_8b03dcf": {
        "bug_id": "tomcat_8b03dcf",
        "commit": "https://github.com/apache/tomcat/commit/8b03dcf4b400bd36314fcc8004fa74228b02990a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/8b03dcf4b400bd36314fcc8004fa74228b02990a/java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/http/parser/HttpParser.java?ref=8b03dcf4b400bd36314fcc8004fa74228b02990a",
                "deletions": 3,
                "filename": "java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "patch": "@@ -208,11 +208,13 @@ public static MediaType parseMediaType(StringReader input)\n         while (lookForSemiColon == SkipConstantResult.FOUND) {\n             String attribute = readToken(input);\n \n+            String value = \"\";\n             if (skipConstant(input, \"=\") == SkipConstantResult.FOUND) {\n-                String value = readTokenOrQuotedString(input, true);\n+                value = readTokenOrQuotedString(input, true);\n+            }\n+\n+            if (attribute != null) {\n                 parameters.put(attribute.toLowerCase(Locale.ENGLISH), value);\n-            } else {\n-                parameters.put(attribute.toLowerCase(Locale.ENGLISH), \"\");\n             }\n \n             lookForSemiColon = skipConstant(input, \";\");",
                "raw_url": "https://github.com/apache/tomcat/raw/8b03dcf4b400bd36314fcc8004fa74228b02990a/java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "sha": "69654048060c2d3872049a646932ad002f5e3c49",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/tomcat/blob/8b03dcf4b400bd36314fcc8004fa74228b02990a/test/org/apache/tomcat/util/http/parser/TestMediaType.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/http/parser/TestMediaType.java?ref=8b03dcf4b400bd36314fcc8004fa74228b02990a",
                "deletions": 0,
                "filename": "test/org/apache/tomcat/util/http/parser/TestMediaType.java",
                "patch": "@@ -212,6 +212,25 @@ public void testBug53353() throws IOException {\n     }\n \n \n+    @Test\n+    public void testBug55454() throws IOException {\n+        String input = \"text/html;;charset=UTF-8\";\n+\n+        StringReader sr = new StringReader(input);\n+        MediaType m = HttpParser.parseMediaType(sr);\n+\n+        assertEquals(\"text\", m.getType());\n+        assertEquals(\"html\", m.getSubtype());\n+\n+        assertTrue(m.getParameterCount() == 1);\n+\n+        assertEquals(\"UTF-8\", m.getParameterValue(\"charset\"));\n+        assertEquals(\"UTF-8\", m.getCharset());\n+\n+        assertEquals(\"text/html; charset=UTF-8\", m.toString());\n+    }\n+\n+\n     private void doTest(Parameter... parameters) throws IOException {\n         for (String lws : LWS_VALUES) {\n             doTest(lws, parameters);",
                "raw_url": "https://github.com/apache/tomcat/raw/8b03dcf4b400bd36314fcc8004fa74228b02990a/test/org/apache/tomcat/util/http/parser/TestMediaType.java",
                "sha": "b564ed8afa327430cdb919d8ec196a78bab1a500",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55454\nFixed NPE thrown when parsing an invalid content type.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1515841 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/03aa4334d67cc44cf4ff95efb7a6d5ef73c075f1",
        "patched_files": [
            "MediaType.java",
            "HttpParser.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestMediaType.java"
        ]
    },
    "tomcat_8c0b14b": {
        "bug_id": "tomcat_8c0b14b",
        "commit": "https://github.com/apache/tomcat/commit/8c0b14bff2887dcfd5306991eadc1e31378d08b3",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/8c0b14bff2887dcfd5306991eadc1e31378d08b3/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=8c0b14bff2887dcfd5306991eadc1e31378d08b3",
                "deletions": 2,
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "patch": "@@ -190,8 +190,12 @@ public Session connectToServer(Object pojo, URI path)\n             }\n         }\n \n-        ClientEndpointConfig config = ClientEndpointConfig.Builder.create().\n-                configurator(configurator).\n+        ClientEndpointConfig.Builder builder = ClientEndpointConfig.Builder.create();\n+        // Avoid NPE when using RI API JAR - see BZ 56343\n+        if (configurator != null) {\n+            builder.configurator(configurator);\n+        }\n+        ClientEndpointConfig config = builder.\n                 decoders(Arrays.asList(annotation.decoders())).\n                 encoders(Arrays.asList(annotation.encoders())).\n                 build();",
                "raw_url": "https://github.com/apache/tomcat/raw/8c0b14bff2887dcfd5306991eadc1e31378d08b3/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "sha": "8d099367c75fceb5ba77fece996007e6080e819b",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/8c0b14bff2887dcfd5306991eadc1e31378d08b3/webapps/docs/changelog.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=8c0b14bff2887dcfd5306991eadc1e31378d08b3",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -138,6 +138,15 @@\n       </fix>\n     </changelog>\n   </subsection>\n+  <subsection name=\"WebSocket\">\n+    <changelog>\n+      <fix>\n+        <bug>56343</bug>: Avoid a NPE if Tomcat&apos;s Java WebSocket 1.0\n+        implementation is used with the Java WebSocket 1.0 API JAR from the\n+        reference implementation. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Web applications\">\n     <changelog>\n       <fix>",
                "raw_url": "https://github.com/apache/tomcat/raw/8c0b14bff2887dcfd5306991eadc1e31378d08b3/webapps/docs/changelog.xml",
                "sha": "a3f18a11f9e8b3b84a5585c01460fc289f8dc5f7",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56343\nAvoid NPE if WebSocket API JAR from RI is used.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1584922 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/8c53cd705a4ae79b5e44249b3d4e2a78286592cb",
        "patched_files": [
            "WsWebSocketContainer.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWsWebSocketContainer.java"
        ]
    },
    "tomcat_8c31663": {
        "bug_id": "tomcat_8c31663",
        "commit": "https://github.com/apache/tomcat/commit/8c3166364f9c5f40b0325a29db739e439ea8d3e5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/8c3166364f9c5f40b0325a29db739e439ea8d3e5/test/org/apache/catalina/core/TestDefaultInstanceManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestDefaultInstanceManager.java?ref=8c3166364f9c5f40b0325a29db739e439ea8d3e5",
                "deletions": 0,
                "filename": "test/org/apache/catalina/core/TestDefaultInstanceManager.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.catalina.Wrapper;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.jasper.servlet.JasperInitializer;\n \n \n public class TestDefaultInstanceManager extends TomcatBaseTest {\n@@ -73,6 +74,8 @@ private DefaultInstanceManager doClassUnloadingPrep() throws Exception {\n         StandardContext ctxt = (StandardContext) tomcat.addContext(\n                 null, \"/test\", appDir.getAbsolutePath());\n \n+        ctxt.addServletContainerInitializer(new JasperInitializer(), null);\n+\n         // Configure the defaults and then tweak the JSP servlet settings\n         // Note: Min value for maxLoadedJsps is 2\n         Tomcat.initWebappDefaults(ctxt);",
                "raw_url": "https://github.com/apache/tomcat/raw/8c3166364f9c5f40b0325a29db739e439ea8d3e5/test/org/apache/catalina/core/TestDefaultInstanceManager.java",
                "sha": "c5c37b6376fec08c89c58bcf49f21cfec0c3cefc",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs in test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1553605 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/8aa1bcd0e555ae1df9c174661e0c8d9b60a35ca2",
        "patched_files": [
            "DefaultInstanceManager.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestDefaultInstanceManager.java"
        ]
    },
    "tomcat_8d0f87b": {
        "bug_id": "tomcat_8d0f87b",
        "commit": "https://github.com/apache/tomcat/commit/8d0f87b8b1050a7d3957ac8d12fef527393383fc",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/8d0f87b8b1050a7d3957ac8d12fef527393383fc/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=8d0f87b8b1050a7d3957ac8d12fef527393383fc",
                "deletions": 4,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -375,7 +375,8 @@ public void service(org.apache.coyote.Request req,\n             // Parse and set Catalina and configuration specific \n             // request parameters\n             req.getRequestProcessor().setWorkerThreadName(Thread.currentThread().getName());\n-            if (postParseRequest(req, request, res, response)) {\n+            boolean postParseSuccess = postParseRequest(req, request, res, response);\n+            if (postParseSuccess) {\n                 //check valves if we support async\n                 request.setAsyncSupported(connector.getService().getContainer().getPipeline().isAsyncSupported());\n                 // Calling the container\n@@ -406,9 +407,14 @@ public void service(org.apache.coyote.Request req,\n                 async = true;\n             } else if (!comet) {\n                 response.finishResponse();\n-                ((Context) request.getMappingData().context).logAccess(request,\n-                        response,\n-                        System.currentTimeMillis() - req.getStartTime(), false);\n+                if (postParseSuccess) {\n+                    // Log only if processing was invoked.\n+                    // If postParseRequest() failed, it has already logged it.\n+                    ((Context) request.getMappingData().context).logAccess(\n+                            request, response,\n+                            System.currentTimeMillis() - req.getStartTime(),\n+                            false);\n+                }\n                 req.action(ActionCode.POST_REQUEST , null);\n             }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/8d0f87b8b1050a7d3957ac8d12fef527393383fc/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "153788f91449be1349457c63c925f30a8e21ee6b",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/8d0f87b8b1050a7d3957ac8d12fef527393383fc/webapps/docs/changelog.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=8d0f87b8b1050a7d3957ac8d12fef527393383fc",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -41,6 +41,15 @@\n <!--\n   General, Catalina, Coyote, Jasper, Cluster, Web applications, Extras, Other\n -->\n+<section name=\"Tomcat 7.0.8 (markt)\">\n+  <subsection name=\"Catalina\">\n+    <changelog>\n+      <fix>\n+        Fix NPE in CoyoteAdapter when postParseRequest() call fails. (kkolinko)\n+      </fix>\n+    </changelog>\n+  </subsection>\n+</section>\n <section name=\"Tomcat 7.0.7 (markt)\">\n   <subsection name=\"Catalina\">\n     <changelog>",
                "raw_url": "https://github.com/apache/tomcat/raw/8d0f87b8b1050a7d3957ac8d12fef527393383fc/webapps/docs/changelog.xml",
                "sha": "c0f994d8d5e44c83186a8e2b3015e847b37fb76b",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in CoyoteAdapter when postParseRequest() call fails.\n\nThat was caused by mappingData.context being null.\nThis NPE occurence in 7.0.7 was reported on the users list.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1067072 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/56c576fcfb35de2d2ea79b15187e131a243b6606",
        "patched_files": [
            "changelog.xml",
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_8d51578": {
        "bug_id": "tomcat_8d51578",
        "commit": "https://github.com/apache/tomcat/commit/8d5157897bac61a127255eca343e8b338c3df817",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/8d5157897bac61a127255eca343e8b338c3df817/java/org/apache/tomcat/websocket/Util.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/Util.java?ref=8d5157897bac61a127255eca343e8b338c3df817",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/Util.java",
                "patch": "@@ -207,6 +207,10 @@ static CloseCode getCloseCode(int code) {\n         @SuppressWarnings(\"unchecked\")\n         Class<? extends T> superClazz =\n                 (Class<? extends T>) clazz.getSuperclass();\n+        if (superClazz == null) {\n+            // Finished looking up the class hierarchy without finding anything\n+            return null;\n+        }\n \n         TypeResult superClassTypeResult = getGenericType(type, superClazz);\n         int dimension = superClassTypeResult.getDimension();",
                "raw_url": "https://github.com/apache/tomcat/raw/8d5157897bac61a127255eca343e8b338c3df817/java/org/apache/tomcat/websocket/Util.java",
                "sha": "b304c82c944310f3d09b77dd10ecef67464e9e0a",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=57788\n57788: Avoid NPE if nothing is found after going through the whole class hierarchy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1672628 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/5b44ac56c385cac48f0414b8179df7e6cf939199",
        "patched_files": [
            "Util.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestUtil.java"
        ]
    },
    "tomcat_8fdcf63": {
        "bug_id": "tomcat_8fdcf63",
        "commit": "https://github.com/apache/tomcat/commit/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8/java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/BackgroundProcessManager.java?ref=8fdcf63f22ea84ee499bb9fe519e5d4690a950c8",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "patch": "@@ -71,7 +71,7 @@ public void register(BackgroundProcess process) {\n     public void unregister(BackgroundProcess process) {\n         synchronized (processesLock) {\n             processes.remove(process);\n-            if (processes.size() == 0) {\n+            if (wsBackgroundThread != null && processes.size() == 0) {\n                 wsBackgroundThread.halt();\n                 wsBackgroundThread = null;\n             }",
                "raw_url": "https://github.com/apache/tomcat/raw/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8/java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "sha": "ccb6d868b77052ae0be5a2621a08760585bff352",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=8fdcf63f22ea84ee499bb9fe519e5d4690a950c8",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "patch": "@@ -256,6 +256,10 @@ public Session connectToServer(Endpoint endpoint,\n \n \n     protected void registerSession(Class<?> endpoint, WsSession wsSession) {\n+        if (!wsSession.isOpen()) {\n+            // The session was closed during onOpen. No need to register it.\n+            return;\n+        }\n         synchronized (endPointSessionMapLock) {\n             if (endpointSessionMap.size() == 0) {\n                 BackgroundProcessManager.getInstance().register(this);",
                "raw_url": "https://github.com/apache/tomcat/raw/8fdcf63f22ea84ee499bb9fe519e5d4690a950c8/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "sha": "b7ff5d6f5fb239276aba824d9b5b0ffb4f9b4623",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54716\nAdditional fix. Avoid NPE on session de-registration.\nBased on a patch by Nick Williams.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1458484 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/12f89ffd9121dd6ffb9d8f56e979bc8e9a715e04",
        "patched_files": [
            "WsWebSocketContainer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWsWebSocketContainer.java"
        ]
    },
    "tomcat_92567fd": {
        "bug_id": "tomcat_92567fd",
        "commit": "https://github.com/apache/tomcat/commit/92567fd01d590f4885bccbf600d9e2c0e28c7e44",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/92567fd01d590f4885bccbf600d9e2c0e28c7e44/java/org/apache/catalina/connector/Request.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=92567fd01d590f4885bccbf600d9e2c0e28c7e44",
                "deletions": 4,
                "filename": "java/org/apache/catalina/connector/Request.java",
                "patch": "@@ -994,10 +994,12 @@ private Charset getCharset() {\n         Context context = getContext();\n         if (context != null) {\n             String encoding = context.getRequestCharacterEncoding();\n-            try {\n-                return B2CConverter.getCharset(encoding);\n-            } catch (UnsupportedEncodingException e) {\n-                // Ignore\n+            if (encoding != null) {\n+                try {\n+                    return B2CConverter.getCharset(encoding);\n+                } catch (UnsupportedEncodingException e) {\n+                    // Ignore\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/92567fd01d590f4885bccbf600d9e2c0e28c7e44/java/org/apache/catalina/connector/Request.java",
                "sha": "3146c5a671ec5f64a8b80d4d5fabbc4c43d04f98",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1793907 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/a68887cfef6b306663f5115871d19f9b732304e2",
        "patched_files": [
            "Request.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRequest.java"
        ]
    },
    "tomcat_94da507": {
        "bug_id": "tomcat_94da507",
        "commit": "https://github.com/apache/tomcat/commit/94da50724f8fbad501873b1103c4f88e2825fa9c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/94da50724f8fbad501873b1103c4f88e2825fa9c/java/org/apache/jasper/util/FastRemovalDequeue.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/util/FastRemovalDequeue.java?ref=94da50724f8fbad501873b1103c4f88e2825fa9c",
                "deletions": 1,
                "filename": "java/org/apache/jasper/util/FastRemovalDequeue.java",
                "patch": "@@ -174,7 +174,7 @@ public synchronized T pop() {\n      * Removes any element of the list and returns its content.\n      **/\n     public synchronized void remove(final Entry element) {\n-        if (!element.getValid()) {\n+        if (element == null || !element.getValid()) {\n             return;\n         }\n         Entry next = element.getNext();",
                "raw_url": "https://github.com/apache/tomcat/raw/94da50724f8fbad501873b1103c4f88e2825fa9c/java/org/apache/jasper/util/FastRemovalDequeue.java",
                "sha": "3a7cc220f182bfd692b74aa515cc47ffecf97791",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54260\nAvoid NPE when using JSP unloading and tag files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1428355 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/ec4cb8f8a519531e75922e6ab94129d32008b7c6",
        "patched_files": [
            "FastRemovalDequeue.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestFastRemovalDequeue.java"
        ]
    },
    "tomcat_979b3c0": {
        "bug_id": "tomcat_979b3c0",
        "commit": "https://github.com/apache/tomcat/commit/979b3c0a867665afaa8d1b11f354151240423e76",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/AbstractResourceSet.java?ref=979b3c0a867665afaa8d1b11f354151240423e76",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "patch": "@@ -39,7 +39,8 @@\n \n     protected final void checkPath(String path) {\n         if (path == null || path.length() == 0 || path.charAt(0) != '/') {\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\n+                    sm.getString(\"abstractResourceSet.checkPath\", path));\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "sha": "05e14eb705d13530dda9760a17448c25cfa7eb14",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/Cache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/Cache.java?ref=979b3c0a867665afaa8d1b11f354151240423e76",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/Cache.java",
                "patch": "@@ -145,7 +145,7 @@ protected void backgroundProcess() {\n \n     private boolean noCache(String path) {\n         // Don't cache resources used by the class loader (it has its own cache)\n-        if (path == null || path.startsWith(\"/WEB-INF/classes\") ||\n+        if (path.startsWith(\"/WEB-INF/classes\") ||\n                 path.startsWith(\"/WEB-INF/lib\")) {\n             return true;\n         }",
                "raw_url": "https://github.com/apache/tomcat/raw/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/Cache.java",
                "sha": "f5abdbf0c3af67a7e08b393b9f91a333cd3b1adf",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/LocalStrings.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/LocalStrings.properties?ref=979b3c0a867665afaa8d1b11f354151240423e76",
                "deletions": 0,
                "filename": "java/org/apache/catalina/webresources/LocalStrings.properties",
                "patch": "@@ -14,9 +14,12 @@\n # limitations under the License.\n \n abstractArchiveResourceSet.setReadOnlyFalse=Archive based WebResourceSets such as those based on JARs are hard-coded to be read-only and may not be configured to be read-write\n+\n abstractResource.getContentFail=Unable to return [{0}] as a byte array\n abstractResource.getContentTooLarge=Unable to return [{0}] as a byte array since the resource is [{1}] bytes in size which is larger than the maximum size of a byte array\n \n+abstractResourceSet.checkPath=The requested path [{0}] is not valid. It must begin with \"/\".\n+\n cache.addFail=Unable to add the resource at [{0}] to the cache because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache\n cache.backgroundEvictFail=The background cache eviction process was unable to free [{0}] percent of the cache for Context [{1}] - consider increasing the maximum size of the cache. After eviction approximately [{2}] KB of data remained in the cache.\n cache.objectMaxSizeTooBig=The value of [{0}]kB for objectMaxSize is larger than the limit of maxSize/20 so has been reduced to [{1}]kB\n@@ -37,6 +40,7 @@ standardRoot.createInvalidFile=Unable to create WebResourceSet from [{0}]\n standardRoot.createNoFileResourceSet=The FileResourceSet feature has not yet been implemented\n standardRoot.createUnknownType=Unable to create WebResourceSet of unknown type [{0}]\n standardRoot.invalidPath=The resource path [{0}] is not valid\n+standardRoot.invalidPathNormal=The resource path [{0}] has been normalized to [{1}] which is not valid\n standardRoot.lockedFile=The web application [{0}] failed to close the file [{1}] opened via the following stack trace\n standardRoot.noContext=A Context has not been configured for this WebResourceRoot\n standardRoot.startInvalidMain=The main resource set specified [{0}] is not valid",
                "raw_url": "https://github.com/apache/tomcat/raw/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/LocalStrings.properties",
                "sha": "770b5e83125334114b9313d762a6593d2d3de2e6",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/StandardRoot.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=979b3c0a867665afaa8d1b11f354151240423e76",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "patch": "@@ -237,7 +237,14 @@ private String validate(String path) {\n             throw new IllegalArgumentException(\n                     sm.getString(\"standardRoot.invalidPath\", path));\n         }\n-        return RequestUtil.normalize(path);\n+\n+        String result = RequestUtil.normalize(path);\n+        if (result == null || result.length() == 0 || !result.startsWith(\"/\")) {\n+            throw new IllegalArgumentException(\n+                    sm.getString(\"standardRoot.invalidPathNormal\", path, result));\n+        }\n+\n+        return result;\n     }\n \n     protected final WebResource getResourceInternal(String path,",
                "raw_url": "https://github.com/apache/tomcat/raw/979b3c0a867665afaa8d1b11f354151240423e76/java/org/apache/catalina/webresources/StandardRoot.java",
                "sha": "0020ddb67e88fe8386547ff6c05d260b80743495",
                "status": "modified"
            }
        ],
        "message": "Better way to avoid NPE in resource cache - don't let the request get that far when we know we are going to fail it anyway.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1573370 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/be469f5c52bc5df1fe132ce101b07160a604f0aa",
        "patched_files": [
            "LocalStrings.properties",
            "StandardRoot.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardRoot.java"
        ]
    },
    "tomcat_989985d": {
        "bug_id": "tomcat_989985d",
        "commit": "https://github.com/apache/tomcat/commit/989985d4ea91043305882299234d62da5680abb4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/989985d4ea91043305882299234d62da5680abb4/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java?ref=989985d4ea91043305882299234d62da5680abb4",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "patch": "@@ -149,6 +149,7 @@ public void poolClosed(ConnectionPool pool) {\n     }\n \n     protected QueryStats getQueryStats(String sql) {\n+        if (sql==null) sql = \"\";\n         ConcurrentHashMap<String,QueryStats> queries = SlowQueryReport.this.queries;\n         if (queries==null) return null;\n         QueryStats qs = queries.get(sql);",
                "raw_url": "https://github.com/apache/tomcat/raw/989985d4ea91043305882299234d62da5680abb4/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "sha": "585ea18bbf4e370d323ed1ccee655761255a00b9",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/bugzilla/show_bug.cgi?id=51582\nFix NPE when the query is not available. This is a temporary work around until we know why SQL is null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1189978 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/3b8fc6a93f287619ff3ad8fff7ad6b5c10dc6aff",
        "patched_files": [
            "SlowQueryReport.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestSlowQueryReport.java"
        ]
    },
    "tomcat_99ef720": {
        "bug_id": "tomcat_99ef720",
        "commit": "https://github.com/apache/tomcat/commit/99ef72084d13385276ead3640017a8c0e4c3fe2e",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/99ef72084d13385276ead3640017a8c0e4c3fe2e/java/org/apache/tomcat/util/buf/MessageBytes.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/buf/MessageBytes.java?ref=99ef72084d13385276ead3640017a8c0e4c3fe2e",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/util/buf/MessageBytes.java",
                "patch": "@@ -230,10 +230,14 @@ public void setCharset(Charset charset) {\n         byteC.setCharset(charset);\n     }\n \n+\n     /**\n      * Do a char-&gt;byte conversion.\n      */\n     public void toBytes() {\n+        if (isNull()) {\n+            return;\n+        }\n         if (!byteC.isNull()) {\n             type = T_BYTES;\n             return;\n@@ -245,11 +249,15 @@ public void toBytes() {\n         byteC.setBytes(result.array(), result.arrayOffset(), result.limit());\n     }\n \n+\n     /**\n      * Convert to char[] and fill the CharChunk.\n      * XXX Not optimized - it converts to String first.\n      */\n     public void toChars() {\n+        if (isNull()) {\n+            return;\n+        }\n         if (!charC.isNull()) {\n             type = T_CHARS;\n             return;",
                "raw_url": "https://github.com/apache/tomcat/raw/99ef72084d13385276ead3640017a8c0e4c3fe2e/java/org/apache/tomcat/util/buf/MessageBytes.java",
                "sha": "de4942fe4416fc3e37ce839d5c58fc39c3074130",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/tomcat/blob/99ef72084d13385276ead3640017a8c0e4c3fe2e/test/org/apache/tomcat/util/buf/TestMessageBytes.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/buf/TestMessageBytes.java?ref=99ef72084d13385276ead3640017a8c0e4c3fe2e",
                "deletions": 0,
                "filename": "test/org/apache/tomcat/util/buf/TestMessageBytes.java",
                "patch": "@@ -0,0 +1,69 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.tomcat.util.buf;\n+\n+import org.junit.Test;\n+\n+public class TestMessageBytes {\n+\n+    @Test\n+    public void testToStringFromNull() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.toString();\n+    }\n+\n+\n+    @Test\n+    public void testToBytesFromNull() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.toBytes();\n+    }\n+\n+\n+    @Test\n+    public void testToCharsFromNull() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.toChars();\n+    }\n+\n+\n+    @Test\n+    public void testToStringAfterRecycle() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.setString(\"foo\");\n+        mb.recycle();\n+        mb.toString();\n+    }\n+\n+\n+    @Test\n+    public void testToBytesAfterRecycle() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.setString(\"foo\");\n+        mb.recycle();\n+        mb.toBytes();\n+    }\n+\n+\n+    @Test\n+    public void testToCharsAfterRecycle() {\n+        MessageBytes mb = MessageBytes.newInstance();\n+        mb.setString(\"foo\");\n+        mb.recycle();\n+        mb.toChars();\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomcat/raw/99ef72084d13385276ead3640017a8c0e4c3fe2e/test/org/apache/tomcat/util/buf/TestMessageBytes.java",
                "sha": "f9af7fd19dcc906683263507b9722dc1bc118ba1",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/99ef72084d13385276ead3640017a8c0e4c3fe2e/webapps/docs/changelog.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=99ef72084d13385276ead3640017a8c0e4c3fe2e",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -106,6 +106,15 @@\n         may impact users who use these classes directly in their own code.\n         (markt)\n       </fix>\n+      <fix>\n+        Ensure that the <code>toString()</code>, <code>toBytes()</code> and\n+        <code>toChars()</code> methods of <code>MessageBytes</code> behave\n+        consistently and do not throw a <code>NullPointerException</code> both\n+        on newly created objects and immediately after a call to\n+        <code>recycle()</code>. This should not impact typical Tomcat users. It\n+        may impact users who use these classes directly in their own code.\n+        (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "raw_url": "https://github.com/apache/tomcat/raw/99ef72084d13385276ead3640017a8c0e4c3fe2e/webapps/docs/changelog.xml",
                "sha": "93c8aad3cc0bdfaed6827de8001a70d098d4683e",
                "status": "modified"
            }
        ],
        "message": "Ensure that the toString(), toBytes() and toChars() methods of\nMessageBytes behave consistently and do not throw a\nNullPointerException both on newly created objects and immediately after\na call to recycle().\nThis should not impact typical Tomcat users.\nIt may impact users who use these classes directly in their own code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1822499 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/c95560ad973ba2adaf3bb88e4f451d4bacc45841",
        "patched_files": [
            "changelog.xml",
            "MessageBytes.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestMessageBytes.java"
        ]
    },
    "tomcat_9e7392c": {
        "bug_id": "tomcat_9e7392c",
        "commit": "https://github.com/apache/tomcat/commit/9e7392c7df19b75d34488a33fed74e2b4c0ac454",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/9e7392c7df19b75d34488a33fed74e2b4c0ac454/java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java?ref=9e7392c7df19b75d34488a33fed74e2b4c0ac454",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java",
                "patch": "@@ -632,7 +632,7 @@ static void remove(final LinkedHashSet<Cipher> ciphers, final String alias) {\n                 add(ciphers, element);\n             } else if (element.contains(AND)) {\n                 String[] intersections = element.split(\"\\\\\" + AND);\n-                if(intersections.length > 0) {\n+                if(intersections.length > 0 && aliases.containsKey(intersections[0])) {\n                     List<Cipher> result = new ArrayList<>(aliases.get(intersections[0]));\n                     for(int i = 1; i < intersections.length; i++) {\n                         if(aliases.containsKey(intersections[i])) {",
                "raw_url": "https://github.com/apache/tomcat/raw/9e7392c7df19b75d34488a33fed74e2b4c0ac454/java/org/apache/tomcat/util/net/jsse/openssl/OpenSSLCipherConfigurationParser.java",
                "sha": "fb6b257d51b31eae8f90dba8cc230f239df5975c",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/9e7392c7df19b75d34488a33fed74e2b4c0ac454/webapps/docs/changelog.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=9e7392c7df19b75d34488a33fed74e2b4c0ac454",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -45,6 +45,15 @@\n   issues to not \"pop up\" wrt. others).\n -->\n <section name=\"Tomcat 8.0.12 (markt)\">\n+  <subsection name=\"Coyote\">\n+    <changelog>\n+      <fix>\n+        When building a list of JSSE ciphers from an OpenSSL cipher defintiion,\n+        ignore unknown criteria rather than throwing a\n+        <code>NullPointerException</code>. (markt)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Jasper\">\n     <changelog>\n       <fix>",
                "raw_url": "https://github.com/apache/tomcat/raw/9e7392c7df19b75d34488a33fed74e2b4c0ac454/webapps/docs/changelog.xml",
                "sha": "9a0893553c54c2573f9d77500c5781a230d6d3d6",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1619765 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/2be1ca7714c1e12120e4d10326cf54a1a9d14b86",
        "patched_files": [
            "changelog.xml",
            "OpenSSLCipherConfigurationParser.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestOpenSSLCipherConfigurationParser.java"
        ]
    },
    "tomcat_a267dbf": {
        "bug_id": "tomcat_a267dbf",
        "commit": "https://github.com/apache/tomcat/commit/a267dbf064a04b82a398df22212bf5948109d806",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/a267dbf064a04b82a398df22212bf5948109d806/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java?ref=a267dbf064a04b82a398df22212bf5948109d806",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "patch": "@@ -553,7 +553,7 @@ public MessageHandlerInfo(Method m, List<DecoderEntry> decoderEntries) {\n                             m, session, config, null, params, indexInputStream,\n                             true, indexSession, true, maxMessageSize);\n                     results.add(mh);\n-                } else if (decoderMatch.hasMatches()) {\n+                } else if (decoderMatch != null && decoderMatch.hasMatches()) {\n                     if (decoderMatch.getBinaryDecoders().size() > 0) {\n                         MessageHandler mh = new PojoMessageHandlerWholeBinary(\n                                 pojo, m, session, config,",
                "raw_url": "https://github.com/apache/tomcat/raw/a267dbf064a04b82a398df22212bf5948109d806/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "sha": "9ade75aa3ec7057f38640c99ebd460349b8b202b",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55184\nAvoid NPE.\nPatch provided by Niki Dokovski.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499011 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/a634d85f5906283a1d42d9dbb9295bdc00cf29b8",
        "patched_files": [
            "PojoMethodMapping.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestPojoMethodMapping.java"
        ]
    },
    "tomcat_a29ec48": {
        "bug_id": "tomcat_a29ec48",
        "commit": "https://github.com/apache/tomcat/commit/a29ec48655334b521fb59651003dd762cc2596e1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/a29ec48655334b521fb59651003dd762cc2596e1/java/org/apache/catalina/startup/ContextConfig.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=a29ec48655334b521fb59651003dd762cc2596e1",
                "deletions": 3,
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "patch": "@@ -1960,10 +1960,13 @@ protected void processAnnotationsFile(File file, WebXml fragment,\n             boolean handlesTypesOnly) {\n \n         if (file.isDirectory()) {\n+            // Returns null if directory is not readable\n             String[] dirs = file.list();\n-            for (String dir : dirs) {\n-                processAnnotationsFile(\n-                        new File(file,dir), fragment, handlesTypesOnly);\n+            if (dirs != null) {\n+                for (String dir : dirs) {\n+                    processAnnotationsFile(\n+                            new File(file,dir), fragment, handlesTypesOnly);\n+                }\n             }\n         } else if (file.canRead() && file.getName().endsWith(\".class\")) {\n             try (FileInputStream fis = new FileInputStream(file)) {",
                "raw_url": "https://github.com/apache/tomcat/raw/a29ec48655334b521fb59651003dd762cc2596e1/java/org/apache/catalina/startup/ContextConfig.java",
                "sha": "82e5ed9e0f869e7a33934b463b100c555e3d03c6",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/a29ec48655334b521fb59651003dd762cc2596e1/webapps/docs/changelog.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=a29ec48655334b521fb59651003dd762cc2596e1",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -80,6 +80,11 @@\n         and it need not be fatal when the Realm starts. Based on a patch by\n         C\u00e9dric Couralet. (markt)\n       </fix>\n+      <fix>\n+        <bug>56785</bug>: Avoid <code>NullPointerException</code> if directory\n+        exists on the class path that is not readable by the Tomcat user.\n+        (markt)\n+      </fix>\n       <fix>\n         <bug>56796</bug>: Remove unnecessary sleep when stopping a web\n         application. (markt)",
                "raw_url": "https://github.com/apache/tomcat/raw/a29ec48655334b521fb59651003dd762cc2596e1/webapps/docs/changelog.xml",
                "sha": "a2c78120754d345073ac9fa34416ee866128ca5c",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=56785\nAvoid NullPointerException if directory exists on the class path that is not readable by the Tomcat user.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1615920 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/cac669fb45d87afa78cfd575348fb4f12a7aeeab",
        "patched_files": [
            "ContextConfig.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestContextConfig.java"
        ]
    },
    "tomcat_a346ea8": {
        "bug_id": "tomcat_a346ea8",
        "commit": "https://github.com/apache/tomcat/commit/a346ea8f295b0810698869ac1b340b4442a1fadd",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/a346ea8f295b0810698869ac1b340b4442a1fadd/java/org/apache/catalina/mapper/Mapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/Mapper.java?ref=a346ea8f295b0810698869ac1b340b4442a1fadd",
                "deletions": 1,
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "patch": "@@ -740,7 +740,7 @@ private final void internalMap(CharChunk host, CharChunk uri,\n         }\n \n         // Context mapping\n-        if (mappingData.context == null) {\n+        if (mappingData.context == null && contexts != null) {\n             int pos = find(contexts, uri);\n             if (pos == -1) {\n                 return;",
                "raw_url": "https://github.com/apache/tomcat/raw/a346ea8f295b0810698869ac1b340b4442a1fadd/java/org/apache/catalina/mapper/Mapper.java",
                "sha": "3dd168d5229dacaf2543a01c30cd8374c7ca56de",
                "status": "modified"
            }
        ],
        "message": "Avoid unlikely NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1367330 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/9108f90462368e88ced5cd0773182e634d81a694",
        "patched_files": [
            "Mapper.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestMapper.java"
        ]
    },
    "tomcat_a49fc6c": {
        "bug_id": "tomcat_a49fc6c",
        "commit": "https://github.com/apache/tomcat/commit/a49fc6c60b00c70e7822ae7489c016bda6cd8ec1",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/a49fc6c60b00c70e7822ae7489c016bda6cd8ec1/test/org/apache/tomcat/util/net/TestSsl.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/net/TestSsl.java?ref=a49fc6c60b00c70e7822ae7489c016bda6cd8ec1",
                "deletions": 1,
                "filename": "test/org/apache/tomcat/util/net/TestSsl.java",
                "patch": "@@ -35,6 +35,7 @@\n \n import org.junit.Test;\n \n+import org.apache.catalina.Context;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n import org.apache.tomcat.util.buf.ByteChunk;\n@@ -167,7 +168,9 @@ public void testRenegotiateWorks() throws Exception {\n \n         File appDir = new File(getBuildDirectory(), \"webapps/examples\");\n         // app dir is relative to server home\n-        tomcat.addWebapp(null, \"/examples\", appDir.getAbsolutePath());\n+        Context ctx = tomcat.addWebapp(null, \"/examples\",\n+                appDir.getAbsolutePath());\n+        ctx.addApplicationListener(WsListener.class.getName());\n \n         TesterSupport.initSsl(tomcat);\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/a49fc6c60b00c70e7822ae7489c016bda6cd8ec1/test/org/apache/tomcat/util/net/TestSsl.java",
                "sha": "651b178e8dc4066bb80c6b2bc1c56d7c0a4b5e65",
                "status": "modified"
            }
        ],
        "message": "Correctly init WebSocket to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1485833 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/3d81f573e2b40c19dbc8548278557b2950693d85",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TestSsl.java"
        ]
    },
    "tomcat_a58a110": {
        "bug_id": "tomcat_a58a110",
        "commit": "https://github.com/apache/tomcat/commit/a58a11008f577b7beb8346dbfa8383d41c5d35cc",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/a58a11008f577b7beb8346dbfa8383d41c5d35cc/java/org/apache/catalina/connector/Request.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=a58a11008f577b7beb8346dbfa8383d41c5d35cc",
                "deletions": 3,
                "filename": "java/org/apache/catalina/connector/Request.java",
                "patch": "@@ -2513,9 +2513,13 @@ private void parseParts() {\n                 parts.add(part);\n                 if (part.getFilename() == null) {\n                     try {\n-                        parameters.addParameterValues(part.getName(),\n+                        String encoding = parameters.getEncoding();\n+                        if(encoding == null) {\n+                        \tencoding = Parameters.DEFAULT_ENCODING;\n+                        }\n+ \t\t\t\t\t\tparameters.addParameterValues(part.getName(),\n                                 new String[] {part.getString(\n-                                        parameters.getEncoding())});\n+                                        encoding)});\n                     } catch (UnsupportedEncodingException uee) {\n                         try {\n                             parameters.addParameterValues(part.getName(),\n@@ -2533,7 +2537,7 @@ private void parseParts() {\n         } catch (FileUploadBase.SizeException e) {\n             partsParseException = new IllegalStateException(e);\n         } catch (FileUploadException e) {\n-            partsParseException = new IOException();\n+            partsParseException = new IOException(e);\n         }\n         \n         return;",
                "raw_url": "https://github.com/apache/tomcat/raw/a58a11008f577b7beb8346dbfa8383d41c5d35cc/java/org/apache/catalina/connector/Request.java",
                "sha": "f187eacdfc96caed57f84524c4057d2297eb2755",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if no encoding parameter exists at request!\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@939639 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/d7080b9ea942d3bdb2a72b42c775ac3bd83f7cfa",
        "patched_files": [
            "Request.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRequest.java"
        ]
    },
    "tomcat_a9622e7": {
        "bug_id": "tomcat_a9622e7",
        "commit": "https://github.com/apache/tomcat/commit/a9622e70568229caaece82d6673238a9d1fb0d0c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/a9622e70568229caaece82d6673238a9d1fb0d0c/java/org/apache/coyote/http2/Stream.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http2/Stream.java?ref=a9622e70568229caaece82d6673238a9d1fb0d0c",
                "deletions": 2,
                "filename": "java/org/apache/coyote/http2/Stream.java",
                "patch": "@@ -916,8 +916,10 @@ public final int doRead(ApplicationBufferHandler applicationBufferHandler)\n \n \n         final void registerReadInterest() {\n-            synchronized (inBuffer) {\n-                readInterest = true;\n+            if (inBuffer != null) {\n+                synchronized (inBuffer) {\n+                    readInterest = true;\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/a9622e70568229caaece82d6673238a9d1fb0d0c/java/org/apache/coyote/http2/Stream.java",
                "sha": "34e91abfdfaef415d3ba956c8fbd8a8c4c156c4f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/a9622e70568229caaece82d6673238a9d1fb0d0c/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=a9622e70568229caaece82d6673238a9d1fb0d0c",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -87,6 +87,10 @@\n         Reduce default HTTP/2 stream concurrent execution within a connection\n         from 200 to 20. (remm)\n       </fix>\n+      <fix>\n+        <bug>61719</bug>: Avoid possible NPE calling\n+        InputStream.setReadListener with HTTP/2. (remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "raw_url": "https://github.com/apache/tomcat/raw/a9622e70568229caaece82d6673238a9d1fb0d0c/webapps/docs/changelog.xml",
                "sha": "0e9a63c0010cdb40e369519774c2c7ad374babd0",
                "status": "modified"
            }
        ],
        "message": "61719: Add a null check for apparent NPE possibility (all other places ensure the buffer is not null). Not sure if there's a worrying root cause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1814195 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/bbbee0d96e82fb2a5cbac730366ac49ccb0d366d",
        "patched_files": [
            "Stream.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStream.java"
        ]
    },
    "tomcat_a9fa88e": {
        "bug_id": "tomcat_a9fa88e",
        "commit": "https://github.com/apache/tomcat/commit/a9fa88e244bb94ea516b36ca186acb9e6295cb98",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/a9fa88e244bb94ea516b36ca186acb9e6295cb98/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java?ref=a9fa88e244bb94ea516b36ca186acb9e6295cb98",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "patch": "@@ -375,7 +375,7 @@ public MessageHandlerInfo(Method m, List<DecoderEntry> decoderEntries) {\n                                 m.getName(), m.getDeclaringClass().getName()));\n                     }\n                 } else {\n-                    if (decoderMatch != null || decoderMatch.hasMatches()) {\n+                    if (decoderMatch != null && decoderMatch.hasMatches()) {\n                         throw new IllegalArgumentException(sm.getString(\n                                 \"pojoMethodMapping.duplicateMessageParam\",\n                                 m.getName(), m.getDeclaringClass().getName()));",
                "raw_url": "https://github.com/apache/tomcat/raw/a9fa88e244bb94ea516b36ca186acb9e6295cb98/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "sha": "6729ff22c7c902819b4fcad35e686cb9cf952c4d",
                "status": "modified"
            }
        ],
        "message": "Fix logic error that triggered an NPE and associated test failures\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1497308 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/0653f24c24fed8328ca5e80eec044ea5c54e5407",
        "patched_files": [
            "PojoMethodMapping.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestPojoMethodMapping.java"
        ]
    },
    "tomcat_ab4121b": {
        "bug_id": "tomcat_ab4121b",
        "commit": "https://github.com/apache/tomcat/commit/ab4121bb29fcb4bb659d8162ee80cf2638c140f2",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/ab4121bb29fcb4bb659d8162ee80cf2638c140f2/java/org/apache/catalina/startup/Tomcat.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/Tomcat.java?ref=ab4121bb29fcb4bb659d8162ee80cf2638c140f2",
                "deletions": 1,
                "filename": "java/org/apache/catalina/startup/Tomcat.java",
                "patch": "@@ -668,7 +668,11 @@ public void setSilent(boolean silent) {\n \n     private void silence(Host host, String ctx) {\n         String base = \"org.apache.catalina.core.ContainerBase.[default].[\";\n-        base += host.getName();\n+        if (host == null) {\n+            base += getHost().getName();\n+        } else {\n+            base += host.getName();\n+        }\n         base += \"].[\";\n         base += ctx;\n         base += \"]\";",
                "raw_url": "https://github.com/apache/tomcat/raw/ab4121bb29fcb4bb659d8162ee80cf2638c140f2/java/org/apache/catalina/startup/Tomcat.java",
                "sha": "dd1385d2bf0599b52eb5b89866a71c512a95ecbe",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1226177 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/bc8f9d64752894b06f2ead65aef1e3b0b6a5d410",
        "patched_files": [
            "Tomcat.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestTomcat.java"
        ]
    },
    "tomcat_ab6f21d": {
        "bug_id": "tomcat_ab6f21d",
        "commit": "https://github.com/apache/tomcat/commit/ab6f21da230df89dd383ee84a5ba88f271453a8e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/ab6f21da230df89dd383ee84a5ba88f271453a8e/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=ab6f21da230df89dd383ee84a5ba88f271453a8e",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -347,7 +347,7 @@ protected void unregisterSession(Endpoint endpoint, WsSession wsSession) {\n     private void registerAuthenticatedSession(WsSession wsSession,\n             String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);\n-        if (wsSession == null) {\n+        if (wsSessions == null) {\n             wsSessions = Collections.newSetFromMap(\n                      new ConcurrentHashMap<WsSession,Boolean>());\n              authenticatedSessions.putIfAbsent(httpSessionId, wsSessions);",
                "raw_url": "https://github.com/apache/tomcat/raw/ab6f21da230df89dd383ee84a5ba88f271453a8e/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "d111cb4917321692eae7b72265bc657c89787e37",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55291\nAvoid NPE when registering a session. Patch provided by rstoyanchev.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1505689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/2be5be837aa1e5b222afb856f0444badf62b47e1",
        "patched_files": [
            "WsServerContainer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat_ac547de": {
        "bug_id": "tomcat_ac547de",
        "commit": "https://github.com/apache/tomcat/commit/ac547de282e57229a19efd268a722a5f3f13a45c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/ac547de282e57229a19efd268a722a5f3f13a45c/java/org/apache/catalina/loader/WebappLoader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappLoader.java?ref=ac547de282e57229a19efd268a722a5f3f13a45c",
                "deletions": 4,
                "filename": "java/org/apache/catalina/loader/WebappLoader.java",
                "patch": "@@ -483,17 +483,15 @@ public String getClasspath() {\n      * such that the loaded classes should be reloaded?\n      */\n     public boolean modified() {\n-\n-        return (classLoader.modified());\n-\n+        return classLoader != null ? classLoader.modified() : false ;\n     }\n \n \n     /**\n      * Used to periodically signal to the classloader to release JAR resources.\n      */\n     public void closeJARs(boolean force) {\n-        if (classLoader !=null){\n+        if (classLoader !=null) {\n             classLoader.closeJARs(force);\n         }\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/ac547de282e57229a19efd268a722a5f3f13a45c/java/org/apache/catalina/loader/WebappLoader.java",
                "sha": "f5bcac311ded08843a0f5fc87b6ae560a2ed02a1",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/tomcat/blob/ac547de282e57229a19efd268a722a5f3f13a45c/test/org/apache/catalina/loader/TestVirtualWebappLoader.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/loader/TestVirtualWebappLoader.java?ref=ac547de282e57229a19efd268a722a5f3f13a45c",
                "deletions": 0,
                "filename": "test/org/apache/catalina/loader/TestVirtualWebappLoader.java",
                "patch": "@@ -0,0 +1,67 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.catalina.loader;\n+\n+import java.io.File;\n+\n+import org.apache.catalina.core.StandardContext;\n+import org.apache.catalina.startup.Tomcat;\n+import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.naming.resources.FileDirContext;\n+\n+public class TestVirtualWebappLoader extends TomcatBaseTest {\n+\n+    public void testModified() throws Exception {\n+        WebappLoader loader = new WebappLoader();\n+        assertNull(loader.getClassLoader());\n+        assertFalse(loader.modified());\n+    }\n+    \n+    public void testStartInternal() throws Exception {\n+        Tomcat tomcat = getTomcatInstance();\n+        File appDir = new File(\"test/webapp-3.0\");      \n+        // Must have a real docBase - just use temp\n+        StandardContext ctx = \n+            (StandardContext)tomcat.addContext(\"/\",  appDir.getAbsolutePath());\n+\n+        VirtualWebappLoader loader = new VirtualWebappLoader();\n+         \n+        loader.setContainer(ctx);\n+        ctx.setLoader(loader);\n+        ctx.setResources(new FileDirContext());\n+        ctx.resourcesStart();\n+        File dir = new File(\"test/webapp-3.0-fragments/WEB-INF/lib\");\n+        loader.setVirtualClasspath(dir.getAbsolutePath() + \"/*.jar\");\n+        loader.startInternal();\n+        String[] repos = loader.getRepositories();\n+        assertEquals(2,repos.length);\n+        loader.stopInternal();\n+        // ToDo: Why doesn't remove repositories?\n+        repos = loader.getRepositories();\n+        assertEquals(2, repos.length);\n+        \n+        // no leak\n+        loader.startInternal();\n+        repos = loader.getRepositories();\n+        assertEquals(2,repos.length);\n+        \n+        // clear loader\n+        ctx.setLoader(null);\n+        // see tearDown()!\n+        tomcat.start();\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomcat/raw/ac547de282e57229a19efd268a722a5f3f13a45c/test/org/apache/catalina/loader/TestVirtualWebappLoader.java",
                "sha": "4e3cdb7d2d46094f1b6a67ac5ebc2efd668776f1",
                "status": "added"
            }
        ],
        "message": "Fix NPE and add small test case to check VirtualWebappLoader.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@960284 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/741e000b2463514971057bdae9133f8815728aa3",
        "patched_files": [
            "WebappLoader.java",
            "VirtualWebappLoader.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestVirtualWebappLoader.java"
        ]
    },
    "tomcat_ad5915f": {
        "bug_id": "tomcat_ad5915f",
        "commit": "https://github.com/apache/tomcat/commit/ad5915faa2319a4d9323ef32c563e2005897ff75",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/tomcat/blob/ad5915faa2319a4d9323ef32c563e2005897ff75/test/org/apache/tomcat/util/threads/TestLimitLatch.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/threads/TestLimitLatch.java?ref=ad5915faa2319a4d9323ef32c563e2005897ff75",
                "deletions": 22,
                "filename": "test/org/apache/tomcat/util/threads/TestLimitLatch.java",
                "patch": "@@ -20,26 +20,17 @@\n \n public class TestLimitLatch extends TestCase {\n \n-    private volatile LimitLatch latch = null;\n-\n-    @Override\n-    public void tearDown() {\n-        LimitLatch temp = latch;\n-        if (temp!=null) temp.releaseAll();\n-        latch = null;\n-    }\n-\n     public void testNoThreads() throws Exception {\n-        latch = new LimitLatch(0);\n+        LimitLatch latch = new LimitLatch(0);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n     }\n \n     public void testOneThreadNoWait() throws Exception {\n-        latch = new LimitLatch(1);\n+        LimitLatch latch = new LimitLatch(1);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n-        Thread testThread = new TestThread();\n+        Thread testThread = new TestThread(latch);\n         testThread.start();\n         Thread.sleep(50);\n         assertEquals(\"0 threads should be waiting\", 0,\n@@ -51,10 +42,10 @@ public void testOneThreadNoWait() throws Exception {\n     }\n \n     public void testOneThreadWaitCountUp() throws Exception {\n-        latch = new LimitLatch(1);\n+        LimitLatch latch = new LimitLatch(1);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n-        Thread testThread = new TestThread();\n+        Thread testThread = new TestThread(latch);\n         latch.countUpOrAwait();\n         testThread.start();\n         Thread.sleep(50);\n@@ -67,10 +58,10 @@ public void testOneThreadWaitCountUp() throws Exception {\n     }\n \n     public void testOneRelease() throws Exception {\n-        latch = new LimitLatch(1);\n+        LimitLatch latch = new LimitLatch(1);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n-        Thread testThread = new TestThread();\n+        Thread testThread = new TestThread(latch);\n         latch.countUpOrAwait();\n         testThread.start();\n         Thread.sleep(50);\n@@ -83,12 +74,12 @@ public void testOneRelease() throws Exception {\n     }\n \n     public void testTenWait() throws Exception {\n-        latch = new LimitLatch(10);\n+        LimitLatch latch = new LimitLatch(10);\n         assertEquals(\"No threads should be waiting\", false,\n                 latch.hasQueuedThreads());\n         Thread[] testThread = new TestThread[30];\n         for (int i = 0; i < 30; i++) {\n-            testThread[i] = new TestThread(1000);\n+            testThread[i] = new TestThread(latch, 1000);\n             testThread[i].start();\n         }\n         Thread.sleep(50);\n@@ -105,12 +96,14 @@ public void testTenWait() throws Exception {\n     private class TestThread extends Thread {\n         \n         private int holdTime;\n-        \n-        public TestThread() {\n-            this(100);\n+        private LimitLatch latch;\n+\n+        public TestThread(LimitLatch latch) {\n+            this(latch, 100);\n         }\n         \n-        public TestThread(int holdTime) {\n+        public TestThread(LimitLatch latch, int holdTime) {\n+            this.latch = latch;\n             this.holdTime = holdTime;\n         }\n  \n@@ -120,6 +113,8 @@ public void run() {\n                 latch.countUpOrAwait();\n                 Thread.sleep(holdTime);\n                 latch.countDown();\n+            } catch (NullPointerException npe) {\n+                npe.printStackTrace();\n             } catch (InterruptedException x) {\n                 x.printStackTrace();\n             }",
                "raw_url": "https://github.com/apache/tomcat/raw/ad5915faa2319a4d9323ef32c563e2005897ff75/test/org/apache/tomcat/util/threads/TestLimitLatch.java",
                "sha": "1c9559604df4cfb9ff78c7230af5204b59de5902",
                "status": "modified"
            }
        ],
        "message": "Refactor to avoid NPEs during test\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1143488 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/496ea9096544f1ac2f073628eee591e93eafab53",
        "patched_files": [
            "LimitLatch.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestLimitLatch.java"
        ]
    },
    "tomcat_ad6421b": {
        "bug_id": "tomcat_ad6421b",
        "commit": "https://github.com/apache/tomcat/commit/ad6421b4539277569ee426c40681a8529846d76a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/ad6421b4539277569ee426c40681a8529846d76a/test/org/apache/catalina/core/TestStandardContextAliases.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestStandardContextAliases.java?ref=ad6421b4539277569ee426c40681a8529846d76a",
                "deletions": 4,
                "filename": "test/org/apache/catalina/core/TestStandardContextAliases.java",
                "patch": "@@ -63,6 +63,9 @@ public void testDirContextAliases() throws Exception {\n         ByteChunk res = getUrl(\"http://localhost:\" + getPort() + \"/\");\n \n         String result = res.toString();\n+        if (result == null) {\n+            result = \"\";\n+        }\n \n         assertTrue(result.indexOf(\"00-PASS\") > -1);\n         assertTrue(result.indexOf(\"01-PASS\") > -1);\n@@ -86,12 +89,12 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n             ServletContext context = getServletContext();\n \n             // Check resources individually\n-            URL url = context.getResource(\"/WEB-INF/lib/jstl.jar\");\n+            URL url = context.getResource(\"/WEB-INF/lib/taglibs-standard-spec-1.2.3.jar\");\n             if (url != null) {\n                 resp.getWriter().write(\"00-PASS\\n\");\n             }\n \n-            url = context.getResource(\"/WEB-INF/lib/standard.jar\");\n+            url = context.getResource(\"/WEB-INF/lib/taglibs-standard-impl-1.2.3.jar\");\n             if (url != null) {\n                 resp.getWriter().write(\"01-PASS\\n\");\n             }\n@@ -102,10 +105,10 @@ protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n                 return;\n             }\n \n-            if (!libs.contains(\"/WEB-INF/lib/jstl.jar\")) {\n+            if (!libs.contains(\"/WEB-INF/lib/taglibs-standard-spec-1.2.3.jar\")) {\n                 return;\n             }\n-            if (!libs.contains(\"/WEB-INF/lib/standard.jar\")) {\n+            if (!libs.contains(\"/WEB-INF/lib/taglibs-standard-impl-1.2.3.jar\")) {\n                 return;\n             }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/ad6421b4539277569ee426c40681a8529846d76a/test/org/apache/catalina/core/TestStandardContextAliases.java",
                "sha": "c3c818f95f7a0cb3c48a2a7f49e09ff603893010",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE and fix JAR names.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1662843 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/ac10a5867cf1b9f942c835954449c19a94ac0dc5",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardContextAliases.java"
        ]
    },
    "tomcat_ae08feb": {
        "bug_id": "tomcat_ae08feb",
        "commit": "https://github.com/apache/tomcat/commit/ae08febd4d053d38df876b039d4b632a79465510",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/StaticFieldELResolver.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 4,
                "filename": "java/javax/el/StaticFieldELResolver.java",
                "patch": "@@ -113,11 +113,13 @@ public Object invoke(ELContext context, Object base, Object method,\n                 return result;\n \n             } else {\n-                Method match =\n-                        Util.findMethod(clazz, base, methodName, paramTypes, params);\n+                // Static method so base should be null\n+                Method match = Util.findMethod(clazz, null, methodName, paramTypes, params);\n \n-                int modifiers = match.getModifiers();\n-                if (!Modifier.isStatic(modifiers)) {\n+                // Note: On Java 9 and above, the isStatic check becomes\n+                // unnecessary because the canAccess() call in Util.findMethod()\n+                // effectively performs the same check\n+                if (match == null || !Modifier.isStatic(match.getModifiers())) {\n                     throw new MethodNotFoundException(Util.message(context,\n                             \"staticFieldELResolver.methodNotFound\", methodName,\n                             clazz.getName()));",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/StaticFieldELResolver.java",
                "sha": "d6a902770e139489b401abaf65096b5946684978",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/Util.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 1,
                "filename": "java/javax/el/Util.java",
                "patch": "@@ -541,7 +541,11 @@ private static boolean isCoercibleFrom(Object src, Class<?> target) {\n      */\n     static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/javax/el/Util.java",
                "sha": "2e06837233b0efd09bb25f33cccc769e96df6092",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/el/util/ReflectionUtil.java?ref=ae08febd4d053d38df876b039d4b632a79465510",
                "deletions": 1,
                "filename": "java/org/apache/el/util/ReflectionUtil.java",
                "patch": "@@ -424,7 +424,11 @@ private static boolean isCoercibleFrom(EvaluationContext ctx, Object src, Class<\n      */\n     private static Method getMethod(Class<?> type, Object base, Method m) {\n         JreCompat jreCompat = JreCompat.getInstance();\n-        if (m == null || (Modifier.isPublic(type.getModifiers()) && jreCompat.canAcccess(base, m))) {\n+        // If base is null, method MUST be static\n+        // If base is non-null, method may be static or non-static\n+        if (m == null ||\n+                (Modifier.isPublic(type.getModifiers()) &&\n+                        (jreCompat.canAcccess(base, m) || base != null && jreCompat.canAcccess(null, m)))) {\n             return m;\n         }\n         Class<?>[] inf = type.getInterfaces();",
                "raw_url": "https://github.com/apache/tomcat/raw/ae08febd4d053d38df876b039d4b632a79465510/java/org/apache/el/util/ReflectionUtil.java",
                "sha": "c9f1f2e285eef363bbd159f4513f3bb809e4a767",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs when looking for static methods",
        "parent": "https://github.com/apache/tomcat/commit/2fb245b844fc9fefaa5e0c8002a481a72c502963",
        "patched_files": [
            "ReflectionUtil.java",
            "Util.java",
            "StaticFieldELResolver.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStaticFieldELResolver.java",
            "TestReflectionUtil.java",
            "TestUtil.java"
        ]
    },
    "tomcat_b022c57": {
        "bug_id": "tomcat_b022c57",
        "commit": "https://github.com/apache/tomcat/commit/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/doc/jdbc-pool.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/doc/jdbc-pool.xml?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/doc/jdbc-pool.xml",
                "patch": "@@ -274,6 +274,15 @@\n          Example values are <code>SELECT 1</code>(mysql), <code>select 1 from dual</code>(oracle), <code>SELECT 1</code>(MS Sql Server)\n       </p>\n     </attribute>\n+    \n+    <attribute name=\"validationQueryTimeout\" required=\"false\">\n+      <p>(int) The timeout in seconds before a connection validation queries fail.  This works by calling \n+         <code>java.sql.Statement.setQueryTimeout(seconds)</code> on the statement that executes the <code>validationQuery</code>.\n+         The pool itself doesn't timeout the query, it is still up to the JDBC driver to enforce query timeouts. \n+         A value less than or equal to zero will disable this feature. \n+         The default value is <code>-1</code>.\n+      </p>\n+    </attribute>\n \n     <attribute name=\"validatorClassName\" required=\"false\">\n       <p>(String) The name of a class which implements the",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/doc/jdbc-pool.xml",
                "sha": "81eecf25d44ef6f2c942da19eddd330ac26e8d99",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 2,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java",
                "patch": "@@ -712,7 +712,7 @@ protected PooledConnection createConnection(long now, PooledConnection notUsed,\n             } else {\n                 //validation failed, make sure we disconnect\n                 //and clean up\n-                error =true;\n+                throw new SQLException(\"Validation Query Failed, enable logValidationErrors for more details.\");\n             } //end if\n         } catch (Exception e) {\n             error = true;\n@@ -732,7 +732,6 @@ protected PooledConnection createConnection(long now, PooledConnection notUsed,\n             }\n             con.unlock();\n         }//catch\n-        return null;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/ConnectionPool.java",
                "sha": "0b2dcdb4b323466be340ff9f678b30c5c7ea32f4",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java",
                "patch": "@@ -80,6 +80,7 @@\n     protected static final String PROP_TESTWHILEIDLE = \"testWhileIdle\";\n     protected static final String PROP_TESTONCONNECT = \"testOnConnect\";\n     protected static final String PROP_VALIDATIONQUERY = \"validationQuery\";\n+    protected static final String PROP_VALIDATIONQUERY_TIMEOUT = \"validationQueryTimeout\";\n     protected static final String PROP_VALIDATOR_CLASS_NAME = \"validatorClassName\";\n \n     protected static final String PROP_NUMTESTSPEREVICTIONRUN = \"numTestsPerEvictionRun\";\n@@ -151,6 +152,7 @@\n         PROP_URL,\n         PROP_USERNAME,\n         PROP_VALIDATIONQUERY,\n+        PROP_VALIDATIONQUERY_TIMEOUT,\n         PROP_VALIDATOR_CLASS_NAME,\n         PROP_VALIDATIONINTERVAL,\n         PROP_ACCESSTOUNDERLYINGCONNECTIONALLOWED,\n@@ -369,6 +371,11 @@ public static PoolConfiguration parsePoolProperties(Properties properties) {\n         if (value != null) {\n             poolProperties.setValidationQuery(value);\n         }\n+        \n+        value = properties.getProperty(PROP_VALIDATIONQUERY_TIMEOUT);\n+        if (value != null) {\n+            poolProperties.setValidationQueryTimeout(Integer.parseInt(value));\n+        }\n \n         value = properties.getProperty(PROP_VALIDATOR_CLASS_NAME);\n         if (value != null) {",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceFactory.java",
                "sha": "6d204ee7d6af4397485488620d583a96c57f432a",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java",
                "patch": "@@ -452,6 +452,15 @@ public void setValidationQuery(String validationQuery) {\n     public void setValidatorClassName(String className) {\n         this.poolProperties.setValidatorClassName(className);\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    \n+    @Override\n+    public void setValidationQueryTimeout(int validationQueryTimeout) {\n+        this.poolProperties.setValidationQueryTimeout(validationQueryTimeout);\n+    }\n \n     /**\n      * {@inheritDoc}\n@@ -925,6 +934,15 @@ public String getValidationQuery() {\n         return getPoolProperties().getValidationQuery();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    \n+    @Override\n+    public int getValidationQueryTimeout() {\n+        return getPoolProperties().getValidationQueryTimeout();\n+    }\n+    \n     /**\n      * {@inheritDoc}\n      */",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/DataSourceProxy.java",
                "sha": "3e3af9ada851b61fda4329a3aa10621e1e1de22d",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java",
                "patch": "@@ -523,6 +523,19 @@\n      */\n     public void setValidationQuery(String validationQuery);\n \n+    /**\n+     * The timeout in seconds before a connection validation queries fail.\n+     * A value less than or equal to zero will disable this feature.  Defaults to -1. \n+     * @return the timeout value in seconds \n+     */\n+    public int getValidationQueryTimeout();\n+    \n+    /**\n+     * The timeout in seconds before a connection validation queries fail.\n+     * A value less than or equal to zero will disable this feature.  Defaults to -1. \n+     */\n+    public void setValidationQueryTimeout(int validationQueryTimeout);\n+    \n     /**\n      * Return the name of the optional validator class - may be null.\n      *",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolConfiguration.java",
                "sha": "bc854cc7440da9a03bcc6f98cb978384c3a16caa",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java",
                "patch": "@@ -57,6 +57,7 @@\n     private volatile int minIdle = initialSize;\n     private volatile int maxWait = 30000;\n     private volatile String validationQuery;\n+    private volatile int validationQueryTimeout = -1;\n     private volatile String validatorClassName;\n     private volatile Validator validator;\n     private volatile boolean testOnBorrow = false;\n@@ -379,6 +380,22 @@ public String getValidationQuery() {\n         return validationQuery;\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int getValidationQueryTimeout() {\n+        return validationQueryTimeout;\n+    }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public void setValidationQueryTimeout(int validationQueryTimeout) {\n+        this.validationQueryTimeout = validationQueryTimeout;\n+    }\n+    \n     /**\n      * {@inheritDoc}\n      */",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PoolProperties.java",
                "sha": "136a2c5fdcfbdd9a019036d93727e3164d70b686",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java",
                "patch": "@@ -451,6 +451,12 @@ public boolean validate(int validateAction,String sql) {\n         Statement stmt = null;\n         try {\n             stmt = connection.createStatement();\n+            \n+            int validationQueryTimeout = poolProperties.getValidationQueryTimeout();\n+            if (validationQueryTimeout > 0) {\n+                stmt.setQueryTimeout(validationQueryTimeout);\n+            }\n+            \n             stmt.execute(query);\n             stmt.close();\n             this.lastValidated = now;",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/PooledConnection.java",
                "sha": "02a986896348af8594d1038f89d43f9c3d907c59",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java",
                "patch": "@@ -310,6 +310,11 @@ public long getValidationInterval() {\n     public String getValidationQuery() {\n         return getPoolProperties().getValidationQuery();\n     }\n+    \n+    @Override\n+    public int getValidationQueryTimeout() {\n+        return getPoolProperties().getValidationQueryTimeout();\n+    }\n \n     /**\n      * {@inheritDoc}\n@@ -664,6 +669,11 @@ public void setValidationQuery(String validationQuery) {\n         getPoolProperties().setValidationQuery(validationQuery);\n     }\n \n+    @Override\n+    public void setValidationQueryTimeout(int validationQueryTimeout) {\n+        getPoolProperties().setValidationQueryTimeout(validationQueryTimeout);\n+    }\n+    \n     /**\n      * {@inheritDoc}\n      */",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/jmx/ConnectionPool.java",
                "sha": "66013d9a30b8dd9bab9343151cdc183618c663c5",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/mbeans-descriptors.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/mbeans-descriptors.xml?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/mbeans-descriptors.xml",
                "patch": "@@ -125,6 +125,11 @@\n            description=\"The query to run during validation\"\n                   type=\"java.lang.String\"\n              writeable=\"false\"/>\n+             \n+    <attribute    name=\"validationQueryTimeout\"\n+           description=\"The timeout in seconds before a connection validation queries fail\"\n+                  type=\"java.lang.Integer\"\n+             writeable=\"false\" />\n \n     <attribute    name=\"testOnBorrow\"\n            description=\"True if validation happens when a connection is requested\"",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/mbeans-descriptors.xml",
                "sha": "0e6682ebdd6085491af58b824ec4fccb37d994c2",
                "status": "modified"
            },
            {
                "additions": 249,
                "blob_url": "https://github.com/apache/tomcat/blob/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java",
                "changes": 249,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java?ref=b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java",
                "patch": "@@ -0,0 +1,249 @@\n+package org.apache.tomcat.jdbc.test;\n+\n+import java.sql.Connection;\n+import java.sql.DriverManager;\n+import java.sql.DriverPropertyInfo;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.Statement;\n+import java.util.Properties;\n+import java.util.logging.Logger;\n+\n+import junit.framework.Assert;\n+\n+import org.apache.tomcat.jdbc.pool.interceptor.QueryTimeoutInterceptor;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class TestValidationQueryTimeout extends DefaultTestCase {\n+    \n+    private static int TIMEOUT = 10;\n+    private static boolean isTimeoutSet;\n+    private static final String longQuery = \"select * from test as A, test as B, test as C, test as D, test as E\";\n+    \n+    @Before\n+    public void setUp() throws SQLException {\n+        DriverManager.registerDriver(new MockDriver());\n+        \n+        // use our mock driver\n+        this.datasource.setDriverClassName(MockDriver.class.getName());\n+        this.datasource.setUrl(MockDriver.url);\n+        \n+        // Required to trigger validation query's execution \n+        this.datasource.setInitialSize(1);\n+        this.datasource.setTestOnBorrow(true);\n+        this.datasource.setValidationInterval(-1);\n+        this.datasource.setValidationQuery(\"SELECT 1\");\n+        this.datasource.setValidationQueryTimeout(TIMEOUT);\n+        \n+        TIMEOUT = 10;\n+        isTimeoutSet = false;\n+    }\n+    \n+    @After\n+    public void tearDown() throws SQLException {\n+        DriverManager.deregisterDriver(new MockDriver());\n+    }\n+    \n+    @Test\n+    public void testValidationQueryTimeoutEnabled() throws Exception {\n+        // because testOnBorrow is true, this triggers the validation query\n+        this.datasource.getConnection();\n+        Assert.assertTrue(isTimeoutSet);\n+    }\n+    \n+    @Test\n+    public void testValidationQueryTimeoutDisabled() throws Exception {\n+        this.datasource.setValidationQueryTimeout(-1);\n+        \n+        // because testOnBorrow is true, this triggers the validation query\n+        this.datasource.getConnection();\n+        Assert.assertFalse(isTimeoutSet);\n+    }\n+    \n+    @Test\n+    public void testValidationQueryTimeoutWithQueryTimeoutInterceptor() throws Exception {\n+        int interceptorTimeout = 30;\n+        this.datasource.setJdbcInterceptors(\n+                            QueryTimeoutInterceptor.class.getName()+\n+                            \"(queryTimeout=\"+ interceptorTimeout +\")\");\n+        \n+        // because testOnBorrow is true, this triggers the validation query\n+        Connection con = this.datasource.getConnection();\n+        Assert.assertTrue(isTimeoutSet);\n+        \n+        // increase the expected timeout to 30, which is what we set for the interceptor\n+        TIMEOUT = 30;\n+        \n+        // now create a statement, make sure the query timeout is set by the interceptor\n+        Statement st = con.createStatement();\n+        Assert.assertEquals(interceptorTimeout, st.getQueryTimeout());\n+        st.close();\n+        st = con.prepareStatement(\"\");\n+        Assert.assertEquals(interceptorTimeout, st.getQueryTimeout());\n+        st.close();\n+        st = con.prepareCall(\"\");\n+        Assert.assertEquals(interceptorTimeout, st.getQueryTimeout());\n+        st.close();\n+        con.close();\n+        \n+        // pull another connection and check it\n+        TIMEOUT = 10;\n+        isTimeoutSet = false;\n+        this.datasource.getConnection();\n+        Assert.assertTrue(isTimeoutSet);\n+    }\n+    \n+    // this test depends on the execution time of the validation query\n+    //   specifically, it needs to run for longer than 1 second to pass\n+    //   if this fails\n+    @Test(expected=SQLException.class) \n+    public void testValidationQueryTimeoutOnConnection() throws Exception {\n+        // use our mock driver\n+        this.datasource.setDriverClassName(\"org.h2.Driver\");\n+        this.datasource.setUrl(\"jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE\");\n+        \n+        // Required to trigger validation query's execution \n+        this.datasource.setTestOnConnect(true);\n+        this.datasource.setValidationInterval(-1);\n+        this.datasource.setValidationQuery(longQuery);\n+        this.datasource.setValidationQueryTimeout(1);\n+        \n+        this.datasource.getConnection();\n+    }\n+    \n+    @Test(expected=SQLException.class)\n+    public void testValidationInvalidOnConnection() throws Exception {\n+        // use our mock driver\n+        this.datasource.setDriverClassName(\"org.h2.Driver\");\n+        this.datasource.setUrl(\"jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE\");\n+        \n+        // Required to trigger validation query's execution \n+        this.datasource.setTestOnBorrow(true);\n+        this.datasource.setInitialSize(1);\n+        this.datasource.setTestOnConnect(true);\n+        this.datasource.setValidationInterval(-1);\n+        this.datasource.setValidationQuery(\"SELECT\");\n+        this.datasource.setValidationQueryTimeout(1);\n+        \n+        this.datasource.getConnection();\n+    }\n+    \n+    @Test\n+    public void testLongValidationQueryTime() throws Exception {\n+        // use our mock driver\n+        this.datasource.setDriverClassName(\"org.h2.Driver\");\n+        this.datasource.setUrl(\"jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE\");\n+        Connection con = this.datasource.getConnection();\n+        Statement stmt = null;\n+        long start = 0, end = 0;\n+        try {\n+            stmt = con.createStatement();\n+            // set the query timeout to 2 sec\n+            //  this keeps this test from slowing things down too much\n+            stmt.setQueryTimeout(2);\n+            // assert that our long query takes longer than one second to run\n+            //  this is a requirement for other tests to run properly\n+            start = System.currentTimeMillis();\n+            stmt.execute(longQuery);\n+        } catch (SQLException ex) {}\n+        finally {\n+            end = System.currentTimeMillis();\n+        \n+            if (stmt != null) { stmt.close(); }\n+            if (con != null) { con.close(); }\n+            \n+            Assert.assertTrue(start != 0 && end != 0);\n+            Assert.assertTrue((end - start) > 1000);\n+        }\n+    }\n+    \n+    @Test\n+    public void testValidationQueryTimeoutOnBorrow() throws Exception {\n+        // use our mock driver\n+        this.datasource.setDriverClassName(\"org.h2.Driver\");\n+        this.datasource.setUrl(\"jdbc:h2:~/.h2/test;QUERY_TIMEOUT=0;DB_CLOSE_ON_EXIT=FALSE\");\n+        \n+        // Required to trigger validation query's execution \n+        this.datasource.setTestOnBorrow(true);\n+        this.datasource.setValidationInterval(-1);\n+        this.datasource.setValidationQuery(longQuery);\n+        this.datasource.setValidationQueryTimeout(1);\n+        \n+        // assert that even though the validation query times out, we still get a connection\n+        Connection con = this.datasource.getConnection();\n+        Assert.assertNotNull(con);\n+        Statement st = con.createStatement();\n+        ResultSet rs = st.executeQuery(\"SELECT 1\");\n+        rs.close();\n+        st.close();\n+        con.close();\n+    }\n+    \n+    /**\n+     * Mock Driver, Connection and Statement implementations use to verify setQueryTimeout was called.\n+     */\n+    public static class MockDriver implements java.sql.Driver {\n+        public static final String url = \"jdbc:tomcat:mock\";\n+\n+        public MockDriver() {\n+        }\n+\n+        @Override\n+        public boolean acceptsURL(String url) throws SQLException {\n+            return url!=null && url.equals(MockDriver.url);\n+        }\n+\n+        @Override\n+        public Connection connect(String url, Properties info) throws SQLException {\n+            return new MockConnection(info);\n+        }\n+\n+        @Override\n+        public int getMajorVersion() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int getMinorVersion() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public DriverPropertyInfo[] getPropertyInfo(String url, Properties info) throws SQLException {\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean jdbcCompliant() {\n+            return false;\n+        }\n+\n+        @Override\n+        public Logger getParentLogger() throws SQLFeatureNotSupportedException {\n+            return null;\n+        }\n+    }\n+    \n+    public static class MockConnection extends org.apache.tomcat.jdbc.test.driver.Connection {\n+        public MockConnection(Properties info) {\n+            super(info);\n+        }\n+\n+        @Override\n+        public Statement createStatement() throws SQLException {\n+            return new MockStatement();\n+        }\n+    }\n+    \n+    public static class MockStatement extends org.apache.tomcat.jdbc.test.driver.Statement {\n+        @Override\n+        public void setQueryTimeout(int seconds) throws SQLException {\n+            super.setQueryTimeout(seconds);\n+            Assert.assertEquals(TIMEOUT, seconds);\n+            isTimeoutSet = true;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/tomcat/raw/b022c5746f9b46c2d7a95ab7aaf423f5b5b3c25a/modules/jdbc-pool/src/test/java/org/apache/tomcat/jdbc/test/TestValidationQueryTimeout.java",
                "sha": "c681e52828c5818f982d82473635d7ea65f99204",
                "status": "added"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54693.\n- Add a validationQueryTimeout property\n- Avoid NPE caused by createConnection(..) returns null. (see Comment 6)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1521024 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/f4c1e4f78a8b7a6e38ea84fbd06fc006e88e6a11",
        "patched_files": [
            "PoolProperties.java",
            "PooledConnection.java",
            "DataSourceProxy.java",
            "jdbc-pool.xml",
            "mbeans-descriptors.xml",
            "ConnectionPool.java",
            "PoolConfiguration.java",
            "DataSourceFactory.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestValidationQueryTimeout.java"
        ]
    },
    "tomcat_b36dbec": {
        "bug_id": "tomcat_b36dbec",
        "commit": "https://github.com/apache/tomcat/commit/b36dbecb46527f4a50215e2861ce902aee73d134",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/b36dbecb46527f4a50215e2861ce902aee73d134/java/org/apache/catalina/connector/LocalStrings.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/LocalStrings.properties?ref=b36dbecb46527f4a50215e2861ce902aee73d134",
                "deletions": 0,
                "filename": "java/org/apache/catalina/connector/LocalStrings.properties",
                "patch": "@@ -63,6 +63,8 @@ coyoteResponse.setBufferSize.ise=Cannot change buffer size after data has been w\n \n inputBuffer.streamClosed=Stream closed\n \n+outputBuffer.writeNull=The String argument to write(String,int,int) may not be null\n+\n request.asyncNotSupported=A filter or servlet of the current chain does not support asynchronous operations.\n \n requestFacade.nullRequest=The request object has been recycled and is no longer associated with this facade",
                "raw_url": "https://github.com/apache/tomcat/raw/b36dbecb46527f4a50215e2861ce902aee73d134/java/org/apache/catalina/connector/LocalStrings.properties",
                "sha": "14c40ad98bf9feda3bd156d5a1c021ad9413a07c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/b36dbecb46527f4a50215e2861ce902aee73d134/java/org/apache/catalina/connector/OutputBuffer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/OutputBuffer.java?ref=b36dbecb46527f4a50215e2861ce902aee73d134",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/OutputBuffer.java",
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.tomcat.util.buf.ByteChunk;\n import org.apache.tomcat.util.buf.C2BConverter;\n import org.apache.tomcat.util.buf.CharChunk;\n+import org.apache.tomcat.util.res.StringManager;\n \n /**\n  * The buffer used by Tomcat response. This is a derivative of the Tomcat 3.3\n@@ -44,6 +45,9 @@\n public class OutputBuffer extends Writer\n     implements ByteChunk.ByteOutputChannel, CharChunk.CharOutputChannel {\n \n+    private static final StringManager sm =\n+            StringManager.getManager(Constants.Package);\n+\n     // -------------------------------------------------------------- Constants\n \n     public static final String DEFAULT_ENCODING =\n@@ -524,7 +528,7 @@ public void write(String s, int off, int len)\n         }\n \n         if (s == null) {\n-            s = \"null\";\n+            throw new NullPointerException(sm.getString(\"outputBuffer.writeNull\"));\n         }\n         cb.append(s, off, len);\n         charsWritten += len;",
                "raw_url": "https://github.com/apache/tomcat/raw/b36dbecb46527f4a50215e2861ce902aee73d134/java/org/apache/catalina/connector/OutputBuffer.java",
                "sha": "4a3265061517afd1bb17440d500d5fda7c4c6739",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/b36dbecb46527f4a50215e2861ce902aee73d134/webapps/docs/changelog.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=b36dbecb46527f4a50215e2861ce902aee73d134",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -169,6 +169,12 @@\n         Update storeconfig with newly introduced elements: SessionIdGenerator,\n         CookieProcessor, JarScanner and JarScanFilter. (remm)\n       </fix>\n+      <fix>\n+        Throw a <code>NullPointerException</code> if a null string is passed to\n+        the <code>write(String,int,int)</code> method of the\n+        <code>PrintWriter</code> obtained from the <code>ServletResponse</code>.\n+        (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/b36dbecb46527f4a50215e2861ce902aee73d134/webapps/docs/changelog.xml",
                "sha": "00aaa1221e7e43a8336b52a060929aead5c53f1a",
                "status": "modified"
            }
        ],
        "message": "Throw a NPE if a null string is passed to the write(String,int,int) method of the PrintWriter obtained from the ServletResponse.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1634139 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/5f0c274665504ae0d246d7eda1ac591215bba639",
        "patched_files": [
            "LocalStrings.properties",
            "changelog.xml",
            "OutputBuffer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestOutputBuffer.java"
        ]
    },
    "tomcat_b67bf9b": {
        "bug_id": "tomcat_b67bf9b",
        "commit": "https://github.com/apache/tomcat/commit/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504/java/org/apache/catalina/core/StandardWrapper.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardWrapper.java?ref=b67bf9b557fc1e3af66c26ae93d4dc1b353ca504",
                "deletions": 3,
                "filename": "java/org/apache/catalina/core/StandardWrapper.java",
                "patch": "@@ -1115,10 +1115,11 @@ public synchronized Servlet loadServlet() throws ServletException {\n \n             classLoadTime=(int) (System.currentTimeMillis() -t1);\n \n-            singleThreadModel = servlet instanceof SingleThreadModel;\n-            if (singleThreadModel) {\n-                if (instancePool == null)\n+            if (servlet instanceof SingleThreadModel) {\n+                if (instancePool == null) {\n                     instancePool = new Stack<Servlet>();\n+                }\n+                singleThreadModel = true;\n             }\n \n             initServlet(servlet);",
                "raw_url": "https://github.com/apache/tomcat/raw/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504/java/org/apache/catalina/core/StandardWrapper.java",
                "sha": "95d857fb8822fa5d3581093ba8920243fe92460d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=b67bf9b557fc1e3af66c26ae93d4dc1b353ca504",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -186,6 +186,10 @@\n         support (enhancement <bug>12428</bug>) that could trigger authentication\n         even if preemptive authentication was disabled. (markt) \n       </fix>\n+      <fix>\n+        Prevent possible NPE when serving Servlets that implement the\n+        SingleThreadModel interface. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/b67bf9b557fc1e3af66c26ae93d4dc1b353ca504/webapps/docs/changelog.xml",
                "sha": "1408706322c26e2bf4cada206b61ea90e1eacfac",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE when serving STM servlets\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1141948 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/ea2a5298e04a7ceba033d44ff84b1bd2fdeb0056",
        "patched_files": [
            "StandardWrapper.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardWrapper.java"
        ]
    },
    "tomcat_b7d9ef8": {
        "bug_id": "tomcat_b7d9ef8",
        "commit": "https://github.com/apache/tomcat/commit/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0/java/org/apache/catalina/mapper/Mapper.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/Mapper.java?ref=b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0",
                "deletions": 2,
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "patch": "@@ -879,7 +879,7 @@ private final void internalMapWrapper(ContextVersion contextVersion,\n         }\n \n         if(mappingData.wrapper == null && noServletPath &&\n-                mappingData.context.getMapperContextRootRedirectEnabled()) {\n+                contextVersion.object.getMapperContextRootRedirectEnabled()) {\n             // The path is empty, redirect to \"/\"\n             path.append('/');\n             pathEnd = path.getEnd();\n@@ -1008,7 +1008,7 @@ private final void internalMapWrapper(ContextVersion contextVersion,\n                     file = contextVersion.resources.getResource(pathStr);\n                 }\n                 if (file != null && file.isDirectory() &&\n-                        mappingData.context.getMapperDirectoryRedirectEnabled()) {\n+                        contextVersion.object.getMapperDirectoryRedirectEnabled()) {\n                     // Note: this mutates the path: do not do any processing\n                     // after this (since we set the redirectPath, there\n                     // shouldn't be any)",
                "raw_url": "https://github.com/apache/tomcat/raw/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0/java/org/apache/catalina/mapper/Mapper.java",
                "sha": "d26aa6aa898098d24e6e8371dfa5205218da55f4",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0/webapps/docs/changelog.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -84,6 +84,9 @@\n         Based on a patch submitted by Coty Sutherland.\n         (remm)\n       </fix>\n+      <fix>\n+        <bug>59255</bug>: Fix posible NPE in mapper. (kkolinko/remm)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/b7d9ef8afa4854c3dbf0a195c74cd2f07c4590e0/webapps/docs/changelog.xml",
                "sha": "e7a6f2103e4c8b963770ec52575eb5f7f6015c3d",
                "status": "modified"
            }
        ],
        "message": "59255: Fix posible NPE in mapper, using Konstantin Kolinko's idea.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1737270 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/99772ce460459d409971098dccac8cd015a97f36",
        "patched_files": [
            "changelog.xml",
            "Mapper.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestMapper.java"
        ]
    },
    "tomcat_b90c0a1": {
        "bug_id": "tomcat_b90c0a1",
        "commit": "https://github.com/apache/tomcat/commit/b90c0a19b0f0b619cf4a1177b92691ae407238b3",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/b90c0a19b0f0b619cf4a1177b92691ae407238b3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=b90c0a19b0f0b619cf4a1177b92691ae407238b3",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -249,6 +249,10 @@ public boolean event(org.apache.coyote.Request req,\n             req.getRequestProcessor().setWorkerThreadName(null);\n             // Recycle the wrapper request and response\n             if (error || response.isClosed() || !request.isComet()) {\n+                ((Context) request.getMappingData().context).logAccess(\n+                        request, response,\n+                        System.currentTimeMillis() - req.getStartTime(),\n+                        false);\n                 request.recycle();\n                 request.setFilterChain(null);\n                 response.recycle();\n@@ -430,9 +434,12 @@ public void service(org.apache.coyote.Request req,\n             } else if (!comet) {\n                 request.finishRequest();\n                 response.finishResponse();\n-                if (postParseSuccess) {\n+                if (postParseSuccess &&\n+                        request.getMappingData().context != null) {\n                     // Log only if processing was invoked.\n                     // If postParseRequest() failed, it has already logged it.\n+                    // If context is null this was the start of a comet request\n+                    // that failed and has already been logged.\n                     ((Context) request.getMappingData().context).logAccess(\n                             request, response,\n                             System.currentTimeMillis() - req.getStartTime(),",
                "raw_url": "https://github.com/apache/tomcat/raw/b90c0a19b0f0b619cf4a1177b92691ae407238b3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "e38fcdcb86439a4f0301e5c575e4ca0bb12f03b4",
                "status": "modified"
            },
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/tomcat/blob/b90c0a19b0f0b619cf4a1177b92691ae407238b3/test/org/apache/catalina/comet/TestCometProcessor.java",
                "changes": 131,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/comet/TestCometProcessor.java?ref=b90c0a19b0f0b619cf4a1177b92691ae407238b3",
                "deletions": 30,
                "filename": "test/org/apache/catalina/comet/TestCometProcessor.java",
                "patch": "@@ -36,12 +36,14 @@\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n+import org.apache.catalina.Wrapper;\n import org.apache.catalina.comet.CometEvent.EventType;\n import org.apache.catalina.connector.CometEventImpl;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.connector.Response;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.TomcatBaseTest;\n+import org.apache.catalina.valves.TesterAccessLogValve;\n import org.apache.catalina.valves.ValveBase;\n \n public class TestCometProcessor extends TomcatBaseTest {\n@@ -116,16 +118,41 @@ public void testAsyncClose() throws Exception {\n \n     @Test\n     public void testSimpleCometClient() throws Exception {\n+        doSimpleCometTest(null);\n+    }\n+\n+    @Test\n+    public void testSimpleCometClientBeginFail() throws Exception {\n+        doSimpleCometTest(SimpleCometServlet.FAIL_ON_BEGIN);\n+    }\n \n+    @Test\n+    public void testSimpleCometClientReadFail() throws Exception {\n+        doSimpleCometTest(SimpleCometServlet.FAIL_ON_READ);\n+    }\n+\n+    @Test\n+    public void testSimpleCometClientEndFail() throws Exception {\n+        doSimpleCometTest(SimpleCometServlet.FAIL_ON_END);\n+    }\n+\n+    private void doSimpleCometTest(String initParam) throws Exception {\n         if (!isCometSupported()) {\n             return;\n         }\n \n         // Setup Tomcat instance\n         Tomcat tomcat = getTomcatInstance();\n         Context root = tomcat.addContext(\"\", TEMP_DIR);\n-        Tomcat.addServlet(root, \"comet\", new SimpleCometServlet());\n+        Wrapper w = Tomcat.addServlet(root, \"comet\", new SimpleCometServlet());\n+        if (initParam != null) {\n+            w.addInitParameter(initParam, \"true\");\n+        }\n         root.addServletMapping(\"/\", \"comet\");\n+\n+        TesterAccessLogValve alv = new TesterAccessLogValve();\n+        root.getPipeline().addValve(alv);\n+\n         tomcat.start();\n \n         // Create connection to Comet servlet\n@@ -151,36 +178,51 @@ public void testSimpleCometClient() throws Exception {\n         os.close();\n         is.close();\n \n-        // Validate response\n         String[] response = readThread.getResponse().split(\"\\r\\n\");\n-        assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n-        assertEquals(\"Server: Apache-Coyote/1.1\", response[1]);\n-        assertTrue(response[2].startsWith(\"Set-Cookie: JSESSIONID=\"));\n-        assertEquals(\"Content-Type: text/plain;charset=ISO-8859-1\", response[3]);\n-        assertEquals(\"Transfer-Encoding: chunked\", response[4]);\n-        assertTrue(response[5].startsWith(\"Date: \"));\n-        assertEquals(\"\", response[6]);\n-        assertEquals(\"7\", response[7]);\n-        assertEquals(\"BEGIN\", response[8]);\n-        assertEquals(\"\", response[9]);\n-        assertEquals(\"17\", response[10]);\n-        assertEquals(\"Client: READ: 4 bytes\", response[11]);\n-        assertEquals(\"\", response[12]);\n-        assertEquals(\"17\", response[13]);\n-        assertEquals(\"Client: READ: 4 bytes\", response[14]);\n-        assertEquals(\"\", response[15]);\n-        assertEquals(\"17\", response[16]);\n-        assertEquals(\"Client: READ: 4 bytes\", response[17]);\n-        assertEquals(\"\", response[18]);\n-        assertEquals(\"17\", response[19]);\n-        assertEquals(\"Client: READ: 4 bytes\", response[20]);\n-        assertEquals(\"\", response[21]);\n-        assertEquals(\"d\", response[22]);\n-        assertEquals(\"Client: END\", response[23]);\n-        assertEquals(\"\", response[24]);\n-        assertEquals(\"0\", response[25]);\n-        // Expect 26 lines\n-        assertEquals(26, response.length);\n+        if (initParam == null) {\n+            // Normal response expected\n+            // Validate response\n+            assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n+            assertEquals(\"Server: Apache-Coyote/1.1\", response[1]);\n+            assertTrue(response[2].startsWith(\"Set-Cookie: JSESSIONID=\"));\n+            assertEquals(\"Content-Type: text/plain;charset=ISO-8859-1\", response[3]);\n+            assertEquals(\"Transfer-Encoding: chunked\", response[4]);\n+            assertTrue(response[5].startsWith(\"Date: \"));\n+            assertEquals(\"\", response[6]);\n+            assertEquals(\"7\", response[7]);\n+            assertEquals(\"BEGIN\", response[8]);\n+            assertEquals(\"\", response[9]);\n+            assertEquals(\"17\", response[10]);\n+            assertEquals(\"Client: READ: 4 bytes\", response[11]);\n+            assertEquals(\"\", response[12]);\n+            assertEquals(\"17\", response[13]);\n+            assertEquals(\"Client: READ: 4 bytes\", response[14]);\n+            assertEquals(\"\", response[15]);\n+            assertEquals(\"17\", response[16]);\n+            assertEquals(\"Client: READ: 4 bytes\", response[17]);\n+            assertEquals(\"\", response[18]);\n+            assertEquals(\"17\", response[19]);\n+            assertEquals(\"Client: READ: 4 bytes\", response[20]);\n+            assertEquals(\"\", response[21]);\n+            assertEquals(\"d\", response[22]);\n+            assertEquals(\"Client: END\", response[23]);\n+            assertEquals(\"\", response[24]);\n+            assertEquals(\"0\", response[25]);\n+            // Expect 26 lines\n+            assertEquals(26, response.length);\n+        } else {\n+            // Failure expected only expected for the fail on begin\n+            // Failure at any later stage and the reponse headers (including the\n+            // 200 response code will already have been sent to the client\n+            if (initParam == SimpleCometServlet.FAIL_ON_BEGIN) {\n+                assertEquals(\"HTTP/1.1 500 Internal Server Error\", response[0]);\n+                alv.validateAccessLog(1, 500, 0, 1000);\n+            } else {\n+                assertEquals(\"HTTP/1.1 200 OK\", response[0]);\n+                alv.validateAccessLog(1, 200, 0, 5000);\n+            }\n+\n+        }\n     }\n \n     /**\n@@ -267,6 +309,26 @@ private boolean isCometSupported() {\n \n         private static final long serialVersionUID = 1L;\n \n+        public static final String FAIL_ON_BEGIN = \"failOnBegin\";\n+        public static final String FAIL_ON_READ = \"failOnRead\";\n+        public static final String FAIL_ON_END = \"failOnEnd\";\n+\n+        private boolean failOnBegin = false;\n+        private boolean failOnRead = false;\n+        private boolean failOnEnd = false;\n+\n+\n+        @Override\n+        public void init() throws ServletException {\n+            failOnBegin = Boolean.valueOf(getServletConfig().getInitParameter(\n+                    FAIL_ON_BEGIN)).booleanValue();\n+            failOnRead = Boolean.valueOf(getServletConfig().getInitParameter(\n+                    FAIL_ON_READ)).booleanValue();\n+            failOnEnd = Boolean.valueOf(getServletConfig().getInitParameter(\n+                    FAIL_ON_END)).booleanValue();\n+        }\n+\n+\n         @Override\n         public void event(CometEvent event) throws IOException,\n                 ServletException {\n@@ -278,9 +340,15 @@ public void event(CometEvent event) throws IOException,\n             session.setMaxInactiveInterval(30);\n \n             if (event.getEventType() == EventType.BEGIN) {\n+                if (failOnBegin) {\n+                    throw new IOException(\"Fail on begin\");\n+                }\n                 response.setContentType(\"text/plain\");\n                 response.getWriter().print(\"BEGIN\" + \"\\r\\n\");\n             } else if (event.getEventType() == EventType.READ) {\n+                if (failOnRead) {\n+                    throw new IOException(\"Fail on read\");\n+                }\n                 InputStream is = request.getInputStream();\n                 int count = 0;\n                 while (is.available() > 0) {\n@@ -290,6 +358,9 @@ public void event(CometEvent event) throws IOException,\n                 String msg = \"READ: \" + count + \" bytes\";\n                 response.getWriter().print(\"Client: \" + msg + \"\\r\\n\");\n             } else if (event.getEventType() == EventType.END) {\n+                if (failOnEnd) {\n+                    throw new IOException(\"Fail on end\");\n+                }\n                 String msg = \"END\";\n                 response.getWriter().print(\"Client: \" + msg + \"\\r\\n\");\n                 event.close();",
                "raw_url": "https://github.com/apache/tomcat/raw/b90c0a19b0f0b619cf4a1177b92691ae407238b3/test/org/apache/catalina/comet/TestCometProcessor.java",
                "sha": "481bdd3bf4243671392c32ca3c96670c4953f6fc",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52009\nFix the NPE if an error occurs during comet processing\nAdd test cases for errors during comet processing\nEnsure access log entries are made if an error occurs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1183494 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/fadcc4cdd092822999d7538af063e01c4b143917",
        "patched_files": [
            "CometProcessor.java",
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCometProcessor.java",
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_b92d9be": {
        "bug_id": "tomcat_b92d9be",
        "commit": "https://github.com/apache/tomcat/commit/b92d9be3771e92d1108f5dbd2df663c4e187c1cc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/java/javax/el/BeanELResolver.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/javax/el/BeanELResolver.java?ref=b92d9be3771e92d1108f5dbd2df663c4e187c1cc",
                "deletions": 9,
                "filename": "java/javax/el/BeanELResolver.java",
                "patch": "@@ -205,10 +205,6 @@ public boolean isReadOnly(ELContext context, Object base, Object property) {\n \n     @Override\n     public Iterator<FeatureDescriptor> getFeatureDescriptors(ELContext context, Object base) {\n-        if (context == null) {\n-            throw new NullPointerException();\n-        }\n-\n         if (base == null) {\n             return null;\n         }\n@@ -230,10 +226,6 @@ public boolean isReadOnly(ELContext context, Object base, Object property) {\n \n     @Override\n     public Class<?> getCommonPropertyType(ELContext context, Object base) {\n-        if (context == null) {\n-            throw new NullPointerException();\n-        }\n-\n         if (base != null) {\n             return Object.class;\n         }\n@@ -319,7 +311,7 @@ private Method write(ELContext ctx) {\n             if (this.write == null) {\n                 this.write = Util.getMethod(this.owner, descriptor.getWriteMethod());\n                 if (this.write == null) {\n-                    throw new PropertyNotFoundException(Util.message(ctx,\n+                    throw new PropertyNotWritableException(Util.message(ctx,\n                             \"propertyNotWritable\", new Object[] {\n                                     owner.getName(), descriptor.getName() }));\n                 }",
                "raw_url": "https://github.com/apache/tomcat/raw/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/java/javax/el/BeanELResolver.java",
                "sha": "8a6c02f1325afeb35eea09a0700ba8255da6fdea",
                "status": "modified"
            },
            {
                "additions": 445,
                "blob_url": "https://github.com/apache/tomcat/blob/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/test/javax/el/TestBeanELResolver.java",
                "changes": 446,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/javax/el/TestBeanELResolver.java?ref=b92d9be3771e92d1108f5dbd2df663c4e187c1cc",
                "deletions": 1,
                "filename": "test/javax/el/TestBeanELResolver.java",
                "patch": "@@ -16,14 +16,26 @@\n  */\n package javax.el;\n \n-import org.junit.Assert;\n+import java.beans.FeatureDescriptor;\n+import java.beans.PropertyDescriptor;\n+import java.util.Iterator;\n \n+import org.junit.Assert;\n import org.junit.Test;\n \n import org.apache.jasper.el.ELContextImpl;\n \n public class TestBeanELResolver {\n \n+    private static final String METHOD01_NAME = \"toString\";\n+    private static final String METHOD02_NAME = \"<init>\";\n+    private static final String METHOD03_NAME = \"nonExistingMethod\";\n+    private static final String BEAN_NAME = \"test\";\n+    private static final String PROPERTY01_NAME = \"valueA\";\n+    private static final String PROPERTY02_NAME = \"valueB\";\n+    private static final String PROPERTY03_NAME = \"name\";\n+    private static final String PROPERTY_VALUE = \"test1\";\n+\n     @Test\n     public void testBug53421() {\n         ExpressionFactory factory = ExpressionFactory.newInstance();\n@@ -54,11 +66,443 @@ public void testBug53421() {\n                 msg.contains(type));\n     }\n \n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testGetType01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.getType(null, new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a valid property is not resolved if base is null.\n+     */\n+    @Test\n+    public void testGetType02() {\n+        doNegativeTest(null, new Object(), MethodUnderTest.GET_TYPE, true);\n+    }\n+\n+    /**\n+     * Tests that a valid property is resolved.\n+     */\n+    @Test\n+    public void testGetType03() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Class<?> result = resolver.getType(context, new Bean(), PROPERTY01_NAME);\n+\n+        Assert.assertEquals(String.class, result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not exist.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetType04() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getType(context, new Bean(), PROPERTY02_NAME);\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when a coercion cannot be\n+     * performed.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetType05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getType(context, new Bean(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testGetValue01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.getValue(null, new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a valid property is not resolved if base is null.\n+     */\n+    @Test\n+    public void testGetValue02() {\n+        doNegativeTest(null, new Object(), MethodUnderTest.GET_VALUE, true);\n+    }\n+\n+    /**\n+     * Tests that a valid property is resolved.\n+     */\n+    @Test\n+    public void testGetValue03() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Object result = resolver.getValue(context, new TesterBean(BEAN_NAME), PROPERTY03_NAME);\n+\n+        Assert.assertEquals(BEAN_NAME, result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not exist.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetValue04() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getValue(context, new Bean(), PROPERTY02_NAME);\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when a coercion cannot be\n+     * performed.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetValue05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getValue(context, new Bean(), new Object());\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property is not readable.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testGetValue06() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getValue(context, new Bean(), PROPERTY01_NAME);\n+    }\n+\n+    /**\n+     * Tests that getter method throws exception which should be propagated.\n+     */\n+    @Test(expected = ELException.class)\n+    public void testGetValue07() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.getValue(context, new TesterBean(BEAN_NAME), PROPERTY01_NAME);\n+    }\n+\n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testSetValue01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.setValue(null, new Object(), new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a valid property is not resolved if base is null.\n+     */\n+    @Test\n+    public void testSetValue02() {\n+        doNegativeTest(null, new Object(), MethodUnderTest.SET_VALUE, true);\n+    }\n+\n+    /**\n+     * Tests that an exception is thrown when readOnly is true.\n+     */\n+    @Test(expected = PropertyNotWritableException.class)\n+    public void testSetValue03() {\n+        BeanELResolver resolver = new BeanELResolver(true);\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.setValue(context, new Bean(), new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that a valid property is resolved.\n+     */\n+    @Test\n+    public void testSetValue04() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        TesterBean bean = new TesterBean(BEAN_NAME);\n+        resolver.setValue(context, bean, PROPERTY03_NAME, PROPERTY_VALUE);\n+\n+        Assert.assertEquals(PROPERTY_VALUE, resolver.getValue(context, bean, PROPERTY03_NAME));\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when a coercion cannot be\n+     * performed.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testSetValue05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.setValue(context, new Bean(), new Object(), PROPERTY_VALUE);\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not exist.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testSetValue06() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.setValue(context, new Bean(), PROPERTY02_NAME, PROPERTY_VALUE);\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not have\n+     * setter method.\n+     */\n+    @Test(expected = PropertyNotWritableException.class)\n+    public void testSetValue07() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.setValue(context, new TesterBean(BEAN_NAME), PROPERTY01_NAME, PROPERTY_VALUE);\n+    }\n+\n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testIsReadOnly01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.isReadOnly(null, new Object(), new Object());\n+    }\n+\n+    /**\n+     * Tests that the propertyResolved is false if base is null.\n+     */\n+    @Test\n+    public void testIsReadOnly02() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.isReadOnly(context, null, new Object());\n+\n+        Assert.assertFalse(context.isPropertyResolved());\n+\n+        resolver = new BeanELResolver(true);\n+\n+        resolver.isReadOnly(context, null, new Object());\n+\n+        Assert.assertFalse(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that if the BeanELResolver is constructed with readOnly the method\n+     * will return always true.\n+     */\n+    @Test\n+    public void testIsReadOnly03() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        boolean result = resolver.isReadOnly(context, new TesterBean(BEAN_NAME), PROPERTY03_NAME);\n+\n+        Assert.assertFalse(result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+\n+        resolver = new BeanELResolver(true);\n+\n+        result = resolver.isReadOnly(context, new TesterBean(BEAN_NAME), PROPERTY03_NAME);\n+\n+        Assert.assertTrue(result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that an exception is thrown when a coercion cannot be performed.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testIsReadOnly04() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.isReadOnly(context, new TesterBean(BEAN_NAME), new Integer(0));\n+    }\n+\n+    /**\n+     * Tests that an exception will be thrown when the property does not exist.\n+     */\n+    @Test(expected = PropertyNotFoundException.class)\n+    public void testIsReadOnly05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.isReadOnly(context, new Bean(), PROPERTY02_NAME);\n+    }\n+\n+    /**\n+     * Tests that true will be returned when the property does not have setter\n+     * method.\n+     */\n+    @Test\n+    public void testIsReadOnly06() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        boolean result = resolver.isReadOnly(context, new TesterBean(BEAN_NAME), PROPERTY01_NAME);\n+\n+        Assert.assertTrue(result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that a valid FeatureDescriptors are not returned if base is not\n+     * Map.\n+     */\n+    @Test\n+    public void testGetFeatureDescriptors01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Iterator<FeatureDescriptor> result = resolver.getFeatureDescriptors(context, null);\n+\n+        Assert.assertNull(result);\n+    }\n+\n+    /**\n+     * Tests that a valid FeatureDescriptors are returned.\n+     */\n+    @Test\n+    public void testGetFeatureDescriptors02() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Iterator<FeatureDescriptor> result = resolver.getFeatureDescriptors(context, new Bean());\n+\n+        while (result.hasNext()) {\n+            PropertyDescriptor featureDescriptor = (PropertyDescriptor) result.next();\n+            Assert.assertEquals(featureDescriptor.getPropertyType(),\n+                    featureDescriptor.getValue(ELResolver.TYPE));\n+            Assert.assertEquals(Boolean.TRUE,\n+                    featureDescriptor.getValue(ELResolver.RESOLVABLE_AT_DESIGN_TIME));\n+        }\n+    }\n+\n+    /**\n+     * Tests that a null context results in an NPE as per EL Javadoc.\n+     */\n+    @Test(expected = NullPointerException.class)\n+    public void testInvoke01() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        resolver.invoke(null, new Object(), new Object(), new Class<?>[0], new Object[0]);\n+    }\n+\n+    /**\n+     * Tests that a valid property is not resolved if base is null.\n+     */\n+    @Test\n+    public void testInvoke02() {\n+        doNegativeTest(null, new Object(), MethodUnderTest.INVOKE, true);\n+    }\n+\n+    /**\n+     * Tests a method invocation.\n+     */\n+    @Test\n+    public void testInvoke03() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Object result = resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD01_NAME,\n+                new Class<?>[] {}, new Object[] {});\n+\n+        Assert.assertEquals(BEAN_NAME, result);\n+        Assert.assertTrue(context.isPropertyResolved());\n+    }\n+\n+    /**\n+     * Tests that the method name cannot be coerced to String.\n+     */\n+    @Test\n+    public void testInvoke04() {\n+        doNegativeTest(new Bean(), null, MethodUnderTest.INVOKE, true);\n+    }\n+\n+    /**\n+     * Tests that a call to &lt;init&gt; as a method name will throw an exception.\n+     */\n+    @Test(expected = MethodNotFoundException.class)\n+    public void testInvoke05() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD02_NAME, new Class<?>[] {},\n+                new Object[] {});\n+    }\n+\n+    /**\n+     * Tests that a call to a non existing method will throw an exception.\n+     */\n+    @Test(expected = MethodNotFoundException.class)\n+    public void testInvoke06() {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        resolver.invoke(context, new TesterBean(BEAN_NAME), METHOD03_NAME, new Class<?>[] {},\n+                new Object[] {});\n+    }\n+\n     private static class Bean {\n \n         @SuppressWarnings(\"unused\")\n         public void setValueA(String valueA) {\n             // NOOP\n         }\n     }\n+\n+    private void doNegativeTest(Object base, Object trigger, MethodUnderTest method,\n+            boolean checkResult) {\n+        BeanELResolver resolver = new BeanELResolver();\n+        ELContext context = new StandardELContext(ELManager.getExpressionFactory());\n+\n+        Object result = null;\n+        switch (method) {\n+        case GET_VALUE: {\n+            result = resolver.getValue(context, base, trigger);\n+            break;\n+        }\n+        case SET_VALUE: {\n+            resolver.setValue(context, base, trigger, new Object());\n+            break;\n+        }\n+        case GET_TYPE: {\n+            result = resolver.getType(context, base, trigger);\n+            break;\n+        }\n+        case INVOKE: {\n+            result = resolver.invoke(context, base, trigger, new Class<?>[0], new Object[0]);\n+            break;\n+        }\n+        default: {\n+            // Should never happen\n+            Assert.fail(\"Missing case for method\");\n+        }\n+        }\n+\n+        if (checkResult) {\n+            Assert.assertNull(result);\n+        }\n+        Assert.assertFalse(context.isPropertyResolved());\n+    }\n+\n+    private static enum MethodUnderTest {\n+        GET_VALUE, SET_VALUE, GET_TYPE, INVOKE\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/tomcat/raw/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/test/javax/el/TestBeanELResolver.java",
                "sha": "44fbdc32bb9d60a5f332e105910c161bfa3e3747",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/test/javax/el/TesterBean.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/javax/el/TesterBean.java?ref=b92d9be3771e92d1108f5dbd2df663c4e187c1cc",
                "deletions": 1,
                "filename": "test/javax/el/TesterBean.java",
                "patch": "@@ -18,7 +18,7 @@\n \n public class TesterBean {\n \n-    private final String name;\n+    private String name;\n \n     public TesterBean(String name) {\n         this.name = name;\n@@ -28,8 +28,16 @@ public String getName() {\n         return name;\n     }\n \n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n     @Override\n     public String toString() {\n         return getName();\n     }\n+\n+    public String getValueA() throws Exception {\n+        throw new Exception();\n+    }\n }",
                "raw_url": "https://github.com/apache/tomcat/raw/b92d9be3771e92d1108f5dbd2df663c4e187c1cc/test/javax/el/TesterBean.java",
                "sha": "2169d5952f514fc4ebf28b31168b4e113a4783c3",
                "status": "modified"
            }
        ],
        "message": "javax.el.BeanELResolver:\n- getFeatureDescriptors, getCommonPropertyType do not throw NPE when the supplied context is null.\n- setValue will throw PropertyNotWritableException instead of PropertyNotFoundException when there is no setter for the property.\n- unit test is added\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1517536 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/909def5c24f31bed5bae31c3090c5734057d0d09",
        "patched_files": [
            "BeanELResolver.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TesterBean.java",
            "TestBeanELResolver.java"
        ]
    },
    "tomcat_b96fe4c": {
        "bug_id": "tomcat_b96fe4c",
        "commit": "https://github.com/apache/tomcat/commit/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7/java/org/apache/catalina/loader/WebappLoader.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/loader/WebappLoader.java?ref=b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7",
                "deletions": 1,
                "filename": "java/org/apache/catalina/loader/WebappLoader.java",
                "patch": "@@ -487,7 +487,9 @@ protected void stopInternal() throws LifecycleException {\n         servletContext.removeAttribute(Globals.CLASS_PATH_ATTR);\n \n         // Throw away our current class loader\n-        ((Lifecycle) classLoader).stop();\n+        if (classLoader != null) {\n+            ((Lifecycle) classLoader).stop();\n+        }\n \n         try {\n             String contextName = context.getName();",
                "raw_url": "https://github.com/apache/tomcat/raw/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7/java/org/apache/catalina/loader/WebappLoader.java",
                "sha": "be429bdf1fdc65de0bf6e0cdc292196d2d0a7aa1",
                "status": "modified"
            },
            {
                "additions": 106,
                "blob_url": "https://github.com/apache/tomcat/blob/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7/test/org/apache/catalina/core/TestStandardContext.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestStandardContext.java?ref=b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7",
                "deletions": 1,
                "filename": "test/org/apache/catalina/core/TestStandardContext.java",
                "patch": "@@ -49,12 +49,17 @@\n import org.junit.Test;\n \n import org.apache.catalina.Context;\n+import org.apache.catalina.Lifecycle;\n+import org.apache.catalina.LifecycleEvent;\n+import org.apache.catalina.LifecycleException;\n+import org.apache.catalina.LifecycleListener;\n import org.apache.catalina.LifecycleState;\n import org.apache.catalina.Wrapper;\n import org.apache.catalina.authenticator.BasicAuthenticator;\n import org.apache.catalina.deploy.FilterDef;\n import org.apache.catalina.deploy.FilterMap;\n import org.apache.catalina.deploy.LoginConfig;\n+import org.apache.catalina.loader.WebappLoader;\n import org.apache.catalina.startup.SimpleHttpClient;\n import org.apache.catalina.startup.TestTomcat.MapRealm;\n import org.apache.catalina.startup.Tomcat;\n@@ -166,13 +171,113 @@ public void doFilter(ServletRequest request, ServletResponse response,\n         public void init(FilterConfig filterConfig) throws ServletException {\n             boolean fail = filterConfig.getInitParameter(\"fail\").equals(\"true\");\n             if (fail) {\n-                throw new ServletException(\"Init fail\",\n+                throw new ServletException(\"Init fail (test)\",\n                         new ClassNotFoundException());\n             }\n         }\n \n     }\n \n+    @Test\n+    public void testWebappLoaderStartFail() throws Exception {\n+        // Test that if WebappLoader start() fails and if the cause of\n+        // the failure is gone, the context can be started without\n+        // a need to redeploy it.\n+\n+        // Set up a container\n+        Tomcat tomcat = getTomcatInstance();\n+        tomcat.start();\n+        // To not start Context automatically, as we have to configure it first\n+        ((ContainerBase) tomcat.getHost()).setStartChildren(false);\n+\n+        FailingWebappLoader loader = new FailingWebappLoader();\n+        File root = new File(\"test/webapp-3.0\");\n+        Context context = tomcat.addWebapp(\"\", root.getAbsolutePath());\n+        context.setLoader(loader);\n+\n+        try {\n+            context.start();\n+            fail();\n+        } catch (LifecycleException ex) {\n+            // As expected\n+        }\n+        assertEquals(LifecycleState.FAILED, context.getState());\n+\n+        // The second attempt\n+        loader.setFail(false);\n+        context.start();\n+        assertEquals(LifecycleState.STARTED, context.getState());\n+\n+        // Using a test from testBug49922() to check that the webapp is running\n+        ByteChunk result = getUrl(\"http://localhost:\" + getPort() +\n+                \"/bug49922/target\");\n+        assertEquals(\"Target\", result.toString());\n+    }\n+\n+    @Test\n+    public void testWebappListenerConfigureFail() throws Exception {\n+        // Test that if LifecycleListener on webapp fails during\n+        // configure_start event and if the cause of the failure is gone,\n+        // the context can be started without a need to redeploy it.\n+\n+        // Set up a container\n+        Tomcat tomcat = getTomcatInstance();\n+        tomcat.start();\n+        // To not start Context automatically, as we have to configure it first\n+        ((ContainerBase) tomcat.getHost()).setStartChildren(false);\n+\n+        FailingLifecycleListener listener = new FailingLifecycleListener();\n+        File root = new File(\"test/webapp-3.0\");\n+        Context context = tomcat.addWebapp(\"\", root.getAbsolutePath());\n+        context.addLifecycleListener(listener);\n+\n+        try {\n+            context.start();\n+            fail();\n+        } catch (LifecycleException ex) {\n+            // As expected\n+        }\n+        assertEquals(LifecycleState.FAILED, context.getState());\n+\n+        // The second attempt\n+        listener.setFail(false);\n+        context.start();\n+        assertEquals(LifecycleState.STARTED, context.getState());\n+\n+        // Using a test from testBug49922() to check that the webapp is running\n+        ByteChunk result = getUrl(\"http://localhost:\" + getPort() +\n+                \"/bug49922/target\");\n+        assertEquals(\"Target\", result.toString());\n+    }\n+\n+    private static class FailingWebappLoader extends WebappLoader {\n+        private boolean fail = true;\n+        protected void setFail(boolean fail) {\n+            this.fail = fail;\n+        }\n+        @Override\n+        protected void startInternal() throws LifecycleException {\n+            if (fail) {\n+                throw new RuntimeException(\"Start fail (test)\");\n+            }\n+            super.startInternal();\n+        }\n+    }\n+\n+    private static class FailingLifecycleListener implements LifecycleListener {\n+        private final String failEvent = Lifecycle.CONFIGURE_START_EVENT;\n+        private boolean fail = true;\n+        protected void setFail(boolean fail) {\n+            this.fail = fail;\n+        }\n+        @Override\n+        public void lifecycleEvent(LifecycleEvent event) {\n+            if (fail && event.getType().equals(failEvent)) {\n+                throw new RuntimeException(failEvent + \" fail (test)\");\n+            }\n+        }\n+    }\n+\n     @Test\n     public void testBug49922() throws Exception {\n         // Test that filter mapping works. Test that the same filter is",
                "raw_url": "https://github.com/apache/tomcat/raw/b96fe4cc1ffb1ec144be9ce8ee153cdc6766ecd7/test/org/apache/catalina/core/TestStandardContext.java",
                "sha": "47f9ddc3f752949bcdc6d77460760480ab3ae7cb",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in WebappLoader that happens when stop() is called after a failed start.\nAdd tests that a context can be started again after a failure.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1430165 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/3a9990b5648538abca2d6621502f564753d8d5e1",
        "patched_files": [
            "StandardContext.java",
            "WebappLoader.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardContext.java"
        ]
    },
    "tomcat_bcb9c58": {
        "bug_id": "tomcat_bcb9c58",
        "commit": "https://github.com/apache/tomcat/commit/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13/java/org/apache/jasper/resources/LocalStrings.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/resources/LocalStrings.properties?ref=bcb9c58d3855614f6e5252d27c26ceb9dceb9e13",
                "deletions": 1,
                "filename": "java/org/apache/jasper/resources/LocalStrings.properties",
                "patch": "@@ -402,4 +402,4 @@ org.apache.jasper.compiler.TldCache.servletContextNull=The provided SevletContex\n org.apache.jasper.servlet.JasperInitializer.onStartup=Initializing Jasper for context [{0}]\n org.apache.jasper.servlet.TldScanner.webxmlSkip=Skipping load of TLD for URI {1} from resource path {0} as it has already been defined in <jsp-config>\n org.apache.jasper.servlet.TldScanner.webxmlAdd=Loading TLD for URI {1} from resource path {0}\n-\n+org.apache.jasper.servlet.TldScanner.webxmlFailPathDoesNotExist=Failed to process TLD with path [{0}] and URI [{1}]. The specified path does not exist.",
                "raw_url": "https://github.com/apache/tomcat/raw/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13/java/org/apache/jasper/resources/LocalStrings.properties",
                "sha": "cc26ee3847a5aff98468701412ce27b9cb6e7da7",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tomcat/blob/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13/java/org/apache/jasper/servlet/TldScanner.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/servlet/TldScanner.java?ref=bcb9c58d3855614f6e5252d27c26ceb9dceb9e13",
                "deletions": 14,
                "filename": "java/org/apache/jasper/servlet/TldScanner.java",
                "patch": "@@ -175,21 +175,27 @@ protected void scanJspConfig() throws IOException, SAXException {\n             }\n \n             URL url = context.getResource(resourcePath);\n-            TldResourcePath tldResourcePath;\n-            if (resourcePath.endsWith(\".jar\")) {\n-                // if the path points to a jar file, the TLD is presumed to be\n-                // inside at META-INF/taglib.tld\n-                tldResourcePath = new TldResourcePath(\n-                        url, resourcePath, \"META-INF/taglib.tld\");\n+            if (url != null) {\n+                TldResourcePath tldResourcePath;\n+                if (resourcePath.endsWith(\".jar\")) {\n+                    // if the path points to a jar file, the TLD is presumed to be\n+                    // inside at META-INF/taglib.tld\n+                    tldResourcePath = new TldResourcePath(url, resourcePath, \"META-INF/taglib.tld\");\n+                } else {\n+                    tldResourcePath = new TldResourcePath(url, resourcePath);\n+                }\n+                // parse TLD but store using the URI supplied in the descriptor\n+                TaglibXml tld = tldParser.parse(tldResourcePath);\n+                uriTldResourcePathMap.put(taglibURI, tldResourcePath);\n+                tldResourcePathTaglibXmlMap.put(tldResourcePath, tld);\n+                if (tld.getListeners() != null) {\n+                    listeners.addAll(tld.getListeners());\n+                }\n             } else {\n-                tldResourcePath = new TldResourcePath(url, resourcePath);\n-            }\n-            // parse TLD but store using the URI supplied in the descriptor\n-            TaglibXml tld = tldParser.parse(tldResourcePath);\n-            uriTldResourcePathMap.put(taglibURI, tldResourcePath);\n-            tldResourcePathTaglibXmlMap.put(tldResourcePath, tld);\n-            if (tld.getListeners() != null) {\n-                listeners.addAll(tld.getListeners());\n+                log.warn(Localizer.getMessage(MSG + \".webxmlFailPathDoesNotExist\",\n+                        resourcePath,\n+                        taglibURI));\n+                continue;\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/bcb9c58d3855614f6e5252d27c26ceb9dceb9e13/java/org/apache/jasper/servlet/TldScanner.java",
                "sha": "8d56b5f1ed5c1420302d9d4e28d7ccfcee8c5347",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55905\nPrevent NPE when the specified tld resource does not exists.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1552071 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/82cf5dc6c2fc1a1dd0611267d5115aaeeaf48f2d",
        "patched_files": [
            "TldScanner.java",
            "LocalStrings.properties"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestTldScanner.java"
        ]
    },
    "tomcat_bd87fe1": {
        "bug_id": "tomcat_bd87fe1",
        "commit": "https://github.com/apache/tomcat/commit/bd87fe127b5c7a7bcb75c380dfe5cd2a5a11ddc8",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/bd87fe127b5c7a7bcb75c380dfe5cd2a5a11ddc8/java/org/apache/catalina/connector/Request.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/Request.java?ref=bd87fe127b5c7a7bcb75c380dfe5cd2a5a11ddc8",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/Request.java",
                "patch": "@@ -2818,7 +2818,9 @@ protected void parseParameters() {\n                 }\n                 return;\n             }\n-            parameters.processParameters(formData, 0, formData.length);\n+            if (formData != null) {\n+                parameters.processParameters(formData, 0, formData.length);\n+            }\n         }\n \n     }\n@@ -2864,6 +2866,9 @@ protected int readPostBody(byte body[], int len)\n                 body.append(buffer, 0, len);\n             }\n         }\n+        if (body.getLength() == 0) {\n+            return null;\n+        }\n         if (body.getLength() < body.getBuffer().length) {\n             int length = body.getLength();\n             byte[] result = new byte[length];",
                "raw_url": "https://github.com/apache/tomcat/raw/bd87fe127b5c7a7bcb75c380dfe5cd2a5a11ddc8/java/org/apache/catalina/connector/Request.java",
                "sha": "4ed0f6061b2c98e1652c71ea421b901c561a4adc",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49424\nAvoid NPE if no input data is provided in a chunked POST request\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@953434 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/734bee9d8d8550c9f1cd30c5fe499e63e6073c33",
        "patched_files": [
            "Request.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRequest.java"
        ]
    },
    "tomcat_bdd3f33": {
        "bug_id": "tomcat_bdd3f33",
        "commit": "https://github.com/apache/tomcat/commit/bdd3f33b708c247b110cbb3d483659cfe7892570",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/bdd3f33b708c247b110cbb3d483659cfe7892570/java/org/apache/catalina/deploy/WebXml.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/deploy/WebXml.java?ref=bdd3f33b708c247b110cbb3d483659cfe7892570",
                "deletions": 3,
                "filename": "java/org/apache/catalina/deploy/WebXml.java",
                "patch": "@@ -1934,7 +1934,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getLoadOnStartup() == null) {\n-            dest.setLoadOnStartup(src.getLoadOnStartup().toString());\n+            if (src.getLoadOnStartup() != null) {\n+                dest.setLoadOnStartup(src.getLoadOnStartup().toString());\n+            }\n         } else if (src.getLoadOnStartup() != null) {\n             if (failOnConflict &&\n                     !src.getLoadOnStartup().equals(dest.getLoadOnStartup())) {\n@@ -1943,7 +1945,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getEnabled() == null) {\n-            dest.setEnabled(src.getEnabled().toString());\n+            if (src.getEnabled() != null) {\n+                dest.setEnabled(src.getEnabled().toString());\n+            }\n         } else if (src.getEnabled() != null) {\n             if (failOnConflict &&\n                     !src.getEnabled().equals(dest.getEnabled())) {\n@@ -1971,7 +1975,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getAsyncSupported() == null) {\n-            dest.setAsyncSupported(src.getAsyncSupported().toString());\n+            if (src.getAsyncSupported() != null) {\n+                dest.setAsyncSupported(src.getAsyncSupported().toString());\n+            }\n         } else if (src.getAsyncSupported() != null) {\n             if (failOnConflict &&\n                     !src.getAsyncSupported().equals(dest.getAsyncSupported())) {",
                "raw_url": "https://github.com/apache/tomcat/raw/bdd3f33b708c247b110cbb3d483659cfe7892570/java/org/apache/catalina/deploy/WebXml.java",
                "sha": "8b3b528294f3709a01f4af847ab9ea3163999ecf",
                "status": "modified"
            }
        ],
        "message": "Avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@907497 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/8cf599cf1ffbf56756fdfa2e1beb52eeda6cbda7",
        "patched_files": [
            "WebXml.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebXml.java"
        ]
    },
    "tomcat_be7e11e": {
        "bug_id": "tomcat_be7e11e",
        "commit": "https://github.com/apache/tomcat/commit/be7e11ef3e7d0cac6daee6852c01596b248f4f1d",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tomcat/blob/be7e11ef3e7d0cac6daee6852c01596b248f4f1d/java/org/apache/catalina/core/ApplicationMapping.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/ApplicationMapping.java?ref=be7e11ef3e7d0cac6daee6852c01596b248f4f1d",
                "deletions": 11,
                "filename": "java/org/apache/catalina/core/ApplicationMapping.java",
                "patch": "@@ -33,35 +33,36 @@ public ApplicationMapping(MappingData mappingData) {\n \n     public Mapping getMapping() {\n         if (mapping == null) {\n+            String servletName;\n+            if (mappingData.wrapper == null) {\n+                servletName = \"\";\n+            } else {\n+                servletName = mappingData.wrapper.getName();\n+            }\n             switch (mappingData.matchType) {\n                 case CONTEXT_ROOT:\n-                    mapping = new MappingImpl(\"\", \"\", mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                    mapping = new MappingImpl(\"\", \"\", mappingData.matchType, servletName);\n                     break;\n                 case DEFAULT:\n-                    mapping = new MappingImpl(\"/\", \"/\", mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                    mapping = new MappingImpl(\"/\", \"/\", mappingData.matchType, servletName);\n                     break;\n                 case EXACT:\n                     mapping = new MappingImpl(mappingData.wrapperPath.toString(),\n-                            mappingData.wrapperPath.toString(), mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                            mappingData.wrapperPath.toString(), mappingData.matchType, servletName);\n                     break;\n                 case EXTENSION:\n                     String path = mappingData.wrapperPath.toString();\n                     int extIndex = path.lastIndexOf('.');\n                     mapping = new MappingImpl(path.substring(0, extIndex),\n-                            \"*\" + path.substring(extIndex), mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                            \"*\" + path.substring(extIndex), mappingData.matchType, servletName);\n                     break;\n                 case PATH:\n                     mapping = new MappingImpl(mappingData.pathInfo.toString(),\n                             mappingData.wrapperPath.toString() + \"/*\",\n-                            mappingData.matchType, mappingData.wrapper.getName());\n+                            mappingData.matchType, servletName);\n                     break;\n                 case UNKNOWN:\n-                    mapping = new MappingImpl(\"\", \"\", mappingData.matchType,\n-                            mappingData.wrapper.getName());\n+                    mapping = new MappingImpl(\"\", \"\", mappingData.matchType, servletName);\n                     break;\n             }\n         }",
                "raw_url": "https://github.com/apache/tomcat/raw/be7e11ef3e7d0cac6daee6852c01596b248f4f1d/java/org/apache/catalina/core/ApplicationMapping.java",
                "sha": "9bb4213c7c9765ac3c984dfa5f5345f728016175",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE in some error conditions / edge cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1738650 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/66c57a48a0eb054bb525ca0edb054b1b949f1f99",
        "patched_files": [
            "ApplicationMapping.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestApplicationMapping.java"
        ]
    },
    "tomcat_c099bfb": {
        "bug_id": "tomcat_c099bfb",
        "commit": "https://github.com/apache/tomcat/commit/c099bfbbe496f8dd6b23fcb634dfb2acbb895757",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/c099bfbbe496f8dd6b23fcb634dfb2acbb895757/java/org/apache/catalina/startup/ContextConfig.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=c099bfbbe496f8dd6b23fcb634dfb2acbb895757",
                "deletions": 0,
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "patch": "@@ -2101,6 +2101,9 @@ private void populateJavaClassCache(String className) {\n             String name = className.replace('.', '/') + \".class\";\n             InputStream is =\n                     context.getLoader().getClassLoader().getResourceAsStream(name);\n+            if (is == null) {\n+                return;\n+            }\n             ClassParser parser = new ClassParser(is, null);\n             try {\n                 JavaClass clazz = parser.parse();",
                "raw_url": "https://github.com/apache/tomcat/raw/c099bfbbe496f8dd6b23fcb634dfb2acbb895757/java/org/apache/catalina/startup/ContextConfig.java",
                "sha": "cf4887b9113bdad2cdc6c9dd8434d1456dc197da",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if class / interface is not present\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239024 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/de1c9099d7f94a8e04438db68424e40ad17d3898",
        "patched_files": [
            "ContextConfig.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestContextConfig.java"
        ]
    },
    "tomcat_ca92f04": {
        "bug_id": "tomcat_ca92f04",
        "commit": "https://github.com/apache/tomcat/commit/ca92f04362e99c2a378b08f108521493c7ac505d",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/tomcat/blob/ca92f04362e99c2a378b08f108521493c7ac505d/java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/http/parser/HttpParser.java?ref=ca92f04362e99c2a378b08f108521493c7ac505d",
                "deletions": 18,
                "filename": "java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "patch": "@@ -553,45 +553,50 @@ static int readHostIPv6(Reader reader) throws IOException {\n         int h16Size = 0;\n         int pos = 1;\n         boolean parsedDoubleColon = false;\n-        boolean previousWasColon = false;\n+        int precedingColonsCount = 0;\n \n         do {\n             c = reader.read();\n-            if (h16Count == 0 && previousWasColon && c != ':') {\n+            if (h16Count == 0 && precedingColonsCount == 1 && c != ':') {\n                 // Can't start with a single :\n                 throw new IllegalArgumentException();\n             }\n             if (HttpParser.isHex(c)) {\n                 if (h16Size == 0) {\n                     // Start of a new h16 block\n-                    previousWasColon = false;\n+                    precedingColonsCount = 0;\n                     h16Count++;\n-                    reader.mark(4);\n                 }\n                 h16Size++;\n                 if (h16Size > 4) {\n                     throw new IllegalArgumentException();\n                 }\n             } else if (c == ':') {\n-                if (previousWasColon) {\n-                    // End of ::\n-                    if (parsedDoubleColon) {\n-                        // Only allowed one :: sequence\n-                        throw new IllegalArgumentException();\n-                    }\n-                    parsedDoubleColon = true;\n-                    previousWasColon = false;\n-                    // :: represents at least one h16 block\n-                    h16Count++;\n+                if (precedingColonsCount >=2 ) {\n+                    // ::: is not allowed\n+                    throw new IllegalArgumentException();\n                 } else {\n-                    previousWasColon = true;\n+                    if(precedingColonsCount == 1) {\n+                        // End of ::\n+                        if (parsedDoubleColon ) {\n+                            // Only allowed one :: sequence\n+                            throw new IllegalArgumentException();\n+                        }\n+                        parsedDoubleColon = true;\n+                        // :: represents at least one h16 block\n+                        h16Count++;\n+                    }\n+                    precedingColonsCount++;\n+                    // mark if the next symbol is hex before the actual read\n+                    reader.mark(4);\n                 }\n                 h16Size = 0;\n             } else if (c == ']') {\n-                if (previousWasColon) {\n+                if (precedingColonsCount == 1) {\n                     // Can't end on a single ':'\n                     throw new IllegalArgumentException();\n                 }\n+                pos++;\n                 break;\n             } else if (c == '.') {\n                 if (h16Count == 7 || h16Count < 7 && parsedDoubleColon) {\n@@ -617,9 +622,12 @@ static int readHostIPv6(Reader reader) throws IOException {\n \n         c = reader.read();\n         if (c == ':') {\n-            return pos + 1;\n+            return pos;\n         } else {\n-            return -1;\n+            if(c == -1) {\n+                return -1;\n+            }\n+            throw new IllegalArgumentException();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/ca92f04362e99c2a378b08f108521493c7ac505d/java/org/apache/tomcat/util/http/parser/HttpParser.java",
                "sha": "6baf7e699ad48ca52d4a2a094ac5d077f61e1d3d",
                "status": "modified"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/tomcat/blob/ca92f04362e99c2a378b08f108521493c7ac505d/res/maven/mvn-pub.xml",
                "changes": 133,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/res/maven/mvn-pub.xml?ref=ca92f04362e99c2a378b08f108521493c7ac505d",
                "deletions": 80,
                "filename": "res/maven/mvn-pub.xml",
                "patch": "@@ -49,35 +49,18 @@\n     </copy>\n \n     <!--sign the jar, the source and the pom -->\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${file}\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${src}\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"-o\"/>\n-      <arg value=\"${pom}.asc\"/>\n-      <arg value=\"${pom}.tmp\"/>\n-    </exec>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{file}\" />\n+      <param name=\"file.out\" value=\"@{file}.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{src}\" />\n+      <param name=\"file.out\" value=\"@{src}.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{pom}.tmp\" />\n+      <param name=\"file.out\" value=\"@{pom}.asc\" />\n+    </antcall>\n \n     <artifact:deploy file=\"${file}\">\n         <pom file=\"${pom}.tmp\"/>\n@@ -131,26 +114,14 @@\n     </copy>\n \n     <!--sign the file and pom -->\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${file}\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"-o\"/>\n-      <arg value=\"${pom}.asc\"/>\n-      <arg value=\"${pom}.tmp\"/>\n-    </exec>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{file}\" />\n+      <param name=\"file.out\" value=\"@{file}.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{pom}.tmp\" />\n+      <param name=\"file.out\" value=\"@{pom}.asc\" />\n+    </antcall>\n \n     <artifact:deploy file=\"${file}\">\n       <pom file=\"${pom}.tmp\"/>\n@@ -198,35 +169,18 @@\n     </copy>\n \n     <!--sign the zip, the tar.gz and the pom -->\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${file}.zip\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"${file}.tar.gz\"/>\n-    </exec>\n-    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n-          inputstring=\"${gpg.passphrase}\">\n-      <arg value=\"--batch\"/>\n-      <arg value=\"--passphrase-fd\"/>\n-      <arg value=\"0\"/>\n-      <arg value=\"-a\"/>\n-      <arg value=\"-b\"/>\n-      <arg value=\"-o\"/>\n-      <arg value=\"${pom}.asc\"/>\n-      <arg value=\"${pom}.tmp\"/>\n-    </exec>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{file}\" />\n+      <param name=\"file.out\" value=\"@{file}.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{file}.tar.gz\" />\n+      <param name=\"file.out\" value=\"@{file}.tar.gz.asc\" />\n+    </antcall>\n+    <antcall target=\"-sign\" >\n+      <param name=\"file.in\" value=\"@{pom}.tmp\" />\n+      <param name=\"file.out\" value=\"@{pom}.asc\" />\n+    </antcall>\n \n     <artifact:deploy file=\"${pom}\">\n         <pom file=\"${pom}.tmp\"/>\n@@ -262,7 +216,7 @@\n     </sequential>\n   </macrodef>\n \n-  <target name=\"generic-deploy\" depends=\"init-maven,init-gpg,init-ldap\">\n+  <target name=\"generic-deploy\" depends=\"init-maven,init-gpg-1,init-gpg-2,init-ldap\">\n     <!-- Standard jars in bin directory -->\n     <!-- Skip bootstrap.jar - it is just a subset of catalina.jar -->\n     <doMavenDeploy artifactId=\"tomcat-juli\"\n@@ -399,7 +353,11 @@\n     </antcall>\n   </target>\n \n-  <target name=\"init-gpg\">\n+  <target name=\"init-gpg-1\">\n+    <available file=\"${gpg.exec}\" property=\"gpg.exec.available\"/>\n+  </target>\n+\n+  <target name=\"init-gpg-2\" if=\"${gpg.exec.available}\">\n     <input message=\"Enter GPG pass-phrase\" addproperty=\"gpg.passphrase\" >\n       <handler type=\"secure\"/>\n     </input>\n@@ -412,4 +370,19 @@\n     </input>\n   </target>\n \n+  <target name=\"-sign\" if=\"gpg.passphrase\">\n+    <fail unless=\"file\" />\n+    <exec executable=\"${gpg.exec}\" failonerror=\"true\"\n+          inputstring=\"${gpg.passphrase}\">\n+      <arg value=\"--batch\"/>\n+      <arg value=\"--passphrase-fd\"/>\n+      <arg value=\"0\"/>\n+      <arg value=\"-a\"/>\n+      <arg value=\"-b\"/>\n+      <arg value=\"-o\"/>\n+      <arg value=\"${file.out}\"/>\n+      <arg value=\"${file.in}\"/>\n+    </exec>\n+  </target>\n+\n </project>",
                "raw_url": "https://github.com/apache/tomcat/raw/ca92f04362e99c2a378b08f108521493c7ac505d/res/maven/mvn-pub.xml",
                "sha": "5b2b8ec1b9ebae8611985d768b0d5c7a4a2c915a",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/tomcat/blob/ca92f04362e99c2a378b08f108521493c7ac505d/test/org/apache/tomcat/util/http/parser/TestHttpParserHost.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/tomcat/util/http/parser/TestHttpParserHost.java?ref=ca92f04362e99c2a378b08f108521493c7ac505d",
                "deletions": 0,
                "filename": "test/org/apache/tomcat/util/http/parser/TestHttpParserHost.java",
                "patch": "@@ -66,6 +66,7 @@\n         result.add(new Object[] { TestType.IPv4, \"0.0.0.256\", Integer.valueOf(-1), IAE} );\n         result.add(new Object[] { TestType.IPv4, \"0.a.0.0\", Integer.valueOf(-1), IAE} );\n         result.add(new Object[] { TestType.IPv4, \"0..0.0\", Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv4, \"0]\", Integer.valueOf(-1), IAE} );\n         // Domain Name - valid\n         result.add(new Object[] { TestType.DOMAIN_NAME, \"localhost\", Integer.valueOf(-1), null} );\n         result.add(new Object[] { TestType.DOMAIN_NAME, \"localhost:8080\", Integer.valueOf(9), null} );\n@@ -121,6 +122,7 @@\n         result.add(new Object[] { TestType.IPv6, \"[0:0:0:0:0:0:127.0.0.1]\", Integer.valueOf(-1), null} );\n         result.add(new Object[] { TestType.IPv6, \"[0:0:0:0:0:0:127.0.0.1]:8080\",\n                 Integer.valueOf(23), null} );\n+        result.add(new Object[] { TestType.IPv6, \"[::1.2.3.4]\", Integer.valueOf(-1), null} );\n         // IPv6 - invalid\n         result.add(new Object[] { TestType.IPv6, \"[1234:5678:90AB:CDEF:1234:127.0.0.1]\",\n                 Integer.valueOf(-1), IAE} );\n@@ -136,6 +138,18 @@\n         result.add(new Object[] { TestType.IPv6, \"[0::0::127.0.0.1]\", Integer.valueOf(-1), IAE} );\n         result.add(new Object[] { TestType.IPv6, \"[0:0:G:0:0:0:127.0.0.1]\", Integer.valueOf(-1), IAE} );\n         result.add(new Object[] { TestType.IPv6, \"[00000:0:0:0:0:0:127.0.0.1]\", Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[::1]'\", Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[:2222:3333:4444:5555:6666:7777:8888]\",\n+                Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[1111:::3333:4444:5555:6666:7777:8888]\",\n+                Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"::1]\", Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[1111:2222:3333:4444:5555:6666:7777:8888:9999]\",\n+                Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[1111:2222:3333:4444:5555:6666:7777:1.2.3.4]\",\n+            Integer.valueOf(-1), IAE} );\n+        result.add(new Object[] { TestType.IPv6, \"[1111:2222:3333]\",\n+            Integer.valueOf(-1), IAE} );\n         return result;\n     }\n \n@@ -165,6 +179,7 @@ public void testHost() {\n         if (expectedException == null) {\n             Assert.assertNull(input, exceptionClass);\n         } else {\n+            Assert.assertNotNull(exceptionClass);\n             Assert.assertTrue(input, expectedException.isAssignableFrom(exceptionClass));\n         }\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/ca92f04362e99c2a378b08f108521493c7ac505d/test/org/apache/tomcat/util/http/parser/TestHttpParserHost.java",
                "sha": "a6f98ba54d53ac329258e403b3875985918e0a6e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/ca92f04362e99c2a378b08f108521493c7ac505d/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=ca92f04362e99c2a378b08f108521493c7ac505d",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -52,6 +52,10 @@\n         method name from <code>getPushBuilder()</code> to\n         <code>newPushBuilder()</code>. (markt)\n       </update>\n+      <fix>\n+        Correct various edge cases in the new HTTP Host header validation\n+        parser. Patch provided by Katya Todorova. (martk)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Jasper\">",
                "raw_url": "https://github.com/apache/tomcat/raw/ca92f04362e99c2a378b08f108521493c7ac505d/webapps/docs/changelog.xml",
                "sha": "f3603eac1a67f95254f67210700453eb52dbfcfc",
                "status": "modified"
            }
        ],
        "message": "Correct various edge cases in the new HTTP Host header validation parser.\nPatch provided by Katya Todorova.\nThis closes #48\n\nFix IPv6/IPv4 parsing for host header:\n    - chars other than : should not be allowed in IPv6 address after ]\n    - ::: should not present in IPv6 address\n    - IPv4 part of IPv6 address was not correctly parsed (1 symbol of IPv4 part was ignored)\n    - tests added to cover IPv4/6 parsing \n    - parsed test class fixed not to throw NPE when an exception is expected but not thrown \n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1789685 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/3e17ef57715cd8df4751a833e59aa50f9b6c1443",
        "patched_files": [
            "HttpParser.java",
            "mvn-pub.xml",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestHttpParserHost.java",
            "TestHttpParser.java"
        ]
    },
    "tomcat_cbf79b0": {
        "bug_id": "tomcat_cbf79b0",
        "commit": "https://github.com/apache/tomcat/commit/cbf79b0fd5365fef5844c3319de0cd0008c6fd46",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/cbf79b0fd5365fef5844c3319de0cd0008c6fd46/java/org/apache/catalina/mapper/Mapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/mapper/Mapper.java?ref=cbf79b0fd5365fef5844c3319de0cd0008c6fd46",
                "deletions": 1,
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "patch": "@@ -1545,7 +1545,7 @@ private static final int slashCount(String name) {\n      * wild card host names from the external to internal form.\n      */\n     private static String renameWildcardHost(String hostName) {\n-        if (hostName.startsWith(\"*.\")) {\n+        if (hostName != null && hostName.startsWith(\"*.\")) {\n             return hostName.substring(1);\n         } else {\n             return hostName;",
                "raw_url": "https://github.com/apache/tomcat/raw/cbf79b0fd5365fef5844c3319de0cd0008c6fd46/java/org/apache/catalina/mapper/Mapper.java",
                "sha": "f3dec673051806afa82d7b6795ecbe79d318b50e",
                "status": "modified"
            }
        ],
        "message": "Avoid unlikely NPE\nIdentified by SpotBugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1833029 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/7e4246ae6487b37002e593435c2a295591d86077",
        "patched_files": [
            "Mapper.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestMapper.java"
        ]
    },
    "tomcat_cce5d39": {
        "bug_id": "tomcat_cce5d39",
        "commit": "https://github.com/apache/tomcat/commit/cce5d396132935565945d58f7e8dec5866d0f4b9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/cce5d396132935565945d58f7e8dec5866d0f4b9/test/org/apache/catalina/core/TestAsyncContextImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/core/TestAsyncContextImpl.java?ref=cce5d396132935565945d58f7e8dec5866d0f4b9",
                "deletions": 0,
                "filename": "test/org/apache/catalina/core/TestAsyncContextImpl.java",
                "patch": "@@ -1169,6 +1169,7 @@ public void run() {\n \n     @Test\n     public void testErrorHandling() throws Exception {\n+        resetTracker();\n         // Setup Tomcat instance\n         Tomcat tomcat = getTomcatInstance();\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/cce5d396132935565945d58f7e8dec5866d0f4b9/test/org/apache/catalina/core/TestAsyncContextImpl.java",
                "sha": "48366a46791ce2ebce18d85fbb2d76a8e97028b3",
                "status": "modified"
            }
        ],
        "message": "Investigating BZ 59261\nAvoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1738059 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/1994ef720b117799bb21b8642e155044cf462580",
        "patched_files": [
            "AsyncContextImpl.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAsyncContextImpl.java"
        ]
    },
    "tomcat_cf73eb2": {
        "bug_id": "tomcat_cf73eb2",
        "commit": "https://github.com/apache/tomcat/commit/cf73eb2346563d256b0e4de0590f793b6b393c5d",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tomcat/blob/cf73eb2346563d256b0e4de0590f793b6b393c5d/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java?ref=cf73eb2346563d256b0e4de0590f793b6b393c5d",
                "deletions": 9,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java",
                "patch": "@@ -25,6 +25,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+import org.apache.juli.logging.Log;\n+import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.jdbc.pool.ConnectionPool;\n import org.apache.tomcat.jdbc.pool.PoolProperties.InterceptorProperty;\n import org.apache.tomcat.jdbc.pool.PooledConnection;\n@@ -34,6 +36,7 @@\n  * {@code CallableStatement} instances on a connection.\n  */\n public class StatementCache extends StatementDecoratorInterceptor {\n+    private static final Log log = LogFactory.getLog(StatementCache.class);\n     protected static final String[] ALL_TYPES = new String[] {PREPARE_STATEMENT,PREPARE_CALL};\n     protected static final String[] CALLABLE_TYPE = new String[] {PREPARE_CALL};\n     protected static final String[] PREPARED_TYPE = new String[] {PREPARE_STATEMENT};\n@@ -186,16 +189,14 @@ public Object invoke(Object proxy, Method method, Object[] args) throws Throwabl\n     }\n \n     public CachedStatement isCached(Method method, Object[] args) {\n-        @SuppressWarnings(\"unchecked\")\n-        ConcurrentHashMap<CacheKey,CachedStatement> cache =\n-            (ConcurrentHashMap<CacheKey,CachedStatement>)pcon.getAttributes().get(STATEMENT_CACHE_ATTR);\n+        ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();\n+        if (cache == null) return null;\n         return cache.get(createCacheKey(method, args));\n     }\n \n     public boolean cacheStatement(CachedStatement proxy) {\n-        @SuppressWarnings(\"unchecked\")\n-        ConcurrentHashMap<CacheKey,CachedStatement> cache =\n-            (ConcurrentHashMap<CacheKey,CachedStatement>)pcon.getAttributes().get(STATEMENT_CACHE_ATTR);\n+        ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();\n+        if (cache == null) return false;\n         if (proxy.getCacheKey()==null) {\n             return false;\n         } else if (cache.containsKey(proxy.getCacheKey())) {\n@@ -213,9 +214,8 @@ public boolean cacheStatement(CachedStatement proxy) {\n     }\n \n     public boolean removeStatement(CachedStatement proxy) {\n-        @SuppressWarnings(\"unchecked\")\n-        ConcurrentHashMap<CacheKey,CachedStatement> cache =\n-            (ConcurrentHashMap<CacheKey,CachedStatement>)pcon.getAttributes().get(STATEMENT_CACHE_ATTR);\n+        ConcurrentHashMap<CacheKey,CachedStatement> cache = getCache();\n+        if (cache == null) return false;\n         if (cache.remove(proxy.getCacheKey()) != null) {\n             cacheSize.decrementAndGet();\n             return true;\n@@ -225,6 +225,17 @@ public boolean removeStatement(CachedStatement proxy) {\n     }\n     /*end the actual statement cache*/\n \n+    protected ConcurrentHashMap<CacheKey,CachedStatement> getCache() {\n+        PooledConnection pCon = this.pcon;\n+        if (pCon == null) {\n+            if (log.isWarnEnabled()) log.warn(\"Connection has already been closed or abandoned\");\n+            return null;\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        ConcurrentHashMap<CacheKey,CachedStatement> cache =\n+                (ConcurrentHashMap<CacheKey,CachedStatement>)pCon.getAttributes().get(STATEMENT_CACHE_ATTR);\n+        return cache;\n+    }\n \n     protected class CachedStatement extends StatementDecoratorInterceptor.StatementProxy<Statement> {\n         boolean cached = false;",
                "raw_url": "https://github.com/apache/tomcat/raw/cf73eb2346563d256b0e4de0590f793b6b393c5d/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/StatementCache.java",
                "sha": "fd151ff18e1bb7ee1a607c7a7be5df91368d18cb",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/cf73eb2346563d256b0e4de0590f793b6b393c5d/webapps/docs/changelog.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=cf73eb2346563d256b0e4de0590f793b6b393c5d",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -197,6 +197,14 @@\n       </add>\n     </changelog>\n   </subsection>\n+  <subsection name=\"jdbc-pool\">\n+    <changelog>\n+      <fix>\n+        <bug>61312</bug>: Prevent <code>NullPointerException</code>n when using\n+        the statement cache of connection that has been closed. (kfujino)\n+      </fix>\n+    </changelog>\n+  </subsection>\n   <subsection name=\"Other\">\n     <changelog>\n       <fix>",
                "raw_url": "https://github.com/apache/tomcat/raw/cf73eb2346563d256b0e4de0590f793b6b393c5d/webapps/docs/changelog.xml",
                "sha": "ccd44d196206268c6ce69e45b60ce2fb3539a937",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61312\nPrevent NullPointerException when using the statement cache of connection that has been closed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1820816 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/c3d79e2143de51ecbc0a98a97b21ce9d262f6796",
        "patched_files": [
            "changelog.xml",
            "StatementCache.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStatementCache.java"
        ]
    },
    "tomcat_d27fbc0": {
        "bug_id": "tomcat_d27fbc0",
        "commit": "https://github.com/apache/tomcat/commit/d27fbc0d650e1bd8d669bb5c6d9a186109df4e94",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/tomcat/blob/d27fbc0d650e1bd8d669bb5c6d9a186109df4e94/test/org/apache/juli/TestFileHandler.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/juli/TestFileHandler.java?ref=d27fbc0d650e1bd8d669bb5c6d9a186109df4e94",
                "deletions": 9,
                "filename": "test/org/apache/juli/TestFileHandler.java",
                "patch": "@@ -65,18 +65,21 @@ public void setUp() throws Exception {\n \n     @After\n     public void tearDown() {\n-        for (File file : logsDir.listFiles()) {\n-            file.delete();\n+        File[] files = logsDir.listFiles();\n+        if (files != null) {\n+            for (File file : files) {\n+                file.delete();\n+            }\n+            logsDir.delete();\n         }\n-        logsDir.delete();\n     }\n \n     @SuppressWarnings(\"unused\")\n     @Test\n     public void testCleanOnInitOneHandler() throws Exception {\n         generateLogFiles(logsDir, PREFIX_1, SUFIX_1, 3);\n \n-        FileHandler handler = new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, 2);\n \n         Thread.sleep(1000);\n \n@@ -88,10 +91,10 @@ public void testCleanOnInitOneHandler() throws Exception {\n     public void testCleanOnInitMultipleHandlers() throws Exception {\n         generateLogFiles(logsDir, PREFIX_1, SUFIX_1, 3);\n \n-        FileHandler handler1 = new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, 2);\n-        FileHandler handler2 = new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_2, 2);\n-        FileHandler handler3 = new FileHandler(logsDir.getAbsolutePath(), PREFIX_2, SUFIX_1, 2);\n-        FileHandler handler4 = new FileHandler(logsDir.getAbsolutePath(), PREFIX_3, SUFIX_1, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_2, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_2, SUFIX_1, 2);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_3, SUFIX_1, 2);\n \n         Thread.sleep(1000);\n \n@@ -103,7 +106,7 @@ public void testCleanOnInitMultipleHandlers() throws Exception {\n     public void testCleanDisabled() throws Exception {\n         generateLogFiles(logsDir, PREFIX_1, SUFIX_1, 3);\n \n-        FileHandler handler = new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, -1);\n+        new FileHandler(logsDir.getAbsolutePath(), PREFIX_1, SUFIX_1, -1);\n \n         Thread.sleep(1000);\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/d27fbc0d650e1bd8d669bb5c6d9a186109df4e94/test/org/apache/juli/TestFileHandler.java",
                "sha": "1c300ec2db021d23621b1ffe73cb8a4f502cf0f9",
                "status": "modified"
            }
        ],
        "message": "Fix NPE and dead store warnings.\nReported by FindBugs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1800988 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/b8fbf59a24f0b6a13ed78b36a2b7415142e5e65e",
        "patched_files": [
            "FileHandler.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestFileHandler.java"
        ]
    },
    "tomcat_d28f926": {
        "bug_id": "tomcat_d28f926",
        "commit": "https://github.com/apache/tomcat/commit/d28f926228e637a18032c95d9e832f608e64d8cc",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/d28f926228e637a18032c95d9e832f608e64d8cc/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java?ref=d28f926228e637a18032c95d9e832f608e64d8cc",
                "deletions": 3,
                "filename": "java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "patch": "@@ -75,9 +75,11 @@ public AuthConfigProvider getConfigProvider(String layer, String appContext,\n         RegistrationContextImpl registrationContext =\n                 findRegistrationContextImpl(layer, appContext);\n         if (registrationContext != null) {\n-            RegistrationListenerWrapper wrapper = new RegistrationListenerWrapper(\n-                    layer, appContext, listener);\n-            registrationContext.addListener(wrapper);\n+            if (listener != null) {\n+                RegistrationListenerWrapper wrapper = new RegistrationListenerWrapper(\n+                        layer, appContext, listener);\n+                registrationContext.addListener(wrapper);\n+            }\n             return registrationContext.getProvider();\n         }\n         return null;",
                "raw_url": "https://github.com/apache/tomcat/raw/d28f926228e637a18032c95d9e832f608e64d8cc/java/org/apache/catalina/authenticator/jaspic/AuthConfigFactoryImpl.java",
                "sha": "18e136c6e2988a7310c64b13d718537eb1ccdee8",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/tomcat/blob/d28f926228e637a18032c95d9e832f608e64d8cc/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java?ref=d28f926228e637a18032c95d9e832f608e64d8cc",
                "deletions": 0,
                "filename": "test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "patch": "@@ -274,6 +274,19 @@ public void testDetachListener() {\n     }\n \n \n+    @Test\n+    public void testRegistrationNullListener() {\n+        AuthConfigFactory factory = new AuthConfigFactoryImpl();\n+        AuthConfigProvider acp1 = new SimpleAuthConfigProvider(null, null);\n+        String registrationId = factory.registerConfigProvider(acp1, \"L_1\", \"AC_1\", null);\n+\n+        factory.getConfigProvider(\"L_1\", \"AC_1\", null);\n+\n+        boolean result = factory.removeRegistration(registrationId);\n+        Assert.assertTrue(result);\n+    }\n+\n+\n     private static class SimpleRegistrationListener implements RegistrationListener {\n \n         private final String layer;",
                "raw_url": "https://github.com/apache/tomcat/raw/d28f926228e637a18032c95d9e832f608e64d8cc/test/org/apache/catalina/authenticator/jaspic/TestAuthConfigFactoryImpl.java",
                "sha": "40d0beb5d1839dad01e6f6b95553d6f7d18691df",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/d28f926228e637a18032c95d9e832f608e64d8cc/webapps/docs/changelog.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=d28f926228e637a18032c95d9e832f608e64d8cc",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -91,6 +91,12 @@\n         <bug>61778</bug>: Correct the return value when detaching a JASPIC\n         <code>RegistrationListener</code>. Patch provided by Lazar. (markt)\n       </fix>\n+      <fix>\n+        <bug>61779</bug>: Avoid a <code>NullPointerException</code> when a\n+        <code>null</code> <code>RegistrationListener</code> is passed to\n+        <code>AuthConfigFactory.getConfigProvider()</code>. Patch provided by\n+        Lazar. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/d28f926228e637a18032c95d9e832f608e64d8cc/webapps/docs/changelog.xml",
                "sha": "8a96f64c3de8165d096c65643b8810804ed59268",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=61779\nAvoid a NullPointerException when a null RegistrationListener is passed to AuthConfigFactory.getConfigProvider()\nPatch provided by Lazar.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1815802 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/2c5c659d30a4a3c9af06ac58f1e1199c3c5a86b2",
        "patched_files": [
            "AuthConfigFactoryImpl.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAuthConfigFactoryImpl.java"
        ]
    },
    "tomcat_d36c5d9": {
        "bug_id": "tomcat_d36c5d9",
        "commit": "https://github.com/apache/tomcat/commit/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/tomcat/blob/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36/java/org/apache/catalina/core/AsyncContextImpl.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=d36c5d9bd1a5bec19514c18e11e60813eaeb6b36",
                "deletions": 4,
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "patch": "@@ -48,6 +48,7 @@\n import org.apache.juli.logging.Log;\n import org.apache.juli.logging.LogFactory;\n import org.apache.tomcat.InstanceManager;\n+import org.apache.tomcat.util.res.StringManager;\n /**\n  * \n  * @author fhanik\n@@ -57,6 +58,9 @@\n     \n     private static final Log log = LogFactory.getLog(AsyncContextImpl.class);\n     \n+    protected static final StringManager sm =\n+        StringManager.getManager(Constants.Package);\n+\n     private ServletRequest servletRequest = null;\n     private ServletResponse servletResponse = null;\n     private List<AsyncListenerWrapper> listeners = new ArrayList<AsyncListenerWrapper>();\n@@ -80,6 +84,7 @@ public void complete() {\n         if (log.isDebugEnabled()) {\n             logDebug(\"complete   \");\n         }\n+        check();\n         request.getCoyoteRequest().action(ActionCode.COMMIT, null);\n         request.getCoyoteRequest().action(ActionCode.ASYNC_COMPLETE, null);\n     }\n@@ -126,6 +131,7 @@ public boolean timeout() throws IOException {\n \n     @Override\n     public void dispatch() {\n+        check();\n         HttpServletRequest sr = (HttpServletRequest)getRequest();\n         String path = sr.getRequestURI();\n         String cpath = sr.getContextPath();\n@@ -135,6 +141,7 @@ public void dispatch() {\n \n     @Override\n     public void dispatch(String path) {\n+        check();\n         dispatch(request.getServletContext(),path);\n     }\n \n@@ -143,6 +150,7 @@ public void dispatch(ServletContext context, String path) {\n         if (log.isDebugEnabled()) {\n             logDebug(\"dispatch   \");\n         }\n+        check();\n         if (request.getAttribute(ASYNC_REQUEST_URI)==null) {\n             request.setAttribute(ASYNC_REQUEST_URI, request.getRequestURI()+\"?\"+request.getQueryString());\n             request.setAttribute(ASYNC_CONTEXT_PATH, request.getContextPath());\n@@ -178,11 +186,13 @@ public void run() {\n \n     @Override\n     public ServletRequest getRequest() {\n+        check();\n         return servletRequest;\n     }\n \n     @Override\n     public ServletResponse getResponse() {\n+        check();\n         return servletResponse;\n     }\n \n@@ -191,13 +201,14 @@ public void start(final Runnable run) {\n         if (log.isDebugEnabled()) {\n             logDebug(\"start      \");\n         }\n-\n+        check();\n         Runnable wrapper = new RunnableWrapper(run, context);\n         this.request.getCoyoteRequest().action(ActionCode.ASYNC_RUN, wrapper);\n     }\n     \n     @Override\n     public void addListener(AsyncListener listener) {\n+        check();\n         AsyncListenerWrapper wrapper = new AsyncListenerWrapper();\n         wrapper.setListener(listener);\n         listeners.add(wrapper);\n@@ -206,6 +217,7 @@ public void addListener(AsyncListener listener) {\n     @Override\n     public void addListener(AsyncListener listener, ServletRequest servletRequest,\n             ServletResponse servletResponse) {\n+        check();\n         AsyncListenerWrapper wrapper = new AsyncListenerWrapper();\n         wrapper.setListener(listener);\n         listeners.add(wrapper);\n@@ -215,6 +227,7 @@ public void addListener(AsyncListener listener, ServletRequest servletRequest,\n     @Override\n     public <T extends AsyncListener> T createListener(Class<T> clazz)\n             throws ServletException {\n+        check();\n         T listener = null;\n         try {\n              listener = (T) getInstanceManager().newInstance(clazz.getName(),\n@@ -242,12 +255,16 @@ public void recycle() {\n         if (log.isDebugEnabled()) {\n             logDebug(\"recycle    \");\n         }\n+        context = null;\n+        dispatch = null;\n+        event = null;\n+        hasOriginalRequestAndResponse = true;\n+        instanceManager = null;\n+        listeners.clear();\n+        request = null;\n         servletRequest = null;\n         servletResponse = null;\n-        hasOriginalRequestAndResponse = true;\n-        context = null;\n         timeout = -1;\n-        event = null;\n     }\n \n     public boolean isStarted() {\n@@ -285,6 +302,7 @@ public void setStarted(Context context, ServletRequest request,\n \n     @Override\n     public boolean hasOriginalRequestAndResponse() {\n+        check();\n         return hasOriginalRequestAndResponse;\n     }\n \n@@ -309,12 +327,14 @@ protected void doInternalDispatch() throws ServletException, IOException {\n     \n     @Override\n     public long getTimeout() {\n+        check();\n         return timeout;\n     }\n \n \n     @Override\n     public void setTimeout(long timeout) {\n+        check();\n         this.timeout = timeout;\n         request.getCoyoteRequest().action(ActionCode.ASYNC_SETTIMEOUT,\n                 Long.valueOf(timeout));\n@@ -407,6 +427,13 @@ private InstanceManager getInstanceManager() {\n         return instanceManager;\n     }\n \n+    private void check() {\n+        if (request == null) {\n+            // AsyncContext has been recycled and should not be being used\n+            throw new IllegalStateException(sm.getString(\n+                    \"asyncContextImpl.requestEnded\"));\n+        }\n+    }\n     private static class DebugException extends Exception {\n         private static final long serialVersionUID = 1L;\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36/java/org/apache/catalina/core/AsyncContextImpl.java",
                "sha": "2e6d6e0ca33eb2b9d77e6d8340e97788d2b1e188",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36/java/org/apache/catalina/core/LocalStrings.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/LocalStrings.properties?ref=d36c5d9bd1a5bec19514c18e11e60813eaeb6b36",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/LocalStrings.properties",
                "patch": "@@ -59,6 +59,7 @@ aprListener.aprDestroy=Failed shutdown of APR based Apache Tomcat Native library\n aprListener.sslInit=Failed to initialize the SSLEngine.\n aprListener.tcnValid=Loaded APR based Apache Tomcat Native library {0}.\n aprListener.flags=APR capabilities: IPv6 [{0}], sendfile [{1}], accept filters [{2}], random [{3}].\n+asyncContextImpl.requestEnded=The request associated with the AsyncContext has already completed processing.\n containerBase.alreadyStarted=Container {0} has already been started\n containerBase.notConfigured=No basic Valve has been configured\n containerBase.notStarted=Container {0} has not been started",
                "raw_url": "https://github.com/apache/tomcat/raw/d36c5d9bd1a5bec19514c18e11e60813eaeb6b36/java/org/apache/catalina/core/LocalStrings.properties",
                "sha": "f49e83198edb8ca1d7ceb9a96a9fdd053804ec61",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=50353\nRather than the eventual NPE, throw an ISE if an application attempts to access an AsyncContext after the request processing has ended.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1140738 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/3d85a8581ab6a38ff0b0b3b7a38abf2236942062",
        "patched_files": [
            "LocalStrings.properties",
            "AsyncContextImpl.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAsyncContextImpl.java"
        ]
    },
    "tomcat_d6191c4": {
        "bug_id": "tomcat_d6191c4",
        "commit": "https://github.com/apache/tomcat/commit/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5/java/org/apache/catalina/filters/CorsFilter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/filters/CorsFilter.java?ref=d6191c408e9d0e97eefd7a4273b6b895fcaee2c5",
                "deletions": 1,
                "filename": "java/org/apache/catalina/filters/CorsFilter.java",
                "patch": "@@ -453,7 +453,7 @@ private void addStandardHeaders(final HttpServletRequest request,\n                         String.valueOf(preflightMaxAge));\n             }\n \n-            if  ((allowedHttpMethods != null & !allowedHttpMethods.isEmpty())) {\n+            if  ((allowedHttpMethods != null) && (!allowedHttpMethods.isEmpty())) {\n                 response.addHeader(\n                         CorsFilter.RESPONSE_HEADER_ACCESS_CONTROL_ALLOW_METHODS,\n                         join(allowedHttpMethods, \",\"));",
                "raw_url": "https://github.com/apache/tomcat/raw/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5/java/org/apache/catalina/filters/CorsFilter.java",
                "sha": "35ed49c093bda7b6ba323b2cc75d34630a1186e9",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5/webapps/docs/changelog.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=d6191c408e9d0e97eefd7a4273b6b895fcaee2c5",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -103,6 +103,9 @@\n         <bug>62607</bug>: Return a non-zero exit code from\n         <code>catalina.[bat|sh] run</code> if Tomcat fails to start. (markt)\n       </add>\n+      <fix>\n+        Use short circuit logic to prevent potential NPE in CorsFilter. (fschumacher)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/d6191c408e9d0e97eefd7a4273b6b895fcaee2c5/webapps/docs/changelog.xml",
                "sha": "479f70d74f9bb0c347784e5642d7fe2de0f501d0",
                "status": "modified"
            }
        ],
        "message": "Use short circuit logic to prevent potential NPE in CorsFilter.\n\nThe same logic is used a few lines below, so it was most probably\nintended that way anyways. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1837786 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/6b4aa7935dd025a805adaf82b927b5ef2626e8a9",
        "patched_files": [
            "changelog.xml",
            "CorsFilter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCorsFilter.java"
        ]
    },
    "tomcat_dc4e039": {
        "bug_id": "tomcat_dc4e039",
        "commit": "https://github.com/apache/tomcat/commit/dc4e03968ba3756919f19cbb0952adacec9f23d1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/dc4e03968ba3756919f19cbb0952adacec9f23d1/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java?ref=dc4e03968ba3756919f19cbb0952adacec9f23d1",
                "deletions": 4,
                "filename": "test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java",
                "patch": "@@ -49,7 +49,8 @@ public void testTimerThreadLeak() throws Exception {\n             ((StandardContext) ctx).setClearReferencesStopThreads(true);\n         }\n \n-        Tomcat.addServlet(ctx, \"taskServlet\", new ExecutorServlet());\n+        ExecutorServlet executorServlet = new ExecutorServlet();\n+        Tomcat.addServlet(ctx, \"taskServlet\", executorServlet);\n         ctx.addServletMapping(\"/\", \"taskServlet\");\n \n         tomcat.start();\n@@ -67,8 +68,8 @@ public void testTimerThreadLeak() throws Exception {\n             // ignore\n         }\n \n-        Assert.assertTrue(ExecutorServlet.tpe.isShutdown());\n-        Assert.assertTrue(ExecutorServlet.tpe.isTerminated());\n+        Assert.assertTrue(executorServlet.tpe.isShutdown());\n+        Assert.assertTrue(executorServlet.tpe.isTerminated());\n     }\n \n     static class ExecutorServlet extends HttpServlet {\n@@ -79,7 +80,7 @@ public void testTimerThreadLeak() throws Exception {\n         long n = 1000L;\n         int tpSize = 10;\n \n-        public static ThreadPoolExecutor tpe;\n+        public volatile ThreadPoolExecutor tpe;\n \n         @Override\n         protected void doGet(HttpServletRequest req, HttpServletResponse resp)",
                "raw_url": "https://github.com/apache/tomcat/raw/dc4e03968ba3756919f19cbb0952adacec9f23d1/test/org/apache/catalina/loader/TestWebappClassLoaderExecutorMemoryLeak.java",
                "sha": "641066980b548bd7f4d25c01b88c7f2b664d3366",
                "status": "modified"
            }
        ],
        "message": "Observed strange NPE while running tests. This isn't much more than a guess at what might have caused it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1304037 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/be5748a42d800312aba270320ff3c0fdb8fd87c5",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebappClassLoaderExecutorMemoryLeak.java"
        ]
    },
    "tomcat_ddb4248": {
        "bug_id": "tomcat_ddb4248",
        "commit": "https://github.com/apache/tomcat/commit/ddb4248ff1394499e70bb17ea6040d45f9633ec2",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/ddb4248ff1394499e70bb17ea6040d45f9633ec2/java/org/apache/catalina/core/StandardContext.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardContext.java?ref=ddb4248ff1394499e70bb17ea6040d45f9633ec2",
                "deletions": 1,
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "patch": "@@ -840,7 +840,11 @@ public void setResponseCharacterEncoding(String responseEncoding) {\n          * differentiate between a Response using this default encoding and one\n          * that has been explicitly configured.\n          */\n-        this.responseEncoding = new String(responseEncoding);\n+        if (responseEncoding == null) {\n+            this.responseEncoding = null;\n+        } else {\n+            this.responseEncoding = new String(responseEncoding);\n+        }\n     }\n \n ",
                "raw_url": "https://github.com/apache/tomcat/raw/ddb4248ff1394499e70bb17ea6040d45f9633ec2/java/org/apache/catalina/core/StandardContext.java",
                "sha": "fea74eb1f932aab2032524f92f277ad7d5d158d3",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1803622 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/97d86d44bfc701a9aae963d94f745f88d3f75106",
        "patched_files": [
            "StandardContext.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardContext.java"
        ]
    },
    "tomcat_de9bafd": {
        "bug_id": "tomcat_de9bafd",
        "commit": "https://github.com/apache/tomcat/commit/de9bafd981cfc1490a822efcb218f7cbcf650bea",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/de9bafd981cfc1490a822efcb218f7cbcf650bea/java/org/apache/jasper/compiler/JspConfig.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/jasper/compiler/JspConfig.java?ref=de9bafd981cfc1490a822efcb218f7cbcf650bea",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/JspConfig.java",
                "patch": "@@ -83,6 +83,7 @@ private void processWebDotXml() {\n             return;\n         }\n \n+        jspProperties = new Vector<>();\n         Collection<JspPropertyGroupDescriptor> jspPropertyGroups =\n                 jspConfig.getJspPropertyGroups();\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/de9bafd981cfc1490a822efcb218f7cbcf650bea/java/org/apache/jasper/compiler/JspConfig.java",
                "sha": "2d7f05c0af347c75f92813c4c34aa48eb2cfb08b",
                "status": "modified"
            }
        ],
        "message": "Another NPE fox after the switch to obtaining the JspConfigDescription from the ServletContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1501926 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/29a20ca27b2ca1be4725ec1a67b4fed1924f89c5",
        "patched_files": [
            "JspConfig.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestJspConfig.java"
        ]
    },
    "tomcat_dfd69b3": {
        "bug_id": "tomcat_dfd69b3",
        "commit": "https://github.com/apache/tomcat/commit/dfd69b3f189cfb1aabc79b1143d599f4ae899174",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/dfd69b3f189cfb1aabc79b1143d599f4ae899174/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java?ref=dfd69b3f189cfb1aabc79b1143d599f4ae899174",
                "deletions": 2,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java",
                "patch": "@@ -28,12 +28,13 @@\n \n public class QueryTimeoutInterceptor extends AbstractCreateStatementInterceptor {\n     private static Log log = LogFactory.getLog(QueryTimeoutInterceptor.class);\n-    int timeout;\n+    int timeout = 1;\n \n     @Override\n     public void setProperties(Map<String,InterceptorProperty> properties) {\n         super.setProperties(properties);\n-        timeout = properties.get(\"queryTimeout\").getValueAsInt(-1);\n+        InterceptorProperty p = properties.get(\"queryTimeout\");\n+        if (p!=null) timeout = p.getValueAsInt(timeout);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/tomcat/raw/dfd69b3f189cfb1aabc79b1143d599f4ae899174/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/QueryTimeoutInterceptor.java",
                "sha": "3d35cb6eb384218a86fdc7d5567d1e9c7bd1dd2d",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE in QueryTimeoutInterceptor.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1692055 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/8cd35979a2a5e3526afd48bb1094e430fffb19ba",
        "patched_files": [
            "QueryTimeoutInterceptor.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestQueryTimeoutInterceptor.java"
        ]
    },
    "tomcat_e0c4e8b": {
        "bug_id": "tomcat_e0c4e8b",
        "commit": "https://github.com/apache/tomcat/commit/e0c4e8ba55b18172258b52abf25b8015cb961dd5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat/blob/e0c4e8ba55b18172258b52abf25b8015cb961dd5/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/filters/RemoteIpFilter.java?ref=e0c4e8ba55b18172258b52abf25b8015cb961dd5",
                "deletions": 2,
                "filename": "java/org/apache/catalina/filters/RemoteIpFilter.java",
                "patch": "@@ -859,8 +859,9 @@ public void doFilter(HttpServletRequest request, HttpServletResponse response, F\n             }\n \n             HttpServletResponse xResponse;\n-            if (!xRequest.getScheme().equals(request.getScheme()) ||\n-                    xRequest.getServerPort() != request.getServerPort()) {\n+            if (xRequest.getScheme() != null &&\n+                    (!xRequest.getScheme().equals(request.getScheme()) ||\n+                    xRequest.getServerPort() != request.getServerPort())) {\n                 xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n             } else {\n                 xResponse = response;",
                "raw_url": "https://github.com/apache/tomcat/raw/e0c4e8ba55b18172258b52abf25b8015cb961dd5/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "sha": "cb4e8fdb3a2e6393ddc0e43064c2dfa77fba614f",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1687434 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/4f0bbe03b0ed6b0ac8f1fde72d567cbcdfab342f",
        "patched_files": [
            "RemoteIpFilter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestRemoteIpFilter.java"
        ]
    },
    "tomcat_e2a10a7": {
        "bug_id": "tomcat_e2a10a7",
        "commit": "https://github.com/apache/tomcat/commit/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -26,6 +26,7 @@\n import javax.servlet.SessionTrackingMode;\n \n import org.apache.catalina.Context;\n+import org.apache.catalina.Host;\n import org.apache.catalina.Wrapper;\n import org.apache.catalina.comet.CometEvent;\n import org.apache.catalina.comet.CometEvent.EventType;\n@@ -642,7 +643,11 @@ protected boolean postParseRequest(org.apache.coyote.Request req,\n                 res.setStatus(404);\n                 res.setMessage(\"Not found\");\n                 // No context, so use host\n-                request.getHost().logAccess(request, response, 0, true);\n+                Host host = request.getHost();\n+                // Make sure there is a host (might not be during shutdown)\n+                if (host != null) {\n+                    host.logAccess(request, response, 0, true);\n+                }\n                 return false;\n             }\n         ",
                "raw_url": "https://github.com/apache/tomcat/raw/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "7fef9b9690741c10c79096b58c266fcf310a4ebf",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -67,6 +67,10 @@\n         Enable remaining valves for Servlet 3 asynchronous processing support.\n         (markt)\n       </fix>\n+      <fix>\n+        Avoid possible NPE when logging requests received during embedded Tomcat\n+        shutdown. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/e2a10a73c32e98fa0db4e44bd753d1b5c0b442ca/webapps/docs/changelog.xml",
                "sha": "34374e6a6470a8bd70256a1f9539d4a4a724121a",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1133401 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/9546590537dd5a92b6dcca9411ee21eb20bd78f7",
        "patched_files": [
            "changelog.xml",
            "CoyoteAdapter.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat_e469527": {
        "bug_id": "tomcat_e469527",
        "commit": "https://github.com/apache/tomcat/commit/e469527d8da572b0483b485d7ed8cd1b998497ba",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/e469527d8da572b0483b485d7ed8cd1b998497ba/java/org/apache/catalina/core/NamingContextListener.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/NamingContextListener.java?ref=e469527d8da572b0483b485d7ed8cd1b998497ba",
                "deletions": 1,
                "filename": "java/org/apache/catalina/core/NamingContextListener.java",
                "patch": "@@ -1102,7 +1102,11 @@ public void addResourceLink(ContextResourceLink resourceLink) {\n     private javax.naming.Context getGlobalNamingContext() {\n         if (container instanceof Context) {\n             Engine e = (Engine) ((Context) container).getParent().getParent();\n-            return e.getService().getServer().getGlobalNamingContext();\n+            Server s = e.getService().getServer();\n+            // When the Service is an embedded Service, there is no Server\n+            if (s != null) {\n+                return s.getGlobalNamingContext();\n+            }\n         }\n         return null;\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/e469527d8da572b0483b485d7ed8cd1b998497ba/java/org/apache/catalina/core/NamingContextListener.java",
                "sha": "0cacd3feaffb0680c0bb7d501e230380b0fd57b2",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/e469527d8da572b0483b485d7ed8cd1b998497ba/webapps/docs/changelog.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=e469527d8da572b0483b485d7ed8cd1b998497ba",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -61,6 +61,11 @@\n         <code>Host</code> is configured with an <code>xmlBase</code>. Patch\n         provided by uk4sx. (markt)\n       </fix>\n+      <fix>\n+        Avoid a potential <code>NullPointerException</code> on Service stop if a\n+        Service is embedded directly (i.e. with no Server) in an applciation\n+        and JNDI is enabled. Patch provided by S. Ali Tokmen. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/e469527d8da572b0483b485d7ed8cd1b998497ba/webapps/docs/changelog.xml",
                "sha": "3b19889069a23fffa49c782e2feed957da5af6fb",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE in some embedding scenarios.\n\nWhen embedding a Service directly and JNDI is enabled there is no Server",
        "parent": "https://github.com/apache/tomcat/commit/bee2dbb19986dbc060de30c31c3956ee31b04a01",
        "patched_files": [
            "NamingContextListener.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestNamingContextListener.java"
        ]
    },
    "tomcat_e4ea10a": {
        "bug_id": "tomcat_e4ea10a",
        "commit": "https://github.com/apache/tomcat/commit/e4ea10ad1f0940141081802922bd5653089b8f9c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat/blob/e4ea10ad1f0940141081802922bd5653089b8f9c/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java?ref=e4ea10ad1f0940141081802922bd5653089b8f9c",
                "deletions": 0,
                "filename": "test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java",
                "patch": "@@ -266,5 +266,10 @@ public String getQueryString() {\n         public String getRequestURI() {\n             return CONTEXT_PATH + URI;\n         }\n+\n+        @Override\n+        public org.apache.coyote.Request getCoyoteRequest() {\n+            return new org.apache.coyote.Request();\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/tomcat/raw/e4ea10ad1f0940141081802922bd5653089b8f9c/test/org/apache/catalina/authenticator/TesterDigestAuthenticatorPerformance.java",
                "sha": "68a4d59f6a01ecfedf70001601dba09ef5817253",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1667630 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/dca86400d08568dcfbb339162f61e0e3a88501c8",
        "patched_files": [],
        "repo": "tomcat",
        "unit_tests": [
            "TesterDigestAuthenticatorPerformance.java"
        ]
    },
    "tomcat_eb2db58": {
        "bug_id": "tomcat_eb2db58",
        "commit": "https://github.com/apache/tomcat/commit/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/java/org/apache/catalina/core/AsyncContextImpl.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
                "deletions": 3,
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "patch": "@@ -176,7 +176,7 @@ public void dispatch(String path) {\n     }\n \n     @Override\n-    public void dispatch(ServletContext context, String path) {\n+    public void dispatch(ServletContext servletContext, String path) {\n         synchronized (asyncContextLock) {\n             if (log.isDebugEnabled()) {\n                 logDebug(\"dispatch   \");\n@@ -193,7 +193,7 @@ public void dispatch(ServletContext context, String path) {\n                 request.setAttribute(ASYNC_PATH_INFO, request.getPathInfo());\n                 request.setAttribute(ASYNC_QUERY_STRING, request.getQueryString());\n             }\n-            final RequestDispatcher requestDispatcher = context.getRequestDispatcher(path);\n+            final RequestDispatcher requestDispatcher = servletContext.getRequestDispatcher(path);\n             if (!(requestDispatcher instanceof AsyncDispatcher)) {\n                 throw new UnsupportedOperationException(\n                         sm.getString(\"asyncContextImpl.noAsyncDispatcher\"));\n@@ -202,11 +202,16 @@ public void dispatch(ServletContext context, String path) {\n                     (AsyncDispatcher) requestDispatcher;\n             final ServletRequest servletRequest = getRequest();\n             final ServletResponse servletResponse = getResponse();\n+            // https://bz.apache.org/bugzilla/show_bug.cgi?id=63246\n+            // Take a local copy as the dispatch may complete the\n+            // request/response and that in turn may trigger recycling of this\n+            // object before the in-progress count can be decremented\n+            final Context context = this.context;\n             this.dispatch = new AsyncRunnable(\n                     request, applicationDispatcher, servletRequest, servletResponse);\n             this.request.getCoyoteRequest().action(ActionCode.ASYNC_DISPATCH, null);\n             clearServletRequestResponse();\n-            this.context.decrementInProgressAsyncCount();\n+            context.decrementInProgressAsyncCount();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/java/org/apache/catalina/core/AsyncContextImpl.java",
                "sha": "46216449add1b563f59b51247f143ed8b888bf60",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -88,6 +88,10 @@\n         thanks to YourKit Java profiler for helping to track down the wasted\n         memory and the root causes. (markt)\n       </fix>\n+      <fix>\n+        <bug>63246</bug>: Fix a potential <code>NullPointerException</code> when\n+        calling <code>AsyncContext.dispatch()</code>. (markt)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/eb2db582dd7cc0e1d3deb271bc19c6236db8a6ba/webapps/docs/changelog.xml",
                "sha": "cc21008244ac457d7d4bc56e957f15c3d02c5b2b",
                "status": "modified"
            }
        ],
        "message": "Fix https://bz.apache.org/bugzilla/show_bug.cgi?id=63246\n\nFix a potential NullPointerException when calling\nAsyncContext.dispatch()",
        "parent": "https://github.com/apache/tomcat/commit/a1cb1ac77e3a8fec1b00eb0e944842555da14f7d",
        "patched_files": [
            "AsyncContextImpl.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAsyncContextImpl.java"
        ]
    },
    "tomcat_f53bc99": {
        "bug_id": "tomcat_f53bc99",
        "commit": "https://github.com/apache/tomcat/commit/f53bc9960826d97996abb75ba9a529275a605695",
        "file": [
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/tomcat/blob/f53bc9960826d97996abb75ba9a529275a605695/java/org/apache/tomcat/util/scan/StandardJarScanner.java",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/util/scan/StandardJarScanner.java?ref=f53bc9960826d97996abb75ba9a529275a605695",
                "deletions": 31,
                "filename": "java/org/apache/tomcat/util/scan/StandardJarScanner.java",
                "patch": "@@ -370,40 +370,42 @@ private static void processManifest(Jar jar, boolean isWebapp,\n         }\n \n         Manifest manifest = jar.getManifest();\n-        Attributes attributes = manifest.getMainAttributes();\n-        String classPathAttribute = attributes.getValue(\"Class-Path\");\n-        if (classPathAttribute == null) {\n-            return;\n-        }\n-        String[] classPathEntries = classPathAttribute.split(\" \");\n-        for (String classPathEntry : classPathEntries) {\n-            classPathEntry = classPathEntry.trim();\n-            if (classPathEntry.length() == 0) {\n-                continue;\n+        if (manifest != null) {\n+            Attributes attributes = manifest.getMainAttributes();\n+            String classPathAttribute = attributes.getValue(\"Class-Path\");\n+            if (classPathAttribute == null) {\n+                return;\n             }\n-            URL jarURL = jar.getJarFileURL();\n-            URI jarURI;\n-            try {\n-                jarURI = jarURL.toURI();\n-            } catch (URISyntaxException e) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(sm.getString(\"jarScan.invalidUri\", jarURL));\n+            String[] classPathEntries = classPathAttribute.split(\" \");\n+            for (String classPathEntry : classPathEntries) {\n+                classPathEntry = classPathEntry.trim();\n+                if (classPathEntry.length() == 0) {\n+                    continue;\n+                }\n+                URL jarURL = jar.getJarFileURL();\n+                URI jarURI;\n+                try {\n+                    jarURI = jarURL.toURI();\n+                } catch (URISyntaxException e) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(sm.getString(\"jarScan.invalidUri\", jarURL));\n+                    }\n+                    continue;\n                 }\n-                continue;\n+                /*\n+                 * Note: Resolving the relative URLs from the manifest has the\n+                 *       potential to introduce security concerns. However, since\n+                 *       only JARs provided by the container and NOT those provided\n+                 *       by web applications are processed, there should be no\n+                 *       issues.\n+                 *       If this feature is ever extended to include JARs provided\n+                 *       by web applications, checks should be added to ensure that\n+                 *       any relative URL does not step outside the web application.\n+                 */\n+                URI classPathEntryURI = jarURI.resolve(classPathEntry);\n+                URL classPathEntryURL = classPathEntryURI.toURL();\n+                classPathUrlsToProcess.add(classPathEntryURL);\n             }\n-            /*\n-             * Note: Resolving the relative URLs from the manifest has the\n-             *       potential to introduce security concerns. However, since\n-             *       only JARs provided by the container and NOT those provided\n-             *       by web applications are processed, there should be no\n-             *       issues.\n-             *       If this feature is ever extended to include JARs provided\n-             *       by web applications, checks should be added to ensure that\n-             *       any relative URL does not step outside the web application.\n-             */\n-            URI classPathEntryURI = jarURI.resolve(classPathEntry);\n-            URL classPathEntryURL = classPathEntryURI.toURL();\n-            classPathUrlsToProcess.add(classPathEntryURL);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat/raw/f53bc9960826d97996abb75ba9a529275a605695/java/org/apache/tomcat/util/scan/StandardJarScanner.java",
                "sha": "834e510c5ed74f0f6b6960f5744941839d2bfc6a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat/blob/f53bc9960826d97996abb75ba9a529275a605695/webapps/docs/changelog.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=f53bc9960826d97996abb75ba9a529275a605695",
                "deletions": 0,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -53,6 +53,10 @@\n         around. Therefore, start logging RMI Target related memory leaks on web\n         application stop. (markt)\n       </fix>\n+      <fix>\n+        Ensure NPE will not be thrown during deployment when scanning jar files\n+        without MANIFEST.MF file. (violetagg)\n+      </fix>\n     </changelog>\n   </subsection>\n   <subsection name=\"Coyote\">",
                "raw_url": "https://github.com/apache/tomcat/raw/f53bc9960826d97996abb75ba9a529275a605695/webapps/docs/changelog.xml",
                "sha": "5058a8c7b75b1351641f27ae4b3080f2d054fcec",
                "status": "modified"
            }
        ],
        "message": "Ensure NPE will not be thrown during deployment when scanning jar files without MANIFEST.MF file.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1744194 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/4df28619d4b4a9cb598121ddc63602175fff60ea",
        "patched_files": [
            "changelog.xml",
            "StandardJarScanner.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardJarScanner.java"
        ]
    },
    "tomcat_f562edd": {
        "bug_id": "tomcat_f562edd",
        "commit": "https://github.com/apache/tomcat/commit/f562edd3302866f34c0ca9fa97f6ff414450f1ae",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/catalina/core/StandardWrapperValve.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/core/StandardWrapperValve.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/StandardWrapperValve.java",
                "patch": "@@ -29,6 +29,7 @@\n import javax.servlet.UnavailableException;\n import javax.servlet.http.HttpServletResponse;\n \n+import org.apache.catalina.Container;\n import org.apache.catalina.Context;\n import org.apache.catalina.Globals;\n import org.apache.catalina.LifecycleException;\n@@ -174,6 +175,7 @@ public final void invoke(Request request, Response response)\n \n         // Call the filter chain for this request\n         // NOTE: This also calls the servlet's service() method\n+        Container container = this.container;\n         try {\n             if ((servlet != null) && (filterChain != null)) {\n                 // Swallow output if needed",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/catalina/core/StandardWrapperValve.java",
                "sha": "aff0b425b6775f2ea7d10b72517aa1c0982702cb",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11InputBuffer.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11InputBuffer.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11InputBuffer.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n \n+import org.apache.coyote.CloseNowException;\n import org.apache.coyote.InputBuffer;\n import org.apache.coyote.Request;\n import org.apache.juli.logging.Log;\n@@ -728,7 +729,13 @@ private boolean fill(boolean block) throws IOException {\n             byteBuffer.position(byteBuffer.limit());\n         }\n         byteBuffer.limit(byteBuffer.capacity());\n-        int nRead = wrapper.read(block, byteBuffer);\n+        SocketWrapperBase<?> socketWrapper = this.wrapper;\n+        int nRead = -1;\n+        if (socketWrapper != null) {\n+            nRead = socketWrapper.read(block, byteBuffer);\n+        } else {\n+            throw new CloseNowException(sm.getString(\"iib.eof.error\"));\n+        }\n         byteBuffer.limit(byteBuffer.position()).reset();\n         if (nRead > 0) {\n             return true;",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11InputBuffer.java",
                "sha": "5632de212c8d3704fea71bf7b0ff130588a33529",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/coyote/http11/Http11OutputBuffer.java?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Arrays;\n \n import org.apache.coyote.ActionCode;\n+import org.apache.coyote.CloseNowException;\n import org.apache.coyote.Response;\n import org.apache.tomcat.util.buf.ByteChunk;\n import org.apache.tomcat.util.buf.MessageBytes;\n@@ -306,6 +307,8 @@ protected void commit() throws IOException {\n                 SocketWrapperBase<?> socketWrapper = this.socketWrapper;\n                 if (socketWrapper != null) {\n                     socketWrapper.write(isBlocking(), headerBuffer);\n+                } else {\n+                    throw new CloseNowException(sm.getString(\"iob.failedwrite\"));\n                 }\n             } finally {\n                 headerBuffer.position(0).limit(headerBuffer.capacity());\n@@ -530,7 +533,12 @@ boolean isChunking() {\n         public int doWrite(ByteBuffer chunk) throws IOException {\n             try {\n                 int len = chunk.remaining();\n-                socketWrapper.write(isBlocking(), chunk);\n+                SocketWrapperBase<?> socketWrapper = Http11OutputBuffer.this.socketWrapper;\n+                if (socketWrapper != null) {\n+                    socketWrapper.write(isBlocking(), chunk);\n+                } else {\n+                    throw new CloseNowException(sm.getString(\"iob.failedwrite\"));\n+                }\n                 len -= chunk.remaining();\n                 byteCount += len;\n                 return len;",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/java/org/apache/coyote/http11/Http11OutputBuffer.java",
                "sha": "c369837b42587d06ff9aa45d1db104ed669bc4d8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat/blob/f562edd3302866f34c0ca9fa97f6ff414450f1ae/webapps/docs/changelog.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/webapps/docs/changelog.xml?ref=f562edd3302866f34c0ca9fa97f6ff414450f1ae",
                "deletions": 2,
                "filename": "webapps/docs/changelog.xml",
                "patch": "@@ -81,8 +81,7 @@\n         certain microbenchmarks. (remm)\n       </fix>\n       <fix>\n-        Avoid possible NPE in <code>Http11OutputBuffer.commit</code> on\n-        connector stopclose. (remm)\n+        Avoid possible NPEs in on connector stop. (remm)\n       </fix>\n     </changelog>\n   </subsection>",
                "raw_url": "https://github.com/apache/tomcat/raw/f562edd3302866f34c0ca9fa97f6ff414450f1ae/webapps/docs/changelog.xml",
                "sha": "194686319384f6de2b3f20a1f642f67696339385",
                "status": "modified"
            }
        ],
        "message": "Avoid other cases of NPEs on stop\n\nAs found in the CI logs.",
        "parent": "https://github.com/apache/tomcat/commit/dc3741107ee6ffcbe0860e46d7f7d05a4d9f63c4",
        "patched_files": [
            "Http11OutputBuffer.java",
            "Http11InputBuffer.java",
            "changelog.xml"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestHttp11OutputBuffer.java",
            "TestHttp11InputBuffer.java"
        ]
    },
    "tomcat_f6784e6": {
        "bug_id": "tomcat_f6784e6",
        "commit": "https://github.com/apache/tomcat/commit/f6784e67622fe9f09ffc31b03e093988c9224fcd",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat/blob/f6784e67622fe9f09ffc31b03e093988c9224fcd/test/org/apache/coyote/http2/TestAbstractStream.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/test/org/apache/coyote/http2/TestAbstractStream.java?ref=f6784e67622fe9f09ffc31b03e093988c9224fcd",
                "deletions": 6,
                "filename": "test/org/apache/coyote/http2/TestAbstractStream.java",
                "patch": "@@ -28,7 +28,7 @@\n     @Test\n     public void testDependenciesFig3() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -59,7 +59,7 @@ public void testDependenciesFig3() {\n     @Test\n     public void testDependenciesFig4() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -90,7 +90,7 @@ public void testDependenciesFig4() {\n     @Test\n     public void testDependenciesFig5NonExclusive() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -132,7 +132,7 @@ public void testDependenciesFig5NonExclusive() {\n     @Test\n     public void testDependenciesFig5Exclusive() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -174,7 +174,7 @@ public void testDependenciesFig5Exclusive() {\n     @Test\n     public void testCircular01() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);\n@@ -204,7 +204,7 @@ public void testCircular01() {\n     @Test\n     public void testCircular02() {\n         // Setup\n-        Http2UpgradeHandler handler = new Http2UpgradeHandler(null, null, null);\n+        Http2UpgradeHandler handler = new Http2UpgradeHandler(new Http2Protocol(), null, null);\n         Stream a = new Stream(Integer.valueOf(1), handler);\n         Stream b = new Stream(Integer.valueOf(2), handler);\n         Stream c = new Stream(Integer.valueOf(3), handler);",
                "raw_url": "https://github.com/apache/tomcat/raw/f6784e67622fe9f09ffc31b03e093988c9224fcd/test/org/apache/coyote/http2/TestAbstractStream.java",
                "sha": "1ff210fd7b3490b7e1ca3ad3e9828945c71d02b4",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs in tests after refactoring\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1807334 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/1dc8594099e24426b799bb0acf80aa3462a8bf70",
        "patched_files": [
            "AbstractStream.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestAbstractStream.java"
        ]
    },
    "tomcat_f773ff3": {
        "bug_id": "tomcat_f773ff3",
        "commit": "https://github.com/apache/tomcat/commit/f773ff326eaa681a65804a6d9e989a63b3f3a608",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat/blob/f773ff326eaa681a65804a6d9e989a63b3f3a608/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=f773ff326eaa681a65804a6d9e989a63b3f3a608",
                "deletions": 6,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -367,12 +367,14 @@ private void unregisterAuthenticatedSession(WsSession wsSession,\n     public void closeAuthenticatedSession(String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.remove(httpSessionId);\n \n-        for (WsSession wsSession : wsSessions) {\n-            try {\n-                wsSession.close(AUTHENTICATED_HTTP_SESSION_CLOSED);\n-            } catch (IOException e) {\n-                // Any IOExceptions during close will have been caught and the\n-                // onError method called.\n+        if (wsSessions != null && !wsSessions.isEmpty()) {\n+            for (WsSession wsSession : wsSessions) {\n+                try {\n+                    wsSession.close(AUTHENTICATED_HTTP_SESSION_CLOSED);\n+                } catch (IOException e) {\n+                    // Any IOExceptions during close will have been caught and the\n+                    // onError method called.\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/tomcat/raw/f773ff326eaa681a65804a6d9e989a63b3f3a608/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "c704d9fd21cc8b1e28272c9700230f6c0fd681ad",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when a background thread tries to expire the HTTP sessions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499534 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/06832c66086f1c3cd6a14f66262c474a41bf5751",
        "patched_files": [
            "WsServerContainer.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat_f959322": {
        "bug_id": "tomcat_f959322",
        "commit": "https://github.com/apache/tomcat/commit/f9593220aa1007a038f307f157fa4b3e9f35d117",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat/blob/f9593220aa1007a038f307f157fa4b3e9f35d117/java/org/apache/catalina/session/StandardSession.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/session/StandardSession.java?ref=f9593220aa1007a038f307f157fa4b3e9f35d117",
                "deletions": 1,
                "filename": "java/org/apache/catalina/session/StandardSession.java",
                "patch": "@@ -1755,8 +1755,17 @@ protected boolean exclude(String name, Object value) {\n         if (Constants.excludedAttributeNames.contains(name)) {\n             return true;\n         }\n+\n+        // Manager is required for remaining check\n+        Manager manager = getManager();\n+        if (manager == null) {\n+            // Manager may be null during replication of new sessions in a\n+            // cluster. Avoid the NPE.\n+            return false;\n+        }\n+\n         // Last check so use a short-cut\n-        return !getManager().willAttributeDistribute(name, value);\n+        return !manager.willAttributeDistribute(name, value);\n     }\n \n ",
                "raw_url": "https://github.com/apache/tomcat/raw/f9593220aa1007a038f307f157fa4b3e9f35d117/java/org/apache/catalina/session/StandardSession.java",
                "sha": "05ebfeea6469f456831f865973937258c214186c",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE when clustering\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1727670 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/530186ab0cb166e825405b64f3c91a712a6c0544",
        "patched_files": [
            "StandardSession.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestStandardSession.java"
        ]
    },
    "tomcat_f9e7d6e": {
        "bug_id": "tomcat_f9e7d6e",
        "commit": "https://github.com/apache/tomcat/commit/f9e7d6e5fed07dd92c7fa9240fc41e905f3484e5",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/tomcat/blob/f9e7d6e5fed07dd92c7fa9240fc41e905f3484e5/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java?ref=f9e7d6e5fed07dd92c7fa9240fc41e905f3484e5",
                "deletions": 10,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "patch": "@@ -102,9 +102,11 @@ protected String reportFailedQuery(String query, Object[] args, String name, lon\n             long now = System.currentTimeMillis();\n             long delta = now - start;\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.failure(delta, now);\n-            if (isLogFailed() && log.isWarnEnabled()) {\n-                log.warn(\"Failed Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+            if (qs != null) {\n+                qs.failure(delta, now);\n+                if (isLogFailed() && log.isWarnEnabled()) {\n+                    log.warn(\"Failed Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+                }\n             }\n         }\n         return sql;\n@@ -115,7 +117,7 @@ protected String reportQuery(String query, Object[] args, final String name, lon\n         String sql = super.reportQuery(query, args, name, start, delta);\n         if (this.maxQueries > 0 ) {\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.add(delta, start);\n+            if (qs != null) qs.add(delta, start);\n         }\n         return sql;\n     }\n@@ -125,9 +127,11 @@ protected String reportSlowQuery(String query, Object[] args, String name, long\n         String sql = super.reportSlowQuery(query, args, name, start, delta);\n         if (this.maxQueries > 0 ) {\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.add(delta, start);\n-            if (isLogSlow() && log.isWarnEnabled()) {\n-                log.warn(\"Slow Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+            if (qs != null) {\n+                qs.add(delta, start);\n+                if (isLogSlow() && log.isWarnEnabled()) {\n+                    log.warn(\"Slow Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+                }\n             }\n         }\n         return sql;\n@@ -145,13 +149,13 @@ public void closeInvoked() {\n     @Override\n     public void prepareStatement(String sql, long time) {\n         QueryStats qs = getQueryStats(sql);\n-        qs.prepare(time);\n+        if (qs != null) qs.prepare(time);\n     }\n \n     @Override\n     public void prepareCall(String sql, long time) {\n         QueryStats qs = getQueryStats(sql);\n-        qs.prepare(time);\n+        if (qs != null) qs.prepare(time);\n     }\n \n     /**\n@@ -186,7 +190,10 @@ public void poolClosed(ConnectionPool pool) {\n     protected QueryStats getQueryStats(String sql) {\n         if (sql==null) sql = \"\";\n         ConcurrentHashMap<String,QueryStats> queries = SlowQueryReport.this.queries;\n-        if (queries==null) return null;\n+        if (queries==null) {\n+            if (log.isWarnEnabled()) log.warn(\"Connection has already been closed or abandoned\");\n+            return null;\n+        }\n         QueryStats qs = queries.get(sql);\n         if (qs == null) {\n             qs = new QueryStats(sql);",
                "raw_url": "https://github.com/apache/tomcat/raw/f9e7d6e5fed07dd92c7fa9240fc41e905f3484e5/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "sha": "7f7a4021f1c3646d78e49f2fe923b7004f14b4ba",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if connection has been abandoned.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1686974 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/f784a13be22f3359c152990c8f79a97b9e770cd7",
        "patched_files": [
            "SlowQueryReport.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestSlowQueryReport.java"
        ]
    },
    "tomcat_fe22689": {
        "bug_id": "tomcat_fe22689",
        "commit": "https://github.com/apache/tomcat/commit/fe22689c4232140e9b28692d4b65a3072283121f",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/tomcat/blob/fe22689c4232140e9b28692d4b65a3072283121f/java/org/apache/catalina/startup/WebXml.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/tomcat/contents/java/org/apache/catalina/startup/WebXml.java?ref=fe22689c4232140e9b28692d4b65a3072283121f",
                "deletions": 18,
                "filename": "java/org/apache/catalina/startup/WebXml.java",
                "patch": "@@ -706,15 +706,19 @@ public boolean merge(Set<WebXml> fragments) {\n                     mergeFilter(entry.getValue(),\n                             filters.get(entry.getKey()), false);\n                 } else {\n-                    if (!(mergeFilter(entry.getValue(),\n-                            temp.getFilters().get(entry.getKey()), true))) {\n-                        log.error(sm.getString(\n-                                \"webXml.mergeConflictFilter\",\n-                                entry.getKey(),\n-                                fragment.getName(),\n-                                fragment.getURL()));\n-\n-                        return false;\n+                    if (temp.getFilters().containsKey(entry.getKey())) {\n+                        if (!(mergeFilter(entry.getValue(),\n+                                temp.getFilters().get(entry.getKey()), true))) {\n+                            log.error(sm.getString(\n+                                    \"webXml.mergeConflictFilter\",\n+                                    entry.getKey(),\n+                                    fragment.getName(),\n+                                    fragment.getURL()));\n+    \n+                            return false;\n+                        }\n+                    } else {\n+                        temp.getFilters().put(entry.getKey(), entry.getValue());\n                     }\n                 }\n             }\n@@ -845,15 +849,19 @@ public boolean merge(Set<WebXml> fragments) {\n                     mergeServlet(entry.getValue(),\n                             servlets.get(entry.getKey()), false);\n                 } else {\n-                    if (!(mergeServlet(entry.getValue(),\n-                            temp.getServlets().get(entry.getKey()), true))) {\n-                        log.error(sm.getString(\n-                                \"webXml.mergeConflictServlet\",\n-                                entry.getKey(),\n-                                fragment.getName(),\n-                                fragment.getURL()));\n-\n-                        return false;\n+                    if (temp.getServlets().containsKey(entry.getKey())) {\n+                        if (!(mergeServlet(entry.getValue(),\n+                                temp.getServlets().get(entry.getKey()), true))) {\n+                            log.error(sm.getString(\n+                                    \"webXml.mergeConflictServlet\",\n+                                    entry.getKey(),\n+                                    fragment.getName(),\n+                                    fragment.getURL()));\n+    \n+                            return false;\n+                        }\n+                    } else {\n+                        temp.getServlets().put(entry.getKey(), entry.getValue());\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/tomcat/raw/fe22689c4232140e9b28692d4b65a3072283121f/java/org/apache/catalina/startup/WebXml.java",
                "sha": "f258459e5de670dd42ccf9682718cdc81bf36588",
                "status": "modified"
            }
        ],
        "message": "Fix a couple of potential NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@888203 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat/commit/6a9d98ea5dc20dc04fc6bb8c607a95be21a1de14",
        "patched_files": [
            "WebXml.java"
        ],
        "repo": "tomcat",
        "unit_tests": [
            "TestWebXml.java"
        ]
    }
}