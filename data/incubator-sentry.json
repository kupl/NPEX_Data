{
    "incubator-sentry_d96f951": {
        "bug_id": "incubator-sentry_d96f951",
        "commit": "https://github.com/apache/incubator-sentry/commit/d96f95160fd3dfa30c27b82d09fb5cc2c348b483",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/incubator-sentry/blob/d96f95160fd3dfa30c27b82d09fb5cc2c348b483/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/PathsUpdate.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/incubator-sentry/contents/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/PathsUpdate.java?ref=d96f95160fd3dfa30c27b82d09fb5cc2c348b483",
                "deletions": 4,
                "filename": "sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/PathsUpdate.java",
                "patch": "@@ -23,13 +23,15 @@\n import java.util.LinkedList;\n import java.util.List;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n-\n import org.apache.sentry.hdfs.service.thrift.TPathChanges;\n import org.apache.sentry.hdfs.service.thrift.TPathsUpdate;\n import org.apache.commons.httpclient.util.URIUtil;\n import org.apache.commons.httpclient.URIException;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.conf.Configuration;\n \n import com.google.common.collect.Lists;\n \n@@ -42,7 +44,7 @@\n public class PathsUpdate implements Updateable.Update {\n \n   public static String ALL_PATHS = \"__ALL_PATHS__\";\n-\n+  private static final Configuration CONF = new Configuration();\n   private final TPathsUpdate tPathsUpdate;\n \n   public PathsUpdate() {\n@@ -89,6 +91,10 @@ public TPathsUpdate toThrift() {\n     return tPathsUpdate;\n   }\n \n+  @VisibleForTesting\n+  public static Configuration getConfiguration() {\n+    return CONF;\n+  }\n \n   /**\n    *\n@@ -106,9 +112,18 @@ public TPathsUpdate toThrift() {\n         return null;\n       }\n \n-      Preconditions.checkNotNull(uri.getScheme());\n+      String scheme = uri.getScheme();\n+      if (scheme == null) {\n+        // Use the default URI scheme only if the paths has no scheme.\n+        URI defaultUri = FileSystem.getDefaultUri(CONF);\n+        scheme = defaultUri.getScheme();\n+      }\n+\n+      // The paths without a scheme will be default to default scheme.\n+      Preconditions.checkNotNull(scheme);\n \n-      if(uri.getScheme().equalsIgnoreCase(\"hdfs\")) {\n+      // Non-HDFS paths will be skipped.\n+      if(scheme.equalsIgnoreCase(\"hdfs\")) {\n         return Lists.newArrayList(uri.getPath().split(\"^/\")[1]\n             .split(\"/\"));\n       } else {",
                "raw_url": "https://github.com/apache/incubator-sentry/raw/d96f95160fd3dfa30c27b82d09fb5cc2c348b483/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/PathsUpdate.java",
                "sha": "50ef112ff9ea9674d3b0bbc4279620e7a82f2d95",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/incubator-sentry/blob/d96f95160fd3dfa30c27b82d09fb5cc2c348b483/sentry-tests/sentry-tests-hive/src/test/java/org/apache/sentry/tests/e2e/hdfs/TestHDFSIntegration.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/incubator-sentry/contents/sentry-tests/sentry-tests-hive/src/test/java/org/apache/sentry/tests/e2e/hdfs/TestHDFSIntegration.java?ref=d96f95160fd3dfa30c27b82d09fb5cc2c348b483",
                "deletions": 5,
                "filename": "sentry-tests/sentry-tests-hive/src/test/java/org/apache/sentry/tests/e2e/hdfs/TestHDFSIntegration.java",
                "patch": "@@ -51,13 +51,12 @@\n import org.apache.hadoop.fs.permission.AclStatus;\n import org.apache.hadoop.fs.permission.FsAction;\n import org.apache.hadoop.fs.permission.FsPermission;\n-import org.apache.hadoop.hdfs.DFSConfigKeys;\n-import org.apache.hadoop.hdfs.DFSTestUtil;\n-import org.apache.hadoop.hdfs.HdfsConfiguration;\n-import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.hadoop.hdfs.*;\n import org.apache.hadoop.hdfs.server.namenode.EditLogFileOutputStream;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n import org.apache.hadoop.io.LongWritable;\n import org.apache.hadoop.io.Text;\n import org.apache.hadoop.mapred.FileInputFormat;\n@@ -76,6 +75,7 @@\n import org.apache.hadoop.security.UserGroupInformation;\n import org.apache.sentry.binding.hive.SentryHiveAuthorizationTaskFactoryImpl;\n import org.apache.sentry.binding.hive.conf.HiveAuthzConf;\n+import org.apache.sentry.hdfs.PathsUpdate;\n import org.apache.sentry.hdfs.SentryAuthorizationProvider;\n import org.apache.sentry.provider.db.SentryAlreadyExistsException;\n import org.apache.sentry.provider.db.SimpleDBProviderBackend;\n@@ -101,6 +101,7 @@\n import com.google.common.collect.Maps;\n import com.google.common.io.Files;\n import com.google.common.io.Resources;\n+import org.apache.hadoop.hive.metastore.api.Table;\n \n public class TestHDFSIntegration {\n   \n@@ -140,13 +141,15 @@ public void reduce(Text key, Iterator<Long> values,\n \n   private static final int NUM_RETRIES = 10;\n   private static final int RETRY_WAIT = 1000;\n+  private static final String EXTERNAL_SENTRY_SERVICE = \"sentry.e2etest.external.sentry\";\n   private static final String DFS_NAMENODE_AUTHORIZATION_PROVIDER_KEY =\n       \"dfs.namenode.authorization.provider.class\";\n \n   private static MiniDFSCluster miniDFS;\n   private MiniMRClientCluster miniMR;\n   private static InternalHiveServer hiveServer2;\n   private static InternalMetastoreServer metastore;\n+  private static HiveMetaStoreClient hmsClient;\n \n   private static int sentryPort = -1;\n   protected static SentrySrv sentryServer;\n@@ -304,6 +307,7 @@ public void run() {\n           }\n         }.start();\n \n+        hmsClient = new HiveMetaStoreClient(hiveConf);\n         startHiveServer2(retries, hiveConf);\n         return null;\n       }\n@@ -1266,7 +1270,7 @@ public void testAllColumn() throws Throwable {\n     conn = hiveServer2.createConnection(StaticUserGroup.ADMIN1, StaticUserGroup.ADMIN1);\n     stmt = conn.createStatement();\n     stmt.execute(\"create database \" + dbName);\n-    stmt.execute(\"use \"+ dbName);\n+    stmt.execute(\"use \" + dbName);\n     stmt.execute(\"create table p1 (c1 string, c2 string) partitioned by (month int, day int)\");\n     stmt.execute(\"alter table p1 add partition (month=1, day=1)\");\n     loadDataTwoCols(stmt);\n@@ -1591,6 +1595,70 @@ private void verifyQuery(Statement stmt, String table, int n, int retry) throws\n     }\n   }\n \n+  /**\n+   * SENTRY-1002:\n+   * Ensure the paths with no scheme will not cause NPE during paths update.\n+   */\n+   @Test\n+   public void testMissingScheme() throws Throwable {\n+\n+     // In the local test environment, EXTERNAL_SENTRY_SERVICE is false,\n+     // set the default URI scheme to be hdfs.\n+     boolean testConfOff = new Boolean(System.getProperty(EXTERNAL_SENTRY_SERVICE, \"false\"));\n+     if (!testConfOff) {\n+       PathsUpdate.getConfiguration().set(\"fs.defaultFS\", \"hdfs:///\");\n+     }\n+\n+     tmpHDFSDir = new Path(\"/tmp/external\");\n+     if (!miniDFS.getFileSystem().exists(tmpHDFSDir)) {\n+       miniDFS.getFileSystem().mkdirs(tmpHDFSDir);\n+     }\n+\n+     Path partitionDir = new Path(\"/tmp/external/p1\");\n+     if (!miniDFS.getFileSystem().exists(partitionDir)) {\n+       miniDFS.getFileSystem().mkdirs(partitionDir);\n+     }\n+\n+     String dbName = \"db1\";\n+     String tblName = \"tab1\";\n+     dbNames = new String[]{dbName};\n+     roles = new String[]{\"admin_role\"};\n+     admin = StaticUserGroup.ADMIN1;\n+\n+     Connection conn;\n+     Statement stmt;\n+\n+     conn = hiveServer2.createConnection(\"hive\", \"hive\");\n+     stmt = conn.createStatement();\n+     stmt.execute(\"create role admin_role\");\n+     stmt.execute(\"grant all on server server1 to role admin_role\");\n+     stmt.execute(\"grant role admin_role to group \" + StaticUserGroup.ADMINGROUP);\n+     stmt.close();\n+     conn.close();\n+\n+     conn = hiveServer2.createConnection(StaticUserGroup.ADMIN1, StaticUserGroup.ADMIN1);\n+     stmt = conn.createStatement();\n+     stmt.execute(\"create database \" + dbName);\n+     stmt.execute(\"create external table \" + dbName + \".\" + tblName + \"(s string) location '/tmp/external/p1'\");\n+\n+     // Deep copy of table tab1\n+     Table tbCopy = hmsClient.getTable(dbName, tblName);\n+\n+     // Change the location of the table to strip the scheme.\n+     StorageDescriptor sd = hmsClient.getTable(dbName, tblName).getSd();\n+     sd.setLocation(\"/tmp/external\");\n+     tbCopy.setSd(sd);\n+\n+     // Alter table tab1 to be tbCopy which is at scheme-less location.\n+     // And the corresponding path will be updated to sentry server.\n+     hmsClient.alter_table(dbName, \"tab1\", tbCopy);\n+     Assert.assertEquals(hmsClient.getTable(dbName, tblName).getSd().getLocation(), \"/tmp/external\");\n+     verifyOnPath(\"/tmp/external\", FsAction.ALL, StaticUserGroup.HIVE, true);\n+\n+     stmt.close();\n+     conn.close();\n+   }\n+\n   private void loadData(Statement stmt) throws IOException, SQLException {\n     FSDataOutputStream f1 = miniDFS.getFileSystem().create(new Path(\"/tmp/f1.txt\"));\n     f1.writeChars(\"m1d1_t1\\n\");",
                "raw_url": "https://github.com/apache/incubator-sentry/raw/d96f95160fd3dfa30c27b82d09fb5cc2c348b483/sentry-tests/sentry-tests-hive/src/test/java/org/apache/sentry/tests/e2e/hdfs/TestHDFSIntegration.java",
                "sha": "4d9e31cd9147511d6ee4becaf74e9c2a58d1f556",
                "status": "modified"
            }
        ],
        "message": "SENTRY-1002: PathsUpdate.parsePath(path) will throw an NPE when parsing relative paths (Hao Hao via Lenni Kuff)\n\nChange-Id: I8882078abeed37c17734b04d09f6fb2b298861b9",
        "parent": "https://github.com/apache/incubator-sentry/commit/8529f8e121144d715986a485abb204aa036caa19",
        "repo": "incubator-sentry",
        "unit_tests": [
            "TestPathsUpdate.java"
        ]
    }
}