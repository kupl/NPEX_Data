{
    "sling-org-apache-sling-tenant_261044b": {
        "bug_id": "sling-org-apache-sling-tenant_261044b",
        "commit": "https://github.com/apache/sling-org-apache-sling-tenant/commit/261044b5f74c878132d218e98572669dfcf96df4",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-tenant/blob/261044b5f74c878132d218e98572669dfcf96df4/pom.xml",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-tenant/contents/pom.xml?ref=261044b5f74c878132d218e98572669dfcf96df4",
                "deletions": 0,
                "filename": "pom.xml",
                "patch": "@@ -127,5 +127,15 @@\n             <groupId>junit</groupId>\n             <artifactId>junit</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mockito</groupId>\n+            <artifactId>mockito-all</artifactId>\n+            <version>1.10.19</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-simple</artifactId>\n+        </dependency>\n     </dependencies>\n </project>",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-tenant/raw/261044b5f74c878132d218e98572669dfcf96df4/pom.xml",
                "sha": "12aaba98ac21028e8993d027c042f57cecfac8ec",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-tenant/blob/261044b5f74c878132d218e98572669dfcf96df4/src/main/java/org/apache/sling/tenant/internal/TenantProviderImpl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-tenant/contents/src/main/java/org/apache/sling/tenant/internal/TenantProviderImpl.java?ref=261044b5f74c878132d218e98572669dfcf96df4",
                "deletions": 12,
                "filename": "src/main/java/org/apache/sling/tenant/internal/TenantProviderImpl.java",
                "patch": "@@ -122,14 +122,14 @@\n     private WebConsolePlugin plugin;\r\n \r\n     @Activate\r\n-    private void activate(final BundleContext bundleContext, final Map<String, Object> properties) {\r\n+    protected void activate(final BundleContext bundleContext, final Map<String, Object> properties) {\r\n         this.tenantRootPath = PropertiesUtil.toString(properties.get(TENANT_ROOT), RESOURCE_TENANT_ROOT);\r\n         this.adapterFactory = new TenantAdapterFactory(bundleContext, this, PropertiesUtil.toStringArray(properties.get(TENANT_PATH_MATCHER), DEFAULT_PATH_MATCHER));\r\n         this.plugin = new WebConsolePlugin(bundleContext, this);\r\n     }\r\n \r\n     @Deactivate\r\n-    private void deactivate() {\r\n+    protected void deactivate() {\r\n         if (this.adapterFactory != null) {\r\n             this.adapterFactory.dispose();\r\n             this.adapterFactory = null;\r\n@@ -204,21 +204,24 @@ public Tenant call(ResourceResolver resolver) {\n         }\r\n \r\n         Iterator<Tenant> result = call(new ResourceResolverTask<Iterator<Tenant>>() {\r\n+            @SuppressWarnings(\"unchecked\")\r\n             @Override\r\n             public Iterator<Tenant> call(ResourceResolver resolver) {\r\n                 Resource tenantRootRes = resolver.getResource(tenantRootPath);\r\n-\r\n-                List<Tenant> tenantList = new ArrayList<Tenant>();\r\n-                Iterator<Resource> tenantResourceList = tenantRootRes.listChildren();\r\n-                while (tenantResourceList.hasNext()) {\r\n-                    Resource tenantRes = tenantResourceList.next();\r\n-\r\n-                    if (filter == null || filter.matches(ResourceUtil.getValueMap(tenantRes))) {\r\n-                        TenantImpl tenant = new TenantImpl(tenantRes);\r\n-                        tenantList.add(tenant);\r\n+                if ( tenantRootRes != null ) {\r\n+                    List<Tenant> tenantList = new ArrayList<Tenant>();\r\n+                    Iterator<Resource> tenantResourceList = tenantRootRes.listChildren();\r\n+                    while (tenantResourceList.hasNext()) {\r\n+                        Resource tenantRes = tenantResourceList.next();\r\n+\r\n+                        if (filter == null || filter.matches(ResourceUtil.getValueMap(tenantRes))) {\r\n+                            TenantImpl tenant = new TenantImpl(tenantRes);\r\n+                            tenantList.add(tenant);\r\n+                        }\r\n                     }\r\n+                    return tenantList.iterator();\r\n                 }\r\n-                return tenantList.iterator();\r\n+                return Collections.EMPTY_LIST.iterator();\r\n             }\r\n         });\r\n \r",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-tenant/raw/261044b5f74c878132d218e98572669dfcf96df4/src/main/java/org/apache/sling/tenant/internal/TenantProviderImpl.java",
                "sha": "367dff0aae29fc36fcade8e906dfc65f4281d490",
                "status": "modified"
            },
            {
                "additions": 56,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-tenant/blob/261044b5f74c878132d218e98572669dfcf96df4/src/test/java/org/apache/sling/tenant/internal/TenantProviderImplTest.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-tenant/contents/src/test/java/org/apache/sling/tenant/internal/TenantProviderImplTest.java?ref=261044b5f74c878132d218e98572669dfcf96df4",
                "deletions": 0,
                "filename": "src/test/java/org/apache/sling/tenant/internal/TenantProviderImplTest.java",
                "patch": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sling.tenant.internal;\n+\n+import java.lang.reflect.Field;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+\n+import junit.framework.TestCase;\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.api.resource.ResourceResolverFactory;\n+import org.apache.sling.tenant.Tenant;\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.osgi.framework.BundleContext;\n+\n+public class TenantProviderImplTest {\n+\n+    @Test\n+    public void testListTenantsWithoutTenantRoot() throws Exception {\n+        TenantProviderImpl provider = new TenantProviderImpl();\n+        final ResourceResolverFactory rrf = Mockito.mock(ResourceResolverFactory.class);\n+        final BundleContext context = Mockito.mock(BundleContext.class);\n+        final ResourceResolver rr = Mockito.mock(ResourceResolver.class);\n+        Mockito.when(rrf.getAdministrativeResourceResolver(\n+                Mockito.anyMapOf(String.class, Object.class))).thenReturn(rr);\n+        set(provider, \"factory\", rrf);\n+        provider.activate(context, new HashMap<String, Object>());\n+        Iterator<Tenant> tenants = provider.getTenants();\n+        TestCase.assertNotNull(tenants);\n+        TestCase.assertFalse(tenants.hasNext());\n+    }\n+\n+    private static void set(Object o, String name, Object value) throws Exception {\n+        final Field f = o.getClass().getDeclaredField(name);\n+        f.setAccessible(true);\n+        f.set(o, value);\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-tenant/raw/261044b5f74c878132d218e98572669dfcf96df4/src/test/java/org/apache/sling/tenant/internal/TenantProviderImplTest.java",
                "sha": "495d103a3c04c564bfee3edc6970bf0bfe9e2660",
                "status": "added"
            }
        ],
        "message": "SLING-3695 : TenantProvider throws NPE when listing tenants root tenant resource does not exist. Apply patch from Timothee Maret\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1722868 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-tenant/commit/ae8e2056f3a3cf4adb96d0788f162cd51577dbb3",
        "repo": "sling-org-apache-sling-tenant",
        "unit_tests": [
            "TenantProviderImplTest.java"
        ]
    }
}