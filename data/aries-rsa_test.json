{
    "aries-rsa_362b68d": {
        "bug_id": "aries-rsa_362b68d",
        "commit": "https://github.com/apache/aries-rsa/commit/362b68d69225f78002e7db0118b76c9cec1b4b4f",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/aries-rsa/blob/362b68d69225f78002e7db0118b76c9cec1b4b4f/discovery/zookeeper/src/main/java/org/apache/aries/rsa/discovery/zookeeper/repository/ZookeeperEndpointRepository.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/discovery/zookeeper/src/main/java/org/apache/aries/rsa/discovery/zookeeper/repository/ZookeeperEndpointRepository.java?ref=362b68d69225f78002e7db0118b76c9cec1b4b4f",
                "deletions": 2,
                "filename": "discovery/zookeeper/src/main/java/org/apache/aries/rsa/discovery/zookeeper/repository/ZookeeperEndpointRepository.java",
                "patch": "@@ -247,13 +247,17 @@ private void handleZNodeChanged(String path) {\n     private void handleRemoved(String path) {\n         EndpointDescription endpoint = nodes.remove(path);\n         EndpointEvent event = new EndpointEvent(EndpointEvent.REMOVED, endpoint);\n-        listener.endpointChanged(event, null);\n+        if (listener != null) {\n+            listener.endpointChanged(event, null);\n+        }\n     }\n \n     private void handleChanged(String path, EndpointDescription endpoint) {\n         EndpointDescription old = nodes.put(path, endpoint);\n         EndpointEvent event = new EndpointEvent(old == null ? EndpointEvent.ADDED : EndpointEvent.MODIFIED, endpoint);\n-        listener.endpointChanged(event, null);\n+        if (listener != null) {\n+            listener.endpointChanged(event, null);\n+        }\n     }\n \n }",
                "raw_url": "https://github.com/apache/aries-rsa/raw/362b68d69225f78002e7db0118b76c9cec1b4b4f/discovery/zookeeper/src/main/java/org/apache/aries/rsa/discovery/zookeeper/repository/ZookeeperEndpointRepository.java",
                "sha": "6e2641f905344ab0327ad4fcc1e8c74e7e9513d1",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE",
        "parent": "https://github.com/apache/aries-rsa/commit/75448368d0efecbef48464bbf10791986e20c4b0",
        "patched_files": [
            "ZookeeperEndpointRepository.java"
        ],
        "repo": "aries-rsa",
        "unit_tests": [
            "ZookeeperEndpointRepositoryTest.java"
        ]
    },
    "aries-rsa_3e12204": {
        "bug_id": "aries-rsa_3e12204",
        "commit": "https://github.com/apache/aries-rsa/commit/3e12204f80e667c85bb56837232a1559345db1a3",
        "file": [
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/aries-rsa/blob/3e12204f80e667c85bb56837232a1559345db1a3/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/TopologyManager.java",
                "changes": 188,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/TopologyManager.java?ref=3e12204f80e667c85bb56837232a1559345db1a3",
                "deletions": 87,
                "filename": "dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/TopologyManager.java",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.cxf.dosgi.topologymanager;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Dictionary;\n@@ -131,15 +132,9 @@ protected void removeRemoteServiceAdmin(RemoteServiceAdmin rsa) {\n                     Collection<ExportRegistration> endpoints = exports.getValue().get(rsa);\n                     // TODO for each notify discovery......\n \n-                    try {\n-                        ServiceReference[] refs = Utils.getEndpointListeners(bctx);\n-                        if (refs != null) {\n-                            for (ServiceReference sref : refs) {\n-                                notifyListenersOfRemovalIfAppropriate(sref, endpoints);\n-                            }\n-                        }\n-                    } catch (InvalidSyntaxException e) {\n-                        LOG.log(Level.SEVERE, e.getMessage(), e);\n+                    ServiceReference[] refs = getEndpointListeners(bctx);\n+                    for (ServiceReference sref : refs) {\n+                        notifyListenersOfRemovalIfAppropriate(sref, endpoints);\n                     }\n \n                     // remove all management information for the RemoteServiceAdmin\n@@ -227,14 +222,12 @@ protected void exportService(ServiceReference sref) {\n                                  new LinkedHashMap<RemoteServiceAdmin, Collection<ExportRegistration>>());\n         }\n \n-        // trigger the export\n         triggerExport(sref);\n \n     }\n \n     private void triggerExport(final ServiceReference sref) {\n         execService.execute(new Runnable() {\n-            @SuppressWarnings(\"unchecked\")\n             public void run() {\n                 LOG.finer(\"TopologyManager: exporting service ...\");\n \n@@ -273,8 +266,7 @@ public void run() {\n                                     // enqueue in local list of endpoints\n                                     exports.put(remoteServiceAdmin, endpoints);\n \n-                                    // publish to endpoint listeners\n-                                    nofifyListeners(endpoints);\n+                                    nofifyEndpointListenersOfAdding(endpoints);\n                                 }\n                             }\n                         }\n@@ -285,21 +277,28 @@ public void run() {\n         });\n     }\n \n-    protected void nofifyListeners(Collection<ExportRegistration> exportRegistrations) {\n-        try {\n-            // Find all EndpointListeners; They must have the Scope property otherwise they have to be ignored\n-            ServiceReference[] refs = Utils.getEndpointListeners(bctx);\n-\n-            if (refs != null) {\n-                for (ServiceReference sref : refs) {\n-                    notifyListenerOfAddingIfAppropriate(sref, exportRegistrations);\n-                }\n-            }\n+    protected void nofifyEndpointListenersOfAdding(Collection<ExportRegistration> exportRegistrations) {\n+        ServiceReference[] epListeners = getEndpointListeners(bctx);\n+        for (ServiceReference sref : epListeners) {\n+            notifyListenerOfAddingIfAppropriate(sref, exportRegistrations);\n+        }\n+    }\n \n+     /** \n+      * Find all EndpointListeners; They must have the Scope property otherwise they have to be ignored\n+      * @param bctx\n+      * @return\n+      * @throws InvalidSyntaxException\n+      */\n+    protected static ServiceReference[] getEndpointListeners(BundleContext bctx) {\n+        ServiceReference[] result = null;\n+        try {\n+            String filter = \"(\" + EndpointListener.ENDPOINT_LISTENER_SCOPE + \"=*)\";\n+            result = bctx.getServiceReferences(EndpointListener.class.getName(), filter);\n         } catch (InvalidSyntaxException e) {\n             LOG.log(Level.SEVERE, e.getMessage(), e);\n         }\n-\n+        return (result == null) ? new ServiceReference[]{} : result;\n     }\n \n     /**\n@@ -311,91 +310,84 @@ protected void nofifyListeners(Collection<ExportRegistration> exportRegistration\n     protected void notifyListenerOfAddingIfAppropriate(ServiceReference sref,\n                                                        Collection<ExportRegistration> exportRegistrations) {\n \n-        // if (sref.getBundle().equals(bctx.getBundle())) {\n-        // LOG\n-        // .info(\"TopologyManager: notifyListenerOfAddingIfAppropriate() called for own listener -> skipping \");\n-        // return;\n-        // }\n-\n         EndpointListener epl = (EndpointListener)bctx.getService(sref);\n-\n         LOG.finer(\"TopologyManager: notifyListenerOfAddingIfAppropriate() \");\n+        List<Filter> filters = getFiltersFromEndpointListenerScope(sref, bctx);\n \n-        try {\n-\n-            List<Filter> filters = Utils.normalizeScope(sref, bctx);\n-\n-            for (ExportRegistration exReg : exportRegistrations) {\n-\n-                // FIXME!!!!!!!!!!!!! There needs to be a better way ?!?!?!\n-                Map props = exReg.getExportReference().getExportedEndpoint().getProperties();\n-                Dictionary d = new Hashtable(props);\n-\n-                if (LOG.isLoggable(Level.FINE)) {\n-                    for (Filter filter : filters) {\n-                        LOG.fine(\"Matching: \" + filter + \"  against \" + d);\n-                    }\n-                }\n-\n-                for (Filter filter : filters) {\n-                    if (filter.match(d)) {\n-                        LOG.fine(\"Listener mached one of the Endpoints !!!!: \" + epl);\n-\n-                        epl.endpointAdded(exReg.getExportReference().getExportedEndpoint(), filter\n-                                .toString());\n-                    }\n-                }\n+        for (ExportRegistration exReg : exportRegistrations) {\n+            EndpointDescription endpoint = getExportedEndpoint(exReg);\n+            List<Filter> matchingFilters = getMatchingFilters(filters, endpoint);\n+            for (Filter filter : matchingFilters) {\n+                epl.endpointAdded(endpoint, filter.toString());\n             }\n-\n-        } catch (InvalidSyntaxException e) {\n-            LOG.log(Level.SEVERE, e.getMessage(), e);\n         }\n+\n     }\n \n     protected void notifyListenersOfRemovalIfAppropriate(ServiceReference sref,\n-                                                         Collection<ExportRegistration> exportRegistrations) {\n-\n-        EndpointListener epl = (EndpointListener)bctx.getService(sref);\n+            Collection<ExportRegistration> exportRegistrations) {\n \n+        EndpointListener epl = (EndpointListener) bctx.getService(sref);\n         LOG.finer(\"TopologyManager: notifyListenerOfREMOVALIfAppropriate() \");\n+        List<Filter> filters = getFiltersFromEndpointListenerScope(sref, bctx);\n \n-        List<Filter> filters;\n+        for (ExportRegistration exReg : exportRegistrations) {\n+            EndpointDescription endpoint = getExportedEndpoint(exReg);\n+            List<Filter> matchingFilters = getMatchingFilters(filters, endpoint);\n+            for (Filter filter : matchingFilters) {\n+                epl.endpointRemoved(endpoint, filter.toString());\n+            }\n+        }\n+    }\n+    \n+    static List<Filter> getFiltersFromEndpointListenerScope(ServiceReference sref,BundleContext bctx) {\n+        List<Filter> filters = new ArrayList<Filter>();\n         try {\n-            filters = Utils.normalizeScope(sref, bctx);\n-\n-            for (ExportRegistration exReg : exportRegistrations) {\n-\n-                // FIXME!!!!!!!!!!!!! There needs to be a better way ?!?!?!\n-            \tExportReference ref = exReg.getExportReference(); \n-            \tEndpointDescription endpoint = ref.getExportedEndpoint(); \n-                Map props = endpoint.getProperties();\n-                Dictionary d = new Hashtable(props);\n-\n-                if (LOG.isLoggable(Level.FINE)) {\n-                    for (Filter filter : filters) {\n-                        LOG.fine(\"Matching: \" + filter + \"  against \" + d);\n-                    }\n+            Object fo = sref.getProperty(EndpointListener.ENDPOINT_LISTENER_SCOPE);\n+            if (fo instanceof String) {\n+                filters.add(bctx.createFilter((String) fo));\n+            } else if (fo instanceof String[]) {\n+                String[] foArray = (String[]) fo;\n+                for (String f : foArray) {\n+                    filters.add(bctx.createFilter(f));\n                 }\n-\n-                for (Filter filter : filters) {\n-                    if (filter.match(d)) {\n-                        LOG.fine(\"Listener matched one of the Endpoints !!!! --> calling removed() ...\");\n-\n-                        epl.endpointRemoved(exReg.getExportReference().getExportedEndpoint(), filter\n-                            .toString());\n+            } else if (fo instanceof Collection) {\n+                @SuppressWarnings(\"rawtypes\")\n+                Collection c = (Collection) fo;\n+                for (Object o : c) {\n+                    if (o instanceof String) {\n+                        filters.add(bctx.createFilter((String) o));\n+                    } else {\n+                        LOG.warning(\"Component of a filter is not a string -> skipped !\");\n                     }\n                 }\n             }\n         } catch (InvalidSyntaxException e) {\n             LOG.log(Level.SEVERE, e.getMessage(), e);\n         }\n+        return filters;\n+    }\n+\n+    private List<Filter> getMatchingFilters(List<Filter> filters,\n+            EndpointDescription endpoint) {\n+        List<Filter> matchingFilters = new ArrayList<Filter>();\n+        Dictionary<String, Object> d = getEndpointProperties(endpoint);\n \n+        for (Filter filter : filters) {\n+            if (LOG.isLoggable(Level.FINE)) {\n+                LOG.fine(\"Matching: \" + filter + \"  against \" + d);\n+            }\n+            if (filter.match(d)) {\n+                LOG.fine(\"Listener matched one of the Endpoints !!!! --> calling removed() ...\");\n+                matchingFilters.add(filter);\n+            }\n+        }\n+        return matchingFilters;\n     }\n \n     private void checkExistingServices() throws InvalidSyntaxException {\n-        ServiceReference[] references = bctx\n-            .getServiceReferences(null, \"(\" + RemoteConstants.SERVICE_EXPORTED_INTERFACES + \"=*)\");\n-        // + \"(\"+org.apache.cxf.dosgi.dsw.Constants.EXPORTED_INTERFACES_OLD + \"=*))\");\n+        String filter = \"(\" + RemoteConstants.SERVICE_EXPORTED_INTERFACES + \"=*)\";\n+        ServiceReference[] references = bctx.getServiceReferences(null, filter);\n \n         if (references != null) {\n             for (ServiceReference sref : references) {\n@@ -411,7 +403,6 @@ public void removeExportRegistration(ExportRegistration exportRegistration) {\n \n                 Map<RemoteServiceAdmin, Collection<ExportRegistration>> ex = exportedServices.get(sref);\n                 if (ex != null) {\n-                    EndpointDescription ep = exportRegistration.getExportReference().getExportedEndpoint();\n                     for (Map.Entry<RemoteServiceAdmin, Collection<ExportRegistration>> export : ex.entrySet()) {\n                         export.getValue().contains(exportRegistration);\n                     }\n@@ -432,4 +423,27 @@ public void removeExportReference(ExportReference anyObject) {\n         // LOG.severe(\"NOT implemented !!!\");\n     }\n \n+    /**\n+     * Retrieve exported Endpoint while handling null\n+     * @param exReg\n+     * @return exported Endpoint or null if not present\n+     */\n+    private EndpointDescription getExportedEndpoint(ExportRegistration exReg) {\n+        ExportReference ref = (exReg == null) ? null : exReg.getExportReference();\n+        return (ref == null) ? null : ref.getExportedEndpoint(); \n+    }\n+    \n+    /**\n+     * Retrieve endpoint properties as Dictionary\n+     * \n+     * @param ep\n+     * @return endpoint properties (will never return null) \n+     */\n+    private Dictionary<String, Object> getEndpointProperties(EndpointDescription ep) {\n+        if (ep == null || ep.getProperties() == null) {\n+            return new Hashtable<String, Object>();\n+        } else {\n+            return new Hashtable<String, Object>(ep.getProperties());\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/aries-rsa/raw/3e12204f80e667c85bb56837232a1559345db1a3/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/TopologyManager.java",
                "sha": "1b3f7e683b892e36c6fe43ecfac1e9be19cc575b",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/aries-rsa/blob/3e12204f80e667c85bb56837232a1559345db1a3/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/Utils.java",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/Utils.java?ref=3e12204f80e667c85bb56837232a1559345db1a3",
                "deletions": 43,
                "filename": "dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/Utils.java",
                "patch": "@@ -18,57 +18,14 @@\n   */\n package org.apache.cxf.dosgi.topologymanager;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n import java.util.UUID;\n-import java.util.logging.Logger;\n \n import org.osgi.framework.BundleContext;\n-import org.osgi.framework.Filter;\n-import org.osgi.framework.InvalidSyntaxException;\n-import org.osgi.framework.ServiceReference;\n-import org.osgi.service.remoteserviceadmin.EndpointListener;\n import org.osgi.service.remoteserviceadmin.RemoteConstants;\n \n \n public class Utils {\n \n-    private static final Logger LOG = Logger.getLogger(Utils.class.getName());\n-    \n-    protected static ServiceReference[] getEndpointListeners(BundleContext bctx) throws InvalidSyntaxException {\n-        ServiceReference[] refs = bctx\n-            .getServiceReferences(EndpointListener.class.getName(),\n-                                  \"(\" + EndpointListener.ENDPOINT_LISTENER_SCOPE + \"=*)\");\n-        return refs;\n-    }\n-\n-    public static List<Filter> normalizeScope(ServiceReference sref,BundleContext bctx) throws InvalidSyntaxException {\n-        List<Filter> filters = new ArrayList<Filter>();\n-    \n-        Object fo = sref.getProperty(EndpointListener.ENDPOINT_LISTENER_SCOPE);\n-        if (fo instanceof String) {\n-            filters.add(bctx.createFilter((String)fo));\n-        } else if (fo instanceof String[]) {\n-            String[] foArray = (String[])fo;\n-            for (String f : foArray) {\n-                filters.add(bctx.createFilter(f));\n-            }\n-        } else if (fo instanceof Collection) {\n-            Collection c = (Collection)fo;\n-            for (Object o : c) {\n-                if (o instanceof String) {\n-                    filters.add(bctx.createFilter((String)o));\n-                } else {\n-                    LOG.info(\"Component of a filter is not a string -> skipped !\");\n-                }\n-            }\n-        }\n-    \n-        return filters;\n-    }\n-\n-    \n     public static String getUUID(BundleContext bctx) {\n         synchronized (\"org.osgi.framework.uuid\") {\n             String uuid = bctx.getProperty(\"org.osgi.framework.uuid\");",
                "raw_url": "https://github.com/apache/aries-rsa/raw/3e12204f80e667c85bb56837232a1559345db1a3/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/Utils.java",
                "sha": "a198580d8d404b3a4013b052a939d6d93bf5f8ee",
                "status": "modified"
            },
            {
                "additions": 101,
                "blob_url": "https://github.com/apache/aries-rsa/blob/3e12204f80e667c85bb56837232a1559345db1a3/dsw/cxf-topology-manager/src/test/java/org/apache/cxf/dosgi/topologymanager/TopologyManagerTest.java",
                "changes": 103,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-topology-manager/src/test/java/org/apache/cxf/dosgi/topologymanager/TopologyManagerTest.java?ref=3e12204f80e667c85bb56837232a1559345db1a3",
                "deletions": 2,
                "filename": "dsw/cxf-topology-manager/src/test/java/org/apache/cxf/dosgi/topologymanager/TopologyManagerTest.java",
                "patch": "@@ -18,7 +18,10 @@\n   */\n package org.apache.cxf.dosgi.topologymanager;\n \n+import static org.junit.Assert.assertEquals;\n+\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -56,12 +59,12 @@ public void testNotifyListenersOfRemovalIfAppropriate() throws InvalidSyntaxExce\n         ExportReference exRef2 = c.createMock(ExportReference.class);\n         \n         \n-        Map props = new HashMap();\n+        Map<String, Object> props = new HashMap<String, Object>();\n         String[] oc = new String[1];\n         oc[0] = \"myClass\";\n         props.put(\"objectClass\", oc);\n         \n-        Map props2 = new HashMap();\n+        Map<String, Object> props2 = new HashMap<String, Object>();\n         oc = new String[1];\n         oc[0] = \"notMyClass\";\n         props2.put(\"objectClass\", oc);\n@@ -106,4 +109,100 @@ public Filter answer() throws Throwable {\n \n     }\n \n+    @Test\n+    public void testNomalizeScopeForSingleString() {\n+\n+        try {\n+            ServiceReference sr = EasyMock.createMock(ServiceReference.class);\n+            EasyMock.expect(sr.getProperty(EndpointListener.ENDPOINT_LISTENER_SCOPE))\n+                .andReturn(\"Filterstring\");\n+\n+            Filter f = EasyMock.createNiceMock(Filter.class);\n+            \n+            BundleContext bc = EasyMock.createNiceMock(BundleContext.class);\n+            EasyMock.expect(bc.createFilter((String)EasyMock.anyObject())).andReturn(f);\n+\n+            EasyMock.replay(sr);\n+            EasyMock.replay(bc);\n+\n+            List<Filter> res = TopologyManager.getFiltersFromEndpointListenerScope(sr, bc);\n+\n+            assertEquals(1, res.size());\n+            assertEquals(f, res.get(0));\n+\n+            EasyMock.verify(sr);\n+            EasyMock.verify(bc);\n+        } catch (InvalidSyntaxException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    \n+    @Test\n+    public void testNomalizeScopeForStringArray() {\n+\n+        try {\n+            \n+            String[] filterStrings = {\"f1\",\"f2\",\"f3\"};\n+            \n+            ServiceReference sr = EasyMock.createMock(ServiceReference.class);\n+            EasyMock.expect(sr.getProperty(EndpointListener.ENDPOINT_LISTENER_SCOPE))\n+                .andReturn(filterStrings);\n+\n+            Filter f = EasyMock.createNiceMock(Filter.class);\n+            \n+            \n+            BundleContext bc = EasyMock.createNiceMock(BundleContext.class);\n+            EasyMock.expect(bc.createFilter((String)EasyMock.anyObject())).andReturn(f).times(filterStrings.length);\n+\n+            EasyMock.replay(sr);\n+            EasyMock.replay(bc);\n+\n+            List<Filter> res = TopologyManager.getFiltersFromEndpointListenerScope(sr, bc);\n+\n+            assertEquals(filterStrings.length, res.size());\n+            assertEquals(f, res.get(0));\n+\n+            EasyMock.verify(sr);\n+            EasyMock.verify(bc);\n+        } catch (InvalidSyntaxException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    @Test\n+    public void testNomalizeScopeForCollection() {\n+\n+        try {\n+            \n+            \n+            Collection<String> collection = new ArrayList<String>();\n+            collection.add(\"f1\");\n+            collection.add(\"f2\");\n+            collection.add(\"f3\");\n+            \n+            ServiceReference sr = EasyMock.createMock(ServiceReference.class);\n+            EasyMock.expect(sr.getProperty(EndpointListener.ENDPOINT_LISTENER_SCOPE))\n+                .andReturn(collection);\n+\n+            Filter f = EasyMock.createNiceMock(Filter.class);\n+            \n+            \n+            BundleContext bc = EasyMock.createNiceMock(BundleContext.class);\n+            EasyMock.expect(bc.createFilter((String)EasyMock.anyObject())).andReturn(f).times(collection.size());\n+\n+            EasyMock.replay(sr);\n+            EasyMock.replay(bc);\n+\n+            List<Filter> res = TopologyManager.getFiltersFromEndpointListenerScope(sr, bc);\n+\n+            assertEquals(collection.size(), res.size());\n+            assertEquals(f, res.get(0));\n+\n+            EasyMock.verify(sr);\n+            EasyMock.verify(bc);\n+        } catch (InvalidSyntaxException e) {\n+            e.printStackTrace();\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/aries-rsa/raw/3e12204f80e667c85bb56837232a1559345db1a3/dsw/cxf-topology-manager/src/test/java/org/apache/cxf/dosgi/topologymanager/TopologyManagerTest.java",
                "sha": "b232a52f2b61ddc695644786f73f5f8a8b339795",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/aries-rsa/blob/3e12204f80e667c85bb56837232a1559345db1a3/dsw/cxf-topology-manager/src/test/java/org/apache/cxf/dosgi/topologymanager/UtilsTest.java",
                "changes": 124,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-topology-manager/src/test/java/org/apache/cxf/dosgi/topologymanager/UtilsTest.java?ref=3e12204f80e667c85bb56837232a1559345db1a3",
                "deletions": 117,
                "filename": "dsw/cxf-topology-manager/src/test/java/org/apache/cxf/dosgi/topologymanager/UtilsTest.java",
                "patch": "@@ -18,130 +18,23 @@\n   */\n package org.apache.cxf.dosgi.topologymanager;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n import java.util.Dictionary;\n-import java.util.HashMap;\n import java.util.Hashtable;\n-import java.util.List;\n-import java.util.Map;\n-\n \n import org.easymock.classextension.EasyMock;\n+import org.junit.Test;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.Filter;\n import org.osgi.framework.FrameworkUtil;\n import org.osgi.framework.InvalidSyntaxException;\n-import org.osgi.framework.ServiceReference;\n-import org.osgi.service.remoteserviceadmin.EndpointListener;\n import org.osgi.service.remoteserviceadmin.RemoteConstants;\n \n-import org.junit.Test;\n-\n public class UtilsTest {\n-\n-    @Test\n-    public void testNomalizeScopeForSingleString() {\n-\n-        try {\n-            ServiceReference sr = EasyMock.createMock(ServiceReference.class);\n-            EasyMock.expect(sr.getProperty(EndpointListener.ENDPOINT_LISTENER_SCOPE))\n-                .andReturn(\"Filterstring\");\n-\n-            Filter f = EasyMock.createNiceMock(Filter.class);\n-            \n-            BundleContext bc = EasyMock.createNiceMock(BundleContext.class);\n-            EasyMock.expect(bc.createFilter((String)EasyMock.anyObject())).andReturn(f);\n-\n-            EasyMock.replay(sr);\n-            EasyMock.replay(bc);\n-\n-            List<Filter> res = Utils.normalizeScope(sr, bc);\n-\n-            assertEquals(1, res.size());\n-            assertEquals(f, res.get(0));\n-\n-            EasyMock.verify(sr);\n-            EasyMock.verify(bc);\n-        } catch (InvalidSyntaxException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-    \n-    \n-    @Test\n-    public void testNomalizeScopeForStringArray() {\n-\n-        try {\n-            \n-            String[] filterStrings = {\"f1\",\"f2\",\"f3\"};\n-            \n-            ServiceReference sr = EasyMock.createMock(ServiceReference.class);\n-            EasyMock.expect(sr.getProperty(EndpointListener.ENDPOINT_LISTENER_SCOPE))\n-                .andReturn(filterStrings);\n-\n-            Filter f = EasyMock.createNiceMock(Filter.class);\n-            \n-            \n-            BundleContext bc = EasyMock.createNiceMock(BundleContext.class);\n-            EasyMock.expect(bc.createFilter((String)EasyMock.anyObject())).andReturn(f).times(filterStrings.length);\n-\n-            EasyMock.replay(sr);\n-            EasyMock.replay(bc);\n-\n-            List<Filter> res = Utils.normalizeScope(sr, bc);\n-\n-            assertEquals(filterStrings.length, res.size());\n-            assertEquals(f, res.get(0));\n-\n-            EasyMock.verify(sr);\n-            EasyMock.verify(bc);\n-        } catch (InvalidSyntaxException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-    \n-    \n-    \n-    @Test\n-    public void testNomalizeScopeForCollection() {\n-\n-        try {\n-            \n-            \n-            Collection<String> collection = new ArrayList<String>();\n-            collection.add(\"f1\");\n-            collection.add(\"f2\");\n-            collection.add(\"f3\");\n-            \n-            ServiceReference sr = EasyMock.createMock(ServiceReference.class);\n-            EasyMock.expect(sr.getProperty(EndpointListener.ENDPOINT_LISTENER_SCOPE))\n-                .andReturn(collection);\n-\n-            Filter f = EasyMock.createNiceMock(Filter.class);\n-            \n-            \n-            BundleContext bc = EasyMock.createNiceMock(BundleContext.class);\n-            EasyMock.expect(bc.createFilter((String)EasyMock.anyObject())).andReturn(f).times(collection.size());\n-\n-            EasyMock.replay(sr);\n-            EasyMock.replay(bc);\n-\n-            List<Filter> res = Utils.normalizeScope(sr, bc);\n-\n-            assertEquals(collection.size(), res.size());\n-            assertEquals(f, res.get(0));\n-\n-            EasyMock.verify(sr);\n-            EasyMock.verify(bc);\n-        } catch (InvalidSyntaxException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-    \n     \n     @Test\n     public void testGetNewUUID(){\n@@ -155,9 +48,7 @@ public void testGetNewUUID(){\n         \n         EasyMock.verify(bc);\n     }\n-     \n-    \n-    \n+\n     @Test\n     public void testGetExistingUUID(){\n         BundleContext bc = EasyMock.createNiceMock(BundleContext.class);\n@@ -170,7 +61,6 @@ public void testGetExistingUUID(){\n         EasyMock.verify(bc);\n     }\n \n-    \n     @Test\n     public void testUUIDFilterExtension() throws InvalidSyntaxException{\n         String filter = \"(a=b)\";\n@@ -184,7 +74,7 @@ public void testUUIDFilterExtension() throws InvalidSyntaxException{\n         \n         Filter f = FrameworkUtil.createFilter(filter);\n         \n-        Dictionary m = new Hashtable();\n+        Dictionary<String, String> m = new Hashtable<String, String>();\n         m.put(\"a\", \"b\");\n         \n         assertTrue(filter+\" filter must match as uuid is missing\",f.match(m));      ",
                "raw_url": "https://github.com/apache/aries-rsa/raw/3e12204f80e667c85bb56837232a1559345db1a3/dsw/cxf-topology-manager/src/test/java/org/apache/cxf/dosgi/topologymanager/UtilsTest.java",
                "sha": "c6baa8a1e764e5a9068bc92d176b6ab00327ece9",
                "status": "modified"
            }
        ],
        "message": "DOSGI-129 Fixing NPE, better handling of exceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/dosgi/trunk@1401715 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries-rsa/commit/dd2409513c541273200b7f7814d9a1a71eda5846",
        "patched_files": [
            "Utils.java",
            "TopologyManager.java"
        ],
        "repo": "aries-rsa",
        "unit_tests": [
            "UtilsTest.java",
            "TestUtils.java",
            "TopologyManagerTest.java"
        ]
    },
    "aries-rsa_55ab0a1": {
        "bug_id": "aries-rsa_55ab0a1",
        "commit": "https://github.com/apache/aries-rsa/commit/55ab0a11a8354cee7c0733439fc672acc0febf14",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/aries-rsa/blob/55ab0a11a8354cee7c0733439fc672acc0febf14/discovery/zookeeper/src/main/java/org/apache/aries/rsa/discovery/zookeeper/repository/ZookeeperEndpointRepository.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/discovery/zookeeper/src/main/java/org/apache/aries/rsa/discovery/zookeeper/repository/ZookeeperEndpointRepository.java?ref=55ab0a11a8354cee7c0733439fc672acc0febf14",
                "deletions": 0,
                "filename": "discovery/zookeeper/src/main/java/org/apache/aries/rsa/discovery/zookeeper/repository/ZookeeperEndpointRepository.java",
                "patch": "@@ -173,6 +173,9 @@ private void watchRecursive(String path) {\n         handleZNodeChanged(path);\n         try {\n             List<String> children = zk.getChildren(path, this);\n+            if (children == null) {\n+                return;\n+            }\n             for (String child : children) {\n                 String childPath = (path.endsWith(\"/\") ? path : path + \"/\") + child;\n                 watchRecursive(childPath);",
                "raw_url": "https://github.com/apache/aries-rsa/raw/55ab0a11a8354cee7c0733439fc672acc0febf14/discovery/zookeeper/src/main/java/org/apache/aries/rsa/discovery/zookeeper/repository/ZookeeperEndpointRepository.java",
                "sha": "e290e654d4d8b8eb4113e8d188b4d0de0d299302",
                "status": "modified"
            }
        ],
        "message": "[ARIES-1774] Fix for NPE when a node has no children",
        "parent": "https://github.com/apache/aries-rsa/commit/19849747e5d300e4613bd9759cacdfe0570edad9",
        "patched_files": [
            "ZookeeperEndpointRepository.java"
        ],
        "repo": "aries-rsa",
        "unit_tests": [
            "ZookeeperEndpointRepositoryTest.java"
        ]
    },
    "aries-rsa_6b81698": {
        "bug_id": "aries-rsa_6b81698",
        "commit": "https://github.com/apache/aries-rsa/commit/6b81698fef5eac811b6a64b4e6b111392ee1ca3e",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/aries-rsa/blob/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/discovery/distributed/cxf-discovery/src/main/java/org/apache/cxf/dosgi/discovery/zookeeper/InterfaceMonitorManager.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/discovery/distributed/cxf-discovery/src/main/java/org/apache/cxf/dosgi/discovery/zookeeper/InterfaceMonitorManager.java?ref=6b81698fef5eac811b6a64b4e6b111392ee1ca3e",
                "deletions": 15,
                "filename": "discovery/distributed/cxf-discovery/src/main/java/org/apache/cxf/dosgi/discovery/zookeeper/InterfaceMonitorManager.java",
                "patch": "@@ -26,6 +26,7 @@\n \n import org.apache.cxf.dosgi.discovery.local.util.Utils;\n import org.apache.zookeeper.ZooKeeper;\n+import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.ServiceReference;\n import org.osgi.service.remoteserviceadmin.EndpointDescription;\n@@ -139,21 +140,12 @@ private void notifyListeners(EndpointDescription epd, String currentScope, boole\n         for (ServiceReference sref : relatedServiceListeners) {\n             Object service = bctx.getService(sref);\n             try {\n-                if (!(service instanceof EndpointListener)) { // including null\n-                    continue;\n-                }\n-                EndpointListener epl = (EndpointListener) service;\n-                LOG.debug(\"matching {} against {}\", epd, currentScope);\n-                if (Utils.matchFilter(bctx, currentScope, epd)) {\n-                    LOG.debug(\"Matched {} against {}\", epd, currentScope);\n-                    if (isAdded) {\n-                        LOG.info(\"calling EndpointListener.endpointAdded: \" + epl + \" from bundle \"\n-                            + sref.getBundle().getSymbolicName() + \" for endpoint: \" + epd);\n-                        epl.endpointAdded(epd, currentScope);\n-                    } else {\n-                        LOG.info(\"calling EndpointListener.endpointRemoved: \" + epl + \" from bundle \"\n-                            + sref.getBundle().getSymbolicName() + \" for endpoint: \" + epd);\n-                        epl.endpointRemoved(epd, currentScope);\n+                if (service instanceof EndpointListener) {\n+                    EndpointListener epl = (EndpointListener) service;\n+                    LOG.trace(\"matching {} against {}\", epd, currentScope);\n+                    if (Utils.matchFilter(bctx, currentScope, epd)) {\n+                        LOG.debug(\"Matched {} against {}\", epd, currentScope);\n+                        notifyListener(epd, currentScope, isAdded, sref.getBundle(), epl);\n                     }\n                 }\n             } finally {\n@@ -164,6 +156,21 @@ private void notifyListeners(EndpointDescription epd, String currentScope, boole\n         }\n     }\n \n+    private void notifyListener(EndpointDescription epd, String currentScope, boolean isAdded,\n+                                Bundle eplBundle, EndpointListener epl) {\n+        if (eplBundle == null) {\n+            LOG.info(\"listening service was unregistered, ignoring\");\n+        } else if (isAdded) {\n+            LOG.info(\"calling EndpointListener.endpointAdded: \" + epl + \" from bundle \"\n+                    + eplBundle.getSymbolicName() + \" for endpoint: \" + epd);\n+            epl.endpointAdded(epd, currentScope);\n+        } else {\n+            LOG.info(\"calling EndpointListener.endpointRemoved: \" + epl + \" from bundle \"\n+                    + eplBundle.getSymbolicName() + \" for endpoint: \" + epd);\n+            epl.endpointRemoved(epd, currentScope);\n+        }\n+    }\n+\n     public synchronized void close() {\n         for (Interest interest : interestingScopes.values()) {\n             interest.im.close();",
                "raw_url": "https://github.com/apache/aries-rsa/raw/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/discovery/distributed/cxf-discovery/src/main/java/org/apache/cxf/dosgi/discovery/zookeeper/InterfaceMonitorManager.java",
                "sha": "6d44ee41945172b525fa8e2ddc800f85f98cedef",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/aries-rsa/blob/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/EventProducer.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/EventProducer.java?ref=6b81698fef5eac811b6a64b4e6b111392ee1ca3e",
                "deletions": 6,
                "filename": "dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/EventProducer.java",
                "patch": "@@ -20,6 +20,7 @@\n \n import java.util.List;\n \n+import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.InvalidSyntaxException;\n import org.osgi.framework.ServiceReference;\n@@ -89,12 +90,15 @@ private void notifyListeners(RemoteServiceAdminEvent rsae) {\n             if (listenerRefs != null) {\n                 for (ServiceReference sref : listenerRefs) {\n                     RemoteServiceAdminListener rsal = (RemoteServiceAdminListener)bctx.getService(sref);\n-                    try {\n-                        LOG.debug(\"notify RemoteServiceAdminListener {} of bundle {}\",\n-                                rsal, sref.getBundle().getSymbolicName());\n-                        rsal.remoteAdminEvent(rsae);\n-                    } finally {\n-                        if (rsal != null) {\n+                    if (rsal != null) {\n+                        try {\n+                            Bundle bundle = sref.getBundle();\n+                            if (bundle != null) {\n+                                LOG.debug(\"notify RemoteServiceAdminListener {} of bundle {}\",\n+                                        rsal, bundle.getSymbolicName());\n+                                rsal.remoteAdminEvent(rsae);\n+                            }\n+                        } finally {\n                             bctx.ungetService(sref);\n                         }\n                     }",
                "raw_url": "https://github.com/apache/aries-rsa/raw/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/EventProducer.java",
                "sha": "74ed7e2182ade33a87d6323a39ea6831949888e1",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/aries-rsa/blob/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/RemoteServiceAdminCore.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/RemoteServiceAdminCore.java?ref=6b81698fef5eac811b6a64b4e6b111392ee1ca3e",
                "deletions": 11,
                "filename": "dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/RemoteServiceAdminCore.java",
                "patch": "@@ -119,12 +119,13 @@ public RemoteServiceAdminCore(BundleContext bc, ConfigTypeHandlerFactory configT\n         try {\n             // do the export\n             List<ExportRegistration> exportRegs = exportInterfaces(interfaces, serviceReference, serviceProperties);\n-\n-            // enlist initial export registrations in global list of exportRegistrations\n-            synchronized (exportedServices) {\n-                exportedServices.put(key, new ArrayList<ExportRegistration>(exportRegs));\n+            if (!exportRegs.isEmpty()) {\n+                // enlist initial export registrations in global list of exportRegistrations\n+                synchronized (exportedServices) {\n+                    exportedServices.put(key, new ArrayList<ExportRegistration>(exportRegs));\n+                }\n+                eventProducer.publishNotification(exportRegs);\n             }\n-            eventProducer.publishNotification(exportRegs);\n             return exportRegs;\n         } finally {\n             synchronized (exportedServices) {\n@@ -147,16 +148,22 @@ public RemoteServiceAdminCore(BundleContext bc, ConfigTypeHandlerFactory configT\n             return Collections.emptyList();\n         }\n         List<ExportRegistration> exportRegs = new ArrayList<ExportRegistration>(1);\n-        Object serviceObject = bctx.getService(serviceReference);\n-        BundleContext callingContext = serviceReference.getBundle().getBundleContext();\n+        Object service = bctx.getService(serviceReference);\n+        Bundle bundle = serviceReference.getBundle();\n+\n+        // if service has been unregistered in the meantime\n+        if (service == null || bundle == null) {\n+            LOG.info(\"service has been unregistered, aborting export\");\n+            return exportRegs;\n+        }\n \n         for (String iface : interfaces) {\n             LOG.info(\"creating server for interface \" + iface);\n             // this is an extra sanity check, but do we really need it now?\n-            Class<?> interfaceClass = ClassUtils.getInterfaceClass(serviceObject, iface);\n+            Class<?> interfaceClass = ClassUtils.getInterfaceClass(service, iface);\n             if (interfaceClass != null) {\n-                ExportResult exportResult = handler.createServer(serviceReference, bctx, callingContext,\n-                    serviceProperties, interfaceClass, serviceObject);\n+                ExportResult exportResult = handler.createServer(serviceReference, bctx, bundle.getBundleContext(),\n+                    serviceProperties, interfaceClass, service);\n                 LOG.info(\"created server for interface \" + iface);\n                 EndpointDescription epd = new EndpointDescription(exportResult.getEndpointProps());\n                 ExportRegistrationImpl exportRegistration = new ExportRegistrationImpl(serviceReference, epd, this);\n@@ -261,7 +268,7 @@ public RemoteServiceAdminCore(BundleContext bc, ConfigTypeHandlerFactory configT\n     }\n \n     private boolean isCreatedByThisRSA(ServiceReference sref) {\n-        return (sref.getBundle() != null) && sref.getBundle().equals(bctx.getBundle());\n+        return bctx.getBundle().equals(sref.getBundle()); // sref bundle can be null\n     }\n \n     public Collection<ExportReference> getExportedServices() {",
                "raw_url": "https://github.com/apache/aries-rsa/raw/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/RemoteServiceAdminCore.java",
                "sha": "60aca54c7e3e7d624a3a8515532c38f878cd3ba0",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/aries-rsa/blob/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/exporter/EndpointRepository.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/exporter/EndpointRepository.java?ref=6b81698fef5eac811b6a64b4e6b111392ee1ca3e",
                "deletions": 3,
                "filename": "dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/exporter/EndpointRepository.java",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.cxf.dosgi.topologymanager.util.Utils;\n import org.osgi.framework.ServiceReference;\n import org.osgi.service.remoteserviceadmin.EndpointDescription;\n import org.osgi.service.remoteserviceadmin.RemoteServiceAdmin;\n@@ -76,9 +77,8 @@\n \n     synchronized void addService(ServiceReference sref) {\n         if (!exportedServices.containsKey(sref)) {\n-            LOG.info(\"Marking service from bundle {} for export\", sref.getBundle().getSymbolicName());\n-            exportedServices.put(sref,\n-                                 new LinkedHashMap<RemoteServiceAdmin, Collection<EndpointDescription>>());\n+            LOG.info(\"Marking service from bundle {} for export\", Utils.getBundleName(sref));\n+            exportedServices.put(sref, new LinkedHashMap<RemoteServiceAdmin, Collection<EndpointDescription>>());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/aries-rsa/raw/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/exporter/EndpointRepository.java",
                "sha": "78de365a6de690dbfe58184b323f0b1575a21f1f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/aries-rsa/blob/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/exporter/TopologyManagerExport.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/exporter/TopologyManagerExport.java?ref=6b81698fef5eac811b6a64b4e6b111392ee1ca3e",
                "deletions": 1,
                "filename": "dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/exporter/TopologyManagerExport.java",
                "patch": "@@ -28,6 +28,7 @@\n \n import org.apache.cxf.dosgi.topologymanager.util.SimpleServiceTracker;\n import org.apache.cxf.dosgi.topologymanager.util.SimpleServiceTrackerListener;\n+import org.apache.cxf.dosgi.topologymanager.util.Utils;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.InvalidSyntaxException;\n import org.osgi.framework.ServiceEvent;\n@@ -144,7 +145,7 @@ protected void doExportService(final ServiceReference sref) {\n         List<RemoteServiceAdmin> rsaList = remoteServiceAdminTracker.getAllServices();\n         if (rsaList.isEmpty()) {\n             LOG.error(\"No RemoteServiceAdmin available! Unable to export service from bundle {}, interfaces: {}\",\n-                    sref.getBundle().getSymbolicName(),\n+                    Utils.getBundleName(sref),\n                     sref.getProperty(org.osgi.framework.Constants.OBJECTCLASS));\n         }\n ",
                "raw_url": "https://github.com/apache/aries-rsa/raw/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/exporter/TopologyManagerExport.java",
                "sha": "3180963fe15299b6d94c8d1758878997051c2400",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/aries-rsa/blob/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/util/Utils.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/util/Utils.java?ref=6b81698fef5eac811b6a64b4e6b111392ee1ca3e",
                "deletions": 0,
                "filename": "dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/util/Utils.java",
                "patch": "@@ -24,8 +24,10 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.Constants;\n+import org.osgi.framework.ServiceReference;\n import org.osgi.service.remoteserviceadmin.EndpointDescription;\n \n public final class Utils {\n@@ -71,4 +73,9 @@ public static String getUUID(BundleContext bctx) {\n             return uuid;\n         }\n     }\n+\n+    public static String getBundleName(ServiceReference sref) {\n+        Bundle bundle = sref.getBundle();\n+        return bundle == null ? \"<unregistered>\" : bundle.getSymbolicName();\n+    }\n }",
                "raw_url": "https://github.com/apache/aries-rsa/raw/6b81698fef5eac811b6a64b4e6b111392ee1ca3e/dsw/cxf-topology-manager/src/main/java/org/apache/cxf/dosgi/topologymanager/util/Utils.java",
                "sha": "d437cc8e946adc8495d6bda2968684a876657040",
                "status": "modified"
            }
        ],
        "message": "DOSGI-164 Fix various NullPointerExceptions when using ServiceReference.getBundle()\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/dosgi/trunk@1492237 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries-rsa/commit/5d5a4d6ddc89630257386955a42d79c6c6d4b35d",
        "patched_files": [
            "EventProducer.java",
            "InterfaceMonitorManager.java",
            "Utils.java",
            "RemoteServiceAdminCore.java"
        ],
        "repo": "aries-rsa",
        "unit_tests": [
            "RemoteServiceAdminCoreTest.java",
            "EventProducerTest.java",
            "InterfaceMonitorManagerTest.java",
            "UtilsTest.java",
            "TestUtils.java"
        ]
    },
    "aries-rsa_b4a9572": {
        "bug_id": "aries-rsa_b4a9572",
        "commit": "https://github.com/apache/aries-rsa/commit/b4a95725d1e151967c858a9bb39205045ae4a20d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/aries-rsa/blob/b4a95725d1e151967c858a9bb39205045ae4a20d/rsa/src/main/java/org/apache/aries/rsa/core/RemoteServiceAdminCore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/rsa/src/main/java/org/apache/aries/rsa/core/RemoteServiceAdminCore.java?ref=b4a95725d1e151967c858a9bb39205045ae4a20d",
                "deletions": 1,
                "filename": "rsa/src/main/java/org/apache/aries/rsa/core/RemoteServiceAdminCore.java",
                "patch": "@@ -201,7 +201,11 @@ private ExportRegistration exportService(List<String> interfaceNames,\n         try {\n             Class<?>[] interfaces = getInterfaces(interfaceNames, serviceReference.getBundle());\n             Map<String, Object> eprops = createEndpointProps(serviceProperties, interfaces);\n-            BundleContext serviceContext = serviceReference.getBundle().getBundleContext();\n+            Bundle bundle = serviceReference.getBundle();\n+            if (bundle == null) {\n+                throw new IllegalStateException(\"Service is already unregistered\");\n+            }\n+            BundleContext serviceContext = bundle.getBundleContext();\n             \n             // TODO unget service when export is destroyed\n             Object serviceO = serviceContext.getService(serviceReference);",
                "raw_url": "https://github.com/apache/aries-rsa/raw/b4a95725d1e151967c858a9bb39205045ae4a20d/rsa/src/main/java/org/apache/aries/rsa/core/RemoteServiceAdminCore.java",
                "sha": "fa04b10098e32f98366658f875ce9127cd66a008",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE and use a more meaningful exception for the case of an unregistered service",
        "parent": "https://github.com/apache/aries-rsa/commit/90205645cca228f23a217cceae46c86da945edb0",
        "patched_files": [
            "RemoteServiceAdminCore.java"
        ],
        "repo": "aries-rsa",
        "unit_tests": [
            "RemoteServiceAdminCoreTest.java"
        ]
    },
    "aries-rsa_c54491c": {
        "bug_id": "aries-rsa_c54491c",
        "commit": "https://github.com/apache/aries-rsa/commit/c54491cdb857a25346c568c1b7c6bf178a67cc79",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/aries-rsa/blob/c54491cdb857a25346c568c1b7c6bf178a67cc79/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/RemoteServiceAdminCore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/RemoteServiceAdminCore.java?ref=c54491cdb857a25346c568c1b7c6bf178a67cc79",
                "deletions": 1,
                "filename": "dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/RemoteServiceAdminCore.java",
                "patch": "@@ -302,7 +302,7 @@ public RemoteServiceAdminCore(BundleContext bc, IntentMap intentMap) {\n     }\n \n     private boolean isCreatedByThisRSA(ServiceReference sref) {\n-        return sref.getBundle().equals(bctx.getBundle());\n+        return (sref.getBundle() != null ) && sref.getBundle().equals(bctx.getBundle());\n     }\n \n     public Collection<ExportReference> getExportedServices() {",
                "raw_url": "https://github.com/apache/aries-rsa/raw/c54491cdb857a25346c568c1b7c6bf178a67cc79/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/service/RemoteServiceAdminCore.java",
                "sha": "78974c03b740994abe4ff3307ae31b3b77db7be9",
                "status": "modified"
            }
        ],
        "message": "DOSGI-120 Added a safeguard vs to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/dosgi/trunk@1404969 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries-rsa/commit/8726d51106452221ad6f728856ac02d0711e63fa",
        "patched_files": [
            "RemoteServiceAdminCore.java"
        ],
        "repo": "aries-rsa",
        "unit_tests": [
            "RemoteServiceAdminCoreTest.java"
        ]
    },
    "aries-rsa_c848ffb": {
        "bug_id": "aries-rsa_c848ffb",
        "commit": "https://github.com/apache/aries-rsa/commit/c848ffb4270729043d5f32c1af44291dcd97d4c6",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/aries-rsa/blob/c848ffb4270729043d5f32c1af44291dcd97d4c6/rsa/src/main/java/org/apache/aries/rsa/core/DistributionProviderTracker.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/rsa/src/main/java/org/apache/aries/rsa/core/DistributionProviderTracker.java?ref=c848ffb4270729043d5f32c1af44291dcd97d4c6",
                "deletions": 2,
                "filename": "rsa/src/main/java/org/apache/aries/rsa/core/DistributionProviderTracker.java",
                "patch": "@@ -28,6 +28,7 @@\n import org.osgi.framework.FrameworkUtil;\n import org.osgi.framework.ServiceReference;\n import org.osgi.framework.ServiceRegistration;\n+import org.osgi.service.remoteserviceadmin.RemoteConstants;\n import org.osgi.service.remoteserviceadmin.RemoteServiceAdmin;\n import org.osgi.util.tracker.ServiceTracker;\n import org.slf4j.Logger;\n@@ -51,8 +52,13 @@ public ServiceRegistration addingService(ServiceReference<DistributionProvider>\n                                                                     provider);\n         RemoteServiceadminFactory rsaf = new RemoteServiceadminFactory(rsaCore);\n         Dictionary<String, Object> props = new Hashtable<String, Object>();\n-        props.put(\"remote.intents.supported\", reference.getProperty(\"remote.intents.supported\"));\n-        props.put(\"remote.configs.supported\", reference.getProperty(\"remote.configs.supported\"));\n+        Object value = reference.getProperty(RemoteConstants.REMOTE_INTENTS_SUPPORTED);\n+        value = value == null ? \"\" : value;\n+        props.put(RemoteConstants.REMOTE_INTENTS_SUPPORTED, value);\n+\n+        value = reference.getProperty(RemoteConstants.REMOTE_CONFIGS_SUPPORTED);\n+        value = value == null ? \"\" : value;\n+        props.put(RemoteConstants.REMOTE_CONFIGS_SUPPORTED, value);\n         LOG.info(\"Registering RemoteServiceAdmin for provider \" + provider.getClass().getName());\n         return context.registerService(RemoteServiceAdmin.class.getName(), rsaf, props);\n     }",
                "raw_url": "https://github.com/apache/aries-rsa/raw/c848ffb4270729043d5f32c1af44291dcd97d4c6/rsa/src/main/java/org/apache/aries/rsa/core/DistributionProviderTracker.java",
                "sha": "ea45c652ea21e2515696356364586012f71349d4",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/aries-rsa/blob/c848ffb4270729043d5f32c1af44291dcd97d4c6/rsa/src/test/java/org/apache/aries/rsa/core/DistributionProviderTrackerTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/rsa/src/test/java/org/apache/aries/rsa/core/DistributionProviderTrackerTest.java?ref=c848ffb4270729043d5f32c1af44291dcd97d4c6",
                "deletions": 0,
                "filename": "rsa/src/test/java/org/apache/aries/rsa/core/DistributionProviderTrackerTest.java",
                "patch": "@@ -79,4 +79,37 @@ protected BundleContext getAPIContext() {\n         tracker.removedService(providerRef, rsaReg);\n         c.verify();\n     }\n+\n+    @Test\n+    public void testAddingWithNullValues() throws InvalidSyntaxException {\n+        IMocksControl c = EasyMock.createControl();\n+        DistributionProvider provider = c.createMock(DistributionProvider.class);\n+\n+        ServiceReference<DistributionProvider> providerRef = c.createMock(ServiceReference.class);\n+        EasyMock.expect(providerRef.getProperty(RemoteConstants.REMOTE_INTENTS_SUPPORTED)).andReturn(null);\n+        EasyMock.expect(providerRef.getProperty(RemoteConstants.REMOTE_CONFIGS_SUPPORTED)).andReturn(null);\n+\n+        BundleContext context = c.createMock(BundleContext.class);\n+        String filterSt = String.format(\"(objectClass=%s)\", DistributionProvider.class.getName());\n+        Filter filter = FrameworkUtil.createFilter(filterSt);\n+        EasyMock.expect(context.createFilter(filterSt)).andReturn(filter);\n+        EasyMock.expect(context.getService(providerRef)).andReturn(provider);\n+        ServiceRegistration rsaReg = c.createMock(ServiceRegistration.class);\n+        EasyMock.expect(context.registerService(EasyMock.isA(String.class), EasyMock.isA(ServiceFactory.class),\n+                                                EasyMock.isA(Dictionary.class)))\n+            .andReturn(rsaReg).atLeastOnce();\n+\n+        context.addServiceListener(EasyMock.isA(ServiceListener.class), EasyMock.isA(String.class));\n+        EasyMock.expectLastCall();\n+\n+        final BundleContext apiContext = c.createMock(BundleContext.class);\n+        c.replay();\n+        DistributionProviderTracker tracker = new DistributionProviderTracker(context) {\n+            protected BundleContext getAPIContext() {\n+                return apiContext;\n+            };\n+        };\n+        tracker.addingService(providerRef);\n+        c.verify();\n+    }\n }",
                "raw_url": "https://github.com/apache/aries-rsa/raw/c848ffb4270729043d5f32c1af44291dcd97d4c6/rsa/src/test/java/org/apache/aries/rsa/core/DistributionProviderTrackerTest.java",
                "sha": "9a4de6bfa57259788e77af8b0c6a71ba7dfbd185",
                "status": "modified"
            }
        ],
        "message": "ARIES-1519 - NPE when DistributionProvider has no\nremote.intents.supported\n\nadds a null check and defaults to an empty string if either\nremote.intents.supported or remote.configs.supported is not set by a\ndistribution provider",
        "parent": "https://github.com/apache/aries-rsa/commit/da63f3671760bf514aea6480b27d1f0c025479c1",
        "patched_files": [
            "DistributionProviderTracker.java"
        ],
        "repo": "aries-rsa",
        "unit_tests": [
            "DistributionProviderTrackerTest.java"
        ]
    },
    "aries-rsa_ff032a6": {
        "bug_id": "aries-rsa_ff032a6",
        "commit": "https://github.com/apache/aries-rsa/commit/ff032a6277da02170bd09c325c5b2cf9d54782fb",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/aries-rsa/blob/ff032a6277da02170bd09c325c5b2cf9d54782fb/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/OsgiUtils.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/aries-rsa/contents/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/OsgiUtils.java?ref=ff032a6277da02170bd09c325c5b2cf9d54782fb",
                "deletions": 6,
                "filename": "dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/OsgiUtils.java",
                "patch": "@@ -589,12 +589,15 @@ public static String getVersion(Class<?> iClass, BundleContext bc) {\n \n             String pack = iClass.getPackage().getName();\n             LOG.finest(\"Looking for Package: \" + pack);\n-\n-            for (ExportedPackage p : ep) {\n-                if (pack.equals(p.getName())) {\n-                    LOG.fine(\"found package -> Version: \" + p.getVersion());\n-                    return p.getVersion().toString();\n-                }\n+            if (ep != null) {\n+\t            for (ExportedPackage p : ep) {\n+\t            \tif (p != null) {\n+\t\t                if (pack.equals(p.getName())) {\n+\t\t                    LOG.fine(\"found package -> Version: \" + p.getVersion());\n+\t\t                    return p.getVersion().toString();\n+\t\t                }\n+\t            \t}\n+\t            }\n             }\n         } else {\n             LOG.severe(\"Was unable to obtain the package admin service -> can't resolve interface versions\");",
                "raw_url": "https://github.com/apache/aries-rsa/raw/ff032a6277da02170bd09c325c5b2cf9d54782fb/dsw/cxf-dsw/src/main/java/org/apache/cxf/dosgi/dsw/OsgiUtils.java",
                "sha": "5b39a00fa7a040778211f10d0fbd7a459ae280f9",
                "status": "modified"
            }
        ],
        "message": "[DOSGI-77] Adding a couple of NPE guards\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/dosgi/trunk@1215333 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/aries-rsa/commit/e0797f3298fb138d2155b6cb922534afad5fc321",
        "patched_files": [
            "OsgiUtils.java"
        ],
        "repo": "aries-rsa",
        "unit_tests": [
            "OsgiUtilsTest.java"
        ]
    }
}