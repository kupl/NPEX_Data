{
    "attic-stratos_2ee26c1": {
        "bug_id": "attic-stratos_2ee26c1",
        "commit": "https://github.com/apache/attic-stratos/commit/2ee26c15c1d64ed67175c1a6dbadc7dba452949e",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/attic-stratos/blob/2ee26c15c1d64ed67175c1a6dbadc7dba452949e/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/services/impl/AutoscalerServiceImpl.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/services/impl/AutoscalerServiceImpl.java?ref=2ee26c15c1d64ed67175c1a6dbadc7dba452949e",
                "deletions": 9,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/services/impl/AutoscalerServiceImpl.java",
                "patch": "@@ -101,12 +101,12 @@ public boolean updateAutoScalingPolicy(AutoscalePolicy autoscalePolicy) throws I\n     @Override\n     public boolean removeAutoScalingPolicy(String autoscalePolicyId) throws UnremovablePolicyException,\n             PolicyDoesNotExistException {\n-        if (removableAutoScalerPolicy(autoscalePolicyId)) {\n+        //if (removableAutoScalerPolicy(autoscalePolicyId)) {\n             return PolicyManager.getInstance().removeAutoscalePolicy(autoscalePolicyId);\n-        } else {\n+       /* } else {\n             throw new UnremovablePolicyException(\"This autoscaler policy cannot be removed, since it is used in \" +\n                     \"applications.\");\n-        }\n+        }*/\n     }\n \n     /**\n@@ -138,12 +138,12 @@ private boolean removableAutoScalerPolicy(String autoscalePolicyId) {\n      */\n     private boolean removableDeploymentPolicy(String deploymentPolicyId) {\n         boolean canRemove = true;\n-        Collection<ApplicationContext> appContexts = AutoscalerContext.getInstance().getApplicationContexts();\n-        for (ApplicationContext app : appContexts) {\n-            CartridgeContext[] cartridgeContexts = app.getComponents().getCartridgeContexts();\n-            for (CartridgeContext cartridgeContext : cartridgeContexts) {\n-                SubscribableInfoContext subscribableInfoContexts = cartridgeContext.getSubscribableInfoContext();\n-                if (subscribableInfoContexts.getDeploymentPolicy().equals(deploymentPolicyId)) {\n+        Map<String, Application> applications = ApplicationHolder.getApplications().getApplications();\n+        for (Application application : applications.values()) {\n+            List<String> deploymentPolicyIdsReferredInApplication = AutoscalerUtil.\n+                    getDeploymentPolicyIdsReferredInApplication(application.getUniqueIdentifier());\n+            for (String deploymentPolicyIdInApp : deploymentPolicyIdsReferredInApplication) {\n+                if (deploymentPolicyId.equals(deploymentPolicyIdInApp)) {\n                     canRemove = false;\n                 }\n             }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/2ee26c15c1d64ed67175c1a6dbadc7dba452949e/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/services/impl/AutoscalerServiceImpl.java",
                "sha": "54ff1b3a015bd8e9fee8aa3c9497692ef39a7eb6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/2ee26c15c1d64ed67175c1a6dbadc7dba452949e/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java?ref=2ee26c15c1d64ed67175c1a6dbadc7dba452949e",
                "deletions": 1,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "patch": "@@ -422,7 +422,7 @@ public static String findTenantRange(int tenantId, String tenantPartitions) {\n      * @param applicationId the application id\n      * @return list of deployment policy ids\n      */\n-    private static List<String> getDeploymentPolicyIdsReferredInApplication(String applicationId) {\n+    public static List<String> getDeploymentPolicyIdsReferredInApplication(String applicationId) {\n \n         if (applicationId == null || StringUtils.isBlank(applicationId)) {\n             return null;",
                "raw_url": "https://github.com/apache/attic-stratos/raw/2ee26c15c1d64ed67175c1a6dbadc7dba452949e/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "sha": "2f78fe7631f259282485efc362a431d62d3430c9",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE which caused by policy validation and fixing the policy validation to validate against whole applicaiton",
        "parent": "https://github.com/apache/attic-stratos/commit/1089dedc6c9da007849ae206de20c5b31cd38cf8",
        "patched_files": [
            "AutoscalerUtil.java"
        ],
        "repo": "attic-stratos",
        "unit_tests": [
            "AutoscalerUtilTest.java"
        ]
    },
    "attic-stratos_5fa84a0": {
        "bug_id": "attic-stratos_5fa84a0",
        "commit": "https://github.com/apache/attic-stratos/commit/5fa84a08fd7051be17652b8377b155aed53e9cc5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/5fa84a08fd7051be17652b8377b155aed53e9cc5/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/LoadBalancerConfiguration.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/LoadBalancerConfiguration.java?ref=5fa84a08fd7051be17652b8377b155aed53e9cc5",
                "deletions": 1,
                "filename": "components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/LoadBalancerConfiguration.java",
                "patch": "@@ -441,7 +441,7 @@ private LoadBalancerConfiguration transform(Node loadBalancerNode) {\n \n                     for (Node clusterNode : clustersNode.getChildNodes()) {\n                         String clusterId = clusterNode.getName();\n-                        Cluster cluster = new Cluster(service.getServiceName(), clusterId, null, null);\n+                        Cluster cluster = new Cluster(service.getServiceName(), clusterId, null, null, null);\n \n                         String tenantRange = clusterNode.getProperty(Constants.CONF_PROPERTY_TENANT_RANGE);\n                         if (StringUtils.isNotBlank(tenantRange)) {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/5fa84a08fd7051be17652b8377b155aed53e9cc5/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/conf/LoadBalancerConfiguration.java",
                "sha": "c269419f770093e1bd828530a22ed121ccfd43f2",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/attic-stratos/blob/5fa84a08fd7051be17652b8377b155aed53e9cc5/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/registry/CarbonRegistry.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/registry/CarbonRegistry.java?ref=5fa84a08fd7051be17652b8377b155aed53e9cc5",
                "deletions": 2,
                "filename": "components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/registry/CarbonRegistry.java",
                "patch": "@@ -176,8 +176,15 @@ public boolean removeCartridgeMetaDataDetails(String applicationName, String car\n \t                                                                                           throws Exception {\n \t\tRegistry registry = getGovernanceUserRegistry();\n \t\tString resourcePath = mainResource + applicationName + \"/\" + cartridgeType;\n-\t\tregistry.delete(resourcePath);\n-\t\treturn false;\n+        if (registry != null) {\n+\t\t    registry.delete(resourcePath);\n+            return true;\n+        } else {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Unable to delete the meta data since the Registry is NULL\");\n+            }\n+            return false;\n+        }\n \t}\n \n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/5fa84a08fd7051be17652b8377b155aed53e9cc5/components/org.apache.stratos.metadataservice/src/main/java/org/apache/stratos/metadataservice/registry/CarbonRegistry.java",
                "sha": "98377c42f353843020fc3b4208a70504d9984abb",
                "status": "modified"
            }
        ],
        "message": "fixing a compilation failure and a NPE",
        "parent": "https://github.com/apache/attic-stratos/commit/13ef15c86080a22d65ac9830ba0ca147245a7bde",
        "patched_files": [
            "LoadBalancerConfiguration.java"
        ],
        "repo": "attic-stratos",
        "unit_tests": [
            "LoadBalancerConfigurationTest.java"
        ]
    },
    "attic-stratos_b9591a4": {
        "bug_id": "attic-stratos_b9591a4",
        "commit": "https://github.com/apache/attic-stratos/commit/b9591a4003faa36ff6c470b81d6bab185611eeff",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/b9591a4003faa36ff6c470b81d6bab185611eeff/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java?ref=b9591a4003faa36ff6c470b81d6bab185611eeff",
                "deletions": 2,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "patch": "@@ -89,9 +89,8 @@ public static Applications loadApplicationsFromRegistry(Applications application\n             for (String appResourcePath : appResourcePaths) {\n                 applications.addApplication(getApplicationFromPath(appResourcePath));\n             }\n-            return applications;\n         }\n-        return null;\n+        return applications;\n     }\n \n     public static Application getApplication(String appId) {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/b9591a4003faa36ff6c470b81d6bab185611eeff/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "sha": "18a6956d71587865535ef8de6696dc95a202e8ab",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when loading persisted applications from registry",
        "parent": "https://github.com/apache/attic-stratos/commit/1c45330227a76946bf16a9f936a5dbd0df84130e",
        "patched_files": [
            "AutoscalerUtil.java"
        ],
        "repo": "attic-stratos",
        "unit_tests": [
            "AutoscalerUtilTest.java"
        ]
    },
    "attic-stratos_f58c585": {
        "bug_id": "attic-stratos_f58c585",
        "commit": "https://github.com/apache/attic-stratos/commit/f58c585989a5b19df0e026d43bdd29660a56c118",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/Constants.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/Constants.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/Constants.java",
                "patch": "@@ -41,10 +41,10 @@\n     public static final String AUTOSCALER_CONFIG_FILE_NAME = \"autoscaler.xml\";\n \n     public static final String CLOUD_CONTROLLER_SERVICE_SFX = \"services/CloudControllerService\";\n-    public static final int CLOUD_CONTROLLER_DEFAULT_PORT = 9444;\n+    public static final int CLOUD_CONTROLLER_DEFAULT_PORT = 9443;\n \n     public static final String STRATOS_MANAGER_SERVICE_SFX = \"services/InstanceCleanupNotificationService\";\n-    public static final int STRATOS_MANAGER_DEFAULT_PORT = 9445;\n+    public static final int STRATOS_MANAGER_DEFAULT_PORT = 9443;\n     public static final String STRATOS_MANAGER_HOSTNAME_ELEMENT = \"autoscaler.stratosManager.hostname\";\n     public static final String STRATOS_MANAGER_DEFAULT_PORT_ELEMENT = \"autoscaler.stratosManager.port\";\n     public static final String STRATOS_MANAGER_CLIENT_TIMEOUT_ELEMENT= \"autoscaler.stratosManager.clientTimeout\";",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/Constants.java",
                "sha": "fbcea86cf4882ac62922fd2f7cf2bafb4e6862ca",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/api/AutoScalerServiceImpl.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/api/AutoScalerServiceImpl.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 21,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/api/AutoScalerServiceImpl.java",
                "patch": "@@ -22,28 +22,27 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.autoscaler.applications.ApplicationHolder;\n-import org.apache.stratos.autoscaler.context.AutoscalerContext;\n-//import org.apache.stratos.autoscaler.NetworkPartitionLbHolder;\n import org.apache.stratos.autoscaler.applications.parser.ApplicationParser;\n import org.apache.stratos.autoscaler.applications.parser.DefaultApplicationParser;\n import org.apache.stratos.autoscaler.applications.pojo.ApplicationContext;\n import org.apache.stratos.autoscaler.applications.topic.ApplicationBuilder;\n import org.apache.stratos.autoscaler.client.CloudControllerClient;\n-import org.apache.stratos.autoscaler.exception.*;\n+import org.apache.stratos.autoscaler.context.AutoscalerContext;\n+import org.apache.stratos.autoscaler.exception.AutoScalerException;\n+import org.apache.stratos.autoscaler.exception.InvalidArgumentException;\n import org.apache.stratos.autoscaler.exception.application.ApplicationDefinitionException;\n import org.apache.stratos.autoscaler.exception.kubernetes.*;\n import org.apache.stratos.autoscaler.exception.partition.PartitionValidationException;\n import org.apache.stratos.autoscaler.exception.policy.InvalidPolicyException;\n import org.apache.stratos.autoscaler.interfaces.AutoScalerServiceInterface;\n import org.apache.stratos.autoscaler.kubernetes.KubernetesManager;\n import org.apache.stratos.autoscaler.monitor.cluster.AbstractClusterMonitor;\n-import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.network.ApplicationLevelNetworkPartition;\n-//import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.PartitionManager;\n import org.apache.stratos.autoscaler.pojo.Dependencies;\n import org.apache.stratos.autoscaler.pojo.ServiceGroup;\n import org.apache.stratos.autoscaler.pojo.policy.PolicyManager;\n import org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy;\n import org.apache.stratos.autoscaler.pojo.policy.deployment.DeploymentPolicy;\n+import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.network.ApplicationLevelNetworkPartition;\n import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.network.Partition;\n import org.apache.stratos.autoscaler.registry.RegistryManager;\n import org.apache.stratos.autoscaler.util.AutoscalerUtil;\n@@ -53,7 +52,6 @@\n import org.apache.stratos.common.kubernetes.KubernetesHost;\n import org.apache.stratos.common.kubernetes.KubernetesMaster;\n import org.apache.stratos.messaging.domain.applications.Application;\n-import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;\n import org.apache.stratos.metadata.client.defaults.DefaultMetaDataServiceClient;\n import org.apache.stratos.metadata.client.defaults.MetaDataServiceClient;\n import org.apache.stratos.metadata.client.exception.MetaDataServiceClientException;\n@@ -63,13 +61,16 @@\n import java.util.ArrayList;\n import java.util.Map;\n \n+//import org.apache.stratos.autoscaler.NetworkPartitionLbHolder;\n+//import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.PartitionManager;\n+\n /**\n  * Auto Scaler Service API is responsible getting Partitions and Policies.\n  */\n public class AutoScalerServiceImpl implements AutoScalerServiceInterface {\n \n     private static final Log log = LogFactory.getLog(AutoScalerServiceImpl.class);\n-//    PartitionManager partitionManager = PartitionManager.getInstance();\n+    //    PartitionManager partitionManager = PartitionManager.getInstance();\n     KubernetesManager kubernetesManager = KubernetesManager.getInstance();\n //\n //    public Partition[] getAllAvailablePartitions() {\n@@ -111,35 +112,43 @@\n //    }\n \n     @Override\n-    public boolean addDeploymentPolicy(DeploymentPolicy deploymentPolicy) throws InvalidPolicyException {\n-        boolean hasDeployed = PolicyManager.getInstance().deployDeploymentPolicy(deploymentPolicy);\n+    public String addDeploymentPolicy(DeploymentPolicy deploymentPolicy) throws InvalidPolicyException {\n+        String policyId = PolicyManager.getInstance().deployDeploymentPolicy(deploymentPolicy);\n         //Need to start the application Monitor after validation of the deployment policies.\n-\n+        //FIXME add validation\n         //Check whether all the clusters are there\n         ApplicationHolder.acquireReadLock();\n         boolean allClusterInitialized = false;\n-\n+        String appId = deploymentPolicy.getApplicationId();\n         try {\n             Application application = ApplicationHolder.getApplications().\n                     getApplication(deploymentPolicy.getApplicationId());\n-            if(application != null) {\n+            if (application != null) {\n+\n                 allClusterInitialized = AutoscalerUtil.allClustersInitialized(application);\n             }\n-\n         } finally {\n             ApplicationHolder.releaseReadLock();\n         }\n \n-        if(allClusterInitialized) {\n-            AutoscalerUtil.getInstance().\n-                    startApplicationMonitor(deploymentPolicy.getApplicationId());\n-\n+        if (!AutoscalerContext.getInstance().containsPendingMonitor(appId)\n+                                    || !AutoscalerContext.getInstance().monitorExists(appId)) {\n+            if(allClusterInitialized) {\n+                AutoscalerUtil.getInstance().\n+                        startApplicationMonitor(appId);\n+            } else {\n+                log.info(\"The application clusters are not yet created. \" +\n+                        \"Waiting for them to be created\");\n+            }\n         } else {\n-            log.info(\"The application clusters are not yet created. \" +\n-                    \"Waiting for them to be created\");\n+            log.info(\"The application Monitor has already been created for [Application] \" + appId);\n         }\n+        return policyId;\n+    }\n \n-        return hasDeployed;\n+    @Override\n+    public boolean undeployDeploymentPolicy(String applicationId) {\n+        return ApplicationBuilder.handleApplicationPolicyUndeployed(applicationId);\n     }\n \n     @Override\n@@ -240,7 +249,7 @@ public boolean updateKubernetesHost(KubernetesHost kubernetesHost) throws\n         return kubernetesManager.updateKubernetesHost(kubernetesHost);\n     }\n \n-//    @Override\n+    //    @Override\n     public Partition[] getPartitionsOfGroup(String deploymentPolicyId, String groupId) {\n         DeploymentPolicy depPol = this.getDeploymentPolicy(deploymentPolicyId);\n         if (null == depPol) {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/api/AutoScalerServiceImpl.java",
                "sha": "37059fe36b401bd2b69bd624a97239c561567e97",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/dependency/DependencyBuilder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/dependency/DependencyBuilder.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 4,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/dependency/DependencyBuilder.java",
                "patch": "@@ -132,15 +132,15 @@ public DependencyTree buildDependency(ParentComponent component) throws Dependen\n             }\n \n             //Parsing the scaling order\n-            Set<ScalingOrder> scalingOrders = dependencyOrder.getScalingOrders();\n+            Set<ScalingDependentList> scalingDependentLists = dependencyOrder.getScalingDependentLists();\n \n-            if (scalingOrders != null) {\n-                for (ScalingOrder scalingOrder : scalingOrders) {\n+            if (scalingDependentLists != null) {\n+                for (ScalingDependentList scalingDependentList : scalingDependentLists) {\n                     foundContext = null;\n                     parentContext = null;\n \n \n-                    for (String scalingOrderComponent : scalingOrder.getScalingOrderComponentsList()) {\n+                    for (String scalingOrderComponent : scalingDependentList.getScalingDependentListComponents()) {\n \n \n                         if (scalingOrderComponent != null){",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/dependency/DependencyBuilder.java",
                "sha": "7c9f792424bd90afd88e3908652ba17c0fde4f00",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/parser/DefaultApplicationParser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/parser/DefaultApplicationParser.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/parser/DefaultApplicationParser.java",
                "patch": "@@ -58,6 +58,7 @@\n \n     private Set<ApplicationClusterContext> applicationClusterContexts;\n     private Map<String, Properties> aliasToProperties;\n+ \tprivate Map<String, SubscribableInfoContext> subscribableInformation = new HashMap<String, SubscribableInfoContext>();\n \n     public DefaultApplicationParser () {\n         this.applicationClusterContexts = new HashSet<ApplicationClusterContext>();\n@@ -176,8 +177,7 @@ public Application parse(Object obj) throws ApplicationDefinitionException {\n \n \tprivate Map<String, SubscribableInfoContext> getSubscribableInfo(GroupContext[] groupContexts) throws\n     \t\tApplicationDefinitionException {\n-\t\t// map [cartridge alias -> Subscribable Information]\n-\t\tMap<String, SubscribableInfoContext> subscribableInformation = new HashMap<String, SubscribableInfoContext>();\n+\t\tif(groupContexts != null) {\n \t\tfor (GroupContext groupContext : groupContexts) {\n \t\t\tif (groupContext.getGroupContexts() != null) {\n \t\t\t\tgetSubscribableInfo(groupContext.getGroupContexts());\n@@ -204,6 +204,7 @@ public Application parse(Object obj) throws ApplicationDefinitionException {\n \t                }\n                 }\n \t\t\t}\n+\t\t  }\n \t\t}\n \t\treturn subscribableInformation;\n \t}",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/parser/DefaultApplicationParser.java",
                "sha": "b95c7659783bc4e5592f5802e8b6ba2c237c1a75",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/topic/ApplicationBuilder.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/topic/ApplicationBuilder.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 13,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/topic/ApplicationBuilder.java",
                "patch": "@@ -24,10 +24,14 @@\n import org.apache.stratos.autoscaler.applications.ApplicationHolder;\n import org.apache.stratos.autoscaler.applications.pojo.ApplicationClusterContext;\n import org.apache.stratos.autoscaler.client.CloudControllerClient;\n+import org.apache.stratos.autoscaler.event.publisher.ClusterStatusEventPublisher;\n import org.apache.stratos.autoscaler.monitor.component.ApplicationMonitor;\n import org.apache.stratos.autoscaler.monitor.component.GroupMonitor;\n+import org.apache.stratos.autoscaler.pojo.policy.PolicyManager;\n+import org.apache.stratos.autoscaler.pojo.policy.deployment.*;\n import org.apache.stratos.messaging.domain.applications.*;\n import org.apache.stratos.messaging.domain.instance.ApplicationInstance;\n+import org.apache.stratos.messaging.domain.instance.ClusterInstance;\n import org.apache.stratos.messaging.domain.instance.GroupInstance;\n import org.apache.stratos.messaging.domain.topology.Cluster;\n import org.apache.stratos.messaging.domain.topology.Service;\n@@ -142,7 +146,7 @@ public static void handleApplicationActivatedEvent(String appId, String instance\n \n     public static void handleApplicationUndeployed(String appId) {\n         if (log.isDebugEnabled()) {\n-            log.debug(\"Handling application terminating event: [application-id] \" + appId);\n+            log.debug(\"Handling application unDeployment for [application-id] \" + appId);\n         }\n         Set<ClusterDataHolder> clusterData;\n         ApplicationHolder.acquireWriteLock();\n@@ -154,6 +158,38 @@ public static void handleApplicationUndeployed(String appId) {\n                 log.warn(String.format(\"Application does not exist: [application-id] %s\",\n                         appId));\n                 return;\n+            } else {\n+                org.apache.stratos.autoscaler.pojo.policy.deployment.DeploymentPolicy policy =\n+                        PolicyManager.getInstance().getDeploymentPolicyByApplication(appId);\n+                if(policy != null) {\n+                    log.warn(String.format(\"Application has been found in the ApplicationsTopology\" +\n+                                    \": [application-id] %s, Please unDeploy the Application Policy.\",\n+                            appId));\n+                }\n+            }\n+            ApplicationHolder.removeApplication(appId);\n+\n+        } finally {\n+            ApplicationHolder.releaseWriteLock();\n+        }\n+\n+        log.info(\"[Application] \" + appId + \" has been successfully undeployed\");\n+    }\n+\n+    public static boolean handleApplicationPolicyUndeployed(String appId) {\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Handling application terminating event: [application-id] \" + appId);\n+        }\n+        Set<ClusterDataHolder> clusterData;\n+        ApplicationHolder.acquireWriteLock();\n+        try {\n+            Applications applications = ApplicationHolder.getApplications();\n+            Application application = applications.getApplication(appId);\n+            //update the status of the Group\n+            if (application == null) {\n+                log.warn(String.format(\"Application does not exist: [application-id] %s\",\n+                        appId));\n+                return false;\n             }\n             clusterData = application.getClusterDataRecursively();\n             Collection<ApplicationInstance> context = application.\n@@ -167,12 +203,11 @@ public static void handleApplicationUndeployed(String appId) {\n                     ApplicationHolder.persistApplication(application);\n                     ApplicationsEventPublisher.sendApplicationTerminatingEvent(appId, context1.getInstanceId());\n                 } else {\n-                    log.warn(String.format(\"Application state transition is not valid: [application-id] %s \" +\n+                    log.warn(String.format(\"Application Instance state transition is not valid: [application-id] %s \" +\n                                     \" [instance-id] %s [current-status] %s [status-requested] %s\", appId,\n                             context1.getInstanceId() + context1.getStatus(), status));\n                 }\n             }\n-\n         } finally {\n             ApplicationHolder.releaseWriteLock();\n         }\n@@ -188,11 +223,12 @@ public static void handleApplicationUndeployed(String appId) {\n                     if (service != null) {\n                         Cluster cluster = service.getCluster(aClusterData.getClusterId());\n                         if (cluster != null) {\n-                            //TODO travese thr cluster context\n-                            /*for() {\n-                                ClusterStatusEventPublisher.sendClusterTerminatingEvent(appId, aClusterData.getServiceType(),\n-                                        aClusterData.getClusterId(), null);\n-                            }*/\n+                            for(ClusterInstance instance : cluster.getInstanceIdToInstanceContextMap().values()) {\n+                                ClusterStatusEventPublisher.sendClusterTerminatingEvent(appId,\n+                                                                    aClusterData.getServiceType(),\n+                                                                    aClusterData.getClusterId(),\n+                                                                    instance.getInstanceId());\n+                            }\n                         }\n                     }\n                 } finally {\n@@ -202,9 +238,10 @@ public static void handleApplicationUndeployed(String appId) {\n \n             }\n         }\n+        return true;\n     }\n \n-    public static void handleApplicationTerminatedEvent(String appId) {\n+    public static void handleApplicationTerminatedEvent(String appId, String instanceId) {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Handling application terminated event: [application-id] \" + appId);\n         }\n@@ -218,10 +255,10 @@ public static void handleApplicationTerminatedEvent(String appId) {\n             Set<ClusterDataHolder> clusterData = application.getClusterDataRecursively();\n \n             ApplicationStatus status = ApplicationStatus.Terminated;\n-            if (application.isStateTransitionValid(status, null)) {\n+            if (application.isStateTransitionValid(status, instanceId)) {\n                 //setting the status, persist and publish\n-                application.setStatus(status, null);\n-                updateApplicationMonitor(appId, status, null);\n+                application.setStatus(status, instanceId);\n+                updateApplicationMonitor(appId, status, instanceId);\n                 //removing the monitor\n                 AutoscalerContext.getInstance().removeAppMonitor(appId);\n                 //Removing the application from memory and registry\n@@ -231,7 +268,9 @@ public static void handleApplicationTerminatedEvent(String appId) {\n                 ApplicationsEventPublisher.sendApplicationTerminatedEvent(appId, clusterData);\n             } else {\n                 log.warn(String.format(\"Application state transition is not valid: [application-id] %s \" +\n-                        \" [current-status] %s [status-requested] %s\", appId, application.getStatus(null), status));\n+                        \" [current-status] %s [status-requested] %s\", appId,\n+                        application.getInstanceContexts(instanceId).getStatus(),\n+                        status));\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/topic/ApplicationBuilder.java",
                "sha": "6fb76df268af62013b944b87e1cea0a383b8ad1f",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/topic/ApplicationsEventPublisher.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/topic/ApplicationsEventPublisher.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 6,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/topic/ApplicationsEventPublisher.java",
                "patch": "@@ -96,8 +96,8 @@ public static void sendApplicationInactivatedEvent(String appId, String instance\n         if (log.isInfoEnabled()) {\n             log.info(\"Publishing Application In-activated event for [application]: \" + appId);\n         }\n-        ApplicationInactivatedEvent applicationInActivatedEvent =\n-                new ApplicationInactivatedEvent(appId, instanceId);\n+        ApplicationInstanceInactivatedEvent applicationInActivatedEvent =\n+                new ApplicationInstanceInactivatedEvent(appId, instanceId);\n         publishEvent(applicationInActivatedEvent);\n \n     }\n@@ -106,17 +106,17 @@ public static void sendApplicationTerminatingEvent(String appId, String instance\n         if (log.isInfoEnabled()) {\n             log.info(\"Publishing Application terminating event for [application]: \" + appId);\n         }\n-        ApplicationTerminatingEvent applicationTerminatingEvent =\n-                new ApplicationTerminatingEvent(appId, instanceId);\n+        ApplicationInstanceTerminatingEvent applicationTerminatingEvent =\n+                new ApplicationInstanceTerminatingEvent(appId, instanceId);\n         publishEvent(applicationTerminatingEvent);\n     }\n \n     public static void sendApplicationTerminatedEvent(String appId, Set<ClusterDataHolder> clusterData) {\n         if (log.isInfoEnabled()) {\n             log.info(\"Publishing Application terminated event for [application]: \" + appId);\n         }\n-        ApplicationTerminatedEvent applicationTerminatedEvent =\n-                new ApplicationTerminatedEvent(appId, clusterData);\n+        ApplicationInstanceTerminatedEvent applicationTerminatedEvent =\n+                new ApplicationInstanceTerminatedEvent(appId, clusterData);\n         publishEvent(applicationTerminatedEvent);\n     }\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/applications/topic/ApplicationsEventPublisher.java",
                "sha": "1f4f6ca675b1168ba89fd018ca252083954b1de7",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/client/CloudControllerClient.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/client/CloudControllerClient.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 3,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/client/CloudControllerClient.java",
                "patch": "@@ -169,7 +169,7 @@ public synchronized boolean validatePartition(Partition partition) throws Partit\n \n     public synchronized MemberContext spawnAnInstance(Partition partition,\n                                                       String clusterId,\n-                                                      String networkPartitionId, boolean isPrimary,\n+                                                      String networkPartitionId,String instanceID, boolean isPrimary,\n                                                       int minMemberCount) throws SpawningException {\n         try {\n             if (log.isInfoEnabled()) {\n@@ -186,6 +186,7 @@ public synchronized MemberContext spawnAnInstance(Partition partition,\n             MemberContext member = new MemberContext();\n             member.setClusterId(clusterId);\n             member.setPartition(partition);\n+\t        member.setInstanceId(instanceID);\n //            member.setLbClusterId(lbClusterId);\n             member.setObsoleteExpiryTime(expiryTime);\n             member.setInitTime(System.currentTimeMillis());\n@@ -284,9 +285,11 @@ public synchronized void createApplicationClusters(String appId,\n \n     }\n \n-    public void createClusterInstance (String serviceType, String clusterId, String alias, String instanceId){\n+    public void createClusterInstance (String serviceType, String clusterId, String alias,\n+                                       String instanceId, String partitionId, String networkPartitionId){\n         try {\n-            stub.createClusterInstance(serviceType, clusterId, alias, instanceId);\n+            stub.createClusterInstance(serviceType, clusterId, alias, instanceId,\n+                    partitionId, networkPartitionId);\n \n         } catch (RemoteException e) {\n             String msg = e.getMessage();",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/client/CloudControllerClient.java",
                "sha": "a8e275a71bef97853134040cdade8e0d79034f57",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/AutoscalerContext.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/AutoscalerContext.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/AutoscalerContext.java",
                "patch": "@@ -20,7 +20,9 @@\n  */\n package org.apache.stratos.autoscaler.context;\n \n+import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.stratos.autoscaler.monitor.component.ApplicationMonitor;\n@@ -37,10 +39,13 @@\n     private Map<String, AbstractClusterMonitor> clusterMonitors;\n     // Map<ApplicationId, ApplicationMonitor>\n     private Map<String, ApplicationMonitor> applicationMonitors;\n+    //pending application monitors\n+    private List<String> pendingApplicationMonitors;\n \n     private AutoscalerContext() {\n         setClusterMonitors(new HashMap<String, AbstractClusterMonitor>());\n         setApplicationMonitors(new HashMap<String, ApplicationMonitor>());\n+        pendingApplicationMonitors = new ArrayList<String>();\n     }\n \n     public static AutoscalerContext getInstance() {\n@@ -86,4 +91,28 @@ public void setClusterMonitors(Map<String, AbstractClusterMonitor> clusterMonito\n     public void setApplicationMonitors(Map<String, ApplicationMonitor> applicationMonitors) {\n         this.applicationMonitors = applicationMonitors;\n     }\n+\n+    public List<String> getPendingApplicationMonitors() {\n+        return pendingApplicationMonitors;\n+    }\n+\n+    public void setPendingApplicationMonitors(List<String> pendingApplicationMonitors) {\n+        this.pendingApplicationMonitors = pendingApplicationMonitors;\n+    }\n+\n+    public void addPendingMonitor(String appId) {\n+        this.pendingApplicationMonitors.add(appId);\n+    }\n+\n+    public void removeFromPendingMonitors(String appId) {\n+        this.pendingApplicationMonitors.remove(appId);\n+    }\n+\n+    public boolean containsPendingMonitor(String appId) {\n+        return this.pendingApplicationMonitors.contains(appId);\n+    }\n+\n+    public boolean monitorExists(String appId) {\n+        return this.applicationMonitors.containsKey(appId);\n+    }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/AutoscalerContext.java",
                "sha": "2452255ebd7c25930b880e4b312892e5f2b15577",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/ClusterContextFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/ClusterContextFactory.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/ClusterContextFactory.java",
                "patch": "@@ -65,7 +65,7 @@ public static VMClusterContext getVMClusterContext(String instanceId, Cluster cl\n         DeploymentPolicy deploymentPolicy;\n         ApplicationHolder.acquireReadLock();\n         try {\n-            deploymentPolicy = PolicyManager.getInstance().getDeploymentPolicy(cluster.getAppId());\n+            deploymentPolicy = PolicyManager.getInstance().getDeploymentPolicyByApplication(cluster.getAppId());\n         } finally {\n             ApplicationHolder.releaseReadLock();\n         }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/ClusterContextFactory.java",
                "sha": "c92ee73f71373744486e90f40a87008c4eaf2ffd",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/ClusterInstanceContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/ClusterInstanceContext.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/ClusterInstanceContext.java",
                "patch": "@@ -70,7 +70,8 @@\n \n     private String networkPartitionId;\n \n-    public ClusterInstanceContext(String clusterInstanceId, String partitionAlgo, ChildLevelPartition[] partitions,\n+    public ClusterInstanceContext(String clusterInstanceId, String partitionAlgo,\n+                                  ChildLevelPartition[] partitions,\n                                   int min, String networkPartitionId) {\n \n         super(clusterInstanceId);",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/ClusterInstanceContext.java",
                "sha": "bf6a05177c83a6af872f65fdfa2625d772014d90",
                "status": "modified"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/VMClusterContext.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/VMClusterContext.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 15,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/VMClusterContext.java",
                "patch": "@@ -124,28 +124,41 @@ public void addInstanceContext(String instanceId, Cluster cluster)\n             throws PolicyValidationException, PartitionValidationException {\n         ClusterLevelNetworkPartitionContext networkPartitionContext = null;\n         ClusterInstance clusterInstance = cluster.getInstanceContexts(instanceId);\n+        ChildPolicy policy = this.deploymentPolicy.\n+                getChildPolicy(\n+                        AutoscalerUtil.getAliasFromClusterId(clusterId));\n         if (networkPartitionCtxts.containsKey(clusterInstance.getNetworkPartitionId())) {\n             networkPartitionContext = this.networkPartitionCtxts.get(\n                     clusterInstance.getNetworkPartitionId());\n+        } else {\n+            if(policy != null) {\n+                ChildLevelNetworkPartition networkPartition = policy.\n+                        getChildLevelNetworkPartition(clusterInstance.getNetworkPartitionId());\n+                networkPartitionContext = new ClusterLevelNetworkPartitionContext(networkPartition.getId(),\n+                        networkPartition.getPartitionAlgo(), 0);\n+            } else {\n+                //Parent should have the partition specified\n+                networkPartitionContext = new ClusterLevelNetworkPartitionContext(clusterInstance.getNetworkPartitionId(),\n+                        null, 0);\n+            }\n+\n         }\n \n         if (clusterInstance.getPartitionId() != null) {\n             //Need to add partition Context based on the given one from the parent\n             networkPartitionContext = addPartition(clusterInstance, cluster, networkPartitionContext);\n \n         } else {\n-            ChildPolicy policy = this.deploymentPolicy.\n-                    getChildPolicy(\n-                            AutoscalerUtil.getAliasFromClusterId(clusterId));\n             networkPartitionContext = parseDeploymentPolicy(clusterInstance, cluster,\n                     policy, networkPartitionContext);\n         }\n         if (!networkPartitionCtxts.containsKey(clusterInstance.getNetworkPartitionId())) {\n             this.networkPartitionCtxts.put(clusterInstance.getNetworkPartitionId(),\n                     networkPartitionContext);\n             if (log.isInfoEnabled()) {\n-                log.info(String.format(\"Network partition context has been added: \" +\n-                        \"[network partition] %s\", clusterInstance.getNetworkPartitionId()));\n+                log.info(String.format(\"Cluster instance context has been added to network partition, [cluster instance]\" +\n+                        \" %s [network partition] %s\", clusterInstance.getInstanceId(),\n+                        clusterInstance.getNetworkPartitionId()));\n             }\n         }\n \n@@ -154,27 +167,27 @@ public void addInstanceContext(String instanceId, Cluster cluster)\n     private ClusterLevelNetworkPartitionContext parseDeploymentPolicy(\n             ClusterInstance instance,\n             Cluster cluster,\n-            ChildPolicy deploymentPolicy,\n+            ChildPolicy childPolicy,\n             ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext)\n             throws PolicyValidationException, PartitionValidationException {\n         if (log.isDebugEnabled()) {\n-            log.debug(\"Deployment policy name: \" + deploymentPolicy.getId());\n+            log.debug(\"Deployment policy name: \" + childPolicy.getId());\n         }\n \n-        if (deploymentPolicy == null) {\n-            String msg = \"Deployment policy is null: [policy-name] \" + deploymentPolicy.getId();\n+        if (childPolicy == null) {\n+            String msg = \"Deployment policy is null: [policy-name] \" + childPolicy.getId();\n             log.error(msg);\n             throw new PolicyValidationException(msg);\n         }\n \n-        ChildLevelPartition[] childLevelPartitions = deploymentPolicy.\n+        ChildLevelPartition[] childLevelPartitions = childPolicy.\n                 getChildLevelNetworkPartition(\n                         clusterLevelNetworkPartitionContext.getId()).\n                 getChildLevelPartitions();\n         if (childLevelPartitions == null) {\n             String msg =\n                     \"Partitions are null in deployment policy: [policy-name]: \" +\n-                            deploymentPolicy.getId();\n+                            childPolicy.getId();\n             log.error(msg);\n             throw new PolicyValidationException(msg);\n         }\n@@ -188,7 +201,7 @@ private ClusterLevelNetworkPartitionContext parseDeploymentPolicy(\n \n \n         ChildLevelNetworkPartition networkPartition;\n-        networkPartition = deploymentPolicy.getChildLevelNetworkPartition(instance.getNetworkPartitionId());\n+        networkPartition = childPolicy.getChildLevelNetworkPartition(instance.getNetworkPartitionId());\n         String networkPartitionId = networkPartition.getId();\n \n         if (clusterLevelNetworkPartitionContext == null) {\n@@ -200,7 +213,19 @@ private ClusterLevelNetworkPartitionContext parseDeploymentPolicy(\n         if (clusterInstanceContext == null) {\n             clusterInstanceContext = new ClusterInstanceContext(instance.getInstanceId(),\n                     networkPartition.getPartitionAlgo(),\n-                    networkPartition.getChildLevelPartitions(), networkPartition.getMin(), networkPartitionId);\n+                    networkPartition.getChildLevelPartitions(), 2,\n+                    networkPartitionId);\n+            ApplicationHolder.acquireReadLock();\n+            try {\n+                Application application = ApplicationHolder.getApplications().\n+                        getApplication(cluster.getAppId());\n+                ClusterDataHolder dataHolder = application.\n+                        getClusterData(AutoscalerUtil.getAliasFromClusterId(clusterId));\n+                clusterInstanceContext.setMinMembers(2); //dataHolder.getMinInstances());\n+                clusterInstanceContext.setMaxMembers(2); //dataHolder.getMaxInstances());\n+            } finally {\n+                ApplicationHolder.releaseReadLock();\n+            }\n         }\n \n         for (ChildLevelPartition partition : networkPartition.getChildLevelPartitions()) {\n@@ -224,6 +249,8 @@ private ClusterLevelNetworkPartitionContext parseDeploymentPolicy(\n             }\n         }\n \n+        clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);\n+\n         if (log.isInfoEnabled()) {\n             log.info(String.format(\"Network partition context has been added: \" +\n                     \"[network partition] %s\", clusterLevelNetworkPartitionContext.getId()));\n@@ -280,8 +307,8 @@ private ClusterLevelNetworkPartitionContext addPartition(\n             Application application = ApplicationHolder.getApplications().\n                     getApplication(cluster.getAppId());\n             ClusterDataHolder dataHolder = application.getClusterData(AutoscalerUtil.getAliasFromClusterId(clusterId));\n-            clusterInstanceContext.setMinMembers(dataHolder.getMinInstances());\n-            clusterInstanceContext.setMaxMembers(dataHolder.getMaxInstances());\n+            clusterInstanceContext.setMinMembers(2); //dataHolder.getMinInstances());\n+            clusterInstanceContext.setMaxMembers(2); //dataHolder.getMaxInstances());\n         } finally {\n             ApplicationHolder.releaseReadLock();\n         }\n@@ -290,6 +317,7 @@ private ClusterLevelNetworkPartitionContext addPartition(\n                     networkPartition.getPartitionAlgo(),\n                     networkPartition.getChildLevelPartitions(), networkPartition.getMin(), networkPartition.getId());\n         }\n+\n         clusterInstanceContext.addPartitionCtxt(clusterLevelPartitionContext);\n         clusterLevelNetworkPartitionContext.addClusterInstanceContext(clusterInstanceContext);\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/cluster/VMClusterContext.java",
                "sha": "9944f941bdc63234808c809fd37f8b73c360595e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/partition/ClusterLevelPartitionContext.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/partition/ClusterLevelPartitionContext.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/partition/ClusterLevelPartitionContext.java",
                "patch": "@@ -84,6 +84,7 @@ public ClusterLevelPartitionContext(long memberExpiryTime) {\n         super(memberExpiryTime);\n         this.activeMembers = new ArrayList<MemberContext>();\n         this.terminationPendingMembers = new ArrayList<MemberContext>();\n+        this.pendingMembers = new ArrayList<MemberContext>();\n     }\n     \n     public ClusterLevelPartitionContext(ChildLevelPartition childLevelPartition, Partition partition, int max) {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/partition/ClusterLevelPartitionContext.java",
                "sha": "e9c3cff77465331d5fafa8cfcbd62e6d0bf3eb7c",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/partition/network/ClusterLevelNetworkPartitionContext.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/partition/network/ClusterLevelNetworkPartitionContext.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/partition/network/ClusterLevelNetworkPartitionContext.java",
                "patch": "@@ -103,10 +103,15 @@ public void addClusterInstanceContext(ClusterInstanceContext clusterInstanceCont\n         return instanceIdToClusterInstanceContextMap;\n     }\n \n-    public void setInstanceIdToClusterInstanceContextMap(Map<String, ClusterInstanceContext> instanceIdToClusterInstanceContextMap) {\n+    public void setInstanceIdToClusterInstanceContextMap(\n+            Map<String, ClusterInstanceContext> instanceIdToClusterInstanceContextMap) {\n         this.instanceIdToClusterInstanceContextMap = instanceIdToClusterInstanceContextMap;\n     }\n \n+    public boolean containsClusterInstanceContext(String instanceId) {\n+        return this.instanceIdToClusterInstanceContextMap.containsKey(instanceId);\n+    }\n+\n     public int getMin() {\n         return min;\n     }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/context/partition/network/ClusterLevelNetworkPartitionContext.java",
                "sha": "036228de25703dd7621de847d7fd8f5364a820db",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/publisher/InstanceNotificationPublisher.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/publisher/InstanceNotificationPublisher.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/publisher/InstanceNotificationPublisher.java",
                "patch": "@@ -39,9 +39,9 @@ private static void publish(Event event) {\n         instanceNotifyingEvent.publish(event);\n     }\n \n-    public static void sendInstanceCleanupEventForCluster(String clusterId) {\n+    public static void sendInstanceCleanupEventForCluster(String clusterId, String instanceId) {\n         log.info(String.format(\"Publishing Instance Cleanup Event: [cluster] %s\", clusterId));\n-        publish(new InstanceCleanupClusterEvent(clusterId));\n+        publish(new InstanceCleanupClusterEvent(clusterId, instanceId));\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/publisher/InstanceNotificationPublisher.java",
                "sha": "ea68f329a158c6f24c2986a008d9a1e8739393cb",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/receiver/health/AutoscalerHealthStatEventReceiver.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/receiver/health/AutoscalerHealthStatEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 15,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/receiver/health/AutoscalerHealthStatEventReceiver.java",
                "patch": "@@ -63,45 +63,38 @@\n import org.apache.stratos.messaging.message.receiver.health.stat.HealthStatEventReceiver;\n import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;\n \n+import java.util.concurrent.ExecutorService;\n \n /**\n  * A thread for processing topology messages and updating the topology data structure.\n  */\n-public class AutoscalerHealthStatEventReceiver implements Runnable {\n+public class AutoscalerHealthStatEventReceiver {\n \n     private static final Log log = LogFactory.getLog(AutoscalerHealthStatEventReceiver.class);\n     private boolean terminated = false;\n \n     private HealthStatEventReceiver healthStatEventReceiver;\n+\tprivate ExecutorService executorService;\n \n     public AutoscalerHealthStatEventReceiver() {\n \t\tthis.healthStatEventReceiver = new HealthStatEventReceiver();\n         addEventListeners();\n     }\n \n-    @Override\n-    public void run() {\n+    public void execute() {\n         //FIXME this activated before autoscaler deployer activated.\n         try {\n             Thread.sleep(15000);\n         } catch (InterruptedException ignore) {\n         }\n-        Thread thread = new Thread(healthStatEventReceiver);\n-        thread.start();\n+\t    healthStatEventReceiver.setExecutorService(executorService);\n+        healthStatEventReceiver.execute();\n+\n         if(log.isInfoEnabled()) {\n             log.info(\"Autoscaler health stat event receiver thread started\");\n         }\n \n-        // Keep the thread live until terminated\n-        while (!terminated){\n-        \ttry {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException ignore) {\n-            }\n-        }\n-        if(log.isInfoEnabled()) {\n-            log.info(\"Autoscaler health stat event receiver thread terminated\");\n-        }\n+\n     }\n \n     private void addEventListeners() {\n@@ -526,4 +519,12 @@ private Member getMemberByMemberId(String memberId) {\n     public void terminate() {\n         this.terminated = true;\n     }\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/receiver/health/AutoscalerHealthStatEventReceiver.java",
                "sha": "75f7a2daf2863c1ed4f0b55ee460a7382e93b48b",
                "status": "modified"
            },
            {
                "additions": 129,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/receiver/topology/AutoscalerTopologyEventReceiver.java",
                "changes": 215,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/receiver/topology/AutoscalerTopologyEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 86,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/receiver/topology/AutoscalerTopologyEventReceiver.java",
                "patch": "@@ -23,12 +23,16 @@\n import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.autoscaler.applications.ApplicationHolder;\n import org.apache.stratos.autoscaler.context.AutoscalerContext;\n+import org.apache.stratos.autoscaler.context.cluster.AbstractClusterContext;\n import org.apache.stratos.autoscaler.context.cluster.ClusterContextFactory;\n import org.apache.stratos.autoscaler.context.cluster.VMClusterContext;\n import org.apache.stratos.autoscaler.event.publisher.ClusterStatusEventPublisher;\n import org.apache.stratos.autoscaler.event.publisher.InstanceNotificationPublisher;\n+import org.apache.stratos.autoscaler.exception.application.DependencyBuilderException;\n+import org.apache.stratos.autoscaler.exception.application.TopologyInConsistentException;\n import org.apache.stratos.autoscaler.exception.partition.PartitionValidationException;\n import org.apache.stratos.autoscaler.exception.policy.PolicyValidationException;\n+import org.apache.stratos.autoscaler.monitor.MonitorFactory;\n import org.apache.stratos.autoscaler.monitor.cluster.AbstractClusterMonitor;\n import org.apache.stratos.autoscaler.monitor.component.ApplicationMonitor;\n import org.apache.stratos.autoscaler.monitor.events.ClusterStatusEvent;\n@@ -39,6 +43,7 @@\n import org.apache.stratos.messaging.domain.applications.Application;\n import org.apache.stratos.messaging.domain.applications.Applications;\n import org.apache.stratos.messaging.domain.applications.ClusterDataHolder;\n+import org.apache.stratos.messaging.domain.instance.ClusterInstance;\n import org.apache.stratos.messaging.domain.topology.Cluster;\n import org.apache.stratos.messaging.domain.topology.ClusterStatus;\n import org.apache.stratos.messaging.domain.topology.Service;\n@@ -49,86 +54,36 @@\n import org.apache.stratos.messaging.message.receiver.topology.TopologyEventReceiver;\n import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * Autoscaler topology receiver.\n  */\n-public class AutoscalerTopologyEventReceiver implements Runnable {\n+public class AutoscalerTopologyEventReceiver {\n \n-    private static final Log log = LogFactory.getLog(AutoscalerTopologyEventReceiver.class);\n+\tprivate static final Log log = LogFactory.getLog(AutoscalerTopologyEventReceiver.class);\n \n-    private TopologyEventReceiver topologyEventReceiver;\n-    private boolean terminated;\n-    private boolean topologyInitialized;\n+\tprivate TopologyEventReceiver topologyEventReceiver;\n+\tprivate boolean terminated;\n+\tprivate boolean topologyInitialized;\n+\tprivate ExecutorService executorService;\n \n-    public AutoscalerTopologyEventReceiver() {\n-        this.topologyEventReceiver = new TopologyEventReceiver();\n-        addEventListeners();\n-    }\n+\tpublic AutoscalerTopologyEventReceiver() {\n+\t\tthis.topologyEventReceiver = new TopologyEventReceiver();\n+\t\taddEventListeners();\n+\t}\n \n-    @Override\n-    public void run() {\n-        //FIXME this activated before autoscaler deployer activated.\n-        /*try {\n-            Thread.sleep(15000);\n-        } catch (InterruptedException ignore) {\n-        }*/\n-        Thread thread = new Thread(topologyEventReceiver);\n-        thread.start();\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Autoscaler topology receiver thread started\");\n-        }\n-\n-        // Keep the thread live until terminated\n-        while (!terminated) {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException ignore) {\n-            }\n-        }\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Autoscaler topology receiver thread terminated\");\n-        }\n-    }\n+\tpublic void execute() {\n+\t\t//FIXME this activated before autoscaler deployer activated.\n \n-    private boolean allClustersInitialized(Application application) {\n-        boolean allClustersInitialized = false;\n-        for (ClusterDataHolder holder : application.getClusterDataRecursively()) {\n-            TopologyManager.acquireReadLockForCluster(holder.getServiceType(),\n-                    holder.getClusterId());\n-\n-            try {\n-                Topology topology = TopologyManager.getTopology();\n-                if (topology != null) {\n-                    Service service = topology.getService(holder.getServiceType());\n-                    if (service != null) {\n-                        if (service.clusterExists(holder.getClusterId())) {\n-                            allClustersInitialized = true;\n-                            return allClustersInitialized;\n-                        } else {\n-                            if (log.isDebugEnabled()) {\n-                                log.debug(\"[Cluster] \" + holder.getClusterId() + \" is not found in \" +\n-                                        \"the Topology\");\n-                            }\n-                            allClustersInitialized = false;\n-                        }\n-                    } else {\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(\"Service is null in the CompleteTopologyEvent\");\n-                        }\n-                    }\n-                } else {\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Topology is null in the CompleteTopologyEvent\");\n-                    }\n-                }\n-            } finally {\n-                TopologyManager.releaseReadLockForCluster(holder.getServiceType(),\n-                        holder.getClusterId());\n-            }\n-        }\n-        return allClustersInitialized;\n-    }\n+\t\ttopologyEventReceiver.setExecutorService(getExecutorService());\n+\t\ttopologyEventReceiver.execute();\n \n+\t\tif (log.isInfoEnabled()) {\n+\t\t\tlog.info(\"Autoscaler topology receiver thread started\");\n+\t\t}\n+\n+\t}\n \n     private void addEventListeners() {\n         // Listen to topology events that affect clusters\n@@ -142,7 +97,7 @@ protected void onEvent(Event event) {\n                         Applications applications = ApplicationHolder.getApplications();\n                         if (applications != null) {\n                             for (Application application : applications.getApplications().values()) {\n-                                if (allClustersInitialized(application)) {\n+                                if (AutoscalerUtil.allClustersInitialized(application)) {\n                                     DeploymentPolicy policy = PolicyManager.getInstance().\n                                             getDeploymentPolicyByApplication(\n                                                     application.getUniqueIdentifier());\n@@ -184,8 +139,13 @@ protected void onEvent(Event event) {\n                     try {\n                         //acquire read lock\n                         ApplicationHolder.acquireReadLock();\n-                        //start the application monitor\n-                        //startApplicationMonitor(appId);\n+                        //start the application monitor if the policy exists\n+                        DeploymentPolicy policy = PolicyManager.getInstance().\n+                                getDeploymentPolicyByApplication(appId);\n+                        if(policy != null && !AutoscalerContext.getInstance().\n+                                                containsPendingMonitor(appId)) {\n+                            AutoscalerUtil.getInstance().startApplicationMonitor(appId);\n+                        }\n                     } catch (Exception e) {\n                         String msg = \"Error processing event \" + e.getLocalizedMessage();\n                         log.error(msg, e);\n@@ -300,7 +260,7 @@ protected void onEvent(Event event) {\n                 if (monitor.getStatus() == ClusterStatus.Active) {\n                     // terminated gracefully\n                     monitor.setStatus(ClusterStatus.Terminating, instanceId);\n-                    InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId);\n+                    InstanceNotificationPublisher.sendInstanceCleanupEventForCluster(clusterId, instanceId);\n                 } else {\n                     monitor.setStatus(ClusterStatus.Terminating, instanceId);\n                     monitor.terminateAllMembers();\n@@ -319,24 +279,31 @@ protected void onEvent(Event event) {\n                 String instanceId = clusterTerminatedEvent.getInstanceId();\n                 AutoscalerContext asCtx = AutoscalerContext.getInstance();\n                 AbstractClusterMonitor monitor;\n+                ApplicationMonitor appMonitor = null;\n                 monitor = asCtx.getClusterMonitor(clusterId);\n                 if (null == monitor) {\n                     if (log.isDebugEnabled()) {\n                         log.debug(String.format(\"A cluster monitor is not found in autoscaler context \"\n                                 + \"[cluster] %s\", clusterId));\n                     }\n                     // if the cluster monitor is null, assume that its termianted\n-                    ApplicationMonitor appMonitor = AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());\n+                    appMonitor = AutoscalerContext.getInstance().getAppMonitor(clusterTerminatedEvent.getAppId());\n                     if (appMonitor != null) {\n-                        appMonitor.onChildStatusEvent(new ClusterStatusEvent(ClusterStatus.Terminated, clusterId, null));\n+                        appMonitor.onChildStatusEvent(\n+                                new ClusterStatusEvent(ClusterStatus.Terminated,\n+                                                        clusterId, instanceId));\n                     }\n                     return;\n                 }\n                 //changing the status in the monitor, will notify its parent monitor\n                 monitor.setStatus(ClusterStatus.Terminated, instanceId);\n-                //Destroying and Removing the Cluster monitor\n-                monitor.destroy();\n-                AutoscalerContext.getInstance().removeClusterMonitor(clusterId);\n+                monitor.removeInstance(instanceId);\n+                if(!monitor.hasInstance() && appMonitor.isTerminating()) {\n+                    //Destroying and Removing the Cluster monitor\n+                    monitor.destroy();\n+                    AutoscalerContext.getInstance().removeClusterMonitor(clusterId);\n+                }\n+\n             }\n         });\n \n@@ -475,12 +442,23 @@ protected void onEvent(Event event) {\n                                        VMClusterContext clusterContext =\n                                                (VMClusterContext) clusterMonitor.getClusterContext();\n                                        if (clusterContext == null) {\n-                                           clusterMonitor.setClusterContext(\n-                                                   ClusterContextFactory.\n-                                                           getVMClusterContext(instanceId,\n-                                                                   cluster));\n+                                           clusterContext = ClusterContextFactory.\n+                                                   getVMClusterContext(instanceId,\n+                                                           cluster);\n+                                           clusterMonitor.setClusterContext(clusterContext);\n+\n                                        }\n                                        clusterContext.addInstanceContext(instanceId, cluster);\n+                                       if(clusterMonitor.getInstance(instanceId) == null) {\n+                                           ClusterInstance clusterInstance = cluster.\n+                                                   getInstanceContexts(instanceId);\n+                                           ClusterInstance instance = new ClusterInstance(clusterInstance.getAlias(),\n+                                                   cluster.getClusterId(),\n+                                                   clusterInstance.getInstanceId());\n+                                           instance.setParentId(clusterInstance.getParentId());\n+                                           instance.setStatus(clusterInstance.getStatus());\n+                                           clusterMonitor.addInstance(instance);\n+                                       }\n \n \n                                    }\n@@ -496,7 +474,7 @@ protected void onEvent(Event event) {\n                                }\n                            }\n \n-                       } else {\n+                        } else {\n                            log.error(\"Service \" + clusterInstanceCreatedEvent.getServiceName() +\n                                    \" not found, no cluster instance added to ClusterMonitor \" +\n                                    clusterInstanceCreatedEvent.getClusterId());\n@@ -509,7 +487,7 @@ protected void onEvent(Event event) {\n \n                } else {\n                    log.error(\"No Cluster Monitor found for cluster id \" +\n-                           clusterInstanceCreatedEvent.getClusterId());\n+                             clusterInstanceCreatedEvent.getClusterId());\n                }\n            }\n        }\n@@ -526,5 +504,70 @@ public void terminate() {\n         terminated = true;\n     }\n \n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n+\n+\tprivate class ApplicationMonitorAdder implements Runnable {\n+\t\tprivate String appId;\n+\n+\t\tpublic ApplicationMonitorAdder(String appId) {\n+\t\t\tthis.appId = appId;\n+\t\t}\n+\n+\t\tpublic void run() {\n+\t\t\tApplicationMonitor applicationMonitor = null;\n+\t\t\tint retries = 5;\n+\t\t\tboolean success = false;\n+\t\t\tdo {\n+\t\t\t\ttry {\n+\t\t\t\t\tThread.sleep(5000);\n+\t\t\t\t} catch (InterruptedException e1) {\n+\t\t\t\t}\n+\t\t\t\ttry {\n+\t\t\t\t\tlong start = System.currentTimeMillis();\n+\t\t\t\t\tif (log.isDebugEnabled()) {\n+\t\t\t\t\t\tlog.debug(\"application monitor is going to be started for [application] \" +\n+\t\t\t\t\t\t          appId);\n+\t\t\t\t\t}\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tapplicationMonitor = MonitorFactory.getApplicationMonitor(appId);\n+\t\t\t\t\t} catch (PolicyValidationException e) {\n+\t\t\t\t\t\tString msg = \"Application monitor creation failed for Application: \";\n+\t\t\t\t\t\tlog.warn(msg, e);\n+\t\t\t\t\t\tretries--;\n+\t\t\t\t\t}\n+\t\t\t\t\tlong end = System.currentTimeMillis();\n+\t\t\t\t\tlog.info(\"Time taken to start app monitor: \" + (end - start) / 1000);\n+\t\t\t\t\tsuccess = true;\n+\t\t\t\t} catch (DependencyBuilderException e) {\n+\t\t\t\t\tString msg = \"Application monitor creation failed for Application: \";\n+\t\t\t\t\tlog.warn(msg, e);\n+\t\t\t\t\tretries--;\n+\t\t\t\t} catch (TopologyInConsistentException e) {\n+\t\t\t\t\tString msg = \"Application monitor creation failed for Application: \";\n+\t\t\t\t\tlog.warn(msg, e);\n+\t\t\t\t\tretries--;\n+\t\t\t\t}\n+\t\t\t} while (!success && retries != 0);\n+\n+\t\t\tif (applicationMonitor == null) {\n+\t\t\t\tString msg = \"Application monitor creation failed, even after retrying for 5 times, \"\n+\t\t\t\t             + \"for Application: \" + appId;\n+\t\t\t\tlog.error(msg);\n+\t\t\t\tthrow new RuntimeException(msg);\n+\t\t\t}\n+\n+\t\t\tAutoscalerContext.getInstance().addAppMonitor(applicationMonitor);\n+\t\t\tif (log.isInfoEnabled()) {\n+\t\t\t\tlog.info(String.format(\"Application monitor has been added successfully: \" +\n+\t\t\t\t                       \"[application] %s\", applicationMonitor.getId()));\n+\t\t\t}\n+\t\t}\n+\t}\n \n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/event/receiver/topology/AutoscalerTopologyEventReceiver.java",
                "sha": "6251d1880212ea0e67bc1d4d2925d6eab8ff9eee",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/interfaces/AutoScalerServiceInterface.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/interfaces/AutoScalerServiceInterface.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/interfaces/AutoScalerServiceInterface.java",
                "patch": "@@ -42,7 +42,9 @@\n \n     public DeploymentPolicy[] getAllDeploymentPolicies();\n \n-    public boolean addDeploymentPolicy(DeploymentPolicy depPolicy) throws InvalidPolicyException;\n+    public String addDeploymentPolicy(DeploymentPolicy depPolicy) throws InvalidPolicyException;\n+\n+    public boolean undeployDeploymentPolicy(String deploymentPolicyName);\n \n     public boolean updateDeploymentPolicy(DeploymentPolicy depPolicy) throws InvalidPolicyException;\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/interfaces/AutoScalerServiceInterface.java",
                "sha": "3626929e95602594293a5da22d6358621a4746bd",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/internal/AutoscalerServerComponent.java",
                "changes": 139,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/internal/AutoscalerServerComponent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 61,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/internal/AutoscalerServerComponent.java",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.stratos.autoscaler.internal;\n \n+import org.apache.commons.configuration.XMLConfiguration;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n //import org.apache.stratos.autoscaler.NetworkPartitionLbHolder;\n@@ -33,16 +34,20 @@\n import org.apache.stratos.autoscaler.registry.RegistryManager;\n import org.apache.stratos.autoscaler.status.processor.cluster.ClusterStatusProcessorChain;\n import org.apache.stratos.autoscaler.status.processor.group.GroupStatusProcessorChain;\n+import org.apache.stratos.autoscaler.util.ConfUtil;\n import org.apache.stratos.autoscaler.util.ServiceReferenceHolder;\n import org.apache.stratos.cloud.controller.stub.domain.Partition;\n import org.apache.stratos.common.kubernetes.KubernetesGroup;\n+import org.apache.stratos.common.threading.StratosThreadPool;\n+import org.drools.reteoo.PartitionManager;\n import org.osgi.service.component.ComponentContext;\n import org.wso2.carbon.ntask.core.service.TaskService;\n import org.wso2.carbon.registry.api.RegistryException;\n import org.wso2.carbon.registry.core.service.RegistryService;\n \n import java.util.Iterator;\n import java.util.List;\n+import java.util.concurrent.ExecutorService;\n \n /**\n  * @scr.component name=org.apache.stratos.autoscaler.internal.AutoscalerServerComponent\"\n@@ -59,28 +64,39 @@\n \n public class AutoscalerServerComponent {\n \n-    private static final Log log = LogFactory.getLog(AutoscalerServerComponent.class);\n-\n-    private AutoscalerTopologyEventReceiver asTopologyReceiver;\n-    private AutoscalerHealthStatEventReceiver autoscalerHealthStatEventReceiver;\n-\n-    protected void activate(ComponentContext componentContext) throws Exception {\n-        try {\n-            // Start topology receiver\n-            asTopologyReceiver = new AutoscalerTopologyEventReceiver();\n-            Thread topologyTopicSubscriberThread = new Thread(asTopologyReceiver);\n-            topologyTopicSubscriberThread.start();\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Topology receiver thread started\");\n-            }\n-\n-            // Start health stat receiver\n-            autoscalerHealthStatEventReceiver = new AutoscalerHealthStatEventReceiver();\n-            Thread healthDelegatorThread = new Thread(autoscalerHealthStatEventReceiver);\n-            healthDelegatorThread.start();\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Health statistics receiver thread started\");\n-            }\n+\tprivate static final String THREAD_IDENTIFIER_KEY = \"threadPool.autoscaler.identifier\";\n+\tprivate static final String DEFAULT_IDENTIFIER = \"Auto-Scaler\";\n+\tprivate static final String THREAD_POOL_SIZE_KEY = \"threadPool.autoscaler.threadPoolSize\";\n+\tprivate static final String COMPONENTS_CONFIG = \"stratos-config\";\n+\tprivate static final int THREAD_POOL_SIZE = 10;\n+\tprivate static final Log log = LogFactory.getLog(AutoscalerServerComponent.class);\n+\n+\tprivate AutoscalerTopologyEventReceiver asTopologyReceiver;\n+\tprivate AutoscalerHealthStatEventReceiver autoscalerHealthStatEventReceiver;\n+\n+\n+\tprotected void activate(ComponentContext componentContext) throws Exception {\n+\t\ttry {\n+\t\t\t// Start topology receiver\n+\t\t\tXMLConfiguration conf = ConfUtil.getInstance(COMPONENTS_CONFIG).getConfiguration();\n+\t\t\tint threadPoolSize = conf.getInt(THREAD_POOL_SIZE_KEY, THREAD_POOL_SIZE);\n+\t\t\tString threadIdentifier = conf.getString(THREAD_IDENTIFIER_KEY, DEFAULT_IDENTIFIER);\n+\t\t\tExecutorService executorService = StratosThreadPool.getExecutorService(threadIdentifier, threadPoolSize);\n+\t\t\tasTopologyReceiver = new AutoscalerTopologyEventReceiver();\n+\t\t\tasTopologyReceiver.setExecutorService(executorService);\n+\t\t\tasTopologyReceiver.execute();\n+\n+\t\t\tif (log.isDebugEnabled()) {\n+\t\t\t\tlog.debug(\"Topology receiver executor service started\");\n+\t\t\t}\n+\n+\t\t\t// Start health stat receiver\n+\t\t\tautoscalerHealthStatEventReceiver = new AutoscalerHealthStatEventReceiver();\n+\t\t\tautoscalerHealthStatEventReceiver.setExecutorService(executorService);\n+\t\t\tautoscalerHealthStatEventReceiver.execute();\n+\t\t\tif (log.isDebugEnabled()) {\n+\t\t\t\tlog.debug(\"Health statistics receiver thread started\");\n+\t\t\t}\n \n             // Adding the registry stored partitions to the information model\n             List<Partition> partitions = RegistryManager.getInstance().retrievePartitions();\n@@ -89,59 +105,59 @@ protected void activate(ComponentContext componentContext) throws Exception {\n                 Partition partition = partitionIterator.next();\n //                PartitionManager.getInstance().addPartitionToInformationModel(partition);\n             }\n-            \n+\n             // Adding the network partitions stored in registry to the information model\n //            List<NetworkPartitionLbHolder> nwPartitionHolders = RegistryManager.getInstance().retrieveNetworkPartitionLbHolders();\n //            Iterator<NetworkPartitionLbHolder> nwPartitionIterator = nwPartitionHolders.iterator();\n //            while (nwPartitionIterator.hasNext()) {\n //                NetworkPartitionLbHolder nwPartition = nwPartitionIterator.next();\n //                PartitionManager.getInstance().addNetworkPartitionLbHolder(nwPartition);\n //            }\n-            \n+\n             List<AutoscalePolicy> asPolicies = RegistryManager.getInstance().retrieveASPolicies();\n             Iterator<AutoscalePolicy> asPolicyIterator = asPolicies.iterator();\n             while (asPolicyIterator.hasNext()) {\n                 AutoscalePolicy asPolicy = asPolicyIterator.next();\n                 PolicyManager.getInstance().addASPolicyToInformationModel(asPolicy);\n             }\n \n-            List<DeploymentPolicy> depPolicies = RegistryManager.getInstance().retrieveDeploymentPolicies();\n-            Iterator<DeploymentPolicy> depPolicyIterator = depPolicies.iterator();\n-            while (depPolicyIterator.hasNext()) {\n-                DeploymentPolicy depPolicy = depPolicyIterator.next();\n-                PolicyManager.getInstance().addDeploymentPolicyToInformationModel(depPolicy);\n-            }\n-\n-            // Adding KubernetesGroups stored in registry to the information model\n-            List<KubernetesGroup> kubernetesGroupList = RegistryManager.getInstance().retrieveKubernetesGroups();\n-            Iterator<KubernetesGroup> kubernetesGroupIterator = kubernetesGroupList.iterator();\n-            while (kubernetesGroupIterator.hasNext()) {\n-                KubernetesGroup kubernetesGroup = kubernetesGroupIterator.next();\n-                KubernetesManager.getInstance().addNewKubernetesGroup(kubernetesGroup);\n-            }\n-\n-            //starting the processor chain\n-            ClusterStatusProcessorChain clusterStatusProcessorChain = new ClusterStatusProcessorChain();\n-            ServiceReferenceHolder.getInstance().setClusterStatusProcessorChain(clusterStatusProcessorChain);\n-\n-            GroupStatusProcessorChain groupStatusProcessorChain = new GroupStatusProcessorChain();\n-            ServiceReferenceHolder.getInstance().setGroupStatusProcessorChain(groupStatusProcessorChain);\n-\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Scheduling tasks to publish applications\");\n-            }\n-\n-            ApplicationSynchronizerTaskScheduler\n-                    .schedule(ServiceReferenceHolder.getInstance()\n-                            .getTaskService());\n-\n-            if (log.isInfoEnabled()) {\n-                log.info(\"Autoscaler server Component activated\");\n-            }\n-        } catch (Throwable e) {\n-            log.error(\"Error in activating the autoscaler component \", e);\n-        }\n-    }\n+\t\t\tList<DeploymentPolicy> depPolicies = RegistryManager.getInstance().retrieveDeploymentPolicies();\n+\t\t\tIterator<DeploymentPolicy> depPolicyIterator = depPolicies.iterator();\n+\t\t\twhile (depPolicyIterator.hasNext()) {\n+\t\t\t\tDeploymentPolicy depPolicy = depPolicyIterator.next();\n+\t\t\t\tPolicyManager.getInstance().addDeploymentPolicyToInformationModel(depPolicy);\n+\t\t\t}\n+\n+\t\t\t// Adding KubernetesGroups stored in registry to the information model\n+\t\t\tList<KubernetesGroup> kubernetesGroupList = RegistryManager.getInstance().retrieveKubernetesGroups();\n+\t\t\tIterator<KubernetesGroup> kubernetesGroupIterator = kubernetesGroupList.iterator();\n+\t\t\twhile (kubernetesGroupIterator.hasNext()) {\n+\t\t\t\tKubernetesGroup kubernetesGroup = kubernetesGroupIterator.next();\n+\t\t\t\tKubernetesManager.getInstance().addNewKubernetesGroup(kubernetesGroup);\n+\t\t\t}\n+\n+\t\t\t//starting the processor chain\n+\t\t\tClusterStatusProcessorChain clusterStatusProcessorChain = new ClusterStatusProcessorChain();\n+\t\t\tServiceReferenceHolder.getInstance().setClusterStatusProcessorChain(clusterStatusProcessorChain);\n+\n+\t\t\tGroupStatusProcessorChain groupStatusProcessorChain = new GroupStatusProcessorChain();\n+\t\t\tServiceReferenceHolder.getInstance().setGroupStatusProcessorChain(groupStatusProcessorChain);\n+\n+\t\t\tif (log.isInfoEnabled()) {\n+\t\t\t\tlog.info(\"Scheduling tasks to publish applications\");\n+\t\t\t}\n+\n+\t\t\tApplicationSynchronizerTaskScheduler\n+\t\t\t\t\t.schedule(ServiceReferenceHolder.getInstance()\n+\t\t\t\t\t                                .getTaskService());\n+\n+\t\t\tif (log.isInfoEnabled()) {\n+\t\t\t\tlog.info(\"Autoscaler server Component activated\");\n+\t\t\t}\n+\t\t} catch (Throwable e) {\n+\t\t\tlog.error(\"Error in activating the autoscaler component \", e);\n+\t\t}\n+\t}\n \n     protected void deactivate(ComponentContext context) {\n         asTopologyReceiver.terminate();\n@@ -182,3 +198,4 @@ protected void unsetTaskService(TaskService taskService) {\n         ServiceReferenceHolder.getInstance().setTaskService(null);\n     }\n }\n+",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/internal/AutoscalerServerComponent.java",
                "sha": "91d52d331c7cac46f33ce45215840870ed2ec2fe",
                "status": "modified"
            },
            {
                "additions": 70,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/Monitor.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/Monitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/Monitor.java",
                "patch": "@@ -19,6 +19,12 @@\n package org.apache.stratos.autoscaler.monitor;\n \n import org.apache.stratos.autoscaler.monitor.component.ParentComponentMonitor;\n+import org.apache.stratos.messaging.domain.instance.Instance;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Abstract class for the monitoring functionality in autoscaler.\n@@ -34,6 +40,12 @@\n     protected boolean hasStartupDependents;\n     //has scaling dependents\n     protected boolean hasGroupScalingDependent;\n+    //monitors map, key=InstanceId and value=ClusterInstance/GroupInstance/ApplicationInstance\n+    protected Map<String, Instance> instanceIdToInstanceMap;\n+\n+    public Monitor() {\n+        this.instanceIdToInstanceMap = new HashMap<String, Instance>();\n+    }\n \n     /**\n      * Return the id of the monitor\n@@ -125,4 +137,62 @@ public void setHasStartupDependents(boolean hasDependent) {\n     public void setHasGroupScalingDependent(boolean hasDependent) {\n         this.hasGroupScalingDependent = hasDependent;\n     }\n+\n+    /**\n+     * This will add the instance\n+     *\n+     * @param instance instance to be added\n+     */\n+    public void addInstance(Instance instance) {\n+        this.instanceIdToInstanceMap.put(instance.getInstanceId(), instance);\n+\n+    }\n+\n+    /**\n+     * Using instanceId, instance can be retrieved\n+     *\n+     * @param instanceId instance id\n+     * @return the instance\n+     */\n+    public Instance getInstance(String instanceId) {\n+        return this.instanceIdToInstanceMap.get(instanceId);\n+    }\n+\n+    /**\n+     * This will remove the instance\n+     *\n+     * @param instanceId instance id\n+     */\n+    public void removeInstance(String instanceId) {\n+        this.instanceIdToInstanceMap.remove(instanceId);\n+    }\n+\n+    /**\n+     * This will return all the instances which has the same parent id as given\n+     *\n+     * @param parentInstanceId parent instance id\n+     * @return all the instances\n+     */\n+    public List<String> getInstancesByParentInstanceId(String parentInstanceId) {\n+        List<String> instances = new ArrayList<String>();\n+        for (Instance instance : this.instanceIdToInstanceMap.values()) {\n+            if (instance.getParentId().equals(parentInstanceId)) {\n+                instances.add(instance.getInstanceId());\n+            }\n+        }\n+        return instances;\n+    }\n+\n+    /**\n+     * This will check whether instances are there in the map\n+     *\n+     * @return true/false\n+     */\n+    public boolean hasInstance() {\n+        if (this.instanceIdToInstanceMap.isEmpty()) {\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/Monitor.java",
                "sha": "7f17a0721121564bf48eaa44c6cb80a18e484de2",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/MonitorFactory.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/MonitorFactory.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/MonitorFactory.java",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.stratos.autoscaler.monitor;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.autoscaler.applications.ApplicationHolder;\n import org.apache.stratos.autoscaler.applications.dependency.context.ApplicationChildContext;\n import org.apache.stratos.autoscaler.applications.dependency.context.ClusterChildContext;\n@@ -38,6 +40,7 @@\n import org.apache.stratos.messaging.domain.applications.Group;\n import org.apache.stratos.messaging.domain.instance.ApplicationInstance;\n import org.apache.stratos.messaging.domain.instance.GroupInstance;\n+import org.apache.stratos.messaging.domain.instance.Instance;\n import org.apache.stratos.messaging.domain.topology.Cluster;\n import org.apache.stratos.messaging.domain.topology.Service;\n import org.apache.stratos.messaging.domain.topology.Topology;\n@@ -49,6 +52,8 @@\n  * Factory class to get the Monitors.\n  */\n public class MonitorFactory {\n+    private static final Log log = LogFactory.getLog(MonitorFactory.class);\n+\n \n     /**\n      * Factor method used to create relevant monitors based on the given context\n@@ -81,9 +86,20 @@ public static Monitor getMonitor(ParentComponentMonitor parentMonitor,\n                         addClusterMonitor((AbstractClusterMonitor) monitor);\n                 // FIXME: passing null as alias for cluster instance temporarily. should be removed.\n                 for(String parentInstanceId : parentInstanceIds) {\n-                    createClusterInstance(clusterChildCtxt.getServiceName(),\n-                            clusterMonitor.getClusterId(), null,\n-                            parentInstanceId);\n+                    Instance instance = parentMonitor.getInstance(parentInstanceId);\n+                    String partitionId = null;\n+                    if(instance instanceof GroupInstance) {\n+                        partitionId = ((GroupInstance)instance).getPartitionId();\n+                    }\n+                    if(instance != null) {\n+                        createClusterInstance(clusterChildCtxt.getServiceName(),\n+                                clusterMonitor.getClusterId(), null,\n+                                parentInstanceId, partitionId,\n+                                instance.getNetworkPartitionId());\n+                    } else {\n+\n+                    }\n+\n                 }\n \n             }\n@@ -94,8 +110,9 @@ public static Monitor getMonitor(ParentComponentMonitor parentMonitor,\n     }\n \n     private static void createClusterInstance(String serviceType, String clusterId, String alias,\n-                                              String instanceId) {\n-        CloudControllerClient.getInstance().createClusterInstance(serviceType, clusterId, alias, instanceId);\n+                                              String instanceId, String partitionId, String networkPartitionId) {\n+        CloudControllerClient.getInstance().createClusterInstance(serviceType, clusterId, alias,\n+                instanceId, partitionId, networkPartitionId);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/MonitorFactory.java",
                "sha": "63e2b4a5c774565ecd2386255fac42126ef469a8",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/AbstractClusterMonitor.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/AbstractClusterMonitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 10,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/AbstractClusterMonitor.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.stratos.autoscaler.monitor.events.MonitorStatusEvent;\n import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;\n import org.apache.stratos.common.Properties;\n+import org.apache.stratos.common.constants.StratosConstants;\n import org.apache.stratos.messaging.domain.applications.Application;\n import org.apache.stratos.messaging.domain.applications.ApplicationStatus;\n import org.apache.stratos.messaging.domain.applications.Group;\n@@ -63,18 +64,20 @@\n     protected boolean stop = false;\n     private AtomicBoolean monitoringStarted;\n     protected AbstractClusterContext clusterContext;\n+\n+    protected StatefulKnowledgeSession minCheckKnowledgeSession;\n+    protected StatefulKnowledgeSession obsoleteCheckKnowledgeSession;\n+    protected StatefulKnowledgeSession scaleCheckKnowledgeSession;\n+    protected StatefulKnowledgeSession dependentScaleCheckKnowledgeSession;\n+\n     private String clusterId;\n     private ClusterStatus status;\n     private int monitoringIntervalMilliseconds;\n-    private StatefulKnowledgeSession minCheckKnowledgeSession;\n-    private StatefulKnowledgeSession obsoleteCheckKnowledgeSession;\n-    private StatefulKnowledgeSession scaleCheckKnowledgeSession;\n-    private StatefulKnowledgeSession dependentScaleCheckKnowledgeSession;\n     private boolean isDestroyed;\n-    private AutoscalerRuleEvaluator autoscalerRuleEvaluator;\n+    protected AutoscalerRuleEvaluator autoscalerRuleEvaluator;\n     protected String serviceType;\n \n-    protected AbstractClusterMonitor(String serviceType, String clusterId, AutoscalerRuleEvaluator autoscalerRuleEvaluator) {\n+    protected AbstractClusterMonitor(String serviceType, String clusterId) {\n \n         super();\n         this.serviceType = serviceType;\n@@ -83,10 +86,6 @@ protected AbstractClusterMonitor(String serviceType, String clusterId, Autoscale\n         this.monitoringStarted = new AtomicBoolean(false);\n         //this.clusterContext = abstractClusterContext;\n         //this.instanceIdToClusterContextMap = new HashMap<String, AbstractClusterContext>();\n-        this.obsoleteCheckKnowledgeSession = autoscalerRuleEvaluator.getObsoleteCheckStatefulSession();\n-        this.scaleCheckKnowledgeSession = autoscalerRuleEvaluator.getScaleCheckStatefulSession();\n-        this.minCheckKnowledgeSession = autoscalerRuleEvaluator.getMinCheckStatefulSession();\n-        this.dependentScaleCheckKnowledgeSession = autoscalerRuleEvaluator.getMinCheckStatefulSession();\n         this.status = ClusterStatus.Created;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/AbstractClusterMonitor.java",
                "sha": "b094a12ac5a8430400be0c791e10dc8cdd1c7bc3",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/KubernetesClusterMonitor.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/KubernetesClusterMonitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 9,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/KubernetesClusterMonitor.java",
                "patch": "@@ -25,7 +25,9 @@\n import org.apache.stratos.autoscaler.client.CloudControllerClient;\n import org.apache.stratos.autoscaler.exception.cartridge.TerminationException;\n import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;\n+import org.apache.stratos.common.constants.StratosConstants;\n import org.apache.stratos.messaging.domain.topology.Cluster;\n+import org.apache.stratos.messaging.domain.topology.ClusterStatus;\n import org.apache.stratos.messaging.domain.topology.Member;\n import org.apache.stratos.messaging.domain.topology.Service;\n import org.apache.stratos.messaging.event.health.stat.AverageLoadAverageEvent;\n@@ -51,6 +53,7 @@\n import org.apache.stratos.messaging.event.topology.MemberStartedEvent;\n import org.apache.stratos.messaging.event.topology.MemberTerminatedEvent;\n import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;\n+import org.drools.runtime.StatefulKnowledgeSession;\n \n /*\n  * Every kubernetes cluster monitor should extend this class\n@@ -59,12 +62,28 @@\n \n     private static final Log log = LogFactory.getLog(KubernetesClusterMonitor.class);\n \n-    private KubernetesClusterContext kubernetesClusterCtxt;\n+    private StatefulKnowledgeSession dependentScaleCheckKnowledgeSession;\n \n     protected KubernetesClusterMonitor(String serviceType, String clusterId,\n                                        AutoscalerRuleEvaluator autoscalerRuleEvaluator) {\n \n-        super(serviceType, clusterId, autoscalerRuleEvaluator);\n+        super(serviceType, clusterId);\n+\n+        autoscalerRuleEvaluator = new AutoscalerRuleEvaluator();\n+        autoscalerRuleEvaluator.parseAndBuildKnowledgeBaseForDroolsFile(StratosConstants.CONTAINER_OBSOLETE_CHECK_DROOL_FILE);\n+        autoscalerRuleEvaluator.parseAndBuildKnowledgeBaseForDroolsFile(StratosConstants.CONTAINER_SCALE_CHECK_DROOL_FILE);\n+        autoscalerRuleEvaluator.parseAndBuildKnowledgeBaseForDroolsFile(StratosConstants.CONTAINER_MIN_CHECK_DROOL_FILE);\n+        autoscalerRuleEvaluator.parseAndBuildKnowledgeBaseForDroolsFile(StratosConstants.DEPENDENT_SCALE_CHECK_DROOL_FILE);\n+\n+        this.obsoleteCheckKnowledgeSession = autoscalerRuleEvaluator.getStatefulSession(\n+                StratosConstants.CONTAINER_OBSOLETE_CHECK_DROOL_FILE);\n+        this.scaleCheckKnowledgeSession = autoscalerRuleEvaluator.getStatefulSession(\n+                StratosConstants.CONTAINER_SCALE_CHECK_DROOL_FILE);\n+        this.minCheckKnowledgeSession = autoscalerRuleEvaluator.getStatefulSession(\n+                StratosConstants.CONTAINER_MIN_CHECK_DROOL_FILE);\n+        this.dependentScaleCheckKnowledgeSession = autoscalerRuleEvaluator.getStatefulSession(\n+                StratosConstants.DEPENDENT_SCALE_CHECK_DROOL_FILE);\n+\n         //this.kubernetesClusterCtxt = kubernetesClusterContext;\n     }\n \n@@ -467,15 +486,9 @@ public void handleClusterRemovedEvent(\n     }\n \n     public KubernetesClusterContext getKubernetesClusterCtxt() {\n-        return kubernetesClusterCtxt;\n+        return (KubernetesClusterContext) getClusterContext();\n     }\n \n-    public void setKubernetesClusterCtxt(\n-            KubernetesClusterContext kubernetesClusterCtxt) {\n-        this.kubernetesClusterCtxt = kubernetesClusterCtxt;\n-    }\n-\n-\n     private Member getMemberByMemberId(String memberId) {\n         try {\n             TopologyManager.acquireReadLock();",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/KubernetesClusterMonitor.java",
                "sha": "8297e557c04bfdab7c03f1a518656d0596c239f8",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/KubernetesServiceClusterMonitor.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/KubernetesServiceClusterMonitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 11,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/KubernetesServiceClusterMonitor.java",
                "patch": "@@ -47,10 +47,7 @@\n \n     public KubernetesServiceClusterMonitor(String serviceType, String clusterId) {\n         super(serviceType, clusterId,\n-                new AutoscalerRuleEvaluator(\n-                        StratosConstants.CONTAINER_MIN_CHECK_DROOL_FILE,\n-                        StratosConstants.CONTAINER_OBSOLETE_CHECK_DROOL_FILE,\n-                        StratosConstants.CONTAINER_SCALE_CHECK_DROOL_FILE));\n+                new AutoscalerRuleEvaluator());\n         readConfigurations();\n     }\n \n@@ -114,7 +111,7 @@ private void scaleCheck(String instanceId) {\n                 log.debug(String.format(\n                         \"Running scale check for [kub-cluster] : %s [cluster] : %s \", kubernetesClusterID, getClusterId()));\n             }\n-            scaleCheckFactHandle = AutoscalerRuleEvaluator.evaluateScaleCheck(\n+            scaleCheckFactHandle = AutoscalerRuleEvaluator.evaluate(\n                     getScaleCheckKnowledgeSession(), scaleCheckFactHandle, getKubernetesClusterCtxt());\n             getKubernetesClusterCtxt().setRifReset(false);\n             getKubernetesClusterCtxt().setMemoryConsumptionReset(false);\n@@ -137,19 +134,19 @@ private void minCheck() {\n             log.debug(String.format(\n                     \"Running min check for [kub-cluster] : %s [cluster] : %s \", kubernetesClusterID, getClusterId()));\n         }\n-        minCheckFactHandle = AutoscalerRuleEvaluator.evaluateMinCheck(\n+        minCheckFactHandle = AutoscalerRuleEvaluator.evaluate(\n                 getMinCheckKnowledgeSession(), minCheckFactHandle,\n                 getKubernetesClusterCtxt());\n     }\n \n     private void obsoleteCheck() {\n-        getMinCheckKnowledgeSession().setGlobal(\"clusterId\", getClusterId());\n+        getObsoleteCheckKnowledgeSession().setGlobal(\"clusterId\", getClusterId());\n         String kubernetesClusterID = getKubernetesClusterCtxt().getKubernetesClusterID();\n         if (log.isDebugEnabled()) {\n             log.debug(String.format(\n                     \"Running obsolete check for [kub-cluster] : %s [cluster] : %s \", kubernetesClusterID, getClusterId()));\n         }\n-        obsoleteCheckFactHandle = AutoscalerRuleEvaluator.evaluateMinCheck(\n+        obsoleteCheckFactHandle = AutoscalerRuleEvaluator.evaluate(\n                 getObsoleteCheckKnowledgeSession(), obsoleteCheckFactHandle,\n                 getKubernetesClusterCtxt());\n     }\n@@ -178,9 +175,7 @@ protected void readConfigurations() {\n \n     @Override\n     public String toString() {\n-        return \"KubernetesServiceClusterMonitor \"\n-                + \"[ kubernetesHostClusterId=\" + getKubernetesClusterCtxt().getKubernetesClusterID()\n-                + \", clusterId=\" + getClusterId() + \"]\";\n+        return \"KubernetesServiceClusterMonitor for \" + \"[ clusterId=\" + getClusterId() + \"]\";\n     }\n \n     public String getLbReferenceType() {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/KubernetesServiceClusterMonitor.java",
                "sha": "e744cb8d4abe3c2c4fd4a7d888b12a3a7799975d",
                "status": "modified"
            },
            {
                "additions": 147,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/VMClusterMonitor.java",
                "changes": 281,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/VMClusterMonitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 134,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/VMClusterMonitor.java",
                "patch": "@@ -18,45 +18,45 @@\n  */\n package org.apache.stratos.autoscaler.monitor.cluster;\n \n-import java.util.*;\n-\n import org.apache.commons.configuration.XMLConfiguration;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.autoscaler.client.CloudControllerClient;\n import org.apache.stratos.autoscaler.context.cluster.ClusterInstanceContext;\n import org.apache.stratos.autoscaler.context.cluster.VMClusterContext;\n import org.apache.stratos.autoscaler.context.member.MemberStatsContext;\n-import org.apache.stratos.autoscaler.context.partition.network.ClusterLevelNetworkPartitionContext;\n import org.apache.stratos.autoscaler.context.partition.ClusterLevelPartitionContext;\n+import org.apache.stratos.autoscaler.context.partition.network.ClusterLevelNetworkPartitionContext;\n import org.apache.stratos.autoscaler.event.publisher.ClusterStatusEventPublisher;\n import org.apache.stratos.autoscaler.exception.InvalidArgumentException;\n import org.apache.stratos.autoscaler.exception.cartridge.TerminationException;\n import org.apache.stratos.autoscaler.monitor.events.MonitorScalingEvent;\n import org.apache.stratos.autoscaler.monitor.events.MonitorStatusEvent;\n import org.apache.stratos.autoscaler.monitor.events.builder.MonitorStatusEventBuilder;\n import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;\n-import org.apache.stratos.autoscaler.status.processor.StatusChecker;\n+import org.apache.stratos.autoscaler.status.processor.cluster.ClusterStatusTerminatedProcessor;\n+import org.apache.stratos.autoscaler.status.processor.cluster.ClusterStatusActiveProcessor;\n+import org.apache.stratos.autoscaler.status.processor.cluster.ClusterStatusInActiveProcessor;\n import org.apache.stratos.autoscaler.util.AutoScalerConstants;\n import org.apache.stratos.autoscaler.util.AutoscalerUtil;\n import org.apache.stratos.autoscaler.util.ConfUtil;\n+import org.apache.stratos.autoscaler.util.ServiceReferenceHolder;\n import org.apache.stratos.cloud.controller.stub.domain.MemberContext;\n import org.apache.stratos.common.Properties;\n import org.apache.stratos.common.Property;\n import org.apache.stratos.common.constants.StratosConstants;\n import org.apache.stratos.messaging.domain.applications.ApplicationStatus;\n import org.apache.stratos.messaging.domain.applications.GroupStatus;\n import org.apache.stratos.messaging.domain.topology.Cluster;\n+import org.apache.stratos.messaging.domain.topology.ClusterStatus;\n import org.apache.stratos.messaging.domain.topology.Member;\n import org.apache.stratos.messaging.domain.topology.Service;\n import org.apache.stratos.messaging.event.health.stat.*;\n-import org.apache.stratos.messaging.event.topology.ClusterRemovedEvent;\n-import org.apache.stratos.messaging.event.topology.MemberActivatedEvent;\n-import org.apache.stratos.messaging.event.topology.MemberMaintenanceModeEvent;\n-import org.apache.stratos.messaging.event.topology.MemberReadyToShutdownEvent;\n-import org.apache.stratos.messaging.event.topology.MemberStartedEvent;\n-import org.apache.stratos.messaging.event.topology.MemberTerminatedEvent;\n+import org.apache.stratos.messaging.event.topology.*;\n import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;\n+import org.drools.runtime.StatefulKnowledgeSession;\n+\n+import java.util.*;\n \n /**\n  * Is responsible for monitoring a service cluster. This runs periodically\n@@ -71,20 +71,40 @@\n     private float scalingFactorBasedOnDependencies = 1.0f;\n \n     protected VMClusterMonitor(String serviceType, String clusterId) {\n-        super(serviceType, clusterId, new AutoscalerRuleEvaluator(\n-                StratosConstants.VM_MIN_CHECK_DROOL_FILE,\n-                StratosConstants.VM_OBSOLETE_CHECK_DROOL_FILE,\n-                StratosConstants.VM_SCALE_CHECK_DROOL_FILE));\n+        super(serviceType, clusterId);\n         this.networkPartitionIdToClusterLevelNetworkPartitionCtxts = new HashMap<String, ClusterLevelNetworkPartitionContext>();\n \n         readConfigurations();\n+        autoscalerRuleEvaluator = new AutoscalerRuleEvaluator();\n+        autoscalerRuleEvaluator.parseAndBuildKnowledgeBaseForDroolsFile(StratosConstants.VM_OBSOLETE_CHECK_DROOL_FILE);\n+        autoscalerRuleEvaluator.parseAndBuildKnowledgeBaseForDroolsFile(StratosConstants.VM_SCALE_CHECK_DROOL_FILE);\n+        autoscalerRuleEvaluator.parseAndBuildKnowledgeBaseForDroolsFile(StratosConstants.VM_MIN_CHECK_DROOL_FILE);\n+        //autoscalerRuleEvaluator.parseAndBuildKnowledgeBaseForDroolsFile(StratosConstants.DEPENDENT_SCALE_CHECK_DROOL_FILE);\n+\n+        this.obsoleteCheckKnowledgeSession = autoscalerRuleEvaluator.getStatefulSession(\n+                StratosConstants.VM_OBSOLETE_CHECK_DROOL_FILE);\n+        this.scaleCheckKnowledgeSession = autoscalerRuleEvaluator.getStatefulSession(\n+                StratosConstants.VM_SCALE_CHECK_DROOL_FILE);\n+        this.minCheckKnowledgeSession = autoscalerRuleEvaluator.getStatefulSession(\n+                StratosConstants.VM_MIN_CHECK_DROOL_FILE);\n+        /*this.dependentScaleCheckKnowledgeSession = autoscalerRuleEvaluator.getStatefulSession(\n+                StratosConstants.DEPENDENT_SCALE_CHECK_DROOL_FILE);*/\n     }\n \n-    public void addClusterLevelNWPartitionContext (ClusterLevelNetworkPartitionContext clusterLevelNWPartitionCtxt) {\n+    private static void terminateMember(String memberId) {\n+        try {\n+            CloudControllerClient.getInstance().terminate(memberId);\n+\n+        } catch (TerminationException e) {\n+            log.error(\"Unable to terminate member [member id ] \" + memberId, e);\n+        }\n+    }\n+\n+    public void addClusterLevelNWPartitionContext(ClusterLevelNetworkPartitionContext clusterLevelNWPartitionCtxt) {\n         networkPartitionIdToClusterLevelNetworkPartitionCtxts.put(clusterLevelNWPartitionCtxt.getId(), clusterLevelNWPartitionCtxt);\n     }\n \n-    public ClusterLevelNetworkPartitionContext getClusterLevelNWPartitionContext (String nwPartitionId) {\n+    public ClusterLevelNetworkPartitionContext getClusterLevelNWPartitionContext(String nwPartitionId) {\n         return networkPartitionIdToClusterLevelNetworkPartitionCtxts.get(nwPartitionId);\n     }\n \n@@ -164,109 +184,110 @@ private boolean isPrimaryMember(MemberContext memberContext) {\n \n     public void monitor() {\n \n-        final Collection<ClusterLevelNetworkPartitionContext> clusterLevelNetworkPartitionContexts =\n-                ((VMClusterContext) this.clusterContext).getNetworkPartitionCtxts().values();\n+        for (ClusterLevelNetworkPartitionContext networkPartitionContext : getNetworkPartitionCtxts()) {\n \n-        Runnable monitoringRunnable = new Runnable() {\n-            @Override\n-            public void run() {\n+            final Collection<ClusterInstanceContext> clusterInstanceContexts = networkPartitionContext.\n+                    getClusterInstanceContextMap().values();\n \n-                for (ClusterLevelNetworkPartitionContext networkPartitionContext :\n-                        clusterLevelNetworkPartitionContexts) {\n+            for (final ClusterInstanceContext instanceContext : clusterInstanceContexts ) {\n \n-                    for (ClusterInstanceContext instanceContext : networkPartitionContext.\n-                            getClusterInstanceContextMap().values()) {\n+                Runnable monitoringRunnable = new Runnable() {\n+                    @Override\n+                    public void run() {\n \n-                        // store primary members in the cluster instance context\n-                        List<String> primaryMemberListInClusterInstance = new ArrayList<String>();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Monitor is running for [cluster] : \" + getClusterId());\n+                    }\n \n-                        //FIXME to check the status of the instance\n-                        if (true) {\n+                    // store primary members in the cluster instance context\n+                    List<String> primaryMemberListInClusterInstance = new ArrayList<String>();\n \n-                            for (ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {\n+                    //FIXME to check the status of the instance\n+                    if (true) {\n \n-                                // get active primary members in this cluster instance context\n-                                for (MemberContext memberContext : partitionContext.getActiveMembers()) {\n-                                    if (isPrimaryMember(memberContext)) {\n-                                        primaryMemberListInClusterInstance.add(memberContext.getMemberId());\n-                                    }\n-                                }\n+                        for (ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {\n \n-                                // get pending primary members in this cluster instance context\n-                                for (MemberContext memberContext : partitionContext.getPendingMembers()) {\n-                                    if (isPrimaryMember(memberContext)) {\n-                                        primaryMemberListInClusterInstance.add(memberContext.getMemberId());\n-                                    }\n+                            // get active primary members in this cluster instance context\n+                            for (MemberContext memberContext : partitionContext.getActiveMembers()) {\n+                                if (isPrimaryMember(memberContext)) {\n+                                    primaryMemberListInClusterInstance.add(memberContext.getMemberId());\n                                 }\n                             }\n \n-                            getMinCheckKnowledgeSession().setGlobal(\"clusterId\", getClusterId());\n-                            getMinCheckKnowledgeSession().setGlobal(\"isPrimary\", hasPrimary);\n-                            getMinCheckKnowledgeSession().setGlobal(\"algorithmName\",\n-                                    networkPartitionContext.getPartitionAlgorithm());\n-\n-                            if (log.isDebugEnabled()) {\n-                                log.debug(String.format(\"Running minimum check for cluster instance %s \",\n-                                        instanceContext.getId()));\n+                            // get pending primary members in this cluster instance context\n+                            for (MemberContext memberContext : partitionContext.getPendingMembers()) {\n+                                if (isPrimaryMember(memberContext)) {\n+                                    primaryMemberListInClusterInstance.add(memberContext.getMemberId());\n+                                }\n                             }\n+                        }\n \n-                            minCheckFactHandle = AutoscalerRuleEvaluator.evaluateMinCheck(getMinCheckKnowledgeSession(),\n-                                    minCheckFactHandle, instanceContext);\n+                        getMinCheckKnowledgeSession().setGlobal(\"clusterId\", getClusterId());\n+                        getMinCheckKnowledgeSession().setGlobal(\"isPrimary\", hasPrimary);\n+                        getMinCheckKnowledgeSession().setGlobal(\"algorithmName\",\n+                                instanceContext.getPartitionAlgorithm());\n \n-                            obsoleteCheckFactHandle = AutoscalerRuleEvaluator.evaluateObsoleteCheck(\n-                                    getObsoleteCheckKnowledgeSession(), obsoleteCheckFactHandle, instanceContext);\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(String.format(\"Running minimum check for cluster instance %s \",\n+                                    instanceContext.getId()));\n+                        }\n \n-                            //checking the status of the cluster\n-                            boolean rifReset = instanceContext.isRifReset();\n-                            boolean memoryConsumptionReset = instanceContext.isMemoryConsumptionReset();\n-                            boolean loadAverageReset = instanceContext.isLoadAverageReset();\n+                        minCheckFactHandle = AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),\n+                                minCheckFactHandle, instanceContext);\n \n-                            if (log.isDebugEnabled()) {\n-                                log.debug(\"Is rif Reset: \" + rifReset\n-                                        + \" Is memoryConsumption Reset: \" + memoryConsumptionReset\n-                                        + \" Is loadAverage Reset: \" + loadAverageReset);\n-                            }\n-                            if (rifReset || memoryConsumptionReset || loadAverageReset) {\n+                        obsoleteCheckFactHandle = AutoscalerRuleEvaluator.evaluate(\n+                                getObsoleteCheckKnowledgeSession(), obsoleteCheckFactHandle, instanceContext);\n \n+                        //checking the status of the cluster\n+                        boolean rifReset = instanceContext.isRifReset();\n+                        boolean memoryConsumptionReset = instanceContext.isMemoryConsumptionReset();\n+                        boolean loadAverageReset = instanceContext.isLoadAverageReset();\n \n-                                VMClusterContext vmClusterContext = (VMClusterContext) clusterContext;\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(\"Execution point of scaling Rule, [Is rif Reset] : \" + rifReset\n+                                    + \" [Is memoryConsumption Reset] : \" + memoryConsumptionReset\n+                                    + \" [Is loadAverage Reset] : \" + loadAverageReset);\n+                        }\n+                        if (rifReset || memoryConsumptionReset || loadAverageReset) {\n \n-                                getScaleCheckKnowledgeSession().setGlobal(\"instance\", instanceContext);\n-                                getScaleCheckKnowledgeSession().setGlobal(\"clusterId\", getClusterId());\n-                                getScaleCheckKnowledgeSession().setGlobal(\"autoscalePolicy\",\n-                                        vmClusterContext.getAutoscalePolicy());\n-                                getScaleCheckKnowledgeSession().setGlobal(\"rifReset\", rifReset);\n-                                getScaleCheckKnowledgeSession().setGlobal(\"mcReset\", memoryConsumptionReset);\n-                                getScaleCheckKnowledgeSession().setGlobal(\"laReset\", loadAverageReset);\n-                                getScaleCheckKnowledgeSession().setGlobal(\"isPrimary\", false);\n-                                getScaleCheckKnowledgeSession().setGlobal(\"primaryMembers\", primaryMemberListInClusterInstance);\n \n-                                if (log.isDebugEnabled()) {\n-                                    log.debug(String.format(\"Running scale check for network partition %s \",\n-                                            networkPartitionContext.getId()));\n-                                    log.debug(\" Primary members : \" + primaryMemberListInClusterInstance);\n-                                }\n+                            VMClusterContext vmClusterContext = (VMClusterContext) clusterContext;\n \n-                                scaleCheckFactHandle = AutoscalerRuleEvaluator.evaluateScaleCheck(getScaleCheckKnowledgeSession()\n-                                        , scaleCheckFactHandle, networkPartitionContext);\n+                            getScaleCheckKnowledgeSession().setGlobal(\"instance\", instanceContext);\n+                            getScaleCheckKnowledgeSession().setGlobal(\"clusterId\", getClusterId());\n+                            getScaleCheckKnowledgeSession().setGlobal(\"autoscalePolicy\",\n+                                    vmClusterContext.getAutoscalePolicy());\n+                            getScaleCheckKnowledgeSession().setGlobal(\"rifReset\", rifReset);\n+                            getScaleCheckKnowledgeSession().setGlobal(\"mcReset\", memoryConsumptionReset);\n+                            getScaleCheckKnowledgeSession().setGlobal(\"laReset\", loadAverageReset);\n+                            getScaleCheckKnowledgeSession().setGlobal(\"isPrimary\", false);\n+                            getScaleCheckKnowledgeSession().setGlobal(\"primaryMembers\", primaryMemberListInClusterInstance);\n+                            getMinCheckKnowledgeSession().setGlobal(\"algorithmName\",\n+                                    instanceContext.getPartitionAlgorithm());\n \n-                                instanceContext.setRifReset(false);\n-                                instanceContext.setMemoryConsumptionReset(false);\n-                                instanceContext.setLoadAverageReset(false);\n-                            } else if (log.isDebugEnabled()) {\n-                                log.debug(String.format(\"Scale rule will not run since the LB statistics have not \" +\n-                                        \"received before this cycle for network partition %s\",\n-                                        networkPartitionContext.getId()));\n+                            if (log.isDebugEnabled()) {\n+                                log.debug(String.format(\"Running scale check for [cluster instance context] %s \",\n+                                        instanceContext.getId()));\n+                                log.debug(\" Primary members : \" + primaryMemberListInClusterInstance);\n                             }\n \n+                            scaleCheckFactHandle = AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession()\n+                                    , scaleCheckFactHandle, instanceContext);\n \n+                            instanceContext.setRifReset(false);\n+                            instanceContext.setMemoryConsumptionReset(false);\n+                            instanceContext.setLoadAverageReset(false);\n+                        } else if (log.isDebugEnabled()) {\n+                            log.debug(String.format(\"Scale rule will not run since the LB statistics have not \" +\n+                                            \"received before this cycle for [cluster instance context] %s \",\n+                                    instanceContext.getId()));\n                         }\n                     }\n-                }\n-\n+                    }\n+                };\n+                monitoringRunnable.run();\n             }\n-        };\n-        monitoringRunnable.run();\n+        }\n     }\n \n     @Override\n@@ -291,13 +312,6 @@ public void destroy() {\n         }\n     }\n \n-    @Override\n-    public String toString() {\n-        return \"VMClusterMonitor [clusterId=\" + getClusterId() +\n-//                \", lbReferenceType=\" + lbReferenceType +\n-                \", hasPrimary=\" + hasPrimary + \" ]\";\n-    }\n-\n //    public String getLbReferenceType() {\n //        return lbReferenceType;\n //    }\n@@ -306,6 +320,13 @@ public String toString() {\n //        this.lbReferenceType = lbReferenceType;\n //    }\n \n+    @Override\n+    public String toString() {\n+        return \"VMClusterMonitor [clusterId=\" + getClusterId() +\n+//                \", lbReferenceType=\" + lbReferenceType +\n+                \", hasPrimary=\" + hasPrimary + \" ]\";\n+    }\n+\n     public boolean isHasPrimary() {\n         return hasPrimary;\n     }\n@@ -351,30 +372,29 @@ public void onParentScalingEvent(MonitorScalingEvent scalingEvent) {\n         VMClusterContext vmClusterContext = (VMClusterContext) clusterContext;\n         String instanceId = scalingEvent.getInstanceId();\n \n-        ClusterInstanceContext clusterLevelNetworkPartitionContext =\n+        ClusterInstanceContext clusterInstanceContext =\n                 getClusterInstanceContext(scalingEvent.getNetworkPartitionId(), instanceId);\n \n \n         //TODO get min instance count from instance context\n-        float requiredInstanceCount = 0 ;/* = clusterLevelNetworkPartitionContext.getMinInstanceCount() * scalingFactorBasedOnDependencies;*/\n+        float requiredInstanceCount = clusterInstanceContext.getMinInstanceCount() * scalingFactorBasedOnDependencies;\n         int roundedRequiredInstanceCount = getRoundedInstanceCount(requiredInstanceCount,\n                 vmClusterContext.getAutoscalePolicy().getInstanceRoundingFactor());\n-        clusterLevelNetworkPartitionContext.setRequiredInstanceCountBasedOnDependencies(roundedRequiredInstanceCount);\n+        clusterInstanceContext.setRequiredInstanceCountBasedOnDependencies(roundedRequiredInstanceCount);\n \n         getDependentScaleCheckKnowledgeSession().setGlobal(\"clusterId\", getClusterId());\n-        getDependentScaleCheckKnowledgeSession().setGlobal(\"scalingFactor\", scalingFactorBasedOnDependencies);\n-        getDependentScaleCheckKnowledgeSession().setGlobal(\"instanceRoundingFactor\",\n-                vmClusterContext.getAutoscalePolicy().getInstanceRoundingFactor());\n+        getDependentScaleCheckKnowledgeSession().setGlobal(\"roundedRequiredInstanceCount\", roundedRequiredInstanceCount);\n \n-        dependentScaleCheckFactHandle = AutoscalerRuleEvaluator.evaluateScaleCheck(getScaleCheckKnowledgeSession()\n-                , scaleCheckFactHandle, clusterLevelNetworkPartitionContext);\n+        dependentScaleCheckFactHandle = AutoscalerRuleEvaluator.evaluate(getScaleCheckKnowledgeSession()\n+                , scaleCheckFactHandle, clusterInstanceContext);\n \n     }\n \n     public void sendClusterScalingEvent(String networkPartitionId, float factor) {\n \n         MonitorStatusEventBuilder.handleClusterScalingEvent(this.parent, networkPartitionId, factor, this.id);\n     }\n+\n     @Override\n     public void handleGradientOfLoadAverageEvent(\n             GradientOfLoadAverageEvent gradientOfLoadAverageEvent) {\n@@ -412,7 +432,7 @@ public void handleSecondDerivativeOfLoadAverageEvent(\n                     + \"[network-partition] %s [value] %s\", clusterId, networkPartitionId, value));\n         }\n         ClusterInstanceContext clusterLevelNetworkPartitionContext = getClusterInstanceContext(instanceId,\n-                                                                        networkPartitionId);\n+                networkPartitionId);\n         if (null != clusterLevelNetworkPartitionContext) {\n             clusterLevelNetworkPartitionContext.setLoadAverageSecondDerivative(value);\n         } else {\n@@ -511,7 +531,7 @@ public void handleAverageRequestsServingCapabilityEvent(\n \n         ClusterInstanceContext clusterLevelNetworkPartitionContext = getClusterInstanceContext(instanceId,\n                 networkPartitionId);\n-        if(null != clusterLevelNetworkPartitionContext){\n+        if (null != clusterLevelNetworkPartitionContext) {\n             clusterLevelNetworkPartitionContext.setAverageRequestsServedPerInstance(floatValue);\n \n         } else {\n@@ -612,7 +632,7 @@ public void handleMemberAverageMemoryConsumptionEvent(\n         ClusterInstanceContext networkPartitionCtxt = getClusterInstanceContext(instanceId,\n                 networkPartitionId);\n         ClusterLevelPartitionContext partitionCtxt = networkPartitionCtxt.getPartitionCtxt(\n-                                                                member.getPartitionId());\n+                member.getPartitionId());\n         MemberStatsContext memberStatsContext = partitionCtxt.getMemberStatsContext(memberId);\n         if (null == memberStatsContext) {\n             if (log.isDebugEnabled()) {\n@@ -635,7 +655,7 @@ public void handleMemberGradientOfMemoryConsumptionEvent(\n         ClusterInstanceContext networkPartitionCtxt = getClusterInstanceContext(instanceId,\n                 networkPartitionId);\n         ClusterLevelPartitionContext partitionCtxt = networkPartitionCtxt.getPartitionCtxt(\n-                                                                            member.getPartitionId());\n+                member.getPartitionId());\n         MemberStatsContext memberStatsContext = partitionCtxt.getMemberStatsContext(memberId);\n         if (null == memberStatsContext) {\n             if (log.isDebugEnabled()) {\n@@ -664,7 +684,7 @@ public void handleMemberAverageLoadAverageEvent(\n         ClusterInstanceContext networkPartitionCtxt = getClusterInstanceContext(instanceId,\n                 networkPartitionId);\n         ClusterLevelPartitionContext partitionCtxt = networkPartitionCtxt.getPartitionCtxt(\n-                                                                            member.getPartitionId());\n+                member.getPartitionId());\n         MemberStatsContext memberStatsContext = partitionCtxt.getMemberStatsContext(memberId);\n         if (null == memberStatsContext) {\n             if (log.isDebugEnabled()) {\n@@ -687,7 +707,7 @@ public void handleMemberGradientOfLoadAverageEvent(\n         ClusterInstanceContext networkPartitionCtxt = getClusterInstanceContext(instanceId,\n                 networkPartitionId);\n         ClusterLevelPartitionContext partitionCtxt = networkPartitionCtxt.getPartitionCtxt(\n-                                                                            member.getPartitionId());\n+                member.getPartitionId());\n         MemberStatsContext memberStatsContext = partitionCtxt.getMemberStatsContext(memberId);\n         if (null == memberStatsContext) {\n             if (log.isDebugEnabled()) {\n@@ -711,7 +731,7 @@ public void handleMemberSecondDerivativeOfLoadAverageEvent(\n         ClusterInstanceContext networkPartitionCtxt = getClusterInstanceContext(instanceId,\n                 networkPartitionId);\n         ClusterLevelPartitionContext partitionCtxt = networkPartitionCtxt.getPartitionCtxt(\n-                                                                            member.getPartitionId());\n+                member.getPartitionId());\n         MemberStatsContext memberStatsContext = partitionCtxt.getMemberStatsContext(memberId);\n         if (null == memberStatsContext) {\n             if (log.isDebugEnabled()) {\n@@ -727,6 +747,7 @@ public void handleMemberSecondDerivativeOfLoadAverageEvent(\n     public void handleMemberFaultEvent(MemberFaultEvent memberFaultEvent) {\n \n         String memberId = memberFaultEvent.getMemberId();\n+        String clusterId = memberFaultEvent.getClusterId();\n         Member member = getMemberByMemberId(memberId);\n         String instanceId = memberFaultEvent.getInstanceId();\n         String networkPartitionId = memberFaultEvent.getNetworkPartitionId();\n@@ -762,13 +783,12 @@ public void handleMemberFaultEvent(MemberFaultEvent memberFaultEvent) {\n             partitionCtxt.moveMemberToObsoleteList(memberId);\n         }\n         if (log.isInfoEnabled()) {\n-            String clusterId = memberFaultEvent.getClusterId();\n             log.info(String.format(\"Faulty member is added to obsolete list and removed from the active members list: \"\n                     + \"[member] %s [partition] %s [cluster] %s \", memberId, partitionId, clusterId));\n         }\n \n-        StatusChecker.getInstance().onMemberFaultEvent(memberFaultEvent.getClusterId(),\n-                partitionId, instanceId);\n+        ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(\n+                ClusterStatusInActiveProcessor.class.getName(), clusterId, instanceId);\n     }\n \n     @Override\n@@ -782,6 +802,7 @@ public void handleMemberActivatedEvent(\n             MemberActivatedEvent memberActivatedEvent) {\n \n         String instanceId = memberActivatedEvent.getInstanceId();\n+        String clusterId = memberActivatedEvent.getClusterId();\n         String networkPartitionId = memberActivatedEvent.getNetworkPartitionId();\n         String partitionId = memberActivatedEvent.getPartitionId();\n         String memberId = memberActivatedEvent.getMemberId();\n@@ -795,7 +816,8 @@ public void handleMemberActivatedEvent(\n                     + \"[member] %s\", memberId));\n         }\n         clusterLevelPartitionContext.movePendingMemberToActiveMembers(memberId);\n-        StatusChecker.getInstance().onMemberStatusChange(memberActivatedEvent.getClusterId());\n+        ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(\n+                ClusterStatusActiveProcessor.class.getName(), clusterId, instanceId);\n     }\n \n     @Override\n@@ -809,7 +831,7 @@ public void handleMemberMaintenanceModeEvent(\n         ClusterInstanceContext networkPartitionCtxt = getClusterInstanceContext(instanceId,\n                 networkPartitionId);\n         ClusterLevelPartitionContext clusterMonitorPartitionContext = networkPartitionCtxt.\n-                                        getPartitionCtxt(partitionId);\n+                getPartitionCtxt(partitionId);\n         clusterMonitorPartitionContext.addMemberStatsContext(new MemberStatsContext(memberId));\n         if (log.isDebugEnabled()) {\n             log.debug(String.format(\"Member has been moved as pending termination: \"\n@@ -855,15 +877,14 @@ public void handleMemberReadyToShutdownEvent(MemberReadyToShutdownEvent memberRe\n \n             if (log.isInfoEnabled()) {\n                 log.info(String.format(\"Member is terminated and removed from the active members list: [member] %s \" +\n-                                \"[partition] %s [cluster] %s \", memberId, partitionId, clusterId));\n+                        \"[partition] %s [cluster] %s \", memberId, partitionId, clusterId));\n             }\n         } catch (Exception e) {\n             String msg = \"Error processing event \" + e.getLocalizedMessage();\n             log.error(msg, e);\n         }\n     }\n \n-\n     @Override\n     public void handleMemberTerminatedEvent(\n             MemberTerminatedEvent memberTerminatedEvent) {\n@@ -905,7 +926,8 @@ public void handleMemberTerminatedEvent(\n                     + \"[member] %s\", memberId));\n         }\n         //Checking whether the cluster state can be changed either from in_active to created/terminating to terminated\n-        StatusChecker.getInstance().onMemberTermination(clusterId, instanceId);\n+        ServiceReferenceHolder.getInstance().getClusterStatusProcessorChain().process(\n+                ClusterStatusTerminatedProcessor.class.getName(), clusterId, instanceId);\n     }\n \n     @Override\n@@ -964,7 +986,7 @@ public void terminateAllMembers() {\n             public void run() {\n \n                 for (ClusterLevelNetworkPartitionContext networkPartitionContext : getAllNetworkPartitionCtxts().values()) {\n-                    for(ClusterInstanceContext instanceContext : networkPartitionContext.getClusterInstanceContextMap().values()) {\n+                    for (ClusterInstanceContext instanceContext : networkPartitionContext.getClusterInstanceContextMap().values()) {\n                         for (ClusterLevelPartitionContext partitionContext : instanceContext.getPartitionCtxts()) {\n                             //if (log.isDebugEnabled()) {\n                             log.info(\"Starting to terminate all members in cluster [\" + getClusterId() + \"] Network Partition [ \" +\n@@ -1004,28 +1026,19 @@ public void run() {\n     }\n \n     public Map<String, ClusterLevelNetworkPartitionContext> getAllNetworkPartitionCtxts() {\n-        return ((VMClusterContext)this.clusterContext).getNetworkPartitionCtxts();\n+        return ((VMClusterContext) this.clusterContext).getNetworkPartitionCtxts();\n     }\n \n     public ClusterInstanceContext getClusterInstanceContext(String networkPartitionId, String instanceId) {\n         Map<String, ClusterLevelNetworkPartitionContext> clusterLevelNetworkPartitionContextMap =\n-                ((VMClusterContext)this.clusterContext).getNetworkPartitionCtxts();\n+                ((VMClusterContext) this.clusterContext).getNetworkPartitionCtxts();\n         ClusterLevelNetworkPartitionContext networkPartitionContext =\n                 clusterLevelNetworkPartitionContextMap.get(networkPartitionId);\n         return networkPartitionContext.getClusterInstanceContextMap().get(instanceId);\n     }\n \n-    private static void terminateMember(String memberId) {\n-        try {\n-            CloudControllerClient.getInstance().terminate(memberId);\n-\n-        } catch (TerminationException e) {\n-            log.error(\"Unable to terminate member [member id ] \" + memberId, e);\n-        }\n-    }\n-\n     public Collection<ClusterLevelNetworkPartitionContext> getNetworkPartitionCtxts() {\n-        return ((VMClusterContext)this.clusterContext).getNetworkPartitionCtxts().values();\n+        return ((VMClusterContext) this.clusterContext).getNetworkPartitionCtxts().values();\n     }\n \n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/VMClusterMonitor.java",
                "sha": "2744361163fa066f4e6158dec8b5d3174b18b03a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/VMLbClusterMonitor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/VMLbClusterMonitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/VMLbClusterMonitor.java",
                "patch": "@@ -105,7 +105,7 @@\n //                                }\n //\n //                                minCheckFactHandle =\n-//                                        AutoscalerRuleEvaluator.evaluateMinCheck(getMinCheckKnowledgeSession(),\n+//                                        AutoscalerRuleEvaluator.evaluate(getMinCheckKnowledgeSession(),\n //                                                minCheckFactHandle,\n //                                                partitionContext);\n //                                obsoleteCheckFactHandle =",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/cluster/VMLbClusterMonitor.java",
                "sha": "a69d3bdc1f246bd7cf3216efef9c4b8e3726dae9",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/ApplicationMonitor.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/ApplicationMonitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 36,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/ApplicationMonitor.java",
                "patch": "@@ -36,10 +36,12 @@\n import org.apache.stratos.autoscaler.pojo.policy.PolicyManager;\n import org.apache.stratos.autoscaler.pojo.policy.deployment.DeploymentPolicy;\n import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.network.ApplicationLevelNetworkPartition;\n+import org.apache.stratos.autoscaler.util.ServiceReferenceHolder;\n import org.apache.stratos.messaging.domain.applications.Application;\n import org.apache.stratos.messaging.domain.applications.ApplicationStatus;\n import org.apache.stratos.messaging.domain.applications.GroupStatus;\n import org.apache.stratos.messaging.domain.instance.ApplicationInstance;\n+import org.apache.stratos.messaging.domain.instance.GroupInstance;\n import org.apache.stratos.messaging.domain.topology.ClusterStatus;\n import org.apache.stratos.messaging.domain.topology.lifecycle.LifeCycleState;\n \n@@ -53,8 +55,8 @@\n \n     //network partition contexts\n     private Map<String, ApplicationLevelNetworkPartitionContext> networkPartitionCtxts;\n-    //application instance id map\n-    private Map<String, ApplicationInstance> applicationInstanceIdMap;\n+    //Flag to set whether application is terminating\n+    private boolean isTerminating;\n \n \n     public ApplicationMonitor(Application application) throws DependencyBuilderException,\n@@ -63,7 +65,6 @@ public ApplicationMonitor(Application application) throws DependencyBuilderExcep\n         //setting the appId for the application\n         this.appId = application.getUniqueIdentifier();\n         networkPartitionCtxts = new HashMap<String, ApplicationLevelNetworkPartitionContext>();\n-        setApplicationInstanceIdMap(new HashMap<String, ApplicationInstance>());\n     }\n \n     /**\n@@ -107,7 +108,7 @@ private Monitor findGroupMonitor(String id, Collection<Monitor> monitors) {\n      * @param status the status\n      */\n     public void setStatus(ApplicationStatus status, String instanceId) {\n-        this.applicationInstanceIdMap.get(instanceId).setStatus(status);\n+        ((ApplicationInstance)this.instanceIdToInstanceMap.get(instanceId)).setStatus(status);\n \n         //notify the children about the state change\n         try {\n@@ -135,18 +136,6 @@ public void onChildStatusEvent(MonitorStatusEvent statusEvent) {\n             //mark the child monitor as inActive in the map\n             this.markMonitorAsTerminating(id);\n \n-        } else if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {\n-            if (this.terminatingMonitorsList.contains(id)) {\n-                this.terminatingMonitorsList.remove(id);\n-                this.aliasToActiveMonitorsMap.remove(id);\n-            }\n-            //TODO\n-            /*if (this.status == ApplicationStatus.Terminating) {\n-                StatusChecker.getInstance().onChildStatusChange(id, this.id, this.appId);\n-            } else {\n-                onChildTerminatedEvent(id);\n-            }*/\n-\n         } else if (status1 == ClusterStatus.Terminated || status1 == GroupStatus.Terminated) {\n             //Check whether all dependent goes Terminated and then start them in parallel.\n             if (this.terminatingMonitorsList.contains(id)) {\n@@ -155,11 +144,18 @@ public void onChildStatusEvent(MonitorStatusEvent statusEvent) {\n             } else {\n                 log.warn(\"[monitor] \" + id + \" cannot be found in the inActive monitors list\");\n             }\n-            //TODO\n-            /*if (this.status == ApplicationStatus.Terminating || this.status == ApplicationStatus.Terminated) {\n-                StatusChecker.getInstance().onChildStatusChange(id, this.id, this.appId);\n-                log.info(\"Executing the un-subscription request for the [monitor] \" + id);\n-            }*/\n+            ApplicationInstance instance = (ApplicationInstance)instanceIdToInstanceMap.get(instanceId);\n+            if (instance != null) {\n+                if(instance.getStatus() == ApplicationStatus.Terminating) {\n+                    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,\n+                            appId, instanceId);\n+                } else {\n+                    onChildTerminatedEvent(id, instanceId);\n+                }\n+            } else {\n+                log.warn(\"The required instance cannot be found in the the [GroupMonitor] \" +\n+                        this.id);\n+            }\n         }\n     }\n \n@@ -220,7 +216,8 @@ private void createInstanceAndStartDependency(Application application)\n \n                     ApplicationInstance instance = new ApplicationInstance(appId, instanceId);\n                     instance.setStatus(ApplicationStatus.Created);\n-                    this.applicationInstanceIdMap.put(instanceId, instance);\n+                    instance.setNetworkPartitionId(networkPartition.getId());\n+                    this.instanceIdToInstanceMap.put(instanceId, instance);\n \n                     this.networkPartitionCtxts.put(context.getId(), context);\n \n@@ -266,7 +263,7 @@ public void createInstanceOnBurstingForApplication() throws TopologyInConsistent\n \n                         ApplicationInstance instance = new ApplicationInstance(appId, instanceId);\n                         instance.setStatus(ApplicationStatus.Created);\n-                        this.applicationInstanceIdMap.put(instanceId, instance);\n+                        this.instanceIdToInstanceMap.put(instanceId, instance);\n \n                         burstNPFound = true;\n                     }\n@@ -318,20 +315,11 @@ public void addApplicationLevelNetworkPartitionContext(ApplicationLevelNetworkPa\n         this.networkPartitionCtxts.put(applicationLevelNetworkPartitionContext.getId(), applicationLevelNetworkPartitionContext);\n     }\n \n-    public Map<String, ApplicationInstance> getApplicationInstanceIdMap() {\n-        return applicationInstanceIdMap;\n-    }\n-\n-    public void setApplicationInstanceIdMap(Map<String, ApplicationInstance> applicationInstanceIdMap) {\n-        this.applicationInstanceIdMap = applicationInstanceIdMap;\n-    }\n-\n-    public void addApplicationInstance(ApplicationInstance instance) {\n-        this.applicationInstanceIdMap.put(instance.getInstanceId(), instance);\n-\n+    public boolean isTerminating() {\n+        return isTerminating;\n     }\n \n-    public ApplicationInstance getApplicationInstance(String instanceId) {\n-        return this.applicationInstanceIdMap.get(instanceId);\n+    public void setTerminating(boolean isTerminating) {\n+        this.isTerminating = isTerminating;\n     }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/ApplicationMonitor.java",
                "sha": "4a8ae1972ae3620fa863ad277c38c49d137349f1",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/GroupMonitor.java",
                "changes": 77,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/GroupMonitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 49,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/GroupMonitor.java",
                "patch": "@@ -65,16 +65,12 @@\n \n     //whether groupScaling enabled or not\n     private boolean groupScalingEnabled;\n-\n-    private int monitoringIntervalMilliseconds = 60000;\n-    //TODO get this from config file\n-\n     //network partition contexts\n     private Map<String, GroupLevelNetworkPartitionContext> networkPartitionCtxts;\n-\n-    private Map<String, GroupInstance> groupInstanceIdMap;\n-\n+    //Whether the monitor is destroyed or not\n     private boolean isDestroyed;\n+    //monitoring interval of the monitor\n+    private int monitoringIntervalMilliseconds = 60000;     //TODO get this from config file\n \n     /**\n      * Constructor of GroupMonitor\n@@ -88,7 +84,6 @@ public GroupMonitor(Group group, String appId, List<String> parentInstanceId) th\n         super(group);\n         this.appId = appId;\n         networkPartitionCtxts = new HashMap<String, GroupLevelNetworkPartitionContext>();\n-        setGroupInstanceIdMap(new HashMap<String, GroupInstance>());\n     }\n \n     @Override\n@@ -132,7 +127,7 @@ public void run() {\n      * @param status status of the group\n      */\n     public void setStatus(GroupStatus status, String instanceId) {\n-        this.groupInstanceIdMap.get(instanceId).setStatus(status);\n+        ((GroupInstance)this.instanceIdToInstanceMap.get(instanceId)).setStatus(status);\n \n         if (status == GroupStatus.Inactive && !this.hasStartupDependents) {\n             log.info(\"[Group] \" + this.id + \"is not notifying the parent, \" +\n@@ -186,14 +181,6 @@ public void onChildStatusEvent(MonitorStatusEvent statusEvent) {\n             this.markMonitorAsInactive(instanceId);\n             onChildInactiveEvent(id, instanceId);\n \n-        } else if (status1 == ClusterStatus.Created || status1 == GroupStatus.Created) {\n-            if (this.terminatingMonitorsList.contains(instanceId)) {\n-                this.terminatingMonitorsList.remove(instanceId);\n-                this.aliasToActiveMonitorsMap.remove(instanceId);\n-                if (AutoscalerContext.getInstance().getClusterMonitors().containsKey(id)) {\n-                    AutoscalerContext.getInstance().removeClusterMonitor(id);\n-                }\n-            }\n         } else if (status1 == ClusterStatus.Terminating || status1 == GroupStatus.Terminating) {\n             //mark the child monitor as inActive in the map\n             this.markMonitorAsTerminating(instanceId);\n@@ -206,23 +193,17 @@ public void onChildStatusEvent(MonitorStatusEvent statusEvent) {\n             } else {\n                 log.warn(\"[monitor] \" + id + \" cannot be found in the inActive monitors list\");\n             }\n-            //If cluster monitor, need to terminate the existing one\n-            ApplicationHolder.releaseReadLock();\n-            GroupStatus instanceStatus;\n-            try {\n-                Group group = ApplicationHolder.getApplications().\n-                        getApplication(appId).getGroupRecursively(this.id);\n-                instanceStatus = group.getInstanceContexts(instanceId).getStatus();\n-\n-            } finally {\n-                ApplicationHolder.releaseReadLock();\n-            }\n-\n-            if (instanceStatus == GroupStatus.Terminating) {\n-                ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,\n-                        appId, instanceId);\n+            GroupInstance instance = (GroupInstance)this.instanceIdToInstanceMap.get(instanceId);\n+            if (instance != null) {\n+                if(instance.getStatus() == GroupStatus.Terminating) {\n+                    ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().process(this.id,\n+                            appId, instanceId);\n+                } else {\n+                    onChildTerminatedEvent(id, instanceId);\n+                }\n             } else {\n-                onChildTerminatedEvent(id, instanceId);\n+                log.warn(\"The required instance cannot be found in the the [GroupMonitor] \" +\n+                    this.id);\n             }\n         }\n     }\n@@ -234,7 +215,20 @@ public void onParentStatusEvent(MonitorStatusEvent statusEvent)\n         // send the ClusterTerminating event\n         if (statusEvent.getStatus() == GroupStatus.Terminating ||\n                 statusEvent.getStatus() == ApplicationStatus.Terminating) {\n-            ApplicationBuilder.handleGroupTerminatingEvent(appId, id, instanceId);\n+            //Get all the instances which related to this instanceId\n+            GroupInstance instance = (GroupInstance) this.instanceIdToInstanceMap.get(instanceId);\n+            if(instance != null) {\n+                ApplicationBuilder.handleGroupTerminatingEvent(appId, id, instanceId);\n+            } else {\n+                //Using parentId need to get the children\n+                List<String> instanceIds = this.getInstancesByParentInstanceId(instanceId);\n+                if(!instanceIds.isEmpty()) {\n+                    for(String instanceId1 : instanceIds) {\n+                        ApplicationBuilder.handleGroupTerminatingEvent(appId, id, instanceId1);\n+                    }\n+                }\n+\n+            }\n         } else if (statusEvent.getStatus() == ClusterStatus.Created ||\n                 statusEvent.getStatus() == GroupStatus.Created) {\n             Application application = ApplicationHolder.getApplications().getApplication(this.appId);\n@@ -489,20 +483,5 @@ public void setDestroyed(boolean isDestroyed) {\n         this.isDestroyed = isDestroyed;\n     }\n \n-    public Map<String, GroupInstance> getGroupInstanceIdMap() {\n-        return groupInstanceIdMap;\n-    }\n-\n-    public void setGroupInstanceIdMap(Map<String, GroupInstance> groupInstanceIdMap) {\n-        this.groupInstanceIdMap = groupInstanceIdMap;\n-    }\n-\n-    public void addGroupInstance(GroupInstance instance) {\n-        this.groupInstanceIdMap.put(instance.getInstanceId(), instance);\n \n-    }\n-\n-    public GroupInstance getGroupInstance(String instanceId) {\n-        return this.groupInstanceIdMap.get(instanceId);\n-    }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/GroupMonitor.java",
                "sha": "23349162bef3638a4ecb5ac9a79017a2d330d740",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/ParentComponentMonitor.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/ParentComponentMonitor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/ParentComponentMonitor.java",
                "patch": "@@ -41,7 +41,6 @@\n import org.apache.stratos.autoscaler.monitor.MonitorFactory;\n import org.apache.stratos.autoscaler.monitor.cluster.AbstractClusterMonitor;\n import org.apache.stratos.autoscaler.monitor.events.builder.MonitorStatusEventBuilder;\n-import org.apache.stratos.autoscaler.status.processor.StatusChecker;\n import org.apache.stratos.autoscaler.util.ServiceReferenceHolder;\n import org.apache.stratos.messaging.domain.applications.GroupStatus;\n import org.apache.stratos.messaging.domain.applications.ParentComponent;\n@@ -261,8 +260,8 @@ protected void onChildActivatedEvent(String eventId, String instanceId) {\n             }\n \n             boolean startDep;\n-            if(!aliasToActiveMonitorsMap.containsKey(eventId) || !pendingMonitorsList.contains(eventId)) {\n-               startDep = startDependency(eventId, instanceId);\n+            if (!aliasToActiveMonitorsMap.containsKey(eventId) || !pendingMonitorsList.contains(eventId)) {\n+                startDep = startDependency(eventId, instanceId);\n             } else {\n                 startDep = startDependencyByInstanceCreation(eventId, instanceId);\n             }\n@@ -289,7 +288,8 @@ protected void onChildInactiveEvent(String eventId, String instanceId) {\n         terminationList = this.startupDependencyTree.getTerminationDependencies(eventId);\n         //Need to notify the parent about the status  change from Active-->InActive\n         if (this.parent != null) {\n-            StatusChecker.getInstance().onChildStatusChange(eventId, this.id, this.appId, instanceId);\n+            ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().\n+                    process(this.id, this.appId, instanceId);\n         }\n         //TODO checking whether terminating them in reverse order,\n         // TODO if so can handle it in the parent event.\n@@ -387,7 +387,8 @@ protected void onChildTerminatedEvent(String eventId, String instanceId) {\n                 log.error(\"Error while starting the monitor upon termination\" + e);\n             }\n         } else {\n-            StatusChecker.getInstance().onChildStatusChange(eventId, this.id, this.appId, instanceId);\n+            ServiceReferenceHolder.getInstance().getGroupStatusProcessorChain().\n+                    process(this.id, this.appId, instanceId);\n             log.info(\"Checking the status of group/application as no dependent found...\");\n         }\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/monitor/component/ParentComponentMonitor.java",
                "sha": "136cb9fd12c68576c5320c063d3769d396aeb5b0",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/pojo/policy/PolicyManager.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/pojo/policy/PolicyManager.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 19,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/pojo/policy/PolicyManager.java",
                "patch": "@@ -21,6 +21,8 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.Random;\n+import java.util.UUID;\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.logging.Log;\n@@ -87,27 +89,14 @@ public boolean updateAutoscalePolicy(AutoscalePolicy policy) throws InvalidPolic\n     }\n \n     // Add the deployment policy to information model and persist.\n-    public boolean deployDeploymentPolicy(DeploymentPolicy policy) throws InvalidPolicyException {\n-        if(StringUtils.isEmpty(policy.getId())){\n-            throw new AutoScalerException(\"Deploying policy id cannot be empty\");\n-        }\n-        try {\n-            if(log.isInfoEnabled()) {\n-                log.info(String.format(\"Deploying deployment policy: [id] %s\", policy.getId()));\n-            }\n-            fillPartitions(policy);\n-        } catch (InvalidPartitionException e) {\n-        \tlog.error(e);\n-            throw new InvalidPolicyException(String.format(\"Deployment policy is invalid: [id] %s\", policy.getId()), e);\n-        }\n-\n-        addDeploymentPolicyToInformationModel(policy);\n+    public String deployDeploymentPolicy(DeploymentPolicy policy) throws InvalidPolicyException {\n+        String policyId = addDeploymentPolicyToInformationModel(policy);\n         RegistryManager.getInstance().persistDeploymentPolicy(policy);\n \n         if (log.isInfoEnabled()) {\n-            log.info(String.format(\"Deployment policy is deployed successfully: [id] %s\", policy.getId()));\n+            log.info(String.format(\"Deployment policy is deployed successfully: [id] %s\", policyId));\n         }\n-        return true;\n+        return policyId;\n     }\n \n     public boolean updateDeploymentPolicy(DeploymentPolicy policy) throws InvalidPolicyException {\n@@ -223,18 +212,24 @@ public AutoscalePolicy getAutoscalePolicy(String id) {\n     }\n \n     // Add the deployment policy to As in memmory information model. Does not persist.\n-    public void addDeploymentPolicyToInformationModel(DeploymentPolicy policy) throws InvalidPolicyException {\n+    public String addDeploymentPolicyToInformationModel(DeploymentPolicy policy) throws InvalidPolicyException {\n+        if (StringUtils.isEmpty(policy.getId())) {\n+            // id = application id + random string\n+            String id = policy.getApplicationId() + UUID.randomUUID().getLeastSignificantBits();\n+            policy.setId(id);\n+        }\n         if (!deploymentPolicyListMap.containsKey(policy.getId())) {\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Adding deployment policy: \" + policy.getId());\n             }\n-//            PartitionManager.getInstance().deployNewNetworkPartitions(policy);\n             deploymentPolicyListMap.put(policy.getId(), policy);\n         } else {\n         \tString errMsg = \"Specified deployment policy [\" + policy.getId()+ \"] already exists\";\n         \tlog.error(errMsg);\n             throw new InvalidPolicyException(errMsg);\n         }\n+        \n+        return policy.getId();\n     }\n \n     public void updateDeploymentPolicyToInformationModel(DeploymentPolicy policy) throws InvalidPolicyException {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/pojo/policy/PolicyManager.java",
                "sha": "ac05b55e0e05a60b29d5aa69b01e1d621f868b70",
                "status": "modified"
            },
            {
                "additions": 150,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/AutoscalerRuleEvaluator.java",
                "changes": 291,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/AutoscalerRuleEvaluator.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 141,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/AutoscalerRuleEvaluator.java",
                "patch": "@@ -35,6 +35,8 @@\n import org.wso2.carbon.utils.CarbonUtils;\n \n import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Properties;\n \n /**\n@@ -45,174 +47,181 @@\n \t\n \tprivate static final Log log = LogFactory.getLog(AutoscalerRuleEvaluator.class);\n \n-\t//vm drool files as default\n-\tprivate String minCheckDroolFileName = StratosConstants.CONTAINER_MIN_CHECK_DROOL_FILE;\n-\tprivate String obsoleteCheckDroolFileName = StratosConstants.CONTAINER_OBSOLETE_CHECK_DROOL_FILE;\n-\tprivate String scaleCheckDroolFileName = StratosConstants.CONTAINER_SCALE_CHECK_DROOL_FILE;\n-\tprivate String terminateAllDroolFileName = \"terminateall.drl\";\n-\n-\tprivate static KnowledgeBase minCheckKbase;\n-\tprivate static KnowledgeBase obsoleteCheckKbase;\n-\tprivate static KnowledgeBase scaleCheckKbase;\n-\t@SuppressWarnings(\"unused\")\n-\tprivate static KnowledgeBase terminateAllKbase;\n-\n-    public AutoscalerRuleEvaluator(String minCheckDroolFileName, String obsoleteCheckDroolFileName, String scaleCheckDroolFileName){\n-    \t\n-    \tif (minCheckDroolFileName != null && !minCheckDroolFileName.isEmpty()) {\n-    \t\tthis.minCheckDroolFileName = minCheckDroolFileName;\n-\t\t}\n-\n-    \tif (obsoleteCheckDroolFileName != null && !obsoleteCheckDroolFileName.isEmpty()) {\n-    \t\tthis.obsoleteCheckDroolFileName = obsoleteCheckDroolFileName;\n-\t\t}\n-    \t\n-    \tif (scaleCheckDroolFileName != null && !scaleCheckDroolFileName.isEmpty()) {\n-    \t\tthis.scaleCheckDroolFileName = scaleCheckDroolFileName;\n-\t\t}\n-\n-        minCheckKbase = readKnowledgeBase(this.minCheckDroolFileName);\n+//\t//vm drool files as default\n+//\tprivate String minCheckDroolFileName = StratosConstants.CONTAINER_MIN_CHECK_DROOL_FILE;\n+//\tprivate String obsoleteCheckDroolFileName = StratosConstants.CONTAINER_OBSOLETE_CHECK_DROOL_FILE;\n+//\tprivate String scaleCheckDroolFileName = StratosConstants.CONTAINER_SCALE_CHECK_DROOL_FILE;\n+//\n+//\tprivate static KnowledgeBase minCheckKbase;\n+//\tprivate static KnowledgeBase obsoleteCheckKbase;\n+//\tprivate static KnowledgeBase scaleCheckKbase;\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Minimum check rule is parsed successfully : \" + this.minCheckDroolFileName);\n-        }\n-        \n-        obsoleteCheckKbase = readKnowledgeBase(this.obsoleteCheckDroolFileName);\n+    private static Map<String, KnowledgeBase> knowledgeBases;\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Obsolete check rule is parsed successfully : \" + this.obsoleteCheckDroolFileName);\n-        }\n+    public AutoscalerRuleEvaluator(){\n+\n+        knowledgeBases = new HashMap<String, KnowledgeBase>();\n+//    \tif (minCheckDroolFileName != null && !minCheckDroolFileName.isEmpty()) {\n+//    \t\tthis.minCheckDroolFileName = minCheckDroolFileName;\n+//\t\t}\n+//\n+//    \tif (obsoleteCheckDroolFileName != null && !obsoleteCheckDroolFileName.isEmpty()) {\n+//    \t\tthis.obsoleteCheckDroolFileName = obsoleteCheckDroolFileName;\n+//\t\t}\n+//\n+//    \tif (scaleCheckDroolFileName != null && !scaleCheckDroolFileName.isEmpty()) {\n+//    \t\tthis.scaleCheckDroolFileName = scaleCheckDroolFileName;\n+//\t\t}\n+//\n+//        minCheckKbase = readKnowledgeBase(this.minCheckDroolFileName);\n+//\n+//        if (log.isDebugEnabled()) {\n+//            log.debug(\"Minimum check rule is parsed successfully : \" + this.minCheckDroolFileName);\n+//        }\n+//\n+//        obsoleteCheckKbase = readKnowledgeBase(this.obsoleteCheckDroolFileName);\n+//\n+//        if (log.isDebugEnabled()) {\n+//            log.debug(\"Obsolete check rule is parsed successfully : \" + this.obsoleteCheckDroolFileName);\n+//        }\n+//\n+//        scaleCheckKbase = readKnowledgeBase(this.scaleCheckDroolFileName);\n+//\n+//        if (log.isDebugEnabled()) {\n+//            log.debug(\"Scale check rule is parsed successfully : \" + this.scaleCheckDroolFileName);\n+//        }\n+//\n+    }\n \n-        scaleCheckKbase = readKnowledgeBase(this.scaleCheckDroolFileName);\n+    public void parseAndBuildKnowledgeBaseForDroolsFile(String drlFileName){\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Scale check rule is parsed successfully : \" + this.scaleCheckDroolFileName);\n-        }\n-        \n-        terminateAllKbase = readKnowledgeBase(this.terminateAllDroolFileName);\n+        knowledgeBases.put(drlFileName, readKnowledgeBase(drlFileName));\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Terminate all rule is parsed successfully : \" + this.terminateAllDroolFileName);\n-        }\n-    }\n-    \n-    public static FactHandle evaluateMinCheck(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n-        if (handle == null) {\n-            ksession.setGlobal(\"$delegator\", new RuleTasksDelegator());\n-            handle = ksession.insert(obj);\n-        } else {\n-            ksession.update(handle, obj);\n-        }\n-        ksession.fireAllRules();\n-        if(log.isDebugEnabled()){\n-            log.debug(String.format(\"Minimum check executed for : %s \", obj));\n+            log.debug(\"Drools file is parsed successfully : \" + drlFileName);\n         }\n-        return handle;\n+\n     }\n     \n-    public static FactHandle evaluateObsoleteCheck(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n-        if (handle == null) {\n-            ksession.setGlobal(\"$delegator\", new RuleTasksDelegator());\n-            handle = ksession.insert(obj);\n-        } else {\n-            ksession.update(handle, obj);\n-        }\n-        ksession.fireAllRules();\n-        if(log.isDebugEnabled()){\n-            log.debug(String.format(\"Obsolete check executed for : %s \", obj));\n-        }\n-        return handle;\n-    }\n+    public static FactHandle evaluate(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n \n-    public static FactHandle evaluateScaleCheck(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n-        if (handle == null) {\n-            ksession.setGlobal(\"$delegator\", new RuleTasksDelegator());\n-            handle = ksession.insert(obj);\n-        } else {\n-            ksession.update(handle, obj);\n-        }\n-        ksession.fireAllRules();\n-        if(log.isDebugEnabled()){\n-            log.debug(String.format(\"Scale check executed for : %s \", obj));\n-        }\n-        return handle;\n-    }\n \n-    public static FactHandle evaluateDependentScaleCheck(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n         if (handle == null) {\n-            ksession.setGlobal(\"$delegator\", new RuleTasksDelegator());\n+            ksession.setGlobal(\"delegator\", new RuleTasksDelegator());\n             handle = ksession.insert(obj);\n         } else {\n             ksession.update(handle, obj);\n         }\n         ksession.fireAllRules();\n         if(log.isDebugEnabled()){\n-            log.debug(String.format(\"Dependent scale check executed for : %s \", obj));\n-        }\n-        return handle;\n-    }\n-\n-    public static FactHandle evaluateTerminateAll(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n-        if (handle == null) {\n-            ksession.setGlobal(\"$delegator\", new RuleTasksDelegator());\n-            handle = ksession.insert(obj);\n-        } else {\n-            ksession.update(handle, obj);\n-        }\n-        ksession.fireAllRules();\n-        if(log.isDebugEnabled()){\n-            log.debug(String.format(\"Terminate all check executed for : %s \", obj));\n-        }\n-        return handle;\n-    }\n-    \n-    public static FactHandle evaluateTerminateDependency(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n-    \tif(log.isDebugEnabled()){\n-            log.debug(String.format(\"Terminate dependency check executing for : %s \", obj));\n-        }\n-        if (handle == null) {\n-            ksession.setGlobal(\"$delegator\", new RuleTasksDelegator());\n-            handle = ksession.insert(obj);\n-        } else {\n-            ksession.update(handle, obj);\n-        }\n-        if(log.isDebugEnabled()){\n-            log.debug(String.format(\"Terminate dependency check firing rules for : %s \", ksession));\n-        }\n-        ksession.fireAllRules();\n-        if(log.isDebugEnabled()){\n-            log.debug(String.format(\"Terminate dependency check executed for : %s \", obj));\n+            log.debug(String.format(\"Rule executed for : %s \", obj));\n         }\n         return handle;\n     }\n+//\n+//    public static FactHandle evaluateObsoleteCheck(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n+//        if (handle == null) {\n+//            ksession.setGlobal(\"delegator\", new RuleTasksDelegator());\n+//            handle = ksession.insert(obj);\n+//        } else {\n+//            ksession.update(handle, obj);\n+//        }\n+//        ksession.fireAllRules();\n+//        if(log.isDebugEnabled()){\n+//            log.debug(String.format(\"Obsolete check executed for : %s \", obj));\n+//        }\n+//        return handle;\n+//    }\n+//\n+//    public static FactHandle evaluateScaleCheck(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n+//        if (handle == null) {\n+//            ksession.setGlobal(\"delegator\", new RuleTasksDelegator());\n+//            handle = ksession.insert(obj);\n+//        } else {\n+//            ksession.update(handle, obj);\n+//        }\n+//        ksession.fireAllRules();\n+//        if(log.isDebugEnabled()){\n+//            log.debug(String.format(\"Scale check executed for : %s \", obj));\n+//        }\n+//        return handle;\n+//    }\n+//\n+//    public static FactHandle evaluateDependentScaleCheck(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n+//        if (handle == null) {\n+//            ksession.setGlobal(\"delegator\", new RuleTasksDelegator());\n+//            handle = ksession.insert(obj);\n+//        } else {\n+//            ksession.update(handle, obj);\n+//        }\n+//        ksession.fireAllRules();\n+//        if(log.isDebugEnabled()){\n+//            log.debug(String.format(\"Dependent scale check executed for : %s \", obj));\n+//        }\n+//        return handle;\n+//    }\n+//\n+//    public static FactHandle evaluateTerminateAll(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n+//        if (handle == null) {\n+//            ksession.setGlobal(\"delegator\", new RuleTasksDelegator());\n+//            handle = ksession.insert(obj);\n+//        } else {\n+//            ksession.update(handle, obj);\n+//        }\n+//        ksession.fireAllRules();\n+//        if(log.isDebugEnabled()){\n+//            log.debug(String.format(\"Terminate all check executed for : %s \", obj));\n+//        }\n+//        return handle;\n+//    }\n+//\n+//    public static FactHandle evaluateTerminateDependency(StatefulKnowledgeSession ksession, FactHandle handle, Object obj) {\n+//    \tif(log.isDebugEnabled()){\n+//            log.debug(String.format(\"Terminate dependency check executing for : %s \", obj));\n+//        }\n+//        if (handle == null) {\n+//            ksession.setGlobal(\"delegator\", new RuleTasksDelegator());\n+//            handle = ksession.insert(obj);\n+//        } else {\n+//            ksession.update(handle, obj);\n+//        }\n+//        if(log.isDebugEnabled()){\n+//            log.debug(String.format(\"Terminate dependency check firing rules for : %s \", ksession));\n+//        }\n+//        ksession.fireAllRules();\n+//        if(log.isDebugEnabled()){\n+//            log.debug(String.format(\"Terminate dependency check executed for : %s \", obj));\n+//        }\n+//        return handle;\n+//    }\n \n-    public StatefulKnowledgeSession getMinCheckStatefulSession() {\n-        StatefulKnowledgeSession ksession;\n-        ksession = minCheckKbase.newStatefulKnowledgeSession();\n-        ksession.setGlobal(\"log\", RuleLog.getInstance());\n-        return ksession;\n-    }\n-    \n-    public StatefulKnowledgeSession getObsoleteCheckStatefulSession() {\n+    public StatefulKnowledgeSession getStatefulSession(String drlFileName) {\n         StatefulKnowledgeSession ksession;\n-        ksession = obsoleteCheckKbase.newStatefulKnowledgeSession();\n+        ksession = knowledgeBases.get(drlFileName).newStatefulKnowledgeSession();\n         ksession.setGlobal(\"log\", RuleLog.getInstance());\n         return ksession;\n     }\n     \n-    public StatefulKnowledgeSession getScaleCheckStatefulSession() {\n-        StatefulKnowledgeSession ksession;\n-        ksession = scaleCheckKbase.newStatefulKnowledgeSession();\n-        ksession.setGlobal(\"log\", RuleLog.getInstance());\n-        return ksession;\n-    }\n-    \n-    public StatefulKnowledgeSession getTerminateAllStatefulSession() {\n-        StatefulKnowledgeSession ksession;\n-        ksession = scaleCheckKbase.newStatefulKnowledgeSession();\n-        ksession.setGlobal(\"log\", RuleLog.getInstance());\n-        return ksession;\n-    }\n+//    public StatefulKnowledgeSession getObsoleteCheckStatefulSession() {\n+//        StatefulKnowledgeSession ksession;\n+//        ksession = obsoleteCheckKbase.newStatefulKnowledgeSession();\n+//        ksession.setGlobal(\"log\", RuleLog.getInstance());\n+//        return ksession;\n+//    }\n+//\n+//    public StatefulKnowledgeSession getScaleCheckStatefulSession() {\n+//        StatefulKnowledgeSession ksession;\n+//        ksession = scaleCheckKbase.newStatefulKnowledgeSession();\n+//        ksession.setGlobal(\"log\", RuleLog.getInstance());\n+//        return ksession;\n+//    }\n+//\n+//    public StatefulKnowledgeSession getTerminateAllStatefulSession() {\n+//        StatefulKnowledgeSession ksession;\n+//        ksession = scaleCheckKbase.newStatefulKnowledgeSession();\n+//        ksession.setGlobal(\"log\", RuleLog.getInstance());\n+//        return ksession;\n+//    }\n \n //    public static String getLbClusterId(ClusterLevelPartitionContext clusterMonitorPartitionContext, String nwpartitionId) {\n //        Properties props = clusterMonitorPartitionContext.getProperties();",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/AutoscalerRuleEvaluator.java",
                "sha": "512ed415a2b710c7746c4e326932c263dc0b2c57",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/RuleTasksDelegator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/RuleTasksDelegator.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/RuleTasksDelegator.java",
                "patch": "@@ -194,7 +194,7 @@ public void delegateSpawn(ClusterLevelPartitionContext clusterMonitorPartitionCo\n                     CloudControllerClient.getInstance()\n                             .spawnAnInstance(clusterMonitorPartitionContext.getPartition(),\n                                     clusterId,\n-//                                    lbClusterId,\n+                                    instanceId,\n                                     clusterMonitorPartitionContext.getNetworkPartitionId(),\n                                     isPrimary,\n                                     minimumCountOfNetworkPartition);",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/rule/RuleTasksDelegator.java",
                "sha": "6c582443ef957eec7dd3c4bdbefb652d00242ed8",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/cluster/ClusterStatusTerminatedProcessor.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/cluster/ClusterStatusTerminatedProcessor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 8,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/cluster/ClusterStatusTerminatedProcessor.java",
                "patch": "@@ -71,7 +71,7 @@ public boolean process(String type, String clusterId, String instanceId) {\n     private boolean doProcess(String clusterId, String instanceId) {\n         VMClusterMonitor monitor = (VMClusterMonitor) AutoscalerContext.getInstance().\n                 getClusterMonitor(clusterId);\n-        boolean clusterMonitorHasMembers = clusterMonitorHasMembers(monitor);\n+        boolean clusterMonitorHasMembers = clusterInstanceHasMembers(monitor, instanceId);\n         boolean clusterTerminated = false;\n         try {\n             TopologyManager.acquireReadLockForCluster(monitor.getServiceId(), monitor.getClusterId());\n@@ -83,10 +83,11 @@ private boolean doProcess(String clusterId, String instanceId) {\n                 if (cluster != null) {\n                     try {\n                         ApplicationHolder.acquireReadLock();\n-                        Application application = ApplicationHolder.getApplications().getApplication(appId);\n-                        //if all members removed from the cluster and cluster is in terminating,\n-                        // either it has to be terminated or Reset\n-                        if (!clusterMonitorHasMembers && cluster.getStatus(null) == ClusterStatus.Terminating) {\n+                        /**\n+                         * if all members removed from the cluster and cluster is in terminating,\n+                         * either it has to be terminated or Reset\n+                         */\n+                        if (!clusterMonitorHasMembers) {\n                             if (log.isInfoEnabled()) {\n                                 log.info(\"Publishing Cluster terminated event for [application]: \" + appId +\n                                         \" [cluster]: \" + clusterId);\n@@ -119,17 +120,19 @@ private boolean doProcess(String clusterId, String instanceId) {\n      * @param monitor the cluster monitor\n      * @return whether has members or not\n      */\n-    private boolean clusterMonitorHasMembers(VMClusterMonitor monitor) {\n+    private boolean clusterInstanceHasMembers(VMClusterMonitor monitor, String instanceId) {\n         boolean hasMember = false;\n         for (ClusterLevelNetworkPartitionContext clusterLevelNetworkPartitionContext :\n                                                 monitor.getAllNetworkPartitionCtxts().values()) {\n             //minimum check per partition\n-            for(ClusterInstanceContext clusterInstanceContext :\n-                    clusterLevelNetworkPartitionContext.getClusterInstanceContextMap().values()) {\n+            if(clusterLevelNetworkPartitionContext.containsClusterInstanceContext(instanceId)) {\n+            ClusterInstanceContext clusterInstanceContext = clusterLevelNetworkPartitionContext.\n+                                                            getClusterInstanceContext(instanceId);\n                 for (ClusterLevelPartitionContext partitionContext :\n                         clusterInstanceContext.getPartitionCtxts()) {\n                     if (partitionContext.getNonTerminatedMemberCount() > 0) {\n                         hasMember = true;\n+                        return hasMember;\n                     } else {\n                         hasMember = false;\n                     }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/cluster/ClusterStatusTerminatedProcessor.java",
                "sha": "52b5f3663dc853ac89e38f3c493b4e5676baa95c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/group/GroupStatusTerminatedProcessor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/group/GroupStatusTerminatedProcessor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/group/GroupStatusTerminatedProcessor.java",
                "patch": "@@ -93,7 +93,7 @@ private boolean doProcess(String idOfComponent, String appId, String instanceId)\n                     //send the terminated event\n                     if (component instanceof Application) {\n                         log.info(\"sending app terminated: \" + appId);\n-                        ApplicationBuilder.handleApplicationTerminatedEvent(appId);\n+                        ApplicationBuilder.handleApplicationTerminatedEvent(appId, instanceId);\n                         return true;\n                     } else if (component instanceof Group) {\n                         //send activation to the parent",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/group/GroupStatusTerminatedProcessor.java",
                "sha": "e2a63688d7f6f611b2ea9664068096c81a722cc4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/group/GroupStatusTerminatingProcessor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/group/GroupStatusTerminatingProcessor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/group/GroupStatusTerminatingProcessor.java",
                "patch": "@@ -94,13 +94,13 @@ private boolean doProcess(String idOfComponent, String appId, String instanceId)\n                     //send the terminated event\n                     if (component instanceof Application) {\n                         log.info(\"sending app terminated: \" + appId);\n-                        ApplicationBuilder.handleApplicationTerminatedEvent(appId);\n+                        ApplicationBuilder.handleApplicationTerminatedEvent(appId, instanceId);\n                         return true;\n                     } else if (component instanceof Group) {\n                         //send activation to the parent\n                         if (((Group) component).getStatus(null) != GroupStatus.Terminated) {\n                             log.info(\"sending group terminated : \" + component.getUniqueIdentifier());\n-                            ApplicationBuilder.handleGroupTerminatedEvent(appId,\n+                            ApplicationBuilder.handleGroupTerminatingEvent(appId,\n                                     component.getUniqueIdentifier(), instanceId);\n                             return true;\n                         }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/group/GroupStatusTerminatingProcessor.java",
                "sha": "37b2a2df43730c399747c2c9c59c339b180140cd",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "patch": "@@ -351,7 +351,9 @@ public static Properties getProperties(final OMElement elt) {\n \n     public synchronized void startApplicationMonitor(String applicationId) {\n         Thread th = null;\n-        if (AutoscalerContext.getInstance().getAppMonitor(applicationId) == null) {\n+        AutoscalerContext autoscalerContext = AutoscalerContext.getInstance();\n+        if (autoscalerContext.getAppMonitor(applicationId) == null) {\n+            autoscalerContext.addPendingMonitor(applicationId);\n             th = new Thread(new ApplicationMonitorAdder(applicationId));\n         }\n         if (th != null) {\n@@ -383,10 +385,8 @@ public void run() {\n                 }\n                 try {\n                     long start = System.currentTimeMillis();\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"application monitor is going to be started for [application] \" +\n+                    log.info(\"application monitor is going to be started for [application] \" +\n                                 appId);\n-                    }\n                     try {\n                         applicationMonitor = MonitorFactory.getApplicationMonitor(appId);\n                     } catch (PolicyValidationException e) {\n@@ -414,8 +414,10 @@ public void run() {\n                 log.error(msg);\n                 throw new RuntimeException(msg);\n             }\n+            AutoscalerContext autoscalerContext = AutoscalerContext.getInstance();\n \n-            AutoscalerContext.getInstance().addAppMonitor(applicationMonitor);\n+            autoscalerContext.removeAppMonitor(appId);\n+            autoscalerContext.addAppMonitor(applicationMonitor);\n             if (log.isInfoEnabled()) {\n                 log.info(String.format(\"Application monitor has been added successfully: \" +\n                         \"[application] %s\", applicationMonitor.getId()));",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/AutoscalerUtil.java",
                "sha": "2ed1074647722336dbb236bc9e921b6dc96b191a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/StatusChecker.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/StatusChecker.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 3,
                "filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/StatusChecker.java",
                "patch": "@@ -16,12 +16,11 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.stratos.autoscaler.status.processor;\n+package org.apache.stratos.autoscaler.util;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.autoscaler.context.AutoscalerContext;\n-import org.apache.stratos.autoscaler.context.partition.ClusterLevelPartitionContext;\n import org.apache.stratos.autoscaler.context.partition.network.ClusterLevelNetworkPartitionContext;\n import org.apache.stratos.autoscaler.applications.ApplicationHolder;\n import org.apache.stratos.autoscaler.applications.topic.ApplicationBuilder;\n@@ -350,7 +349,7 @@ private void handleStateChangeGroupScalingDisabled(ParentComponent component, St\n             //send the terminated event\n             if (component instanceof Application) {\n                 log.info(\"sending app terminated: \" + appId);\n-                ApplicationBuilder.handleApplicationTerminatedEvent(appId);\n+                ApplicationBuilder.handleApplicationTerminatedEvent(appId, null);\n             } else if (component instanceof Group) {\n                 //send activation to the parent\n                 if (((Group) component).getStatus(null) != GroupStatus.Terminated) {",
                "previous_filename": "components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/status/processor/StatusChecker.java",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/main/java/org/apache/stratos/autoscaler/util/StatusChecker.java",
                "sha": "d0a993e7f921e82c5a349493f470ec2c618f6d97",
                "status": "renamed"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/test/java/org/apache/stratos/autoscaler/TestRulesPackaged.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/test/java/org/apache/stratos/autoscaler/TestRulesPackaged.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 4,
                "filename": "components/org.apache.stratos.autoscaler/src/test/java/org/apache/stratos/autoscaler/TestRulesPackaged.java",
                "patch": "@@ -45,10 +45,10 @@ public void testMinCheckDroolsFile() {\n     }\n \n //FIXME add this when dependent scaling file is completed\n-//    @Test\n-//    public void testDependentScalingDroolsFile() {\n-//        parseDroolsFile(dependentScalingDrlFilePath);\n-//    }\n+    @Test\n+    public void testDependentScalingDroolsFile() {\n+        parseDroolsFile(dependentScalingDrlFilePath);\n+    }\n \n     @Test\n     public void testScalingDroolsFile() {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/test/java/org/apache/stratos/autoscaler/TestRulesPackaged.java",
                "sha": "48c349e6a94407b24a436bfbc515f0f2cb55da07",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/test/resources/autoscaler.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.autoscaler/src/test/resources/autoscaler.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.autoscaler/src/test/resources/autoscaler.xml",
                "patch": "@@ -28,12 +28,12 @@\n         </rulesEvaluator>\n         <cloudController>\n             <hostname>localhost</hostname>\n-            <port>9444</port>\n+            <port>9443</port>\n             <clientTimeout>300000</clientTimeout>\n         </cloudController>\n         <stratosManager>\n             <hostname>localhost</hostname>\n-            <port>9445</port>\n+            <port>9443</port>\n             <clientTimeout>300000</clientTimeout>\n         </stratosManager>\n         <member>",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.autoscaler/src/test/resources/autoscaler.xml",
                "sha": "c0b684cbcea765e78b97551a366bac7605879f72",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/CartridgeAgent.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/CartridgeAgent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 6,
                "filename": "components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/CartridgeAgent.java",
                "patch": "@@ -247,8 +247,9 @@ protected void onEvent(Event event) {\n                 }\n             }\n         });\n-        Thread eventReceiverThread = new Thread(instanceNotifierEventReceiver);\n-        eventReceiverThread.start();\n+\n+\t    instanceNotifierEventReceiver.execute();\n+\n         if(log.isInfoEnabled()) {\n             log.info(\"Instance notifier event message receiver thread started\");\n         }\n@@ -414,8 +415,8 @@ protected void onEvent(Event event) {\n             }\n         });\n \n-        Thread thread = new Thread(topologyEventReceiver);\n-        thread.start();\n+\t    topologyEventReceiver.execute();\n+\n         if (log.isDebugEnabled()) {\n             log.info(\"Cartridge Agent topology receiver thread started\");\n         }\n@@ -537,8 +538,7 @@ protected void onEvent(Event event) {\n             }\n         });\n \n-        Thread tenantEventReceiverThread = new Thread(tenantEventReceiver);\n-        tenantEventReceiverThread.start();\n+\t    tenantEventReceiver.execute();\n         if (log.isInfoEnabled()) {\n             log.info(\"Tenant event message receiver thread started\");\n         }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cartridge.agent/src/main/java/org/apache/stratos/cartridge/agent/CartridgeAgent.java",
                "sha": "53fd658e56082134d9ac448c7bf861b1f4784f54",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/pom.xml",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/pom.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 7,
                "filename": "components/org.apache.stratos.cloud.controller/pom.xml",
                "patch": "@@ -216,19 +216,24 @@\n             <version>${jclouds.version}</version>\n         </dependency>\n         <dependency>\n-            <groupId>org.apache.stratos</groupId>\n+            <groupId>org.apache.jclouds.api</groupId>\n             <artifactId>ec2</artifactId>\n-            <version>1.8.0-stratos</version>\n+            <version>${jclouds.version}</version>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.stratos</groupId>\n             <artifactId>aws-ec2</artifactId>\n-            <version>1.8.0-stratos</version>\n+            <version>${jclouds.stratos.version}</version>\n         </dependency>\n         <dependency>\n-            <groupId>org.apache.stratos</groupId>\n+            <groupId>org.apache.jclouds.api</groupId>\n             <artifactId>openstack-nova</artifactId>\n-            <version>1.8.0-stratos</version>\n+            <version>${jclouds.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.stratos</groupId>\n+            <artifactId>openstack-neutron</artifactId>\n+            <version>${jclouds.stratos.version}</version>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.jclouds.api</groupId>\n@@ -243,12 +248,12 @@\n         <dependency>\n             <groupId>org.apache.stratos</groupId>\n             <artifactId>vcloud</artifactId>\n-            <version>1.8.0-stratos</version>\n+            <version>${jclouds.stratos.version}</version>\n         </dependency>\n         <dependency>\n           <groupId>org.apache.stratos</groupId>\n           <artifactId>gce</artifactId>\n-          <version>1.8.0-stratos</version>\n+          <version>${jclouds.stratos.version}</version>\n         </dependency>\n \n         <dependency>",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/pom.xml",
                "sha": "2d19286ebbfb9ec64ec25bc91c7a796e7d8a1faf",
                "status": "modified"
            },
            {
                "additions": 141,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/context/CloudControllerContext.java",
                "changes": 226,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/context/CloudControllerContext.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 85,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/context/CloudControllerContext.java",
                "patch": "@@ -36,19 +36,13 @@\n import org.wso2.carbon.databridge.agent.thrift.AsyncDataPublisher;\n import org.wso2.carbon.registry.core.exceptions.RegistryException;\n \n-import com.google.common.net.InetAddresses;\n-\n import java.io.Serializable;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n+import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.locks.Lock;\n \n /**\n  * This object holds all runtime data and provides faster access. This is a Singleton class.\n@@ -58,19 +52,27 @@\n     private static final long serialVersionUID = -2662307358852779897L;\n     private static final Log log = LogFactory.getLog(CloudControllerContext.class);\n \n-    public static final String KUB_GROUP_ID_TO_GROUP_MAP = \"KUB_GROUP_ID_TO_GROUP_MAP\";\n-    public static final String CC_CLUSTER_ID_TO_MEMBER_CTX = \"CC_CLUSTER_ID_TO_MEMBER_CTX\";\n-    public static final String CC_MEMBER_ID_TO_MEMBER_CTX = \"CC_MEMBER_ID_TO_MEMBER_CTX\";\n-    public static final String CC_MEMBER_ID_TO_SCH_TASK = \"CC_MEMBER_ID_TO_SCH_TASK\";\n-    public static final String CC_KUB_CLUSTER_ID_TO_KUB_CLUSTER_CTX = \"CC_KUB_CLUSTER_ID_TO_KUB_CLUSTER_CTX\";\n-    public static final String CC_CLUSTER_ID_TO_CLUSTER_CTX = \"CC_CLUSTER_ID_TO_CLUSTER_CTX\";\n-    public static final String CC_CARTRIDGE_TYPE_TO_PARTITION_IDS = \"CC_CARTRIDGE_TYPE_TO_PARTITION_IDS\";\n-    public static final String CC_CARTRIDGES = \"CC_CARTRIDGES\";\n-    public static final String CC_SERVICE_GROUPS = \"CC_SERVICE_GROUPS\";\n+    private static final String CC_CLUSTER_ID_TO_MEMBER_CTX_MAP = \"CC_CLUSTER_ID_TO_MEMBER_CTX_MAP\";\n+    private static final String CC_CLUSTER_ID_TO_CLUSTER_CTX = \"CC_CLUSTER_ID_TO_CLUSTER_CTX\";\n+    private static final String CC_MEMBER_ID_TO_MEMBER_CTX_MAP = \"CC_MEMBER_ID_TO_MEMBER_CTX_MAP\";\n+    private static final String CC_MEMBER_ID_TO_SCH_TASK_MAP = \"CC_MEMBER_ID_TO_SCH_TASK_MAP\";\n+    private static final String CC_KUB_GROUP_ID_TO_GROUP_MAP = \"CC_KUB_GROUP_ID_TO_GROUP_MAP\";\n+    private static final String CC_KUB_CLUSTER_ID_TO_KUB_CLUSTER_CTX_MAP = \"CC_KUB_CLUSTER_ID_TO_KUB_CLUSTER_CTX_MAP\";\n+    private static final String CC_CARTRIDGE_TYPE_TO_PARTITION_IDS_MAP = \"CC_CARTRIDGE_TYPE_TO_PARTITION_IDS_MAP\";\n+    private static final String CC_CARTRIDGE_TYPE_TO_CARTRIDGES_MAP = \"CC_CARTRIDGE_TYPE_TO_CARTRIDGES_MAP\";\n+    private static final String CC_SERVICE_GROUP_NAME_TO_SERVICE_GROUP_MAP = \"CC_SERVICE_GROUP_NAME_TO_SERVICE_GROUP_MAP\";\n+\n+    private static final String CC_CLUSTER_CTX_WRITE_LOCK = \"CC_CLUSTER_CTX_WRITE_LOCK\";\n+    private static final String CC_MEMBER_CTX_WRITE_LOCK = \"CC_MEMBER_CTX_WRITE_LOCK\";\n+    private static final String CC_SCH_TASK_WRITE_LOCK = \"CC_SCH_TASK_WRITE_LOCK\";\n+    private static final String CC_KUB_GROUP_WRITE_LOCK = \"CC_KUB_GROUP_WRITE_LOCK\";\n+    private static final String CC_KUB_CLUSTER_CTX_WRITE_LOCK = \"CC_KUB_CLUSTER_CTX_WRITE_LOCK\";\n+    private static final String CC_CARTRIDGES_WRITE_LOCK = \"CC_CARTRIDGES_WRITE_LOCK\";\n+    private static final String CC_SERVICE_GROUPS_WRITE_LOCK = \"CC_SERVICE_GROUPS_WRITE_LOCK\";\n \n     private static volatile CloudControllerContext instance;\n \n-    private final DistributedObjectProvider distributedObjectProvider;\n+    private final transient DistributedObjectProvider distributedObjectProvider;\n \n \t/* We keep following maps in order to make the look up time, small. */\n     \n@@ -124,21 +126,26 @@\n     private transient ExecutorService executorService = Executors.newFixedThreadPool(20);\n \n     /**\n-     * List of registered {@link org.apache.stratos.cloud.controller.domain.Cartridge}s\n+     * Map of registered {@link org.apache.stratos.cloud.controller.domain.Cartridge}s\n+     * Key - cartridge type\n+     * Value - cartridge\n      */\n-    private List<Cartridge> cartridges;\n+    private Map<String, Cartridge> cartridgeTypeToCartridgeMap;\n \n     /**\n-     * List of deployed service groups\n+     * Map of deployed service groups\n+     * Key - service group name\n+     * Value service group\n      */\n-    private List<ServiceGroup> serviceGroups;\n+    private Map<String, ServiceGroup> serviceGroupNameToServiceGroupMap;\n \n     private String streamId;\n     private boolean isPublisherRunning;\n     private boolean isTopologySyncRunning;\n     private boolean clustered;\n \n     private transient AsyncDataPublisher dataPublisher;\n+    private boolean coordinator;\n \n     private CloudControllerContext() {\n         // Check clustering status\n@@ -151,15 +158,15 @@ private CloudControllerContext() {\n         distributedObjectProvider = ServiceReferenceHolder.getInstance().getDistributedObjectProvider();\n \n         // Initialize objects\n-        kubernetesGroupsMap = distributedObjectProvider.getMap(KUB_GROUP_ID_TO_GROUP_MAP);\n-        clusterIdToMemberContextListMap = distributedObjectProvider.getMap(CC_CLUSTER_ID_TO_MEMBER_CTX);\n-        memberIdToMemberContextMap = distributedObjectProvider.getMap(CC_MEMBER_ID_TO_MEMBER_CTX);\n-        memberIdToScheduledTaskMap = distributedObjectProvider.getMap(CC_MEMBER_ID_TO_SCH_TASK);\n-        kubClusterIdToKubClusterContextMap = distributedObjectProvider.getMap(CC_KUB_CLUSTER_ID_TO_KUB_CLUSTER_CTX);\n+        kubernetesGroupsMap = distributedObjectProvider.getMap(CC_KUB_GROUP_ID_TO_GROUP_MAP);\n+        clusterIdToMemberContextListMap = distributedObjectProvider.getMap(CC_CLUSTER_ID_TO_MEMBER_CTX_MAP);\n+        memberIdToMemberContextMap = distributedObjectProvider.getMap(CC_MEMBER_ID_TO_MEMBER_CTX_MAP);\n+        memberIdToScheduledTaskMap = distributedObjectProvider.getMap(CC_MEMBER_ID_TO_SCH_TASK_MAP);\n+        kubClusterIdToKubClusterContextMap = distributedObjectProvider.getMap(CC_KUB_CLUSTER_ID_TO_KUB_CLUSTER_CTX_MAP);\n         clusterIdToContextMap = distributedObjectProvider.getMap(CC_CLUSTER_ID_TO_CLUSTER_CTX);\n-        cartridgeTypeToPartitionIdsMap = distributedObjectProvider.getMap(CC_CARTRIDGE_TYPE_TO_PARTITION_IDS);\n-        cartridges = distributedObjectProvider.getList(CC_CARTRIDGES);\n-        serviceGroups = distributedObjectProvider.getList(CC_SERVICE_GROUPS);\n+        cartridgeTypeToPartitionIdsMap = distributedObjectProvider.getMap(CC_CARTRIDGE_TYPE_TO_PARTITION_IDS_MAP);\n+        cartridgeTypeToCartridgeMap = distributedObjectProvider.getMap(CC_CARTRIDGE_TYPE_TO_CARTRIDGES_MAP);\n+        serviceGroupNameToServiceGroupMap = distributedObjectProvider.getMap(CC_SERVICE_GROUP_NAME_TO_SERVICE_GROUP_MAP);\n \n         // Update context from the registry\n         updateContextFromRegistry();\n@@ -176,51 +183,97 @@ public static CloudControllerContext getInstance() {\n         return instance;\n     }\n \n-    public List<Cartridge> getCartridges() {\n-        return cartridges;\n+    public java.util.Collection<Cartridge> getCartridges() {\n+        return cartridgeTypeToCartridgeMap.values();\n     }\n \n-    public void setCartridges(List<Cartridge> cartridges) {\n-        this.cartridges = cartridges;\n+    public void addCartridges(List<Cartridge> cartridges) {\n+        for(Cartridge cartridge : cartridges) {\n+            addCartridge(cartridge);\n+        }\n     }\n \n-    public void setServiceGroups(List<ServiceGroup> serviceGroups) {\n-        this.serviceGroups = serviceGroups;\n+    public void addServiceGroups(List<ServiceGroup> serviceGroups) {\n+        for(ServiceGroup serviceGroup : serviceGroups) {\n+            addServiceGroup(serviceGroup);\n+        }\n     }\n \n-    public List<ServiceGroup> getServiceGroups() {\n-        return this.serviceGroups;\n+    public Collection<ServiceGroup> getServiceGroups() {\n+        return serviceGroupNameToServiceGroupMap.values();\n     }\n \n     public Cartridge getCartridge(String cartridgeType) {\n-        for (Cartridge cartridge : cartridges) {\n-            if (cartridge.getType().equals(cartridgeType)) {\n-                return cartridge;\n-            }\n+        return cartridgeTypeToCartridgeMap.get(cartridgeType);\n+    }\n+\n+    private Lock acquireWriteLock(String object) {\n+        return distributedObjectProvider.acquireLock(object);\n+    }\n+\n+    public void releaseWriteLock(Lock lock) {\n+        distributedObjectProvider.releaseLock(lock);\n+    }\n+\n+    public Lock acquireClusterContextWriteLock() {\n+        return acquireWriteLock(CC_CLUSTER_CTX_WRITE_LOCK);\n+    }\n+\n+    public Lock acquireMemberContextWriteLock() {\n+        return acquireWriteLock(CC_MEMBER_CTX_WRITE_LOCK);\n+    }\n+\n+    public Lock acquireScheduleTaskWriteLock() {\n+        return acquireWriteLock(CC_SCH_TASK_WRITE_LOCK);\n+    }\n+\n+    public Lock acquireKubernetesGroupWriteLock() {\n+        return acquireWriteLock(CC_KUB_GROUP_WRITE_LOCK);\n+    }\n+\n+    public Lock acquireKubernetesClusterContextWriteLock() {\n+        return acquireWriteLock(CC_KUB_CLUSTER_CTX_WRITE_LOCK);\n+    }\n+\n+    public Lock acquireCartridgesWriteLock() {\n+        return acquireWriteLock(CC_CARTRIDGES_WRITE_LOCK);\n+    }\n+\n+    public Lock acquireServiceGroupsWriteLock() {\n+        return acquireWriteLock(CC_SERVICE_GROUPS_WRITE_LOCK);\n+    }\n+\n+    public void addCartridge(Cartridge cartridge) {\n+        cartridgeTypeToCartridgeMap.put(cartridge.getType(), cartridge);\n+    }\n+\n+    public void removeCartridge(Cartridge cartridge) {\n+        if(cartridgeTypeToCartridgeMap.containsKey(cartridge.getType())) {\n+            cartridgeTypeToCartridgeMap.remove(cartridge.getType());\n         }\n-        return null;\n     }\n \n-    public void addCartridge(Cartridge newCartridges) {\n-        distributedObjectProvider.addToList(cartridges, newCartridges);\n+    public void updateCartridge(Cartridge cartridge) {\n+        cartridgeTypeToCartridgeMap.put(cartridge.getType(), cartridge);\n     }\n \n     public ServiceGroup getServiceGroup(String name) {\n-        for (ServiceGroup serviceGroup : serviceGroups) {\n-            if (serviceGroup.getName().equals(name)) {\n-                return serviceGroup;\n-            }\n-        }\n-        return null;\n+        return serviceGroupNameToServiceGroupMap.get(name);\n     }\n \n-    public void addServiceGroup(ServiceGroup newServiceGroup) {\n-        distributedObjectProvider.addToList(serviceGroups, newServiceGroup);\n+    public void addServiceGroup(ServiceGroup serviceGroup) {\n+        serviceGroupNameToServiceGroupMap.put(serviceGroup.getName(), serviceGroup);\n     }\n \n-    public void removeServiceGroup(List<ServiceGroup> serviceGroup) {\n-        if (this.serviceGroups != null) {\n-            this.serviceGroups.removeAll(serviceGroup);\n+    public void removeServiceGroups(List<ServiceGroup> serviceGroups) {\n+        for(ServiceGroup serviceGroup : serviceGroups) {\n+            removeServiceGroup(serviceGroup);\n+        }\n+    }\n+\n+    private void removeServiceGroup(ServiceGroup serviceGroup) {\n+        if(serviceGroupNameToServiceGroupMap.containsKey(serviceGroup.getName())) {\n+            serviceGroupNameToServiceGroupMap.remove(serviceGroup.getName());\n         }\n     }\n \n@@ -257,38 +310,37 @@ public void setTopologySyncRunning(boolean isTopologySyncRunning) {\n     }\n \n     public void addMemberContext(MemberContext memberContext) {\n-        distributedObjectProvider.putToMap(memberIdToMemberContextMap, memberContext.getMemberId(), memberContext);\n+        memberIdToMemberContextMap.put(memberContext.getMemberId(), memberContext);\n \n         List<MemberContext> memberContextList;\n         if ((memberContextList = clusterIdToMemberContextListMap.get(memberContext.getClusterId())) == null) {\n             memberContextList = new ArrayList<MemberContext>();\n         }\n         if (memberContextList.contains(memberContext)) {\n-            distributedObjectProvider.removeFromList(memberContextList,memberContext);\n+            memberContextList.remove(memberContext);\n         }\n-        distributedObjectProvider.addToList(memberContextList, memberContext);\n-        distributedObjectProvider.putToMap(clusterIdToMemberContextListMap, memberContext.getClusterId(),\n-                memberContextList);\n+        memberContextList.add(memberContext);\n+        clusterIdToMemberContextListMap.put(memberContext.getClusterId(), memberContextList);\n         if (log.isDebugEnabled()) {\n             log.debug(\"Added member context to the cloud controller context: \" + memberContext);\n         }\n     }\n \n     public void addScheduledFutureJob(String memberId, ScheduledFuture<?> job) {\n-        distributedObjectProvider.putToMap(memberIdToScheduledTaskMap, memberId, job);\n+        memberIdToScheduledTaskMap.put(memberId, job);\n     }\n \n     public List<MemberContext> removeMemberContextsOfCluster(String clusterId) {\n         List<MemberContext> memberContextList = clusterIdToMemberContextListMap.get(clusterId);\n-        distributedObjectProvider.removeFromMap(clusterIdToMemberContextListMap, clusterId);\n+        clusterIdToMemberContextListMap.remove(clusterId);\n         if (memberContextList == null) {\n             return new ArrayList<MemberContext>();\n         }\n         for (MemberContext memberContext : memberContextList) {\n             String memberId = memberContext.getMemberId();\n-            distributedObjectProvider.removeFromMap(memberIdToMemberContextMap, memberId);\n+            memberIdToMemberContextMap.remove(memberId);\n             ScheduledFuture<?> task = memberIdToScheduledTaskMap.get(memberId);\n-            distributedObjectProvider.removeFromMap(memberIdToScheduledTaskMap, memberId);\n+            memberIdToScheduledTaskMap.remove(memberId);\n             stopTask(task);\n \n             if (log.isDebugEnabled()) {\n@@ -301,7 +353,7 @@ public void addScheduledFutureJob(String memberId, ScheduledFuture<?> job) {\n \n     public MemberContext removeMemberContext(String memberId, String clusterId) {\n         MemberContext removedMemberContext = memberIdToMemberContextMap.get(memberId);\n-        distributedObjectProvider.removeFromMap(memberIdToMemberContextMap, memberId);\n+        memberIdToMemberContextMap.remove(memberId);\n \n         List<MemberContext> memberContextList = clusterIdToMemberContextListMap.get(clusterId);\n         if (memberContextList != null) {\n@@ -315,10 +367,10 @@ public MemberContext removeMemberContext(String memberId, String clusterId) {\n                     iterator.remove();\n                 }\n             }\n-            distributedObjectProvider.putToMap(clusterIdToMemberContextListMap, clusterId, newCtxts);\n+            clusterIdToMemberContextListMap.put(clusterId, newCtxts);\n         }\n         ScheduledFuture<?> task = memberIdToScheduledTaskMap.get(memberId);\n-        distributedObjectProvider.removeFromMap(memberIdToScheduledTaskMap, memberId);\n+        memberIdToScheduledTaskMap.remove(memberId);\n         stopTask(task);\n         return removedMemberContext;\n     }\n@@ -339,7 +391,7 @@ public MemberContext getMemberContextOfMemberId(String memberId) {\n     }\n \n     public void addClusterContext(ClusterContext ctxt) {\n-        distributedObjectProvider.putToMap(clusterIdToContextMap, ctxt.getClusterId(), ctxt);\n+        clusterIdToContextMap.put(ctxt.getClusterId(), ctxt);\n     }\n \n     public ClusterContext getClusterContext(String clusterId) {\n@@ -348,7 +400,7 @@ public ClusterContext getClusterContext(String clusterId) {\n \n     public ClusterContext removeClusterContext(String clusterId) {\n         ClusterContext removed = clusterIdToContextMap.get(clusterId);\n-        distributedObjectProvider.removeFromMap(clusterIdToContextMap, clusterId);\n+        clusterIdToContextMap.remove(clusterId);\n         return removed;\n     }\n \n@@ -366,19 +418,19 @@ public void addToCartridgeTypeToPartitionIdMap(String cartridgeType, String part\n             list = new ArrayList<String>();\n         }\n         list.add(partitionId);\n-        distributedObjectProvider.putToMap(cartridgeTypeToPartitionIdsMap, cartridgeType, list);\n+        cartridgeTypeToPartitionIdsMap.put(cartridgeType, list);\n     }\n \n     public void removeFromCartridgeTypeToPartitionIds(String cartridgeType) {\n-        distributedObjectProvider.removeFromMap(cartridgeTypeToPartitionIdsMap, cartridgeType);\n+        cartridgeTypeToPartitionIdsMap.remove(cartridgeType);\n     }\n \n     public KubernetesClusterContext getKubernetesClusterContext(String kubClusterId) {\n         return kubClusterIdToKubClusterContextMap.get(kubClusterId);\n     }\n \n     public void addKubernetesClusterContext(KubernetesClusterContext kubernetesClusterContext) {\n-        distributedObjectProvider.putToMap(kubClusterIdToKubClusterContextMap,\n+        kubClusterIdToKubClusterContextMap.put(\n                 kubernetesClusterContext.getKubernetesClusterId(),\n                 kubernetesClusterContext);\n     }\n@@ -388,7 +440,7 @@ public void addKubernetesClusterContext(KubernetesClusterContext kubernetesClust\n      */\n     public synchronized void removeKubernetesGroup(String kubernetesGroupId) {\n         // Remove entry from information model\n-        distributedObjectProvider.removeFromMap(kubernetesGroupsMap, kubernetesGroupId);\n+        kubernetesGroupsMap.remove(kubernetesGroupId);\n     }\n \n     /**\n@@ -435,8 +487,12 @@ public synchronized boolean removeKubernetesHost(String kubernetesHostId) throws\n         }\n     }\n \n-    public void addKubernetesGroupToInformationModel(KubernetesGroup kubernetesGroup) {\n-        distributedObjectProvider.putToMap(kubernetesGroupsMap, kubernetesGroup.getGroupId(), kubernetesGroup);\n+    public void addKubernetesGroup(KubernetesGroup kubernetesGroup) {\n+        kubernetesGroupsMap.put(kubernetesGroup.getGroupId(), kubernetesGroup);\n+    }\n+\n+    public void updateKubernetesGroup(KubernetesGroup kubernetesGroup) {\n+        kubernetesGroupsMap.put(kubernetesGroup.getGroupId(), kubernetesGroup);\n     }\n     \n     public boolean kubernetesGroupExists(KubernetesGroup kubernetesGroup) {\n@@ -525,9 +581,11 @@ public boolean isClustered() {\n     }\n \n     public boolean isCoordinator() {\n-        AxisConfiguration axisConfiguration = ServiceReferenceHolder.getInstance().getAxisConfiguration();\n-        ClusteringAgent clusteringAgent = axisConfiguration.getClusteringAgent();\n-        return ((axisConfiguration != null) && (clusteringAgent != null) && (clusteringAgent.isCoordinator()));\n+        return coordinator;\n+    }\n+\n+    public void setCoordinator(boolean coordinator) {\n+        this.coordinator = coordinator;\n     }\n \n     public void persist() throws RegistryException {\n@@ -548,13 +606,11 @@ private void updateContextFromRegistry() {\n                         copyMap(serializedObj.kubernetesGroupsMap, kubernetesGroupsMap);\n                         copyMap(serializedObj.clusterIdToMemberContextListMap, clusterIdToMemberContextListMap);\n                         copyMap(serializedObj.memberIdToMemberContextMap, memberIdToMemberContextMap);\n-                        copyMap(serializedObj.memberIdToScheduledTaskMap, memberIdToScheduledTaskMap);\n                         copyMap(serializedObj.kubClusterIdToKubClusterContextMap, kubClusterIdToKubClusterContextMap);\n                         copyMap(serializedObj.clusterIdToContextMap, clusterIdToContextMap);\n                         copyMap(serializedObj.cartridgeTypeToPartitionIdsMap, cartridgeTypeToPartitionIdsMap);\n-\n-                        copyList(serializedObj.getCartridges(), cartridges);\n-                        copyList(serializedObj.getServiceGroups(), serviceGroups);\n+                        copyMap(serializedObj.cartridgeTypeToCartridgeMap, cartridgeTypeToCartridgeMap);\n+                        copyMap(serializedObj.serviceGroupNameToServiceGroupMap, serviceGroupNameToServiceGroupMap);\n \n                         if (log.isDebugEnabled()) {\n                             log.debug(\"Cloud controller context is read from the registry\");\n@@ -575,13 +631,13 @@ private void updateContextFromRegistry() {\n \n     private void copyMap(Map sourceMap, Map destinationMap) {\n         for(Object key : sourceMap.keySet()) {\n-            distributedObjectProvider.putToMap(destinationMap, key, sourceMap.get(key));\n+            destinationMap.put(key, sourceMap.get(key));\n         }\n     }\n \n     private void copyList(List sourceList, List destinationList) {\n         for(Object item : sourceList) {\n-            distributedObjectProvider.addToList(destinationList, item);\n+            destinationList.add(item);\n         }\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/context/CloudControllerContext.java",
                "sha": "d3a61bd399461002dd7cf486a6292437d5784ae8",
                "status": "modified"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/FloatingNetwork.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/FloatingNetwork.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/FloatingNetwork.java",
                "patch": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one \n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY \n+ * KIND, either express or implied.  See the License for the \n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.stratos.cloud.controller.domain;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Every {@link NetworkInterface} can have \n+ * an array of {@link FloatingNetwork} \n+ * to which the network interface is associated\n+ * @author rajkumar\n+ */\n+public class FloatingNetwork implements Serializable{\n+\n+\tprivate static final long serialVersionUID = -432127317992004321L;\n+\tprivate String name;\n+\tprivate String networkUuid;\n+\tprivate String floatingIP;\n+\t\n+\tpublic FloatingNetwork() {\n+\t}\n+\t\n+\tpublic FloatingNetwork(String name, String networkUuid, String flotingIP) {\n+\t\tthis.name = name;\n+\t\tthis.networkUuid = networkUuid;\n+\t\tthis.floatingIP = flotingIP;\n+\t}\n+\t\n+\tpublic String getName() {\n+\t\treturn name;\n+\t}\n+\n+\tpublic void setName(String name) {\n+\t\tthis.name = name;\n+\t}\n+\n+\tpublic String getNetworkUuid() {\n+\t\treturn networkUuid;\n+\t}\n+\n+\tpublic void setNetworkUuid(String networkUuid) {\n+\t\tthis.networkUuid = networkUuid;\n+\t}\n+\t\n+\tpublic String getFloatingIP() {\n+\t\treturn floatingIP;\n+\t}\n+\n+\tpublic void setFloatingIP(String floatingIP) {\n+\t\tthis.floatingIP = floatingIP;\n+\t}\n+\n+\tpublic String toString() {\n+    \tStringBuilder sb = new StringBuilder('{');\n+    \tString delimeter = \"\";\n+    \tif (name != null) {\n+    \t\tsb.append(delimeter).append(\"name : \").append(name);\n+    \t\tdelimeter = \", \";\n+    \t}\n+    \tif (networkUuid != null) {\n+    \t\tsb.append(delimeter).append(\"networkUuid : \").append(networkUuid);\n+    \t\tdelimeter = \", \";\n+    \t}\n+    \tif (floatingIP != null) {\n+    \t\tsb.append(delimeter).append(\"floatingIP : \").append(floatingIP);\n+    \t\tdelimeter = \", \";\n+    \t}\n+    \tsb.append('}');\n+        return sb.toString();\n+\t}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/FloatingNetwork.java",
                "sha": "8a83733e63aad04a6a208b21d8ea082f6af4773b",
                "status": "added"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/FloatingNetworks.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/FloatingNetworks.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/FloatingNetworks.java",
                "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one \n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ * \n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY \n+ * KIND, either express or implied.  See the License for the \n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.stratos.cloud.controller.domain;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+/**\n+ * Wrapping {@link FloatingNetwork} array\n+ * @author rajkumar\n+ */\n+public class FloatingNetworks implements Serializable{\n+\t\n+\tprivate static final long serialVersionUID = -6754884581236402662L;\n+\tprivate FloatingNetwork[] floatingNetworks;\n+\t\n+\tpublic FloatingNetwork[] getFloatingNetworks() {\n+\t\treturn floatingNetworks;\n+\t}\n+\tpublic void setFloatingNetworks(FloatingNetwork[] floatingNetworks) {\n+\t\tthis.floatingNetworks = floatingNetworks;\n+\t}\n+\t\n+\t@Override\n+    public String toString() {\n+        return \"FloatingNetworks [FloatingNetworks =\" + Arrays.toString(floatingNetworks) + \"]\";\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/FloatingNetworks.java",
                "sha": "01ecda1d4317f1d927a44ee04acc1389723fb5b8",
                "status": "added"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/NetworkInterface.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/NetworkInterface.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/NetworkInterface.java",
                "patch": "@@ -29,6 +29,7 @@\n \tprivate String networkUuid;\n \tprivate String fixedIp;\n \tprivate String portUuid;\n+\tprivate FloatingNetworks floatingNetworks;\n \t\n \tpublic NetworkInterface() {\n \t}\n@@ -76,6 +77,20 @@ public void setPortUuid(String portUuid) {\n \t\tthis.portUuid = portUuid;\n \t}\n \t\n+\t/**\n+\t* @return {@link FloatingNetworks}\n+\t*/\n+\tpublic FloatingNetworks getFloatingNetworks() {\n+\t\treturn floatingNetworks;\n+\t}\n+\t\n+\t/**\n+\t* @param floatingNetworks the {@link FloatingNetworks} to be set\n+\t*/\n+\tpublic void setFloatingNetworks(FloatingNetworks floatingNetworks) {\n+\t\tthis.floatingNetworks = floatingNetworks;\n+\t}\n+\t\n \tpublic String toString() {\n     \tStringBuilder sb = new StringBuilder('{');\n     \tString delimeter = \"\";",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/domain/NetworkInterface.java",
                "sha": "7c1fea11f8613867b231277ff412e09724b1a0c8",
                "status": "modified"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/CloudControllerServiceComponent.java",
                "changes": 136,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/CloudControllerServiceComponent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 49,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/CloudControllerServiceComponent.java",
                "patch": "@@ -20,7 +20,6 @@\n  *\n */\n \n-\n import com.hazelcast.core.HazelcastInstance;\n \n import org.apache.commons.logging.Log;\n@@ -34,21 +33,25 @@\n import org.apache.stratos.cloud.controller.messaging.publisher.TopologySynchronizerTaskScheduler;\n import org.apache.stratos.cloud.controller.messaging.receiver.instance.status.InstanceStatusTopicReceiver;\n import org.apache.stratos.common.clustering.DistributedObjectProvider;\n+import org.apache.stratos.common.threading.StratosThreadPool;\n import org.apache.stratos.messaging.broker.publish.EventPublisherPool;\n import org.apache.stratos.messaging.util.Util;\n import org.osgi.framework.BundleContext;\n import org.osgi.service.component.ComponentContext;\n-import org.wso2.carbon.caching.impl.DistributedMapProvider;\n import org.wso2.carbon.ntask.core.service.TaskService;\n import org.wso2.carbon.registry.core.exceptions.RegistryException;\n import org.wso2.carbon.registry.core.service.RegistryService;\n import org.wso2.carbon.registry.core.session.UserRegistry;\n import org.wso2.carbon.utils.ConfigurationContextService;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * Registering Cloud Controller Service.\n  *\n  * @scr.component name=\"org.apache.stratos.cloud.controller\" immediate=\"true\"\n+ * @scr.reference name=\"hazelcast.instance.service\" interface=\"com.hazelcast.core.HazelcastInstance\"\n+ *                cardinality=\"0..1\"policy=\"dynamic\" bind=\"setHazelcastInstance\" unbind=\"unsetHazelcastInstance\"\n  * @scr.reference name=\"distributedObjectProvider\" interface=\"org.apache.stratos.common.clustering.DistributedObjectProvider\"\n  *                cardinality=\"1..1\" policy=\"dynamic\" bind=\"setDistributedObjectProvider\" unbind=\"unsetDistributedObjectProvider\"\n  * @scr.reference name=\"ntask.component\" interface=\"org.wso2.carbon.ntask.core.service.TaskService\"\n@@ -60,57 +63,84 @@\n  */\n public class CloudControllerServiceComponent {\n \n-    private static final Log log = LogFactory.getLog(CloudControllerServiceComponent.class);\n-    private ClusterStatusTopicReceiver clusterStatusTopicReceiver;\n-    private InstanceStatusTopicReceiver instanceStatusTopicReceiver;\n-    private ApplicationTopicReceiver applicationTopicReceiver;\n+\tprivate static final Log log = LogFactory.getLog(CloudControllerServiceComponent.class);\n+\tprivate ClusterStatusTopicReceiver clusterStatusTopicReceiver;\n+\tprivate InstanceStatusTopicReceiver instanceStatusTopicReceiver;\n+\tprivate ApplicationTopicReceiver applicationTopicReceiver;\n+    private ExecutorService executorService;\n \n-    protected void activate(ComponentContext context) {\n-        try {\n-            applicationTopicReceiver = new ApplicationTopicReceiver();\n-            Thread tApplicationTopicReceiver = new Thread(applicationTopicReceiver);\n-            tApplicationTopicReceiver.start();\n+    private static final String THREAD_IDENTIFIER_KEY = \"threadPool.autoscaler.identifier\";\n+\tprivate static final String DEFAULT_IDENTIFIER = \"Cloud-Controller\";\n+\tprivate static final String THREAD_POOL_SIZE_KEY = \"threadPool.cloudcontroller.threadPoolSize\";\n+\tprivate static final String COMPONENTS_CONFIG = \"stratos-config\";\n+\tprivate static final int THREAD_POOL_SIZE = 10;\n+    private static final String CLOUD_CONTROLLER_COORDINATOR_LOCK = \"CLOUD_CONTROLLER_COORDINATOR_LOCK\";\n \n-            if (log.isInfoEnabled()) {\n-                log.info(\"Application event receiver thread started\");\n+    protected void activate(ComponentContext context) {\n+\t\ttry {\n+\t\t\texecutorService = StratosThreadPool.getExecutorService(DEFAULT_IDENTIFIER, THREAD_POOL_SIZE);\n+\n+\t\t\t// Register cloud controller service\n+\t\t\tBundleContext bundleContext = context.getBundleContext();\n+\t\t\tbundleContext.registerService(CloudControllerService.class.getName(),\n+\t\t\t                              new CloudControllerServiceImpl(), null);\n+\n+            if(CloudControllerContext.getInstance().isClustered()) {\n+                Thread coordinatorElectorThread = new Thread() {\n+                    @Override\n+                    public void run() {\n+                        ServiceReferenceHolder.getInstance().getHazelcastInstance()\n+                                .getLock(CLOUD_CONTROLLER_COORDINATOR_LOCK).lock();\n+\n+                        log.info(\"Elected this member [\" + ServiceReferenceHolder.getInstance().getHazelcastInstance()\n+                                .getCluster().getLocalMember().getUuid() + \"] \" +\n+                                \"as the cloud controller coordinator for the cluster\");\n+\n+                        CloudControllerContext.getInstance().setCoordinator(true);\n+                        executeCoordinatorTasks();\n+                    }\n+                };\n+                coordinatorElectorThread.setName(\"Cloud controller coordinator elector thread\");\n+                executorService.submit(coordinatorElectorThread);\n+            } else {\n+                executeCoordinatorTasks();\n             }\n+\t\t} catch (Throwable e) {\n+\t\t\tlog.error(\"******* Cloud Controller Service bundle is failed to activate ****\", e);\n+        }\n+    }\n \n-            clusterStatusTopicReceiver = new ClusterStatusTopicReceiver();\n-            Thread tClusterStatusTopicReceiver = new Thread(clusterStatusTopicReceiver);\n-            tClusterStatusTopicReceiver.start();\n+    private void executeCoordinatorTasks() {\n+        applicationTopicReceiver = new ApplicationTopicReceiver();\n+        applicationTopicReceiver.setExecutorService(executorService);\n+        applicationTopicReceiver.execute();\n \n-            if (log.isInfoEnabled()) {\n-                log.info(\"Cluster status receiver thread started\");\n-            }\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Application Receiver thread started\");\n+        }\n \n-            instanceStatusTopicReceiver = new InstanceStatusTopicReceiver();\n-            Thread tInstanceStatusTopicReceiver = new Thread(instanceStatusTopicReceiver);\n-            tInstanceStatusTopicReceiver.start();\n-            if(log.isInfoEnabled()) {\n-                log.info(\"Instance status message receiver thread started\");\n-            }\n+        clusterStatusTopicReceiver = new ClusterStatusTopicReceiver();\n+        clusterStatusTopicReceiver.setExecutorService(executorService);\n+        clusterStatusTopicReceiver.execute();\n \n-        \t// Register cloud controller service\n-            BundleContext bundleContext = context.getBundleContext();\n-            bundleContext.registerService(CloudControllerService.class.getName(),\n-                    new CloudControllerServiceImpl(), null);\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Cluster status Receiver thread started\");\n+        }\n \n-            if(log.isInfoEnabled()) {\n-                log.info(\"Scheduling tasks\");\n-            }\n+        instanceStatusTopicReceiver = new InstanceStatusTopicReceiver();\n+        instanceStatusTopicReceiver.setExecutorService(executorService);\n+        instanceStatusTopicReceiver.execute();\n \n-            if ((!CloudControllerContext.getInstance().isClustered()) ||\n-                    (CloudControllerContext.getInstance().isCoordinator())) {\n-                TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());\n-                if(log.isInfoEnabled()) {\n-                    log.info(\"Topology synchronizer task scheduled\");\n-                }\n-            }\n-        } catch (Throwable e) {\n-            log.error(\"**** Cloud controller service bundle is failed to activate ****\", e);\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Instance status message receiver thread started\");\n         }\n+\n+        if (log.isInfoEnabled()) {\n+            log.info(\"Scheduling topology synchronizer task\");\n+        }\n+        TopologySynchronizerTaskScheduler.schedule(ServiceReferenceHolder.getInstance().getTaskService());\n     }\n-    \n+\n     protected void setTaskService(TaskService taskService) {\n         if (log.isDebugEnabled()) {\n             log.debug(\"Setting the Task Service\");\n@@ -124,20 +154,20 @@ protected void unsetTaskService(TaskService taskService) {\n         }\n         ServiceReferenceHolder.getInstance().setTaskService(null);\n     }\n-    \n+\n \tprotected void setRegistryService(RegistryService registryService) {\n \t\tif (log.isDebugEnabled()) {\n \t\t\tlog.debug(\"Setting the Registry Service\");\n \t\t}\n-\t\t\n-\t\ttry {\t\t\t\n+\n+\t\ttry {\n \t\t\tUserRegistry registry = registryService.getGovernanceSystemRegistry();\n \t        ServiceReferenceHolder.getInstance().setRegistry(registry);\n         } catch (RegistryException e) {\n         \tString msg = \"Failed when retrieving Governance System Registry.\";\n         \tlog.error(msg, e);\n         \tthrow new CloudControllerException(msg, e);\n-        } \n+        }\n \t}\n \n \tprotected void unsetRegistryService(RegistryService registryService) {\n@@ -146,7 +176,7 @@ protected void unsetRegistryService(RegistryService registryService) {\n         }\n         ServiceReferenceHolder.getInstance().setRegistry(null);\n \t}\n-\t\n+\n \tprotected void setConfigurationContextService(ConfigurationContextService cfgCtxService) {\n         ServiceReferenceHolder.getInstance().setAxisConfiguration(\n                 cfgCtxService.getServerConfigContext().getAxisConfiguration());\n@@ -156,16 +186,24 @@ protected void unsetConfigurationContextService(ConfigurationContextService cfgC\n         ServiceReferenceHolder.getInstance().setAxisConfiguration(null);\n     }\n \n+    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        ServiceReferenceHolder.getInstance().setHazelcastInstance(hazelcastInstance);\n+    }\n+\n+    public void unsetHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        ServiceReferenceHolder.getInstance().setHazelcastInstance(null);\n+    }\n+\n     protected void setDistributedObjectProvider(DistributedObjectProvider distributedObjectProvider) {\n         ServiceReferenceHolder.getInstance().setDistributedObjectProvider(distributedObjectProvider);\n     }\n \n     protected void unsetDistributedObjectProvider(DistributedObjectProvider distributedObjectProvider) {\n         ServiceReferenceHolder.getInstance().setDistributedObjectProvider(null);\n     }\n-\t\n+\n \tprotected void deactivate(ComponentContext ctx) {\n         // Close event publisher connections to message broker\n         EventPublisherPool.close(Util.Topics.TOPOLOGY_TOPIC.getTopicName());\n \t}\n-}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/CloudControllerServiceComponent.java",
                "sha": "ed1b0f54faba025582f25194237a7f40b18dca56",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/ServiceReferenceHolder.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/ServiceReferenceHolder.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/ServiceReferenceHolder.java",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.stratos.cloud.controller.internal;\n \n+import com.hazelcast.core.HazelcastInstance;\n import org.apache.axis2.engine.AxisConfiguration;\n import org.apache.stratos.common.clustering.DistributedObjectProvider;\n import org.wso2.carbon.ntask.core.service.TaskService;\n@@ -34,6 +35,7 @@\n     private Registry registry;\n     private AxisConfiguration axisConfiguration;\n     private DistributedObjectProvider distributedObjectProvider;\n+    private HazelcastInstance hazelcastInstance;\n \n     private ServiceReferenceHolder() {\n     }\n@@ -76,4 +78,12 @@ public void setDistributedObjectProvider(DistributedObjectProvider distributedOb\n     public DistributedObjectProvider getDistributedObjectProvider() {\n         return distributedObjectProvider;\n     }\n+\n+    public void setHazelcastInstance(HazelcastInstance hazelcastInstance) {\n+        this.hazelcastInstance = hazelcastInstance;\n+    }\n+\n+    public HazelcastInstance getHazelcastInstance() {\n+        return hazelcastInstance;\n+    }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/internal/ServiceReferenceHolder.java",
                "sha": "bbee450444aff2b4debfc355c92b9ab398c2d30d",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/application/ApplicationTopicReceiver.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/application/ApplicationTopicReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 32,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/application/ApplicationTopicReceiver.java",
                "patch": "@@ -22,60 +22,64 @@\n import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.cloud.controller.messaging.topology.TopologyBuilder;\n import org.apache.stratos.messaging.event.Event;\n-import org.apache.stratos.messaging.event.applications.ApplicationTerminatedEvent;\n+import org.apache.stratos.messaging.event.applications.ApplicationInstanceTerminatedEvent;\n import org.apache.stratos.messaging.listener.applications.ApplicationTerminatedEventListener;\n import org.apache.stratos.messaging.message.receiver.applications.ApplicationsEventReceiver;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * This is to receive the application topic messages.\n  */\n-public class ApplicationTopicReceiver implements Runnable{\n-    private static final Log log = LogFactory.getLog(ApplicationTopicReceiver.class);\n-    private ApplicationsEventReceiver applicationsEventReceiver;\n-    private boolean terminated;\n+public class ApplicationTopicReceiver {\n+\tprivate static final Log log = LogFactory.getLog(ApplicationTopicReceiver.class);\n+\tprivate ApplicationsEventReceiver applicationsEventReceiver;\n+\tprivate boolean terminated;\n+\tprivate ExecutorService executorService;\n \n-    public ApplicationTopicReceiver() {\n-        this.applicationsEventReceiver = new ApplicationsEventReceiver();\n-        addEventListeners();\n+\tpublic ApplicationTopicReceiver() {\n+\t\tthis.applicationsEventReceiver = new ApplicationsEventReceiver();\n+\t\taddEventListeners();\n \n-    }\n+\t}\n \n-    \n-    @Override\n-    public void run() {\n+\tpublic void execute() {\n \n-        if (log.isInfoEnabled()) {\n-            log.info(\"Cloud controller application status thread started\");\n-        }\n-        Thread thread = new Thread(applicationsEventReceiver);\n-        thread.start();\n+\t\tif (log.isInfoEnabled()) {\n+\t\t\tlog.info(\"Cloud controller application status thread started\");\n+\t\t}\n+\t\tapplicationsEventReceiver.setExecutorService(executorService);\n+\t\tapplicationsEventReceiver.execute();\n \n-        // Keep the thread live until terminated\n-        while (!terminated) {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException ignore) {\n-            }\n-        }\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Cloud controller application status thread terminated\");\n-        }\n \n-    }\n+\t\tif (log.isInfoEnabled()) {\n+\t\t\tlog.info(\"Cloud controller application status thread terminated\");\n+\t\t}\n+\n+\t}\n+\n+\tpublic void setTerminated(boolean terminated) {\n+\t\tthis.terminated = terminated;\n+\t}\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n     private void addEventListeners() {\n         applicationsEventReceiver.addEventListener(new ApplicationTerminatedEventListener() {\n             @Override\n             protected void onEvent(Event event) {\n                 //Remove the application related data\n-                ApplicationTerminatedEvent terminatedEvent = (ApplicationTerminatedEvent)event;\n+                ApplicationInstanceTerminatedEvent terminatedEvent = (ApplicationInstanceTerminatedEvent)event;\n                 log.info(\"ApplicationTerminatedEvent received for [application] \" + terminatedEvent.getAppId());\n                 String appId = terminatedEvent.getAppId();\n                 TopologyBuilder.handleApplicationClustersRemoved(appId, terminatedEvent.getClusterData());\n             }\n         });\n     }\n \n-    public void setTerminated(boolean terminated) {\n-        this.terminated = terminated;\n-    }\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/application/ApplicationTopicReceiver.java",
                "sha": "e8d3674045cb46966d9f553e25fca9875ae0a31f",
                "status": "modified"
            },
            {
                "additions": 87,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/cluster/status/ClusterStatusTopicReceiver.java",
                "changes": 172,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/cluster/status/ClusterStatusTopicReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 85,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/cluster/status/ClusterStatusTopicReceiver.java",
                "patch": "@@ -26,89 +26,91 @@\n import org.apache.stratos.messaging.listener.cluster.status.*;\n import org.apache.stratos.messaging.message.receiver.cluster.status.ClusterStatusEventReceiver;\n \n-public class ClusterStatusTopicReceiver implements Runnable{\n-    private static final Log log = LogFactory.getLog(ClusterStatusTopicReceiver.class);\n-\n-    private ClusterStatusEventReceiver statusEventReceiver;\n-    private boolean terminated;\n-\n-    public ClusterStatusTopicReceiver() {\n-        this.statusEventReceiver = new ClusterStatusEventReceiver();\n-        addEventListeners();\n-    }\n-\n-    public void run() {\n-        Thread thread = new Thread(statusEventReceiver);\n-        thread.start();\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Cloud controller Cluster status thread started\");\n-        }\n-\n-        // Keep the thread live until terminated\n-        while (!terminated) {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException ignore) {\n-            }\n-        }\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Cloud controller application status thread terminated\");\n-        }\n-\n-    }\n-    private void addEventListeners() {\n-        // Listen to topology events that affect clusters\n-        statusEventReceiver.addEventListener(new ClusterStatusClusterResetEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                TopologyBuilder.handleClusterReset((ClusterStatusClusterResetEvent) event);\n-            }\n-        });\n-\n-        statusEventReceiver.addEventListener(new ClusterStatusClusterInstanceCreatedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                //TopologyBuilder.handleClusterInstanceCreated((ClusterStatusClusterInstanceCreatedEvent) event);\n-            }\n-        });\n-\n-        statusEventReceiver.addEventListener(new ClusterStatusClusterCreatedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                TopologyBuilder.handleClusterCreated((ClusterStatusClusterCreatedEvent) event);\n-            }\n-        });\n-\n-        statusEventReceiver.addEventListener(new ClusterStatusClusterActivatedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                TopologyBuilder.handleClusterActivatedEvent((ClusterStatusClusterActivatedEvent) event);\n-            }\n-        });\n-\n-        statusEventReceiver.addEventListener(new ClusterStatusClusterTerminatedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                TopologyBuilder.handleClusterTerminatedEvent((ClusterStatusClusterTerminatedEvent) event);\n-            }\n-        });\n-\n-        statusEventReceiver.addEventListener(new ClusterStatusClusterTerminatingEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                TopologyBuilder.handleClusterTerminatingEvent((ClusterStatusClusterTerminatingEvent) event);\n-            }\n-        });\n-\n-        statusEventReceiver.addEventListener(new ClusterStatusClusterInactivateEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                TopologyBuilder.handleClusterInActivateEvent((ClusterStatusClusterInactivateEvent) event);\n-            }\n-        });\n-    }\n-\n-    public void setTerminated(boolean terminated) {\n-        this.terminated = terminated;\n-    }\n+import java.util.concurrent.ExecutorService;\n+\n+public class ClusterStatusTopicReceiver {\n+\tprivate static final Log log = LogFactory.getLog(ClusterStatusTopicReceiver.class);\n+\n+\tprivate ClusterStatusEventReceiver statusEventReceiver;\n+\tprivate boolean terminated;\n+\tprivate ExecutorService executorService;\n+\n+\tpublic ClusterStatusTopicReceiver() {\n+\t\tthis.statusEventReceiver = new ClusterStatusEventReceiver();\n+\n+\t\taddEventListeners();\n+\t}\n+\n+\tpublic void execute() {\n+\t\tstatusEventReceiver.setExecutorService(executorService);\n+\t\tstatusEventReceiver.execute();\n+\t\tif (log.isInfoEnabled()) {\n+\t\t\tlog.info(\"Cloud controller Cluster status thread started\");\n+\t\t}\n+\n+\t}\n+\n+\tprivate void addEventListeners() {\n+\t\t// Listen to topology events that affect clusters\n+\t\tstatusEventReceiver.addEventListener(new ClusterStatusClusterResetEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\tTopologyBuilder.handleClusterReset((ClusterStatusClusterResetEvent) event);\n+\t\t\t}\n+\t\t});\n+\n+\t\tstatusEventReceiver.addEventListener(new ClusterStatusClusterInstanceCreatedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\t//TopologyBuilder.handleClusterInstanceCreated((ClusterStatusClusterInstanceCreatedEvent) event);\n+\t\t\t}\n+\t\t});\n+\n+\t\tstatusEventReceiver.addEventListener(new ClusterStatusClusterCreatedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\tTopologyBuilder.handleClusterCreated((ClusterStatusClusterCreatedEvent) event);\n+\t\t\t}\n+\t\t});\n+\n+\t\tstatusEventReceiver.addEventListener(new ClusterStatusClusterActivatedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\tTopologyBuilder.handleClusterActivatedEvent((ClusterStatusClusterActivatedEvent) event);\n+\t\t\t}\n+\t\t});\n+\n+\t\tstatusEventReceiver.addEventListener(new ClusterStatusClusterTerminatedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\tTopologyBuilder.handleClusterTerminatedEvent((ClusterStatusClusterTerminatedEvent) event);\n+\t\t\t}\n+\t\t});\n+\n+\t\tstatusEventReceiver.addEventListener(new ClusterStatusClusterTerminatingEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\tTopologyBuilder.handleClusterTerminatingEvent((ClusterStatusClusterTerminatingEvent) event);\n+\t\t\t}\n+\t\t});\n+\n+\t\tstatusEventReceiver.addEventListener(new ClusterStatusClusterInactivateEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\tTopologyBuilder.handleClusterInActivateEvent((ClusterStatusClusterInactivateEvent) event);\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic void setTerminated(boolean terminated) {\n+\t\tthis.terminated = terminated;\n+\t}\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/cluster/status/ClusterStatusTopicReceiver.java",
                "sha": "6a5fd5a55185860d12915b113d2fad77977e5304",
                "status": "modified"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/instance/status/InstanceStatusTopicReceiver.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/instance/status/InstanceStatusTopicReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 62,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/instance/status/InstanceStatusTopicReceiver.java",
                "patch": "@@ -32,80 +32,81 @@\n import org.apache.stratos.messaging.listener.instance.status.InstanceStartedEventListener;\n import org.apache.stratos.messaging.message.receiver.instance.status.InstanceStatusEventReceiver;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * This will handle the instance status events\n  */\n-public class InstanceStatusTopicReceiver implements Runnable {\n-    private static final Log log = LogFactory.getLog(InstanceStatusTopicReceiver.class);\n+public class InstanceStatusTopicReceiver {\n+\tprivate static final Log log = LogFactory.getLog(InstanceStatusTopicReceiver.class);\n \n-    private InstanceStatusEventReceiver statusEventReceiver;\n-    private boolean terminated;\n+\tprivate InstanceStatusEventReceiver statusEventReceiver;\n+\tprivate boolean terminated;\n+\tprivate ExecutorService executorService;\n \n-    public InstanceStatusTopicReceiver() {\n-        this.statusEventReceiver = new InstanceStatusEventReceiver();\n-        addEventListeners();\n-    }\n+\tpublic InstanceStatusTopicReceiver() {\n+\t\tthis.statusEventReceiver = new InstanceStatusEventReceiver();\n+\t\taddEventListeners();\n+\t}\n \n+\tpublic void execute() {\n+\t\tstatusEventReceiver.setExecutorService(executorService);\n+\t\tstatusEventReceiver.execute();\n+\t\tif (log.isInfoEnabled()) {\n+\t\t\tlog.info(\"Cloud controller application status thread started\");\n+\t\t}\n \n-    @Override\n-    public void run() {\n-        Thread thread = new Thread(statusEventReceiver);\n-        thread.start();\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Cloud controller application status thread started\");\n-        }\n-        ///* Keep the thread live until terminated\n-        while (!terminated) {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException ignore) {\n-            }\n-        }\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Cloud controller application status thread terminated\");\n-        }\n-    }\n+\t\tif (log.isInfoEnabled()) {\n+\t\t\tlog.info(\"Cloud controller application status thread terminated\");\n+\t\t}\n+\t}\n \n-    private void addEventListeners() {\n-        statusEventReceiver.addEventListener(new InstanceActivatedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                TopologyBuilder.handleMemberActivated((InstanceActivatedEvent) event);\n-            }\n-        });\n+\tprivate void addEventListeners() {\n+\t\tstatusEventReceiver.addEventListener(new InstanceActivatedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\tTopologyBuilder.handleMemberActivated((InstanceActivatedEvent) event);\n+\t\t\t}\n+\t\t});\n \n-        statusEventReceiver.addEventListener(new InstanceStartedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                TopologyBuilder.handleMemberStarted((InstanceStartedEvent) event);\n-            }\n-        });\n+\t\tstatusEventReceiver.addEventListener(new InstanceStartedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\tTopologyBuilder.handleMemberStarted((InstanceStartedEvent) event);\n+\t\t\t}\n+\t\t});\n \n-        statusEventReceiver.addEventListener(new InstanceReadyToShutdownEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                try {\n-                    TopologyBuilder.handleMemberReadyToShutdown((InstanceReadyToShutdownEvent) event);\n-                } catch (Exception e) {\n-                    String error = \"Failed to retrieve the instance status event message\";\n-                    log.error(error, e);\n-                }\n-            }\n-        });\n+\t\tstatusEventReceiver.addEventListener(new InstanceReadyToShutdownEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\ttry {\n+\t\t\t\t\tTopologyBuilder.handleMemberReadyToShutdown((InstanceReadyToShutdownEvent) event);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tString error = \"Failed to retrieve the instance status event message\";\n+\t\t\t\t\tlog.error(error, e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n \n-        statusEventReceiver.addEventListener(new InstanceMaintenanceListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                try {\n-                    TopologyBuilder.handleMemberMaintenance((InstanceMaintenanceModeEvent) event);\n-                } catch (Exception e) {\n-                String error = \"Failed to retrieve the instance status event message\";\n-                log.error(error, e);\n-                }\n-            }\n-        });\n+\t\tstatusEventReceiver.addEventListener(new InstanceMaintenanceListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\ttry {\n+\t\t\t\t\tTopologyBuilder.handleMemberMaintenance((InstanceMaintenanceModeEvent) event);\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tString error = \"Failed to retrieve the instance status event message\";\n+\t\t\t\t\tlog.error(error, e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n \n+\t}\n \n-    }\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n \n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/receiver/instance/status/InstanceStatusTopicReceiver.java",
                "sha": "fde7bea00844c4f8d74fff9c4edc8065c40bce4e",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/topology/TopologyBuilder.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/topology/TopologyBuilder.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/topology/TopologyBuilder.java",
                "patch": "@@ -28,13 +28,12 @@\n import org.apache.stratos.cloud.controller.exception.InvalidCartridgeTypeException;\n import org.apache.stratos.cloud.controller.exception.InvalidMemberException;\n import org.apache.stratos.cloud.controller.messaging.publisher.CartridgeInstanceDataPublisher;\n-import org.apache.stratos.cloud.controller.registry.RegistryManager;\n import org.apache.stratos.cloud.controller.util.CloudControllerUtil;\n import org.apache.stratos.common.constants.StratosConstants;\n import org.apache.stratos.messaging.domain.applications.ClusterDataHolder;\n import org.apache.stratos.messaging.domain.instance.ClusterInstance;\n import org.apache.stratos.messaging.domain.topology.*;\n-import org.apache.stratos.messaging.event.applications.ApplicationTerminatedEvent;\n+import org.apache.stratos.messaging.event.applications.ApplicationInstanceTerminatedEvent;\n import org.apache.stratos.messaging.event.cluster.status.*;\n import org.apache.stratos.messaging.event.instance.status.InstanceActivatedEvent;\n import org.apache.stratos.messaging.event.instance.status.InstanceMaintenanceModeEvent;\n@@ -278,7 +277,9 @@ public static void handleClusterReset(ClusterStatusClusterResetEvent event) {\n \n     }\n \n-    public static void handleClusterInstanceCreated(String serviceType, String clusterId, String alias, String instanceId) {\n+    public static void handleClusterInstanceCreated(String serviceType, String clusterId,\n+                                                    String alias, String instanceId, String partitionId,\n+                                                    String networkPartitionId) {\n \n         TopologyManager.acquireWriteLock();\n \n@@ -309,7 +310,9 @@ public static void handleClusterInstanceCreated(String serviceType, String clust\n             TopologyManager.updateTopology(topology);\n \n             ClusterInstanceCreatedEvent clusterInstanceCreatedEvent =\n-                    new ClusterInstanceCreatedEvent(alias, serviceType, clusterId, instanceId);\n+                    new ClusterInstanceCreatedEvent(alias, serviceType, clusterId,\n+                            instanceId, networkPartitionId);\n+            clusterInstanceCreatedEvent.setPartitionId(partitionId);\n             TopologyEventPublisher.sendClusterInstanceCreatedEvent(clusterInstanceCreatedEvent);\n \n         } finally {\n@@ -864,7 +867,7 @@ public static void handleClusterInActivateEvent(\n     }\n \n \n-    private static void deleteAppResourcesFromMetadataService(ApplicationTerminatedEvent event) {\n+    private static void deleteAppResourcesFromMetadataService(ApplicationInstanceTerminatedEvent event) {\n         try {\n             MetaDataServiceClient metadataClient = new DefaultMetaDataServiceClient();\n             metadataClient.deleteApplicationProperties(event.getAppId());",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/topology/TopologyBuilder.java",
                "sha": "a70a5ab864f5d29a246270ae1054e9fb89620e1c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/topology/TopologyEventPublisher.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/topology/TopologyEventPublisher.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/topology/TopologyEventPublisher.java",
                "patch": "@@ -253,8 +253,9 @@ public static void sendClusterInactivateEvent(ClusterInactivateEvent clusterInac\n     public static void sendClusterInstanceCreatedEvent(ClusterInstanceCreatedEvent clusterInstanceCreatedEvent) {\n         if (log.isInfoEnabled()) {\n             log.info(String.format(\"Publishing cluster Instance Created event: [service] %s [cluster] %s \" +\n-                            \"[instance-id] %s\",\n+                            \" in [network partition] %s [instance-id] %s\",\n                     clusterInstanceCreatedEvent.getServiceName(), clusterInstanceCreatedEvent.getClusterId(),\n+                    clusterInstanceCreatedEvent.getNetworkPartitionId(),\n                     clusterInstanceCreatedEvent.getInstanceId()));\n         }\n         publishEvent(clusterInstanceCreatedEvent);",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/messaging/topology/TopologyEventPublisher.java",
                "sha": "eea941cc0341ba04074054000aced84b0d62b352",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/services/CloudControllerService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/services/CloudControllerService.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/services/CloudControllerService.java",
                "patch": "@@ -228,7 +228,9 @@ public void createApplicationClusters(String appId, ApplicationClusterContext[]\n      * @param instanceId instance id\n      * @throws ClusterInstanceCreationException if an y error occurs in cluster instance creation\n      */\n-    public void createClusterInstance (String serviceType, String clusterId, String alias, String instanceId) throws\n+    public void createClusterInstance (String serviceType, String clusterId, String alias,\n+                                       String instanceId, String partitionId,\n+                                       String networkPartitionId) throws\n             ClusterInstanceCreationException;\n     \n     /**",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/services/CloudControllerService.java",
                "sha": "d0dd73084442a82703acae2e67fdade318c34e04",
                "status": "modified"
            },
            {
                "additions": 882,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/services/impl/CloudControllerServiceImpl.java",
                "changes": 1655,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/services/impl/CloudControllerServiceImpl.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 773,
                "filename": "components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/services/impl/CloudControllerServiceImpl.java",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.cloud.controller/src/main/java/org/apache/stratos/cloud/controller/services/impl/CloudControllerServiceImpl.java",
                "sha": "f9c55a0d279c22f55a16cc09df1330e355857c07",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/pom.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.common/pom.xml",
                "patch": "@@ -96,6 +96,11 @@\n             <artifactId>commons-lang3</artifactId>\n             <version>3.1</version>\n         </dependency>\n+        <dependency>\n+            <groupId>commons-configuration</groupId>\n+            <artifactId>commons-configuration</artifactId>\n+            <version>1.9</version>\n+        </dependency>\n         <dependency>\n             <groupId>org.wso2.carbon</groupId>\n             <artifactId>org.wso2.carbon.databridge.agent.thrift</artifactId>",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/pom.xml",
                "sha": "6ed9228227895ff649b7e5c5518002a2b512ea6e",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/DistributedObjectProvider.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/DistributedObjectProvider.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 6,
                "filename": "components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/DistributedObjectProvider.java",
                "patch": "@@ -22,20 +22,52 @@\n import java.io.Serializable;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.locks.Lock;\n \n /**\n  * Distributed object provider service interface.\n+ * Caution! When using distributed maps and lists, please note that changes done to an item in a map/list\n+ * after adding them to the map/list will not be replicated in the cluster. If a modification of an item\n+ * needs to be replicated, that item needs to be put() to the map or set() back in the list.\n  */\n public interface DistributedObjectProvider extends Serializable {\n-    Map getMap(String key);\n+    /**\n+     * Returns a distributed map if clustering is enabled, else returns a local hash map.\n+     * @param name\n+     * @return\n+     */\n+    Map getMap(String name);\n \n-    List getList(String name);\n+    /**\n+     * Removes a map from the object provider.\n+     * @param name\n+     */\n+    void removeMap(String name);\n \n-    void putToMap(Map map, Object key, Object value);\n+    /**\n+     * Returns a distributed list if clustering is enabled, else returns a local array list.\n+     * @param name\n+     * @return\n+     */\n+    List getList(String name);\n \n-    void removeFromMap(Map map, Object key);\n+    /**\n+     * Remove a list from the object provider.\n+     * @param name\n+     */\n+    void removeList(String name);\n \n-    void addToList(List list, Object value);\n+    /**\n+     * Acquires a distributed lock if clustering is enabled, else acquires a local reentrant lock and\n+     * returns the lock object.\n+     * @param object\n+     * @return\n+     */\n+    Lock acquireLock(Object object);\n \n-    void removeFromList(List list, Object value);\n+    /**\n+     * Releases a given distributed/local lock.\n+     * @param lock\n+     */\n+    void releaseLock(Lock lock);\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/DistributedObjectProvider.java",
                "sha": "6caa3a1e3eb729da02d1d5d808de10eb9d5e0af8",
                "status": "modified"
            },
            {
                "additions": 269,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/HazelcastDistributedListProvider.java",
                "changes": 269,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/HazelcastDistributedListProvider.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/HazelcastDistributedListProvider.java",
                "patch": "@@ -0,0 +1,269 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.stratos.common.clustering.impl;\n+\n+import com.hazelcast.core.HazelcastInstance;\n+import com.hazelcast.core.IList;\n+import com.hazelcast.core.ItemEvent;\n+import com.hazelcast.core.ItemListener;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n+import java.io.Serializable;\n+import java.util.*;\n+\n+/**\n+ * Hazelcast distributed list provider.\n+ */\n+public class HazelcastDistributedListProvider implements Serializable {\n+    private static final Log log = LogFactory.getLog(HazelcastDistributedListProvider.class);\n+\n+    private HazelcastInstance hazelcastInstance;\n+    private Map<String, DistList> listMap;\n+\n+    public HazelcastDistributedListProvider(HazelcastInstance hazelcastInstance) {\n+        this.hazelcastInstance = hazelcastInstance;\n+    }\n+\n+    public List getList(String name, ListEntryListener listEntryListener) {\n+        List list = listMap.get(name);\n+        if(list == null) {\n+            synchronized (HazelcastDistributedListProvider.class) {\n+                if(list == null) {\n+                    list = new DistList(name, listEntryListener);\n+                }\n+            }\n+        }\n+        return list;\n+    }\n+\n+    public void removeList(String name) {\n+        DistList list = listMap.get(name);\n+        if(list != null) {\n+            IList ilist = (IList) list;\n+            ilist.removeItemListener(list.getListenerId());\n+            listMap.remove(list);\n+            ilist.destroy();\n+        }\n+    }\n+\n+    private class DistList implements List {\n+        private IList list;\n+        private String listenerId;\n+\n+        public DistList(String name, final ListEntryListener listEntryListener) {\n+            this.list = hazelcastInstance.getList(name);\n+            listenerId = list.addItemListener(new ItemListener() {\n+                @Override\n+                public void itemAdded(ItemEvent itemEvent) {\n+                    listEntryListener.itemAdded(itemEvent.getItem());\n+                }\n+\n+                @Override\n+                public void itemRemoved(ItemEvent itemEvent) {\n+                    listEntryListener.itemRemoved(itemEvent.getItem());\n+                }\n+            }, false);\n+        }\n+\n+        @Override\n+        public int size() {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.size();\n+            }\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean isEmpty() {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.isEmpty();\n+            }\n+            return true;\n+        }\n+\n+        @Override\n+        public boolean contains(Object object) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.contains(object);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Iterator iterator() {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.iterator();\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public Object[] toArray() {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.toArray();\n+            }\n+            return new Object[0];\n+        }\n+\n+        @Override\n+        public boolean add(Object object) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.add(object);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean remove(Object object) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.remove(object);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean addAll(Collection collection) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.addAll(collection);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean addAll(int i, Collection collection) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.addAll(i, collection);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public void clear() {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                list.clear();\n+            }\n+        }\n+\n+        @Override\n+        public Object get(int i) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.get(i);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public Object set(int i, Object o) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.set(i, o);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public void add(int i, Object o) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                list.add(i, o);\n+            }\n+        }\n+\n+        @Override\n+        public Object remove(int i) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.remove(i);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public int indexOf(Object o) {\n+            return list.indexOf(o);\n+        }\n+\n+        @Override\n+        public int lastIndexOf(Object o) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.lastIndexOf(o);\n+            }\n+            return -1;\n+        }\n+\n+        @Override\n+        public ListIterator listIterator() {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.listIterator();\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public ListIterator listIterator(int i) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.listIterator(i);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public List subList(int i, int i2) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.subList(i, i2);\n+            }\n+            return null;\n+        }\n+\n+        @Override\n+        public boolean retainAll(Collection collection) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.retainAll(collection);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean removeAll(Collection collection) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.removeAll(collection);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public boolean containsAll(Collection collection) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.containsAll(collection);\n+            }\n+            return false;\n+        }\n+\n+        @Override\n+        public Object[] toArray(Object[] objects) {\n+            if (hazelcastInstance.getLifecycleService().isRunning()) {\n+                return list.toArray(objects);\n+            }\n+            return null;\n+        }\n+\n+        public String getListenerId() {\n+            return listenerId;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/HazelcastDistributedListProvider.java",
                "sha": "fcd9f70c025b2d0b48577de354e702e789c5a7f3",
                "status": "added"
            },
            {
                "additions": 168,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/HazelcastDistributedObjectProvider.java",
                "changes": 276,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/HazelcastDistributedObjectProvider.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 108,
                "filename": "components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/HazelcastDistributedObjectProvider.java",
                "patch": "@@ -28,172 +28,232 @@\n import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.common.clustering.DistributedObjectProvider;\n import org.apache.stratos.common.internal.ServiceReferenceHolder;\n+import org.wso2.carbon.caching.impl.MapEntryListener;\n+import org.wso2.carbon.core.clustering.hazelcast.HazelcastDistributedMapProvider;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n \n /**\n  * Provides objects to be managed in distributed and non-distributed environments.\n  */\n public class HazelcastDistributedObjectProvider implements DistributedObjectProvider {\n     private static final Log log = LogFactory.getLog(HazelcastDistributedObjectProvider.class);\n \n-    public HazelcastDistributedObjectProvider() {\n-    }\n+    private HazelcastDistributedMapProvider mapProvider;\n+    private HazelcastDistributedListProvider listProvider;\n+    private Map<String, Map> mapsMap;\n+    private Map<String, List> listsMap;\n+    private Map<Object, Lock> locksMap;\n \n-    private boolean isClustered() {\n-        AxisConfiguration axisConfiguration = ServiceReferenceHolder.getInstance().getAxisConfiguration();\n-        return ((axisConfiguration != null) && (axisConfiguration.getClusteringAgent() != null)\n-                && (getHazelcastInstance() != null));\n-    }\n-\n-    private HazelcastInstance getHazelcastInstance() {\n-        return ServiceReferenceHolder.getInstance().getHazelcastInstance();\n+    public HazelcastDistributedObjectProvider() {\n+        HazelcastInstance hazelcastInstance = ServiceReferenceHolder.getInstance().getHazelcastInstance();\n+        mapProvider = new HazelcastDistributedMapProvider(hazelcastInstance);\n+        listProvider = new HazelcastDistributedListProvider(hazelcastInstance);\n+        mapsMap = new HashMap<String, Map>();\n+        listsMap = new HashMap<String, List>();\n+        locksMap = new HashMap<Object, Lock>();\n     }\n \n-    private com.hazelcast.core.ILock acquireDistributedLock(Object object) {\n-        if((!isClustered()) || (object == null)) {\n-            return null;\n+    /**\n+     * Returns a distributed map if clustering is enabled, else returns a local hash map.\n+     * @param name\n+     * @return\n+     */\n+    @Override\n+    public Map getMap(final String name) {\n+        if(mapsMap.containsKey(name)) {\n+            return mapsMap.get(name);\n         }\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(String.format(\"Acquiring distributed lock for %s...\", object.getClass().getSimpleName()));\n-        }\n-        ILock lock = getHazelcastInstance().getLock(object);\n-        if (log.isDebugEnabled()) {\n-            log.debug(String.format(\"Distributed lock acquired for %s\", object.getClass().getSimpleName()));\n-        }\n-        return lock;\n-    }\n+        Map map = null;\n+        if(isClustered()) {\n+            map = mapProvider.getMap(name, new MapEntryListener() {\n+                @Override\n+                public <X> void entryAdded(X key) {\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(String.format(\"Entry added to distributed map: [name] %s [key] %s\",\n+                                name, key));\n+                    }\n+                }\n \n-    private void releaseDistributedLock(ILock lock) {\n-        if(lock == null) {\n-            return;\n-        }\n+                @Override\n+                public <X> void entryRemoved(X key) {\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(String.format(\"Entry removed from distributed map: [name] %s [key] %s\",\n+                                name, key));\n+                    }\n+                }\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(String.format(\"Releasing distributed lock for %s...\", lock.getKey()));\n+                @Override\n+                public <X> void entryUpdated(X key) {\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(String.format(\"Entry updated in distributed map: [name] %s [key] %s\",\n+                                name, key));\n+                    }\n+                }\n+            });\n+        } else {\n+            map = new HashMap<Object, Object>();\n         }\n-        lock.forceUnlock();\n-        if (log.isDebugEnabled()) {\n-            log.debug(String.format(\"Distributed lock released for %s\", lock.getKey()));\n+        if(map != null) {\n+            mapsMap.put(name, map);\n         }\n+        return map;\n     }\n \n     /**\n-     * If clustering is enabled returns a distributed map object, otherwise returns a\n-     * concurrent local map object.\n-     * @param key\n-     * @return\n+     * Remove map from provider\n+     * @param name\n      */\n-    @Override\n-    public Map getMap(String key) {\n-        if(isClustered()) {\n-            return getHazelcastInstance().getMap(key);\n-        } else {\n-            return new ConcurrentHashMap<Object, Object>();\n+    public void removeMap(String name) {\n+        if(mapsMap.containsKey(name)) {\n+            if(isClustered()) {\n+                IMap map = (IMap) mapsMap.get(name);\n+                mapProvider.removeMap(name);\n+                map.destroy();\n+            }\n+            mapsMap.remove(name);\n         }\n     }\n \n     /**\n-     * If clustering is enabled returns a distributed list, otherwise returns\n-     * a local array list.\n+     * Returns a distributed list if clustering is enabled, else returns a local array list.\n      * @param name\n      * @return\n      */\n     @Override\n-    public List getList(String name) {\n+    public List getList(final String name) {\n+        if(listsMap.containsKey(name)) {\n+            return listsMap.get(name);\n+        }\n+\n+        List list = null;\n         if(isClustered()) {\n-            return getHazelcastInstance().getList(name);\n+            list = listProvider.getList(name, new ListEntryListener() {\n+                @Override\n+                public void itemAdded(Object item) {\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(String.format(\"Item added to distributed list: [list] %s [item] %s\", name, item));\n+                    }\n+                }\n+\n+                @Override\n+                public void itemRemoved(Object item) {\n+                    if(log.isDebugEnabled()) {\n+                        log.debug(String.format(\"Item removed from distributed list: [list] %s [item] %s\", name, item));\n+                    }\n+                }\n+            });\n         } else {\n-            return new ArrayList();\n+            list = new ArrayList();\n+        }\n+        if(list != null) {\n+            listsMap.put(name, list);\n         }\n+        return list;\n     }\n \n     /**\n-     * Put a key value pair to a map, if clustered use a distributed lock.\n-     * @param map\n-     * @param key\n-     * @param value\n+     * Remove a list from the object provider.\n+     * @param name\n      */\n     @Override\n-    public void putToMap(Map map, Object key, Object value) {\n-         if(isClustered()) {\n-             ILock lock = null;\n-             try {\n-                 IMap imap = (IMap) map;\n-                 lock = acquireDistributedLock(imap.getName());\n-                 imap.set(key, value);\n-             } finally {\n-                 releaseDistributedLock(lock);\n-             }\n-         } else {\n-            map.put(key, value);\n-         }\n+    public void removeList(String name) {\n+        if(listsMap.containsKey(name)) {\n+            if(isClustered()) {\n+                IList list = (IList)listsMap.get(name);\n+                listProvider.removeList(name);\n+                list.destroy();\n+            }\n+            listsMap.remove(name);\n+        }\n     }\n \n     /**\n-     * Remove an object from a map, if clustered use a distributed lock.\n-     * @param map\n-     * @param key\n+     * Acquires a distributed lock if clustering is enabled, else acquires a local reentrant lock and\n+     * returns the lock object.\n+     * @param object\n+     * @return\n      */\n     @Override\n-    public void removeFromMap(Map map, Object key) {\n+    public Lock acquireLock(Object object) {\n         if(isClustered()) {\n-            ILock lock = null;\n-            try {\n-                IMap imap = (IMap) map;\n-                lock = acquireDistributedLock(imap.getName());\n-                imap.delete(key);\n-            } finally {\n-                releaseDistributedLock(lock);\n-            }\n+            return acquireDistributedLock(object);\n         } else {\n-            map.remove(key);\n+            Lock lock = locksMap.get(object);\n+            if(lock == null) {\n+                synchronized (object) {\n+                    if(lock == null) {\n+                        lock = new ReentrantLock();\n+                        locksMap.put(object, lock);\n+                    }\n+                }\n+            }\n+            lock.lock();\n+            return lock;\n         }\n     }\n \n     /**\n-     * Add an object to a list, if clustered use a distributed lock.\n-     * @param list\n-     * @param value\n+     * Releases a given distributed/local lock.\n+     * @param lock\n      */\n     @Override\n-    public void addToList(List list, Object value) {\n-        if(isClustered()) {\n-            ILock lock = null;\n-            try {\n-                IList ilist = (IList) list;\n-                lock = acquireDistributedLock(ilist.getName());\n-                ilist.add(value);\n-            } finally {\n-                releaseDistributedLock(lock);\n+    public void releaseLock(Lock lock) {\n+         if(isClustered()) {\n+             releaseDistributedLock((ILock)lock);\n+         } else {\n+             lock.unlock();\n+         }\n+    }\n+\n+    private boolean isClustered() {\n+        AxisConfiguration axisConfiguration = ServiceReferenceHolder.getInstance().getAxisConfiguration();\n+        return ((axisConfiguration != null) && (axisConfiguration.getClusteringAgent() != null)\n+                && (getHazelcastInstance() != null));\n+    }\n+\n+    private HazelcastInstance getHazelcastInstance() {\n+        return ServiceReferenceHolder.getInstance().getHazelcastInstance();\n+    }\n+\n+    protected com.hazelcast.core.ILock acquireDistributedLock(Object object) {\n+        if(object == null) {\n+            if(log.isWarnEnabled()) {\n+                log.warn(\"Could not acquire distributed lock, object is null\");\n             }\n-        } else {\n-            list.add(value);\n+            return null;\n         }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Acquiring distributed lock for %s...\", object.getClass().getSimpleName()));\n+        }\n+        ILock lock = getHazelcastInstance().getLock(object);\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Distributed lock acquired for %s\", object.getClass().getSimpleName()));\n+        }\n+        return lock;\n     }\n \n-    /**\n-     * Remove an object from a list, if clustered use a distributed lock.\n-     * @param list\n-     * @param value\n-     */\n-    @Override\n-    public void removeFromList(List list, Object value) {\n-        if(isClustered()) {\n-            ILock lock = null;\n-            try {\n-                IList ilist = (IList) list;\n-                lock = acquireDistributedLock(ilist.getName());\n-                ilist.remove(value);\n-            } finally {\n-                releaseDistributedLock(lock);\n+    protected void releaseDistributedLock(ILock lock) {\n+        if(lock == null) {\n+            if(log.isWarnEnabled()) {\n+                log.warn(\"Could not release distributed lock, lock is null\");\n             }\n-        } else {\n-            list.remove(value);\n+            return;\n+        }\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Releasing distributed lock for %s...\", lock.getKey()));\n+        }\n+        lock.forceUnlock();\n+        if (log.isDebugEnabled()) {\n+            log.debug(String.format(\"Distributed lock released for %s\", lock.getKey()));\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/HazelcastDistributedObjectProvider.java",
                "sha": "f7ff50ea5a3b2d9e081552253870037bd0e161bb",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/ListEntryListener.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/ListEntryListener.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/ListEntryListener.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.stratos.common.clustering.impl;\n+\n+/**\n+ * List entry listener interface.\n+ */\n+public interface ListEntryListener {\n+    /**\n+     * Invoked when an item is added to the distributed list.\n+     * @param item\n+     */\n+    void itemAdded(Object item);\n+\n+    /**\n+     * Invoked when an item is removed from the distributed list.\n+     * @param item\n+     */\n+    void itemRemoved(Object item);\n+}",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/clustering/impl/ListEntryListener.java",
                "sha": "96f72dc30eabea2ac437d02ed74dde645845e6d3",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/constants/StratosConstants.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/constants/StratosConstants.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/constants/StratosConstants.java",
                "patch": "@@ -158,6 +158,7 @@\n     public static final String DROOLS_DIR_NAME = \"drools\";\n     public static final String CONTAINER_SCALE_CHECK_DROOL_FILE = \"container-scaling.drl\";\n     public static final String VM_SCALE_CHECK_DROOL_FILE = \"scaling.drl\";\n+    public static final String DEPENDENT_SCALE_CHECK_DROOL_FILE = \"dependent-scaling.drl\";\n     public static final String CONTAINER_MIN_CHECK_DROOL_FILE = \"container-mincheck.drl\";\n     public static final String VM_MIN_CHECK_DROOL_FILE = \"mincheck.drl\";\n     public static final String CONTAINER_OBSOLETE_CHECK_DROOL_FILE = \"container-obsoletecheck.drl\";\n@@ -184,5 +185,7 @@\n \tpublic static final String NO_LOAD_BALANCER = \"no.load.balancer\";\n \tpublic static final String EXISTING_LOAD_BALANCERS = \"existing.load.balancers\";\n \tpublic static final String LOAD_BALANCED_SERVICE_TYPE = \"load.balanced.service.type\";\n+\n+    public static final long HAZELCAST_INSTANCE_INIT_TIMEOUT = 300000; // 5 min\n }\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/constants/StratosConstants.java",
                "sha": "fd44b9f5232188ca6b48bb52f97bf18dadbd4ad9",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/internal/StratosCommonServiceComponent.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/internal/StratosCommonServiceComponent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/internal/StratosCommonServiceComponent.java",
                "patch": "@@ -19,10 +19,12 @@\n package org.apache.stratos.common.internal;\n \n import com.hazelcast.core.HazelcastInstance;\n+import org.apache.axis2.engine.AxisConfiguration;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.common.clustering.DistributedObjectProvider;\n import org.apache.stratos.common.clustering.impl.HazelcastDistributedObjectProvider;\n+import org.apache.stratos.common.constants.StratosConstants;\n import org.apache.stratos.common.util.CommonUtil;\n import org.apache.stratos.common.util.StratosConfiguration;\n import org.osgi.framework.BundleContext;\n@@ -56,7 +58,7 @@\n \n     protected void activate(ComponentContext context) {\n         try {\n-            BundleContext bundleContext = context.getBundleContext();\n+            final BundleContext bundleContext = context.getBundleContext();\n             if (CommonUtil.getStratosConfig() == null) {\n                 StratosConfiguration stratosConfig = CommonUtil.loadStratosConfiguration();\n                 CommonUtil.setStratosConfig(stratosConfig);\n@@ -68,9 +70,34 @@ protected void activate(ComponentContext context) {\n                 CommonUtil.setEula(eula);\n             }\n \n-            // Register distributed object provider service\n-            DistributedObjectProvider distributedObjectProvider = new HazelcastDistributedObjectProvider();\n-            bundleContext.registerService(DistributedObjectProvider.class, distributedObjectProvider, null);\n+            AxisConfiguration axisConfig = ServiceReferenceHolder.getInstance().getAxisConfiguration();\n+            if((axisConfig != null) && (axisConfig.getClusteringAgent() != null)) {\n+                Thread thread = new Thread() {\n+                    @Override\n+                    public void run() {\n+                        try {\n+                            // Wait for the hazelcast instance to be available\n+                            long startTime = System.currentTimeMillis();\n+                            log.info(\"Waiting for the hazelcast instance to be initialized...\");\n+                            while (ServiceReferenceHolder.getInstance().getHazelcastInstance() == null) {\n+                                Thread.sleep(1000);\n+                                if ((System.currentTimeMillis() - startTime) >= StratosConstants.HAZELCAST_INSTANCE_INIT_TIMEOUT) {\n+                                    throw new RuntimeException(\"Hazelcast instance was not initialized within \"\n+                                            + StratosConstants.HAZELCAST_INSTANCE_INIT_TIMEOUT / 1000 + \" seconds\");\n+                                }\n+                            }\n+                            registerDistributedObjectProviderService(bundleContext);\n+                        } catch (Exception e) {\n+                            log.error(e);\n+                        }\n+                    }\n+                };\n+                thread.setName(\"Distributed object provider registration thread\");\n+                thread.start();\n+            } else {\n+                // Register distributed object provider service\n+                registerDistributedObjectProviderService(bundleContext);\n+            }\n \n             // Register manager configuration OSGI service\n             try {\n@@ -85,10 +112,15 @@ protected void activate(ComponentContext context) {\n                 log.info(\"Stratos common service bundle is activated\");\n             }\n         } catch (Throwable e) {\n-            log.error(\"Error in activating stratos common service component\" + e.toString());\n+            log.error(\"Error in activating stratos common service component\", e);\n         }\n     }\n \n+    private void registerDistributedObjectProviderService(BundleContext bundleContext) {\n+        DistributedObjectProvider distributedObjectProvider = new HazelcastDistributedObjectProvider();\n+        bundleContext.registerService(DistributedObjectProvider.class, distributedObjectProvider, null);\n+    }\n+\n     protected void deactivate(ComponentContext context) {\n         log.debug(\"Stratos common service is deactivated\");\n     }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/internal/StratosCommonServiceComponent.java",
                "sha": "e4f0514edf89300499ee7a44fb5a13c9880506bd",
                "status": "modified"
            },
            {
                "additions": 57,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/threading/StratosThreadPool.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/threading/StratosThreadPool.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/threading/StratosThreadPool.java",
                "patch": "@@ -0,0 +1,57 @@\n+/*\n+ *\n+ *  * Licensed to the Apache Software Foundation (ASF) under one\n+ *  * or more contributor license agreements. See the NOTICE file\n+ *  * distributed with this work for additional information\n+ *  * regarding copyright ownership. The ASF licenses this file\n+ *  * to you under the Apache License, Version 2.0 (the\n+ *  * \"License\"); you may not use this file except in compliance\n+ *  * with the License. You may obtain a copy of the License at\n+ *  *\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing,\n+ *  * software distributed under the License is distributed on an\n+ *  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  * KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations\n+ *  * under the License.\n+ *\n+ */\n+package org.apache.stratos.common.threading;\n+\n+import java.util.HashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+/**\n+ * Utility class for Stratos thread pool\n+ */\n+public class StratosThreadPool {\n+\n+\tprivate static HashMap<String, ExecutorService> mapExecutorService = new HashMap<String, ExecutorService>();\n+\tprivate static Object mutex = new Object();\n+\n+\t/**\n+\t * Return the executor service based on the identifier and thread pool size\n+\t *\n+\t * @param identifier     Component identifier name\n+\t * @param threadPoolSize Thread pool size\n+\t * @return ExecutorService\n+\t */\n+\tpublic static ExecutorService getExecutorService(String identifier, int threadPoolSize) {\n+\t\tExecutorService executorService = mapExecutorService.get(identifier);\n+\t\tif (executorService == null) {\n+\t\t\tsynchronized (mutex) {\n+\t\t\t\tif (executorService == null) {\n+\t\t\t\t\texecutorService = Executors.newFixedThreadPool(threadPoolSize);\n+\t\t\t\t\tmapExecutorService.put(identifier, executorService);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t}\n+\t\treturn executorService;\n+\n+\t}\n+\n+}",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/threading/StratosThreadPool.java",
                "sha": "3e1ebbe37663765467c314c9c03bb8c33e9bbcd7",
                "status": "added"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/ConfUtil.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/ConfUtil.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/ConfUtil.java",
                "patch": "@@ -0,0 +1,73 @@\n+/*\n+ *\n+ *  * Licensed to the Apache Software Foundation (ASF) under one\n+ *  * or more contributor license agreements. See the NOTICE file\n+ *  * distributed with this work for additional information\n+ *  * regarding copyright ownership. The ASF licenses this file\n+ *  * to you under the Apache License, Version 2.0 (the\n+ *  * \"License\"); you may not use this file except in compliance\n+ *  * with the License. You may obtain a copy of the License at\n+ *  *\n+ *  * http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing,\n+ *  * software distributed under the License is distributed on an\n+ *  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  * KIND, either express or implied. See the License for the\n+ *  * specific language governing permissions and limitations\n+ *  * under the License.\n+ *\n+ */\n+package org.apache.stratos.common.util;\n+\n+import org.apache.commons.configuration.ConfigurationException;\n+import org.apache.commons.configuration.XMLConfiguration;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.utils.CarbonUtils;\n+\n+import java.io.File;\n+\n+/**\n+ * This class contains utility methods for read Autoscaler configuration file.\n+ */\n+public class ConfUtil {\n+\n+\tprivate static final String CONFIG_FILE_NAME =\"stratos-config\" ;\n+\tprivate static Log log = LogFactory.getLog(ConfUtil.class);\n+\n+    private XMLConfiguration config;\n+\n+    private static ConfUtil instance = null;\n+\n+    private ConfUtil(String configFilePath) {\n+        log.info(\"Loading configuration.....\");\n+        try {\n+\n+            File confFile;\n+            if (configFilePath != null && !configFilePath.isEmpty()) {\n+                confFile = new File(configFilePath);\n+\n+            } else {\n+                confFile = new File(CarbonUtils.getCarbonConfigDirPath(),CONFIG_FILE_NAME);\n+            }\n+\n+            config = new XMLConfiguration(confFile);\n+        } catch (ConfigurationException e) {\n+            log.error(\"Unable to load autoscaler configuration file\",e);\n+            config = new XMLConfiguration();  // continue with default values\n+        }\n+    }\n+\n+    public static ConfUtil getInstance(String configFilePath) {\n+        if (instance == null) {\n+            instance = new ConfUtil (configFilePath);\n+        }\n+        return instance;\n+    }\n+\n+    public XMLConfiguration getConfiguration(){\n+        return config;\n+    }\n+    \n+}",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/main/java/org/apache/stratos/common/util/ConfUtil.java",
                "sha": "7f9d665dcc068ed63392c136f0db6a811ef72e7a",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/test/java/org/apache/stratos/common/test/CommonTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/test/java/org/apache/stratos/common/test/CommonTest.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.common/src/test/java/org/apache/stratos/common/test/CommonTest.java",
                "patch": "@@ -46,4 +46,5 @@ public void testEmailValidation() throws Exception {\n             assertEquals(\"Invalid email address is provided.\", e.getMessage());\n         }\n     }\n+\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/test/java/org/apache/stratos/common/test/CommonTest.java",
                "sha": "eaaab7c1bd31985cc22883a0e6ae713dd3335a27",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/test/java/org/apache/stratos/common/test/DistributedObjectProviderTest.java",
                "changes": 88,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.common/src/test/java/org/apache/stratos/common/test/DistributedObjectProviderTest.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 56,
                "filename": "components/org.apache.stratos.common/src/test/java/org/apache/stratos/common/test/DistributedObjectProviderTest.java",
                "patch": "@@ -28,17 +28,20 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.locks.Lock;\n \n-import static junit.framework.TestCase.assertFalse;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n /**\n  * Distributed object provider unit tests.\n  */\n public class DistributedObjectProviderTest {\n \n+    public static final String MAP_1 = \"MAP1\";\n+    public static final String MAP_1_WRITE_LOCK = \"MAP1_WRITE_LOCK\";\n+    public static final String LIST_1 = \"LIST1\";\n+    public static final String LIST_1_WRITE_LOCK = \"LIST1_WRITE_LOCK\";\n     private static HazelcastInstance hazelcastInstance;\n \n     @BeforeClass\n@@ -51,84 +54,57 @@ public void testPutToMapLocal() {\n         ServiceReferenceHolder.getInstance().setHazelcastInstance(null);\n         HazelcastDistributedObjectProvider provider = new HazelcastDistributedObjectProvider();\n         testPutToMap(provider);\n+        testPutToMap(provider);\n     }\n \n     @Test\n     public void testPutToMapDistributed() {\n         ServiceReferenceHolder.getInstance().setHazelcastInstance(hazelcastInstance);\n         HazelcastDistributedObjectProvider provider = new HazelcastDistributedObjectProvider();\n         testPutToMap(provider);\n+        testPutToMap(provider);\n     }\n \n     private void testPutToMap(HazelcastDistributedObjectProvider provider) {\n-        Map<String, String> map = provider.getMap(\"MAP1\");\n-        provider.putToMap(map, \"key1\", \"value1\");\n-        assertEquals(map.get(\"key1\"), \"value1\");\n-    }\n-\n-    @Test\n-    public void testRemoveFromMapLocal() {\n-        ServiceReferenceHolder.getInstance().setHazelcastInstance(null);\n-        HazelcastDistributedObjectProvider provider = new HazelcastDistributedObjectProvider();\n-        testRemoveFromMap(provider);\n-    }\n-\n-    @Test\n-    public void testRemoveFromMapDistributed() {\n-        ServiceReferenceHolder.getInstance().setHazelcastInstance(hazelcastInstance);\n-        HazelcastDistributedObjectProvider provider = new HazelcastDistributedObjectProvider();\n-        testRemoveFromMap(provider);\n-    }\n-\n-    private void testRemoveFromMap(HazelcastDistributedObjectProvider provider) {\n-        Map<String, String> map = provider.getMap(\"MAP1\");\n-        provider.putToMap(map, \"key1\", \"value1\");\n-        assertEquals(map.get(\"key1\"), \"value1\");\n-        provider.removeFromMap(map, \"key1\");\n-        assertNull(map.get(\"key1\"));\n+        Map<String, String> map = provider.getMap(MAP_1);\n+        Lock lock = null;\n+        try {\n+            lock = provider.acquireLock(MAP_1_WRITE_LOCK);\n+            map.put(\"key1\", \"value1\");\n+            assertEquals(map.get(\"key1\"), \"value1\");\n+        } finally {\n+            provider.releaseLock(lock);\n+            provider.removeMap(MAP_1);\n+        }\n     }\n \n     @Test\n-    public void testAddToListLocal() {\n+    public void testGetListLocal() {\n         ServiceReferenceHolder.getInstance().setHazelcastInstance(null);\n         HazelcastDistributedObjectProvider provider = new HazelcastDistributedObjectProvider();\n         testAddToList(provider);\n+        testAddToList(provider);\n     }\n \n     @Test\n-    public void testAddToListDistributed() {\n+    public void testGetListDistributed() {\n         ServiceReferenceHolder.getInstance().setHazelcastInstance(hazelcastInstance);\n         HazelcastDistributedObjectProvider provider = new HazelcastDistributedObjectProvider();\n         testAddToList(provider);\n+        testAddToList(provider);\n     }\n \n     private void testAddToList(HazelcastDistributedObjectProvider provider) {\n-        List list = provider.getList(\"LIST1\");\n-        String value1 = \"value1\";\n-        provider.addToList(list, value1);\n-        assertTrue(list.contains(value1));\n-    }\n-\n-    @Test\n-    public void testRemoveFromListLocal() {\n-        ServiceReferenceHolder.getInstance().setHazelcastInstance(null);\n-        HazelcastDistributedObjectProvider provider = new HazelcastDistributedObjectProvider();\n-        testRemovalFromList(provider);\n-    }\n-\n-    @Test\n-    public void testRemoveFromListDistributed() {\n-        ServiceReferenceHolder.getInstance().setHazelcastInstance(hazelcastInstance);\n-        HazelcastDistributedObjectProvider provider = new HazelcastDistributedObjectProvider();\n-        testRemovalFromList(provider);\n-    }\n-\n-    private void testRemovalFromList(HazelcastDistributedObjectProvider provider) {\n-        List list = provider.getList(\"LIST1\");\n-        String value1 = \"value1\";\n-        provider.addToList(list, value1);\n-        assertTrue(list.contains(value1));\n-        provider.removeFromList(list, value1);\n-        assertFalse(list.contains(value1));\n+        List list = provider.getList(LIST_1);\n+        Lock lock = null;\n+        try {\n+            lock = provider.acquireLock(LIST_1_WRITE_LOCK);\n+            String value1 = \"value1\";\n+            list.add(value1);\n+            assertTrue(list.contains(value1));\n+        } finally {\n+            provider.releaseLock(lock);\n+            provider.removeList(LIST_1);\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.common/src/test/java/org/apache/stratos/common/test/DistributedObjectProviderTest.java",
                "sha": "846d493bbab065198a1feb093c8d06aaf2d7b6d4",
                "status": "modified"
            },
            {
                "additions": 138,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer.extension.api/src/main/java/org/apache/stratos/load/balancer/extension/api/LoadBalancerExtension.java",
                "changes": 267,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.load.balancer.extension.api/src/main/java/org/apache/stratos/load/balancer/extension/api/LoadBalancerExtension.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 129,
                "filename": "components/org.apache.stratos.load.balancer.extension.api/src/main/java/org/apache/stratos/load/balancer/extension/api/LoadBalancerExtension.java",
                "patch": "@@ -28,138 +28,147 @@\n import org.apache.stratos.messaging.message.receiver.topology.TopologyEventReceiver;\n import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * Load balancer extension thread for executing load balancer life-cycle according to the topology updates\n  * received from the message broker.\n  */\n public class LoadBalancerExtension implements Runnable {\n-    private static final Log log = LogFactory.getLog(LoadBalancerExtension.class);\n-\n-    private LoadBalancer loadBalancer;\n-    private LoadBalancerStatisticsReader statsReader;\n-    private boolean loadBalancerStarted;\n-    private TopologyEventReceiver topologyEventReceiver;\n-    private LoadBalancerStatisticsNotifier statisticsNotifier;\n-    private boolean terminated;\n-\n-    /**\n-     * Load balancer extension constructor.\n-     * @param loadBalancer Load balancer instance: Mandatory.\n-     * @param statsReader Statistics reader: If null statistics notifier thread will not be started.\n-     */\n-    public LoadBalancerExtension(LoadBalancer loadBalancer, LoadBalancerStatisticsReader statsReader) {\n-        this.loadBalancer = loadBalancer;\n-        this.statsReader = statsReader;\n-    }\n-\n-    @Override\n-    public void run() {\n-        try {\n-            if(log.isInfoEnabled()) {\n-                log.info(\"Load balancer extension started\");\n-            }\n-\n-            // Start topology receiver thread\n-            topologyEventReceiver = new TopologyEventReceiver();\n-            addEventListeners();\n-            Thread topologyReceiverThread = new Thread(topologyEventReceiver);\n-            topologyReceiverThread.start();\n-\n-            if(statsReader != null) {\n-                // Start stats notifier thread\n-                statisticsNotifier = new LoadBalancerStatisticsNotifier(statsReader);\n-                Thread statsNotifierThread = new Thread(statisticsNotifier);\n-                statsNotifierThread.start();\n-            }\n-            else {\n-                if(log.isWarnEnabled()) {\n-                    log.warn(\"Load balancer statistics reader not found\");\n-                }\n-            }\n-\n-            // Keep the thread live until terminated\n-            while (!terminated);\n-        } catch (Exception e) {\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Could not start load balancer extension\", e);\n-            }\n-        }\n-    }\n-\n-    private void addEventListeners() {\n-        topologyEventReceiver.addEventListener(new CompleteTopologyEventListener() {\n-\n-            @Override\n-            protected void onEvent(Event event) {\n-                try {\n-\n-                    if (!loadBalancerStarted) {\n-                        // Configure load balancer\n-                        loadBalancer.configure(TopologyManager.getTopology());\n-\n-                        // Start load balancer\n-                        loadBalancer.start();\n-                        loadBalancerStarted = true;\n-                    }\n-                } catch (Exception e) {\n-                    if (log.isErrorEnabled()) {\n-                        log.error(\"Could not start load balancer\", e);\n-                    }\n-                    terminate();\n-                }\n-            }\n-        });\n-        topologyEventReceiver.addEventListener(new MemberActivatedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                reloadConfiguration();\n-            }\n-        });\n-        topologyEventReceiver.addEventListener(new MemberSuspendedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                reloadConfiguration();\n-            }\n-        });\n-        topologyEventReceiver.addEventListener(new MemberTerminatedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                reloadConfiguration();\n-            }\n-        });\n-        topologyEventReceiver.addEventListener(new ClusterRemovedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                reloadConfiguration();\n-            }\n-        });\n-        topologyEventReceiver.addEventListener(new ServiceRemovedEventListener() {\n-            @Override\n-            protected void onEvent(Event event) {\n-                reloadConfiguration();\n-            }\n-        });\n-    }\n-\n-    private void reloadConfiguration() {\n-        try {\n-            if (loadBalancerStarted) {\n-                loadBalancer.reload(TopologyManager.getTopology());\n-            }\n-        } catch (Exception e) {\n-            if (log.isErrorEnabled()) {\n-                log.error(\"Could not reload load balancer configuration\", e);\n-            }\n-        }\n-    }\n-\n-    public void terminate() {\n-        if(topologyEventReceiver != null) {\n-            topologyEventReceiver.terminate();\n-        }\n-        if(statisticsNotifier != null) {\n-            statisticsNotifier.terminate();\n-        }\n-        terminated = true;\n-    }\n+\tprivate static final Log log = LogFactory.getLog(LoadBalancerExtension.class);\n+\n+\tprivate LoadBalancer loadBalancer;\n+\tprivate LoadBalancerStatisticsReader statsReader;\n+\tprivate boolean loadBalancerStarted;\n+\tprivate TopologyEventReceiver topologyEventReceiver;\n+\tprivate LoadBalancerStatisticsNotifier statisticsNotifier;\n+\tprivate boolean terminated;\n+\tprivate ExecutorService executorService;\n+\n+\t/**\n+\t * Load balancer extension constructor.\n+\t *\n+\t * @param loadBalancer Load balancer instance: Mandatory.\n+\t * @param statsReader  Statistics reader: If null statistics notifier thread will not be started.\n+\t */\n+\tpublic LoadBalancerExtension(LoadBalancer loadBalancer, LoadBalancerStatisticsReader statsReader) {\n+\t\tthis.loadBalancer = loadBalancer;\n+\t\tthis.statsReader = statsReader;\n+\t}\n+\n+\t@Override\n+\tpublic void run() {\n+\t\ttry {\n+\t\t\tif (log.isInfoEnabled()) {\n+\t\t\t\tlog.info(\"Load balancer extension started\");\n+\t\t\t}\n+\n+\t\t\t// Start topology receiver thread\n+\t\t\ttopologyEventReceiver = new TopologyEventReceiver();\n+\t\t\taddEventListeners();\n+\t\t\ttopologyEventReceiver.setExecutorService(executorService);\n+\t\t\ttopologyEventReceiver.execute();\n+\n+\t\t\tif (statsReader != null) {\n+\t\t\t\t// Start stats notifier thread\n+\t\t\t\tstatisticsNotifier = new LoadBalancerStatisticsNotifier(statsReader);\n+\t\t\t\tThread statsNotifierThread = new Thread(statisticsNotifier);\n+\t\t\t\tstatsNotifierThread.start();\n+\t\t\t} else {\n+\t\t\t\tif (log.isWarnEnabled()) {\n+\t\t\t\t\tlog.warn(\"Load balancer statistics reader not found\");\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t} catch (Exception e) {\n+\t\t\tif (log.isErrorEnabled()) {\n+\t\t\t\tlog.error(\"Could not start load balancer extension\", e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void addEventListeners() {\n+\t\ttopologyEventReceiver.addEventListener(new CompleteTopologyEventListener() {\n+\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\ttry {\n+\n+\t\t\t\t\tif (!loadBalancerStarted) {\n+\t\t\t\t\t\t// Configure load balancer\n+\t\t\t\t\t\tloadBalancer.configure(TopologyManager.getTopology());\n+\n+\t\t\t\t\t\t// Start load balancer\n+\t\t\t\t\t\tloadBalancer.start();\n+\t\t\t\t\t\tloadBalancerStarted = true;\n+\t\t\t\t\t}\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tif (log.isErrorEnabled()) {\n+\t\t\t\t\t\tlog.error(\"Could not start load balancer\", e);\n+\t\t\t\t\t}\n+\t\t\t\t\tterminate();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t});\n+\t\ttopologyEventReceiver.addEventListener(new MemberActivatedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\treloadConfiguration();\n+\t\t\t}\n+\t\t});\n+\t\ttopologyEventReceiver.addEventListener(new MemberSuspendedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\treloadConfiguration();\n+\t\t\t}\n+\t\t});\n+\t\ttopologyEventReceiver.addEventListener(new MemberTerminatedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\treloadConfiguration();\n+\t\t\t}\n+\t\t});\n+\t\ttopologyEventReceiver.addEventListener(new ClusterRemovedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\treloadConfiguration();\n+\t\t\t}\n+\t\t});\n+\t\ttopologyEventReceiver.addEventListener(new ServiceRemovedEventListener() {\n+\t\t\t@Override\n+\t\t\tprotected void onEvent(Event event) {\n+\t\t\t\treloadConfiguration();\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tprivate void reloadConfiguration() {\n+\t\ttry {\n+\t\t\tif (loadBalancerStarted) {\n+\t\t\t\tloadBalancer.reload(TopologyManager.getTopology());\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tif (log.isErrorEnabled()) {\n+\t\t\t\tlog.error(\"Could not reload load balancer configuration\", e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic void terminate() {\n+\t\tif (topologyEventReceiver != null) {\n+\t\t\ttopologyEventReceiver.terminate();\n+\t\t}\n+\t\tif (statisticsNotifier != null) {\n+\t\t\tstatisticsNotifier.terminate();\n+\t\t}\n+\t\tterminated = true;\n+\t}\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer.extension.api/src/main/java/org/apache/stratos/load/balancer/extension/api/LoadBalancerExtension.java",
                "sha": "188b2ac14b54bd566620a064b23f73b8bc7a3bc8",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/AlgorithmContext.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/AlgorithmContext.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/AlgorithmContext.java",
                "patch": "@@ -21,6 +21,8 @@\n \n import org.apache.stratos.load.balancer.context.map.AlgorithmContextMap;\n \n+import java.util.concurrent.locks.Lock;\n+\n /**\n  * Algorithm context is used for identifying the cluster and its current member for executing load balancing algorithms.\n  * Key: service name, cluster id\n@@ -32,7 +34,15 @@\n     public AlgorithmContext(String serviceName, String clusterId) {\n         this.serviceName = serviceName;\n         this.clusterId = clusterId;\n-        AlgorithmContextMap.getInstance().putCurrentMemberIndex(serviceName, clusterId, 0);\n+        Lock lock = null;\n+        try {\n+            lock = AlgorithmContextMap.getInstance().acquireCurrentMemberIndexLock();\n+            AlgorithmContextMap.getInstance().putCurrentMemberIndex(serviceName, clusterId, 0);\n+        } finally {\n+            if(lock != null) {\n+                AlgorithmContextMap.getInstance().releaseCurrentMemberIndexLock(lock);\n+            }\n+        }\n     }\n \n     public String getServiceName() {\n@@ -48,6 +58,14 @@ public int getCurrentMemberIndex() {\n     }\n \n     public void setCurrentMemberIndex(int currentMemberIndex) {\n-        AlgorithmContextMap.getInstance().putCurrentMemberIndex(getServiceName(), getClusterId(), currentMemberIndex);\n+        Lock lock = null;\n+        try {\n+            lock = AlgorithmContextMap.getInstance().acquireCurrentMemberIndexLock();\n+            AlgorithmContextMap.getInstance().putCurrentMemberIndex(getServiceName(), getClusterId(), currentMemberIndex);\n+        } finally {\n+            if(lock != null) {\n+                AlgorithmContextMap.getInstance().releaseCurrentMemberIndexLock(lock);\n+            }\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/AlgorithmContext.java",
                "sha": "240ebbaa6878de43529c348cd4b078d24332407a",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/map/AlgorithmContextMap.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/map/AlgorithmContextMap.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/map/AlgorithmContextMap.java",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.stratos.load.balancer.internal.ServiceReferenceHolder;\n \n import java.util.Map;\n+import java.util.concurrent.locks.Lock;\n \n /**\n  * Algorithm context map is a singleton class for managing load balancing algorithm context\n@@ -34,6 +35,7 @@\n     @SuppressWarnings(\"unused\")\n     private static final Log log = LogFactory.getLog(AlgorithmContextMap.class);\n     private static final String LOAD_BALANCER_ALGORITHM_CONTEXT_MAP = \"LOAD_BALANCER_ALGORITHM_CONTEXT_MAP\";\n+    private static final String CURRENT_MEMBER_INDEX_MAP_LOCK = \"CURRENT_MEMBER_INDEX_MAP_LOCK\";\n     private static AlgorithmContextMap instance;\n \n     private final Map<String, Integer> clusterMemberIndexMap;\n@@ -61,14 +63,24 @@ private String constructKey(String serviceName, String clusterId) {\n         return String.format(\"%s-%s\", serviceName, clusterId);\n     }\n \n+    public Lock acquireCurrentMemberIndexLock() {\n+        return distributedObjectProvider.acquireLock(CURRENT_MEMBER_INDEX_MAP_LOCK);\n+    }\n+\n+    public void releaseCurrentMemberIndexLock(Lock lock) {\n+        if(lock != null) {\n+            distributedObjectProvider.releaseLock(lock);\n+        }\n+    }\n+\n     public void putCurrentMemberIndex(String serviceName, String clusterId, int currentMemberIndex) {\n         String key = constructKey(serviceName, clusterId);\n-        distributedObjectProvider.putToMap(clusterMemberIndexMap, key, currentMemberIndex);\n+        clusterMemberIndexMap.put(key, currentMemberIndex);\n     }\n \n     public void removeCluster(String serviceName, String clusterId) {\n         String key = constructKey(serviceName, clusterId);\n-        distributedObjectProvider.removeFromMap(clusterMemberIndexMap, key);\n+        clusterMemberIndexMap.remove(key);\n     }\n \n     public int getCurrentMemberIndex(String serviceName, String clusterId) {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/context/map/AlgorithmContextMap.java",
                "sha": "35acdb0a2511f9f26e4f3cb8e8cb2bc3f3740913",
                "status": "modified"
            },
            {
                "additions": 44,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/internal/LoadBalancerServiceComponent.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/internal/LoadBalancerServiceComponent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 6,
                "filename": "components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/internal/LoadBalancerServiceComponent.java",
                "patch": "@@ -60,6 +60,7 @@\n import java.io.File;\n import java.util.Map;\n import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n \n /**\n  * @scr.component name=\"org.apache.stratos.load.balancer.internal.LoadBalancerServiceComponent\" immediate=\"true\"\n@@ -88,6 +89,9 @@\n     private LoadBalancerTopologyEventReceiver topologyReceiver;\n     private LoadBalancerTenantEventReceiver tenantReceiver;\n     private LoadBalancerStatisticsNotifier statisticsNotifier;\n+\tprivate static final String STRATOS_MANAGER = \"Stratos_manager\";\n+\tprivate static final int THREAD_POOL_SIZE = 20;\n+\tprivate ExecutorService executorService;\n \n     protected void activate(ComponentContext ctxt) {\n         try {\n@@ -123,6 +127,40 @@ protected void activate(ComponentContext ctxt) {\n             if (configuration.isTopologyEventListenerEnabled()) {\n                 // Start topology receiver\n                 startTopologyEventReceiver();\n+\n+                if (log.isInfoEnabled()) {\n+                    if (TopologyServiceFilter.getInstance().isActive()) {\n+                        StringBuilder sb = new StringBuilder();\n+                        for (String serviceName : TopologyServiceFilter.getInstance().getIncludedServiceNames()) {\n+                            if (sb.length() > 0) {\n+                                sb.append(\", \");\n+                            }\n+                            sb.append(serviceName);\n+                        }\n+                        log.info(String.format(\"Service filter activated: [services] %s\", sb.toString()));\n+                    }\n+                    if (TopologyClusterFilter.getInstance().isActive()) {\n+                        StringBuilder sb = new StringBuilder();\n+                        for (String clusterId : TopologyClusterFilter.getInstance().getIncludedClusterIds()) {\n+                            if (sb.length() > 0) {\n+                                sb.append(\", \");\n+                            }\n+                            sb.append(clusterId);\n+                        }\n+                        log.info(String.format(\"Cluster filter activated: [clusters] %s\", sb.toString()));\n+                    }\n+                    if (TopologyMemberFilter.getInstance().isActive()) {\n+                        StringBuilder sb = new StringBuilder();\n+                        for (String clusterId : TopologyMemberFilter.getInstance().getIncludedLbClusterIds()) {\n+                            if (sb.length() > 0) {\n+                                sb.append(\", \");\n+                            }\n+                            sb.append(clusterId);\n+                        }\n+                        log.info(String.format(\"Member filter activated: [lb-cluster-ids] %s\", sb.toString()));\n+                    }\n+                }\n+\n             }\n \n             if(configuration.isCepStatsPublisherEnabled()) {\n@@ -142,18 +180,16 @@ protected void activate(ComponentContext ctxt) {\n     }\n \n     private void startTenantEventReceiver() {\n-        tenantReceiver = new LoadBalancerTenantEventReceiver();\n-        Thread tenantReceiverThread = new Thread(tenantReceiver);\n-        tenantReceiverThread.start();\n+\t    tenantReceiver = new LoadBalancerTenantEventReceiver();\n+\t    tenantReceiver.execute();\n         if (log.isInfoEnabled()) {\n             log.info(\"Tenant receiver thread started\");\n         }\n     }\n \n     private void startTopologyEventReceiver() {\n-        topologyReceiver = new LoadBalancerTopologyEventReceiver();\n-        Thread topologyReceiverThread = new Thread(topologyReceiver);\n-        topologyReceiverThread.start();\n+\t    topologyReceiver = new LoadBalancerTopologyEventReceiver();\n+\t    topologyReceiver.execute();\n         if (log.isInfoEnabled()) {\n             log.info(\"Topology receiver thread started\");\n         }\n@@ -220,6 +256,8 @@ protected void deactivate(ComponentContext context) {\n         topologyReceiver.terminate();\n         // Terminate statistics notifier\n         statisticsNotifier.terminate();\n+\n+\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/internal/LoadBalancerServiceComponent.java",
                "sha": "509bc74344c18b31f1d8b65a5dcfd5435ad37f03",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/messaging/LoadBalancerTenantEventReceiver.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/messaging/LoadBalancerTenantEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 12,
                "filename": "components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/messaging/LoadBalancerTenantEventReceiver.java",
                "patch": "@@ -37,7 +37,7 @@\n  * Load balancer tenant receiver updates load balancer context according to\n  * incoming tenant events.\n  */\n-public class LoadBalancerTenantEventReceiver implements Runnable {\n+public class LoadBalancerTenantEventReceiver{\n \n     private static final Log log = LogFactory.getLog(LoadBalancerTenantEventReceiver.class);\n \n@@ -192,18 +192,10 @@ private boolean isMultiTenantService(String serviceName) {\n         }\n     }\n \n-    @Override\n-    public void run() {\n-        Thread tenantReceiverThread = new Thread(tenantEventReceiver);\n-        tenantReceiverThread.start();\n \n-        // Keep the thread live until terminated\n-        while (!terminated) {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException ignore) {\n-            }\n-        }\n+    public void execute() {\n+        tenantEventReceiver.execute();\n+\n         if (log.isInfoEnabled()) {\n             log.info(\"Load balancer tenant receiver thread terminated\");\n         }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/messaging/LoadBalancerTenantEventReceiver.java",
                "sha": "e729dd535d0cdbc9e77d25f90cb8ee29e20aba3d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/messaging/LoadBalancerTopologyEventReceiver.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/messaging/LoadBalancerTopologyEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 15,
                "filename": "components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/messaging/LoadBalancerTopologyEventReceiver.java",
                "patch": "@@ -39,7 +39,7 @@\n  * Load balancer topology receiver updates load balancer context according to\n  * incoming topology events.\n  */\n-public class LoadBalancerTopologyEventReceiver implements Runnable {\n+public class LoadBalancerTopologyEventReceiver {\n \n     private static final Log log = LogFactory.getLog(LoadBalancerTopologyEventReceiver.class);\n \n@@ -51,24 +51,14 @@ public LoadBalancerTopologyEventReceiver() {\n         addEventListeners();\n     }\n \n-    @Override\n-    public void run() {\n-        Thread thread = new Thread(topologyEventReceiver);\n-        thread.start();\n+    public void execute() {\n+\n+\t    topologyEventReceiver.execute();\n         if (log.isInfoEnabled()) {\n             log.info(\"Load balancer topology receiver thread started\");\n         }\n \n-        // Keep the thread live until terminated\n-        while (!terminated) {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException ignore) {\n-            }\n-        }\n-        if (log.isInfoEnabled()) {\n-            log.info(\"Load balancer topology receiver thread terminated\");\n-        }\n+\n     }\n \n     private void addEventListeners() {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.load.balancer/src/main/java/org/apache/stratos/load/balancer/messaging/LoadBalancerTopologyEventReceiver.java",
                "sha": "657d18e9338544c6ac418338286b4db1fafa8d91",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/AutoscalerServiceClient.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/AutoscalerServiceClient.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/AutoscalerServiceClient.java",
                "patch": "@@ -170,6 +170,10 @@ public void undeployServiceGroupDefinition(String serviceGroupName)\n         return deploymentPolicies;\n     }\n \n+    public void unDeployDeploymentPolicy(String applicationId) throws RemoteException {\n+        stub.undeployDeploymentPolicy(applicationId);\n+    }\n+\n //    public void checkLBExistenceAgainstPolicy(String clusterId, String deploymentPolicyId) throws RemoteException,\n //            AutoScalerServiceNonExistingLBExceptionException {\n //        stub.checkLBExistenceAgainstPolicy(clusterId, deploymentPolicyId);\n@@ -192,7 +196,7 @@ public void undeployServiceGroupDefinition(String serviceGroupName)\n         return deploymentPolicy;\n     }\n \n-    public boolean deployDeploymentPolicy(DeploymentPolicy deploymentPolicy) throws RemoteException,\n+    public String deployDeploymentPolicy(DeploymentPolicy deploymentPolicy) throws RemoteException,\n             AutoScalerServiceInvalidPolicyExceptionException {\n \n         return stub.addDeploymentPolicy(deploymentPolicy);",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/AutoscalerServiceClient.java",
                "sha": "8687a4b04562cb21ad451f9b361d3a5a8559692b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/CloudControllerServiceClient.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/CloudControllerServiceClient.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/CloudControllerServiceClient.java",
                "patch": "@@ -99,6 +99,10 @@ public void unDeployCartridgeDefinition (String cartridgeType) throws RemoteExce\n     public void deployServiceGroup (ServiceGroup serviceGroup) throws RemoteException, CloudControllerServiceInvalidServiceGroupExceptionException {\n     \tstub.deployServiceGroup(serviceGroup);\n     }\n+\n+    public void undeployDeploymentPOlicy (String applicationId) throws RemoteException, CloudControllerServiceInvalidServiceGroupExceptionException {\n+        //stub.deployServiceGroup(serviceGroup);\n+    }\n     \n     public void undeployServiceGroup (String name)throws RemoteException, CloudControllerServiceInvalidServiceGroupExceptionException {\n     \tstub.undeployServiceGroup(name);",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/client/CloudControllerServiceClient.java",
                "sha": "5482e564474fb3ed55e3c1ab6c5f2773d982024c",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/internal/ADCManagementServerComponent.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/internal/ADCManagementServerComponent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 7,
                "filename": "components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/internal/ADCManagementServerComponent.java",
                "patch": "@@ -18,8 +18,10 @@\n  */\n package org.apache.stratos.manager.internal;\n \n+import org.apache.axis2.util.threadpool.ThreadPool;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.apache.stratos.common.threading.StratosThreadPool;\n import org.apache.stratos.manager.listener.InstanceStatusListener;\n import org.apache.stratos.manager.listener.TenantUserRoleCreator;\n import org.apache.stratos.manager.publisher.TenantEventPublisher;\n@@ -39,6 +41,8 @@\n import org.wso2.carbon.user.core.service.RealmService;\n import org.wso2.carbon.utils.ConfigurationContextService;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * @scr.component name=\"org.wso2.carbon.hosting.mgt.internal.ADCManagementServerComponent\"\n  *                immediate=\"true\"\n@@ -63,13 +67,17 @@\n \n public class ADCManagementServerComponent {\n \n-    private static final Log log = LogFactory.getLog(ADCManagementServerComponent.class);\n-    private StratosManagerTopologyEventReceiver stratosManagerTopologyEventReceiver;\n+\tprivate static final Log log = LogFactory.getLog(ADCManagementServerComponent.class);\n+\tprivate static final String IDENTIFIER = \"Stratos_manager\";\n+\tprivate static final int THREAD_POOL_SIZE = 20;\n+\tprivate StratosManagerTopologyEventReceiver stratosManagerTopologyEventReceiver;\n+\tprivate ExecutorService executorService;\n \n     protected void activate(ComponentContext componentContext) throws Exception {\n \t\ttry {\n \t\t\tCartridgeConfigFileReader.readProperties();\n-\n+\t\t\texecutorService=StratosThreadPool.getExecutorService(IDENTIFIER, THREAD_POOL_SIZE);\n+\t\t\t\n             // Schedule complete tenant event synchronizer\n             if(log.isDebugEnabled()) {\n                 log.debug(\"Scheduling tenant synchronizer task...\");\n@@ -90,8 +98,8 @@ protected void activate(ComponentContext componentContext) throws Exception {\n                 log.debug(\"Starting instance status topic subscriber...\");\n             }\n             Subscriber subscriber = new Subscriber(Util.Topics.INSTANCE_STATUS_TOPIC.getTopicName(), new InstanceStatusListener());\n-            Thread tsubscriber = new Thread(subscriber);\n-\t\t\ttsubscriber.start();\n+       \t\texecutorService.execute(subscriber);\n+\n \n             RealmService realmService = DataHolder.getRealmService();\n             UserRealm realm = realmService.getBootstrapRealm();\n@@ -115,9 +123,11 @@ protected void activate(ComponentContext componentContext) throws Exception {\n             Thread topologyReceiverThread = new Thread(topologyReceiver);\n             topologyReceiverThread.start();*/\n \n+\n             stratosManagerTopologyEventReceiver = new StratosManagerTopologyEventReceiver();\n-            Thread topologyReceiverThread = new Thread(stratosManagerTopologyEventReceiver);\n-            topologyReceiverThread.start();\n+\t\t\tstratosManagerTopologyEventReceiver.setExecutorService(executorService);\n+\t\t\texecutorService.execute(stratosManagerTopologyEventReceiver);\n+\n             log.info(\"Topology receiver thread started\");\n \n             // retrieve persisted CartridgeSubscriptions\n@@ -201,6 +211,7 @@ protected void deactivate(ComponentContext context) {\n         EventPublisherPool.close(Util.Topics.INSTANCE_NOTIFIER_TOPIC.getTopicName());\n         EventPublisherPool.close(Util.Topics.TENANT_TOPIC.getTopicName());\n \n+\t    executorService.shutdownNow();\n         //terminate Stratos Manager Topology Receiver\n         stratosManagerTopologyEventReceiver.terminate();\n     }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/internal/ADCManagementServerComponent.java",
                "sha": "e4ffccc4a3a0b207ab508bd3cf7fba83c428f43e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/InstanceNotificationPublisher.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/InstanceNotificationPublisher.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/InstanceNotificationPublisher.java",
                "patch": "@@ -80,6 +80,6 @@ public void sendInstanceCleanupEventForMember(String memberId) {\n \n \tpublic void sendInstanceCleanupEventForCluster(String clusterId) {\n \t\tlog.info(String.format(\"Publishing Instance Cleanup Event: [cluster] %s\", clusterId));\n-\t\tpublish(new InstanceCleanupClusterEvent(clusterId));\n+\t\tpublish(new InstanceCleanupClusterEvent(clusterId, null));\n \t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/publisher/InstanceNotificationPublisher.java",
                "sha": "4001f5cd8f48d8f745f996bd24ea4abb38bcb160",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/topology/receiver/StratosManagerTopologyEventReceiver.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/topology/receiver/StratosManagerTopologyEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/topology/receiver/StratosManagerTopologyEventReceiver.java",
                "patch": "@@ -37,13 +37,15 @@\n import org.wso2.carbon.context.PrivilegedCarbonContext;\n \n import java.util.List;\n+import java.util.concurrent.ExecutorService;\n \n public class StratosManagerTopologyEventReceiver implements Runnable {\n \n     private static final Log log = LogFactory.getLog(StratosManagerTopologyEventReceiver.class);\n \n     private TopologyEventReceiver topologyEventReceiver;\n     private boolean terminated;\n+\tprivate ExecutorService executorService;\n \n     public StratosManagerTopologyEventReceiver() {\n         this.terminated = false;\n@@ -448,8 +450,11 @@ protected void onEvent(Event event) {\n \n     @Override\n     public void run() {\n-        Thread thread = new Thread(topologyEventReceiver);\n-        thread.start();\n+\n+\t    topologyEventReceiver.setExecutorService(executorService);\n+\t    topologyEventReceiver.execute();\n+\t   // executorService.execute(topologyEventReceiver);\n+\n         log.info(\"Stratos Manager topology receiver thread started\");\n \n         //Keep running till terminate is set from deactivate method of the component\n@@ -468,4 +473,12 @@ public void terminate () {\n         topologyEventReceiver.terminate();\n         terminated = true;\n     }\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.manager/src/main/java/org/apache/stratos/manager/topology/receiver/StratosManagerTopologyEventReceiver.java",
                "sha": "9ebac570458b8785fd7387f3e8342230fa1e2732",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/DependencyOrder.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/DependencyOrder.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/DependencyOrder.java",
                "patch": "@@ -28,7 +28,7 @@\n \n \tprivate Set<StartupOrder> startupOrders;\n \n-\tprivate Set<ScalingOrder> scalingOrders;\n+\tprivate Set<ScalingDependentList> scalingDependentLists;\n \n     private String terminationBehaviour;\n \n@@ -52,11 +52,11 @@ public void setStartupOrders(Set<StartupOrder> startupOrders) {\n \t\tthis.startupOrders = startupOrders;\n \t}\n \n-    public Set<ScalingOrder> getScalingOrders() {\n-        return scalingOrders;\n+    public Set<ScalingDependentList> getScalingDependentLists() {\n+        return scalingDependentLists;\n     }\n \n-    public void setScalingOrders(Set<ScalingOrder> scalingOrders) {\n-        this.scalingOrders = scalingOrders;\n+    public void setScalingDependentLists(Set<ScalingDependentList> scalingDependentLists) {\n+        this.scalingDependentLists = scalingDependentLists;\n     }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/DependencyOrder.java",
                "sha": "127cd4fcd8304e160979a3fe13c5b9979a5a83fa",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/ScalingDependentList.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/ScalingDependentList.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 8,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/ScalingDependentList.java",
                "patch": "@@ -22,19 +22,19 @@\n import java.io.Serializable;\n import java.util.List;\n \n-public class ScalingOrder implements Serializable {\n+public class ScalingDependentList implements Serializable {\n \n-    private List<String> scalingOrderComponentsList;\n+    private List<String> scalingDependentListComponents;\n \n-    public ScalingOrder(List<String> scalingOrderList) {\n-        this.scalingOrderComponentsList = scalingOrderList;\n+    public ScalingDependentList(List<String> scalingOrderList) {\n+        this.scalingDependentListComponents = scalingOrderList;\n     }\n \n-    public List<String> getScalingOrderComponentsList() {\n-        return scalingOrderComponentsList;\n+    public List<String> getScalingDependentListComponents() {\n+        return scalingDependentListComponents;\n     }\n \n-    public void setScalingOrderComponentsList(List<String> scalingOrderComponentsList) {\n-        this.scalingOrderComponentsList = scalingOrderComponentsList;\n+    public void setScalingDependentListComponents(List<String> scalingDependentListComponents) {\n+        this.scalingDependentListComponents = scalingDependentListComponents;\n     }\n }",
                "previous_filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/ScalingOrder.java",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/applications/ScalingDependentList.java",
                "sha": "456a14a82cecd244288d1e340b230741b3415f36",
                "status": "renamed"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/Cluster.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/Cluster.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/Cluster.java",
                "patch": "@@ -223,8 +223,11 @@ public boolean isStateTransitionValid(ClusterStatus newState, String clusterInst\n     }\n \n     public ClusterStatus getStatus(String applicationInstanceId) {\n-        //return status;\n-        return getInstanceIdToInstanceContextMap().get(applicationInstanceId).getStatus();\n+    \tClusterInstance clusterInstance = getInstanceIdToInstanceContextMap().get(applicationInstanceId);\n+    \tif(clusterInstance != null) {\n+    \t\treturn clusterInstance.getStatus();\n+    \t}\n+    \treturn null;\n     }\n \n     public boolean setStatus(ClusterStatus newStatus, String applicationInstanceId) {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/domain/topology/Cluster.java",
                "sha": "2e345d4901d20bb0843df84e5123be1d25e72205",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceInactivatedEvent.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceInactivatedEvent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceInactivatedEvent.java",
                "patch": "@@ -25,13 +25,13 @@\n /**\n  * This event will be fired upon the application inactivated is detected.\n  */\n-public class ApplicationInactivatedEvent extends Event implements Serializable {\n+public class ApplicationInstanceInactivatedEvent extends Event implements Serializable {\n     private static final long serialVersionUID = 2625412714611885089L;\n \n     private String appId;\n     private String instanceId;\n \n-    public ApplicationInactivatedEvent(String appId, String instanceId) {\n+    public ApplicationInstanceInactivatedEvent(String appId, String instanceId) {\n         this.appId = appId;\n         this.instanceId = instanceId;\n     }",
                "previous_filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInactivatedEvent.java",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceInactivatedEvent.java",
                "sha": "c8254ed0f91604ce6794b5827b1726b411acf7d8",
                "status": "renamed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceTerminatedEvent.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceTerminatedEvent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceTerminatedEvent.java",
                "patch": "@@ -27,13 +27,13 @@\n /**\n  * This event will be fired upon the application terminated is detected.\n  */\n-public class ApplicationTerminatedEvent extends Event implements Serializable {\n+public class ApplicationInstanceTerminatedEvent extends Event implements Serializable {\n     private static final long serialVersionUID = 2625412714611885089L;\n \n     private String appId;\n     private Set<ClusterDataHolder> clusterData;\n \n-    public ApplicationTerminatedEvent(String appId, Set<ClusterDataHolder> clusterData) {\n+    public ApplicationInstanceTerminatedEvent(String appId, Set<ClusterDataHolder> clusterData) {\n         this.appId = appId;\n         this.clusterData = clusterData;\n     }",
                "previous_filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationTerminatedEvent.java",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceTerminatedEvent.java",
                "sha": "1d05ba3e09d7eb7db12763b0ac80844028d44fef",
                "status": "renamed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceTerminatingEvent.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceTerminatingEvent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceTerminatingEvent.java",
                "patch": "@@ -25,14 +25,14 @@\n /**\n  * This event will be fired upon the application terminating is detected.\n  */\n-public class ApplicationTerminatingEvent extends Event implements Serializable {\n+public class ApplicationInstanceTerminatingEvent extends Event implements Serializable {\n     private static final long serialVersionUID = 2625412714611885089L;\n \n     private String appId;\n     private String instanceId;\n \n \n-    public ApplicationTerminatingEvent(String appId, String instanceId) {\n+    public ApplicationInstanceTerminatingEvent(String appId, String instanceId) {\n         this.appId = appId;\n         this.instanceId = instanceId;\n ",
                "previous_filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationTerminatingEvent.java",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/applications/ApplicationInstanceTerminatingEvent.java",
                "sha": "23510dd08436e0428b795eebfc02d7051cb774e3",
                "status": "renamed"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/instance/notifier/InstanceCleanupClusterEvent.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/instance/notifier/InstanceCleanupClusterEvent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/instance/notifier/InstanceCleanupClusterEvent.java",
                "patch": "@@ -27,12 +27,18 @@\n  */\n public class InstanceCleanupClusterEvent extends InstanceNotifierEvent implements Serializable {\n     private String clusterId;\n+    private String instanceId;\n \n-    public InstanceCleanupClusterEvent(String clusterId) {\n+    public InstanceCleanupClusterEvent(String clusterId, String instanceId) {\n         this.clusterId = clusterId;\n+        this.instanceId = instanceId;\n     }\n \n     public String getClusterId() {\n         return clusterId;\n     }\n+\n+    public String getInstanceId() {\n+        return instanceId;\n+    }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/instance/notifier/InstanceCleanupClusterEvent.java",
                "sha": "96f42ce18cec59346c7e9499c0d4d662dc89fa22",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/ClusterInstanceCreatedEvent.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/ClusterInstanceCreatedEvent.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/ClusterInstanceCreatedEvent.java",
                "patch": "@@ -29,13 +29,17 @@\n     private final String clusterId;\n     private String instanceId;\n     private String alias;\n+    private String partitionId;\n+    private String networkPartitionId;\n \n \n-    public ClusterInstanceCreatedEvent(String alias, String serviceName, String clusterId, String instanceId) {\n+    public ClusterInstanceCreatedEvent(String alias, String serviceName, String clusterId,\n+                                       String instanceId, String networkPartitionId) {\n         this.serviceName = serviceName;\n         this.clusterId = clusterId;\n         this.instanceId = instanceId;\n         this.alias = alias;\n+        this.setNetworkPartitionId(networkPartitionId);\n \n     }\n \n@@ -61,4 +65,19 @@ public String getAlias() {\n         return alias;\n     }\n \n+    public String getPartitionId() {\n+        return partitionId;\n+    }\n+\n+    public void setPartitionId(String partitionId) {\n+        this.partitionId = partitionId;\n+    }\n+\n+    public String getNetworkPartitionId() {\n+        return networkPartitionId;\n+    }\n+\n+    public void setNetworkPartitionId(String networkPartitionId) {\n+        this.networkPartitionId = networkPartitionId;\n+    }\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/event/topology/ClusterInstanceCreatedEvent.java",
                "sha": "58055e0f6c23cc6ac4efcf4e29e4ecbf8a90c0bd",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationInactivatedMessageProcessor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationInactivatedMessageProcessor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationInactivatedMessageProcessor.java",
                "patch": "@@ -24,7 +24,7 @@\n import org.apache.stratos.messaging.domain.applications.ApplicationStatus;\n import org.apache.stratos.messaging.domain.applications.Applications;\n import org.apache.stratos.messaging.domain.instance.ApplicationInstance;\n-import org.apache.stratos.messaging.event.applications.ApplicationInactivatedEvent;\n+import org.apache.stratos.messaging.event.applications.ApplicationInstanceInactivatedEvent;\n import org.apache.stratos.messaging.message.processor.MessageProcessor;\n import org.apache.stratos.messaging.message.processor.applications.updater.ApplicationsUpdater;\n import org.apache.stratos.messaging.util.Util;\n@@ -49,14 +49,14 @@ public void setNext(MessageProcessor nextProcessor) {\n     public boolean process(String type, String message, Object object) {\n         Applications applications = (Applications) object;\n \n-        if (ApplicationInactivatedEvent.class.getName().equals(type)) {\n+        if (ApplicationInstanceInactivatedEvent.class.getName().equals(type)) {\n             // Return if applications has not been initialized\n             if (!applications.isInitialized())\n                 return false;\n \n             // Parse complete message and build event\n-            ApplicationInactivatedEvent event = (ApplicationInactivatedEvent) Util.\n-                    jsonToObject(message, ApplicationInactivatedEvent.class);\n+            ApplicationInstanceInactivatedEvent event = (ApplicationInstanceInactivatedEvent) Util.\n+                    jsonToObject(message, ApplicationInstanceInactivatedEvent.class);\n \n             ApplicationsUpdater.acquireWriteLockForApplication(event.getAppId());\n \n@@ -77,7 +77,7 @@ public boolean process(String type, String message, Object object) {\n         }\n     }\n \n-    private boolean doProcess(ApplicationInactivatedEvent event, Applications applications) {\n+    private boolean doProcess(ApplicationInstanceInactivatedEvent event, Applications applications) {\n \n         // Validate event against the existing applications\n         Application application = applications.getApplication(event.getAppId());",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationInactivatedMessageProcessor.java",
                "sha": "5a3ef91f725db6602ddb3e2ba5d28fc9c797faa3",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationTerminatedMessageProcessor.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationTerminatedMessageProcessor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 9,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationTerminatedMessageProcessor.java",
                "patch": "@@ -21,15 +21,11 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.stratos.messaging.domain.applications.Applications;\n-import org.apache.stratos.messaging.domain.applications.ClusterDataHolder;\n-import org.apache.stratos.messaging.event.applications.ApplicationTerminatedEvent;\n+import org.apache.stratos.messaging.event.applications.ApplicationInstanceTerminatedEvent;\n import org.apache.stratos.messaging.message.processor.MessageProcessor;\n import org.apache.stratos.messaging.message.processor.applications.updater.ApplicationsUpdater;\n-import org.apache.stratos.messaging.message.processor.topology.updater.TopologyUpdater;\n import org.apache.stratos.messaging.util.Util;\n \n-import java.util.Set;\n-\n /**\n  * This processor responsible to process the application Inactivation even and update the Topology.\n  */\n@@ -50,14 +46,14 @@ public void setNext(MessageProcessor nextProcessor) {\n     public boolean process(String type, String message, Object object) {\n         Applications applications = (Applications) object;\n \n-        if (ApplicationTerminatedEvent.class.getName().equals(type)) {\n+        if (ApplicationInstanceTerminatedEvent.class.getName().equals(type)) {\n             // Return if applications has not been initialized\n             if (!applications.isInitialized())\n                 return false;\n \n             // Parse complete message and build event\n-            ApplicationTerminatedEvent event = (ApplicationTerminatedEvent) Util.\n-                    jsonToObject(message, ApplicationTerminatedEvent.class);\n+            ApplicationInstanceTerminatedEvent event = (ApplicationInstanceTerminatedEvent) Util.\n+                    jsonToObject(message, ApplicationInstanceTerminatedEvent.class);\n \n             ApplicationsUpdater.acquireWriteLockForApplications();\n \n@@ -78,7 +74,7 @@ public boolean process(String type, String message, Object object) {\n         }\n     }\n \n-    private boolean doProcess(ApplicationTerminatedEvent event, Applications applications) {\n+    private boolean doProcess(ApplicationInstanceTerminatedEvent event, Applications applications) {\n \n         // check if required properties are available\n         if (event.getAppId() == null) {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationTerminatedMessageProcessor.java",
                "sha": "a6d2cd54517a80e8d51129bad9c7eb5891a5731c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationTerminatingMessageProcessor.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationTerminatingMessageProcessor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationTerminatingMessageProcessor.java",
                "patch": "@@ -24,7 +24,7 @@\n import org.apache.stratos.messaging.domain.applications.ApplicationStatus;\n import org.apache.stratos.messaging.domain.applications.Applications;\n import org.apache.stratos.messaging.domain.instance.ApplicationInstance;\n-import org.apache.stratos.messaging.event.applications.ApplicationTerminatingEvent;\n+import org.apache.stratos.messaging.event.applications.ApplicationInstanceTerminatingEvent;\n import org.apache.stratos.messaging.message.processor.MessageProcessor;\n import org.apache.stratos.messaging.message.processor.applications.updater.ApplicationsUpdater;\n import org.apache.stratos.messaging.util.Util;\n@@ -49,14 +49,14 @@ public void setNext(MessageProcessor nextProcessor) {\n     public boolean process(String type, String message, Object object) {\n         Applications applications = (Applications) object;\n \n-        if (ApplicationTerminatingEvent.class.getName().equals(type)) {\n+        if (ApplicationInstanceTerminatingEvent.class.getName().equals(type)) {\n             // Return if applications has not been initialized\n             if (!applications.isInitialized())\n                 return false;\n \n             // Parse complete message and build event\n-            ApplicationTerminatingEvent event = (ApplicationTerminatingEvent) Util.\n-                    jsonToObject(message, ApplicationTerminatingEvent.class);\n+            ApplicationInstanceTerminatingEvent event = (ApplicationInstanceTerminatingEvent) Util.\n+                    jsonToObject(message, ApplicationInstanceTerminatingEvent.class);\n \n             ApplicationsUpdater.acquireWriteLockForApplication(event.getAppId());\n \n@@ -77,7 +77,7 @@ public boolean process(String type, String message, Object object) {\n         }\n     }\n \n-    private boolean doProcess(ApplicationTerminatingEvent event, Applications applications) {\n+    private boolean doProcess(ApplicationInstanceTerminatingEvent event, Applications applications) {\n \n         // Validate event against the existing applications\n         Application application = applications.getApplication(event.getAppId());",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/applications/ApplicationTerminatingMessageProcessor.java",
                "sha": "33ad474b25da6c5cd98cf506387df7075f175460",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterInstanceCreatedMessageProcessor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterInstanceCreatedMessageProcessor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterInstanceCreatedMessageProcessor.java",
                "patch": "@@ -118,7 +118,8 @@ private boolean doProcess (ClusterInstanceCreatedEvent event,Topology topology)\n             ClusterInstance context = new ClusterInstance(event.getAlias(),\n                                                                         event.getClusterId(),\n                                                                         event.getInstanceId());\n-            //context.setStatus(ClusterStatus.Created);\n+            context.setNetworkPartitionId(event.getNetworkPartitionId());\n+            context.setPartitionId(event.getPartitionId());\n             cluster.addInstanceContext(event.getInstanceId(), context);\n         }\n         // Notify event listeners",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/processor/topology/ClusterInstanceCreatedMessageProcessor.java",
                "sha": "a0bf735aaea48ab3d939f5c78c6b68a99a264a16",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/applications/ApplicationsEventReceiver.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/applications/ApplicationsEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 15,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/applications/ApplicationsEventReceiver.java",
                "patch": "@@ -24,13 +24,16 @@\n import org.apache.stratos.messaging.listener.EventListener;\n import org.apache.stratos.messaging.util.Util;\n \n-public class ApplicationsEventReceiver implements Runnable {\n+import java.util.concurrent.ExecutorService;\n+\n+public class ApplicationsEventReceiver {\n     private static final Log log = LogFactory.getLog(ApplicationsEventReceiver.class);\n \n     private ApplicationsEventMessageDelegator messageDelegator;\n     private ApplicationsEventMessageListener messageListener;\n     private Subscriber subscriber;\n     private boolean terminated;\n+\tprivate ExecutorService executorService;\n \n     public ApplicationsEventReceiver() {\n         ApplicationsEventMessageQueue messageQueue = new ApplicationsEventMessageQueue();\n@@ -42,32 +45,25 @@ public void addEventListener(EventListener eventListener) {\n         messageDelegator.addEventListener(eventListener);\n     }\n \n-    @Override\n-    public void run() {\n+\n+    public void execute() {\n         try {\n             // Start topic subscriber thread\n             subscriber = new Subscriber(Util.Topics.APPLICATIONS_TOPIC.getTopicName(), messageListener);\n-//            subscriber.setMessageListener(messageListener);\n-            Thread subscriberThread = new Thread(subscriber);\n-            subscriberThread.start();\n+\t\t\texecutorService.execute(subscriber);\n+\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Application status event message receiver thread started\");\n             }\n \n             // Start Application status event message delegator thread\n-            Thread receiverThread = new Thread(messageDelegator);\n-            receiverThread.start();\n+\t        executorService.execute(messageDelegator);\n+\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Application status event message delegator thread started\");\n             }\n \n-            // Keep the thread live until terminated\n-            while (!terminated) {\n-                try {\n-                    Thread.sleep(1000);\n-                } catch (InterruptedException ignore) {\n-                }\n-            }\n+\n         } catch (Exception e) {\n             if (log.isErrorEnabled()) {\n                 log.error(\"Application status failed\", e);\n@@ -80,4 +76,12 @@ public void terminate() {\n         messageDelegator.terminate();\n         terminated = true;\n     }\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/applications/ApplicationsEventReceiver.java",
                "sha": "82d8c8335935917071b4087a650a17eaf588fd54",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/cluster/status/ClusterStatusEventReceiver.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/cluster/status/ClusterStatusEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 15,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/cluster/status/ClusterStatusEventReceiver.java",
                "patch": "@@ -25,15 +25,19 @@\n import org.apache.stratos.messaging.listener.EventListener;\n import org.apache.stratos.messaging.util.Util;\n \n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+\n /**\n  * A thread for receiving instance notifier information from message broker.\n  */\n-public class ClusterStatusEventReceiver implements Runnable {\n+public class ClusterStatusEventReceiver{\n     private static final Log log = LogFactory.getLog(ClusterStatusEventReceiver.class);\n     private final ClusterStatusEventMessageDelegator messageDelegator;\n     private final ClusterStatusEventMessageListener messageListener;\n     private Subscriber subscriber;\n     private boolean terminated;\n+\tprivate ExecutorService executorService;\n \n     public ClusterStatusEventReceiver() {\n         ClusterStatusEventMessageQueue messageQueue = new ClusterStatusEventMessageQueue();\n@@ -45,32 +49,24 @@ public void addEventListener(EventListener eventListener) {\n         messageDelegator.addEventListener(eventListener);\n     }\n \n-    @Override\n-    public void run() {\n+\n+    public void execute() {\n         try {\n             // Start topic subscriber thread\n             subscriber = new Subscriber(Util.Topics.CLUSTER_STATUS_TOPIC.getTopicName(), messageListener);\n-//            subscriber.setMessageListener(messageListener);\n-            Thread subscriberThread = new Thread(subscriber);\n-            subscriberThread.start();\n+            executorService.execute(subscriber);\n+\n             if (log.isDebugEnabled()) {\n                 log.debug(\"InstanceNotifier event message receiver thread started\");\n             }\n \n             // Start instance notifier event message delegator thread\n-            Thread receiverThread = new Thread(messageDelegator);\n-            receiverThread.start();\n+\t        executorService.execute(messageDelegator);\n             if (log.isDebugEnabled()) {\n                 log.debug(\"InstanceNotifier event message delegator thread started\");\n             }\n \n-            // Keep the thread live until terminated\n-            while (!terminated) {\n-                try {\n-                    Thread.sleep(1000);\n-                } catch (InterruptedException ignore) {\n-                }\n-            }\n+\n         } catch (Exception e) {\n             if (log.isErrorEnabled()) {\n                 log.error(\"InstanceNotifier receiver failed\", e);\n@@ -87,4 +83,12 @@ public void terminate() {\n         messageDelegator.terminate();\n         terminated = true;\n     }\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/cluster/status/ClusterStatusEventReceiver.java",
                "sha": "a6de43065edadd7bb991801f67b8fa2e9326ad63",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/health/stat/HealthStatEventReceiver.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/health/stat/HealthStatEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 21,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/health/stat/HealthStatEventReceiver.java",
                "patch": "@@ -25,16 +25,19 @@\n import org.apache.stratos.messaging.listener.EventListener;\n import org.apache.stratos.messaging.util.Util;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * A thread for receiving health stat information from message broker\n  */\n-public class HealthStatEventReceiver implements Runnable {\n+public class HealthStatEventReceiver {\n \tprivate static final Log log = LogFactory.getLog(HealthStatEventReceiver.class);\n \n \tprivate final HealthStatEventMessageDelegator messageDelegator;\n \tprivate final HealthStatEventMessageListener messageListener;\n \tprivate Subscriber subscriber;\n \tprivate boolean terminated;\n+\tprivate ExecutorService executorService;\n \n \tpublic HealthStatEventReceiver() {\n \t\tHealthStatEventMessageQueue messageQueue = new HealthStatEventMessageQueue();\n@@ -46,32 +49,19 @@ public void addEventListener(EventListener eventListener) {\n \t\tmessageDelegator.addEventListener(eventListener);\n \t}\n \n-\t@Override\n-\tpublic void run() {\n+\n+\tpublic void execute() {\n \t\ttry {\n \t\t\t// Start topic subscriber thread\n \t\t\tsubscriber = new Subscriber(Util.Topics.HEALTH_STAT_TOPIC.getTopicName(), messageListener);\n-//\t\t\tsubscriber.setMessageListener(messageListener);\n-\t\t\tThread subscriberThread = new Thread(subscriber);\n-\t\t\tsubscriberThread.start();\n-\t\t\tif (log.isDebugEnabled()) {\n-\t\t\t\tlog.debug(\"Health stats event message receiver thread started\");\n-\t\t\t}\n \n-\t\t\t// Start health stat event message delegator thread\n-\t\t\tThread receiverThread = new Thread(messageDelegator);\n-\t\t\treceiverThread.start();\n-\t\t\tif (log.isDebugEnabled()) {\n-\t\t\t\tlog.debug(\"Health stats event message delegator thread started\");\n-\t\t\t}\n+            executorService.execute(subscriber);\n \n-\t\t\t// Keep the thread live until terminated\n-\t\t\twhile (!terminated) {\n-\t\t\t\ttry {\n-\t\t\t\t\tThread.sleep(1000);\n-\t\t\t\t} catch (InterruptedException ignore) {\n-\t\t\t\t}\n+            if (log.isDebugEnabled()) {\n+\t\t\t\tlog.debug(\"Health stats event message delegator thread started\");\n \t\t\t}\n+            // Start topology event message delegator thread\n+            executorService.execute(messageDelegator);\n \t\t} catch (Exception e) {\n \t\t\tif (log.isErrorEnabled()) {\n \t\t\t\tlog.error(\"Topology receiver failed\", e);\n@@ -84,4 +74,12 @@ public void terminate() {\n \t\tmessageDelegator.terminate();\n \t\tterminated = true;\n \t}\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/health/stat/HealthStatEventReceiver.java",
                "sha": "07e7473974c5bc5f1f35cfbb4f9737145136b590",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/instance/notifier/InstanceNotifierEventReceiver.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/instance/notifier/InstanceNotifierEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 3,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/instance/notifier/InstanceNotifierEventReceiver.java",
                "patch": "@@ -29,7 +29,7 @@\n /**\n  * A thread for receiving instance notifier information from message broker.\n  */\n-public class InstanceNotifierEventReceiver implements Runnable {\n+public class InstanceNotifierEventReceiver {\n \tprivate static final Log log = LogFactory.getLog(InstanceNotifierEventReceiver.class);\n \tprivate final InstanceNotifierEventMessageDelegator messageDelegator;\n \tprivate final InstanceNotifierEventMessageListener messageListener;\n@@ -46,8 +46,8 @@ public void addEventListener(EventListener eventListener) {\n \t\tmessageDelegator.addEventListener(eventListener);\n \t}\n \n-\t@Override\n-\tpublic void run() {\n+\n+\tpublic void execute() {\n \t\ttry {\n \t\t\t// Start topic subscriber thread\n \t\t\tsubscriber = new Subscriber(Util.Topics.INSTANCE_NOTIFIER_TOPIC.getTopicName(), messageListener);",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/instance/notifier/InstanceNotifierEventReceiver.java",
                "sha": "5e09672a8dea52396bd3288978db923dea22f96c",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/instance/status/InstanceStatusEventReceiver.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/instance/status/InstanceStatusEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 15,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/instance/status/InstanceStatusEventReceiver.java",
                "patch": "@@ -25,15 +25,18 @@\n import org.apache.stratos.messaging.listener.EventListener;\n import org.apache.stratos.messaging.util.Util;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * A thread for receiving instance notifier information from message broker.\n  */\n-public class InstanceStatusEventReceiver implements Runnable {\n+public class InstanceStatusEventReceiver {\n     private static final Log log = LogFactory.getLog(InstanceStatusEventReceiver.class);\n     private final InstanceStatusEventMessageDelegator messageDelegator;\n     private final InstanceStatusEventMessageListener messageListener;\n     private Subscriber subscriber;\n     private boolean terminated;\n+\tprivate ExecutorService executorService;\n \n     public InstanceStatusEventReceiver() {\n         InstanceStatusEventMessageQueue messageQueue = new InstanceStatusEventMessageQueue();\n@@ -45,32 +48,24 @@ public void addEventListener(EventListener eventListener) {\n         messageDelegator.addEventListener(eventListener);\n     }\n \n-    @Override\n-    public void run() {\n+\n+    public void execute() {\n         try {\n             // Start topic subscriber thread\n             subscriber = new Subscriber(Util.Topics.INSTANCE_STATUS_TOPIC.getTopicName(), messageListener);\n //            subscriber.setMessageListener(messageListener);\n-            Thread subscriberThread = new Thread(subscriber);\n-            subscriberThread.start();\n+            executorService.submit(subscriber);\n             if (log.isDebugEnabled()) {\n                 log.debug(\"InstanceNotifier event message receiver thread started\");\n             }\n \n-            // Start instance notifier event message delegator thread\n-            Thread receiverThread = new Thread(messageDelegator);\n-            receiverThread.start();\n+            // Start instance notifier event message delegate thread\n+            executorService.submit(messageDelegator);\n             if (log.isDebugEnabled()) {\n                 log.debug(\"InstanceNotifier event message delegator thread started\");\n             }\n \n-            // Keep the thread live until terminated\n-            while (!terminated) {\n-                try {\n-                    Thread.sleep(1000);\n-                } catch (InterruptedException ignore) {\n-                }\n-            }\n+\n         } catch (Exception e) {\n             if (log.isErrorEnabled()) {\n                 log.error(\"InstanceNotifier receiver failed\", e);\n@@ -87,4 +82,12 @@ public void terminate() {\n         messageDelegator.terminate();\n         terminated = true;\n     }\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/instance/status/InstanceStatusEventReceiver.java",
                "sha": "af9319f88d5e156b1a1f0e9050bd0d52ae8ec17a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/tenant/TenantEventReceiver.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/tenant/TenantEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 10,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/tenant/TenantEventReceiver.java",
                "patch": "@@ -29,7 +29,7 @@\n  * A thread for receiving tenant information from message broker and\n  * build tenant information in tenant manager.\n  */\n-public class TenantEventReceiver implements Runnable {\n+public class TenantEventReceiver{\n     private static final Log log = LogFactory.getLog(TenantEventReceiver.class);\n     private TenantEventMessageDelegator messageDelegator;\n     private TenantEventMessageListener messageListener;\n@@ -46,8 +46,8 @@ public void addEventListener(EventListener eventListener) {\n         messageDelegator.addEventListener(eventListener);\n     }\n \n-    @Override\n-    public void run() {\n+\n+    public void execute() {\n         try {\n             // Start topic subscriber thread\n             subscriber = new Subscriber(Util.Topics.TENANT_TOPIC.getTopicName(), messageListener);\n@@ -65,13 +65,7 @@ public void run() {\n                 log.debug(\"Tenant event message delegator thread started\");\n             }\n \n-            // Keep the thread live until terminated\n-            while (!terminated) {\n-            \ttry {\n-                    Thread.sleep(1000);\n-                } catch (InterruptedException ignore) {\n-                }\n-            }\n+\n         } catch (Exception e) {\n             if (log.isErrorEnabled()) {\n                 log.error(\"Tenant receiver failed\", e);",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/tenant/TenantEventReceiver.java",
                "sha": "4eabc96473be391497ee62932d0c14bd06978e5f",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/topology/TopologyEventMessageDelegator.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/topology/TopologyEventMessageDelegator.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 11,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/topology/TopologyEventMessageDelegator.java",
                "patch": "@@ -62,19 +62,17 @@ public void run() {\n                     String json = message.getText();\n \n                     if (log.isDebugEnabled()) {\n-                        log.debug(String.format(\"Topology event message [%s] received from queue: %s\", type, messageQueue.getClass()));\n+                        log.debug(String.format(\"Topology event message [%s] received from queue: %s\", type,\n+                                messageQueue.getClass()));\n                     }\n \n-//                    try {\n-//                        TopologyManager.acquireWriteLock();\n-                        if (log.isDebugEnabled()) {\n-                            log.debug(String.format(\"Delegating topology event message: %s\", type));\n-                        }\n-                        processorChain.process(type, json, TopologyManager.getTopology());\n-//                    } finally {\n-//                        TopologyManager.releaseWriteLock();\n-//                    }\n-\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(String.format(\"Delegating topology event message: %s\", type));\n+                    }\n+                    processorChain.process(type, json, TopologyManager.getTopology());\n+                } catch (InterruptedException e) {\n+                    log.info(\"TopologyEventMessageDelegator is shutting down ..\");\n+                    return;\n                 } catch (Exception e) {\n                     log.error(\"Failed to retrieve topology event message\", e);\n                 }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/topology/TopologyEventMessageDelegator.java",
                "sha": "a1da2a8b6623a604f74030dc32fc25fdd3597894",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/topology/TopologyEventReceiver.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/topology/TopologyEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 15,
                "filename": "components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/topology/TopologyEventReceiver.java",
                "patch": "@@ -25,17 +25,18 @@\n import org.apache.stratos.messaging.listener.EventListener;\n import org.apache.stratos.messaging.util.Util;\n \n-\n+import java.util.concurrent.ExecutorService;\n \n /**\n  * A thread for receiving topology information from message broker and\n  * build topology in topology manager.\n  */\n-public class TopologyEventReceiver implements Runnable {\n+public class TopologyEventReceiver {\n     private static final Log log = LogFactory.getLog(TopologyEventReceiver.class);\n     private TopologyEventMessageDelegator messageDelegator;\n     private TopologyEventMessageListener messageListener;\n     private Subscriber subscriber;\n+\tprivate ExecutorService executorService;\n     private boolean terminated;\n \n     public TopologyEventReceiver() {\n@@ -48,34 +49,26 @@ public void addEventListener(EventListener eventListener) {\n         messageDelegator.addEventListener(eventListener);\n     }\n \n-\t@Override\n-\tpublic void run() {\n+\n+\tpublic void execute() {\n \t\ttry {\n \t\t\t// Start topic subscriber thread\n \t\t\tsubscriber = new Subscriber(Util.Topics.TOPOLOGY_TOPIC.getTopicName(), messageListener);\n \t\t\t// subscriber.setMessageListener(messageListener);\n+\t\t\texecutorService.execute(subscriber);\n \n-\t\t\tThread subscriberThread = new Thread(subscriber);\n-\t\t\tsubscriberThread.start();\n \n             if (log.isDebugEnabled()) {\n                 log.debug(\"Topology event message receiver thread started\");\n             }\n \n             // Start topology event message delegator thread\n-            Thread receiverThread = new Thread(messageDelegator);\n-            receiverThread.start();\n+            executorService.execute(messageDelegator);\n             if (log.isDebugEnabled()) {\n                 log.debug(\"Topology event message delegator thread started\");\n             }\n \n-            // Keep the thread live until terminated\n-            while (!terminated) {\n-            \ttry {\n-                    Thread.sleep(1000);\n-                } catch (InterruptedException ignore) {\n-                }\n-            }\n+\n         } catch (Exception e) {\n             if (log.isErrorEnabled()) {\n                 log.error(\"Topology receiver failed\", e);\n@@ -88,4 +81,12 @@ public void terminate() {\n         messageDelegator.terminate();\n         terminated = true;\n     }\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.messaging/src/main/java/org/apache/stratos/messaging/message/receiver/topology/TopologyEventReceiver.java",
                "sha": "b4beea5f2eb99df9edcb184f0a5fee9272086737",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/config/cartridgeagentconfiguration.py",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/config/cartridgeagentconfiguration.py?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/config/cartridgeagentconfiguration.py",
                "patch": "@@ -93,6 +93,8 @@ def __init__(self):\n             \"\"\" :type : str  \"\"\"\n             self.is_primary = False\n             \"\"\" :type : bool  \"\"\"\n+            self.instance_id = None\n+            \"\"\" :type : str  \"\"\"\n \n             self.payload_params = {}\n             self.__read_conf_file()\n@@ -123,6 +125,7 @@ def __init__(self):\n                 self.app_path = self.read_property(cartridgeagentconstants.APP_PATH, False)\n                 self.repo_url = self.read_property(cartridgeagentconstants.REPO_URL, False)\n                 self.ports = str(self.read_property(cartridgeagentconstants.PORTS)).split(\"|\")\n+                self.instance_id= self.read_property(cartridgeagentconstants.INSTANCE_ID)\n \n                 try:\n                     self.log_file_paths = str(",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/config/cartridgeagentconfiguration.py",
                "sha": "dbdf92ae72f8c0bbfd34c8b7fd6082ab4e3ec280",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/healthstatspublisher/healthstats.py",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/healthstatspublisher/healthstats.py?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/healthstatspublisher/healthstats.py",
                "patch": "@@ -123,6 +123,8 @@ def create_stream_definition():\n         stream_def.nickname = HealthStatisticsPublisherManager.STREAM_NICKNAME\n         stream_def.description = HealthStatisticsPublisherManager.STREAM_DESCRIPTION\n \n+\n+        stream_def.add_payloaddata_attribute(\"instance_id\", StreamDefinition.STRING)\n         stream_def.add_payloaddata_attribute(\"cluster_id\", StreamDefinition.STRING)\n         stream_def.add_payloaddata_attribute(\"network_partition_id\", StreamDefinition.STRING)\n         stream_def.add_payloaddata_attribute(\"member_id\", StreamDefinition.STRING)\n@@ -139,6 +141,7 @@ def publish_memory_usage(self, memory_usage):\n         \"\"\"\n \n         event = ThriftEvent()\n+        event.payloadData.append(self.cartridge_agent_config.instance_id)\n         event.payloadData.append(self.cartridge_agent_config.cluster_id)\n         event.payloadData.append(self.cartridge_agent_config.network_partition_id)\n         event.payloadData.append(self.cartridge_agent_config.member_id)",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/healthstatspublisher/healthstats.py",
                "sha": "f06da8bc53356f9905fec45457d08ef21023e8f1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/util/cartridgeagentconstants.py",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/util/cartridgeagentconstants.py?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/util/cartridgeagentconstants.py",
                "patch": "@@ -26,6 +26,7 @@\n SERVICE_GROUP = \"SERIVCE_GROUP\"\n SERVICE_NAME = \"SERVICE_NAME\"\n CLUSTER_ID = \"CLUSTER_ID\"\n+INSTANCE_ID= \"INSTANCE_ID\"\n LB_CLUSTER_ID = \"LB_CLUSTER_ID\"\n NETWORK_PARTITION_ID = \"NETWORK_PARTITION_ID\"\n PARTITION_ID = \"PARTITION_ID\"",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.python.cartridge.agent/cartridgeagent/cartridgeagent/modules/util/cartridgeagentconstants.py",
                "sha": "1e59b8b1254bd601447742eb33e79c6fced0888c",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV40Utils.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV40Utils.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 7,
                "filename": "components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV40Utils.java",
                "patch": "@@ -230,17 +230,15 @@ public static StratosApiResponse deployDeploymentPolicy(\n             org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy deploymentPolicyBean)\n             throws RestAPIException {\n \n-        //log.info(\"***** \" + cartridgeDefinitionBean.toString() + \" *****\");\n+        String policyId = null;\n \n         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();\n         if (autoscalerServiceClient != null) {\n \n-            DeploymentPolicy deploymentPolicy =\n-                    PojoConverter.convetToASDeploymentPolicyPojo(deploymentPolicyBean);\n+            DeploymentPolicy deploymentPolicy = PojoConverter.convetToASDeploymentPolicyPojo(deploymentPolicyBean);\n \n             try {\n-                autoscalerServiceClient\n-                        .deployDeploymentPolicy(deploymentPolicy);\n+                policyId = autoscalerServiceClient.deployDeploymentPolicy(deploymentPolicy);\n             } catch (RemoteException e) {\n                 log.error(e.getMessage(), e);\n                 throw new RestAPIException(e.getMessage(), e);\n@@ -253,8 +251,7 @@ public static StratosApiResponse deployDeploymentPolicy(\n         }\n \n         StratosApiResponse stratosApiResponse = new StratosApiResponse();\n-        stratosApiResponse.setMessage(\"Successfully deployed deployment policy definition with type \"\n-                + deploymentPolicyBean.id);\n+        stratosApiResponse.setMessage(\"Successfully deployed deployment policy definition with type \" + policyId);\n         return stratosApiResponse;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV40Utils.java",
                "sha": "fb28910451c0066f4118888e5dbb74108138aa28",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV41.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV41.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV41.java",
                "patch": "@@ -42,7 +42,6 @@\n import org.apache.stratos.rest.endpoint.bean.CartridgeInfoBean;\n import org.apache.stratos.rest.endpoint.bean.StratosApiResponse;\n import org.apache.stratos.rest.endpoint.bean.SubscriptionDomainRequest;\n-import org.apache.stratos.rest.endpoint.bean.autoscaler.partition.Partition;\n import org.apache.stratos.rest.endpoint.bean.autoscaler.policy.autoscale.AutoscalePolicy;\n import org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy;\n import org.apache.stratos.rest.endpoint.bean.cartridge.definition.CartridgeDefinitionBean;\n@@ -320,11 +319,21 @@ public Response undeployServiceGroupDefinition(@PathParam(\"groupDefinitionName\")\n     public Response deployDeploymentPolicyDefinition(DeploymentPolicy deploymentPolicy)\n             throws RestAPIException {\n \n-        StratosApiV41Utils.deployDeploymentPolicy(deploymentPolicy);\n-        URI url = uriInfo.getAbsolutePathBuilder().path(deploymentPolicy.id).build();\n+        String policyId = StratosApiV41Utils.deployDeploymentPolicy(deploymentPolicy);\n+        URI url = uriInfo.getAbsolutePathBuilder().path(policyId).build();\n         return Response.created(url).build();\n     }\n \n+    @DELETE\n+    @Path(\"/deploymentPolicies/{applicationId}\")\n+    @Produces(\"application/json\")\n+    @Consumes(\"application/json\")\n+    @AuthorizationAction(\"/permission/admin/manage/add/cartridgeDefinition\")\n+    public Response unDeployApplication(@PathParam(\"applicationId\") String applicationId) throws RestAPIException {\n+        StratosApiV41Utils.undeployApplication(applicationId);\n+        return Response.noContent().build();\n+    }\n+\n     @PUT\n     @Path(\"/deploymentPolicies\")\n     @Produces(\"application/json\")\n@@ -500,9 +509,9 @@ public Response deployApplicationDefinition(ApplicationDefinition applicationDef\n     @Consumes(\"application/json\")\n     @AuthorizationAction(\"/permission/protected/manage/monitor/tenants\")\n     @SuperTenantService(true)\n-    public Response unDeployApplicationDefinition(@PathParam(\"applicationId\") String applicationId)\n+    public Response removeApplicationDefinition(@PathParam(\"applicationId\") String applicationId)\n             throws RestAPIException {\n-        StratosApiV41Utils.unDeployApplication(applicationId, getConfigContext(), getUsername(),\n+        StratosApiV41Utils.removeApplication(applicationId, getConfigContext(), getUsername(),\n                 getTenantDomain());\n         return Response.noContent().build();\n     }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV41.java",
                "sha": "a8eab467fd487171bd62bb7ddec3c6b4ea69187f",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV41Utils.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV41Utils.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 33,
                "filename": "components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV41Utils.java",
                "patch": "@@ -23,20 +23,14 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.apache.stratos.autoscaler.stub.Properties;\n import org.apache.stratos.autoscaler.stub.pojo.ApplicationContext;\n import org.apache.stratos.autoscaler.stub.*;\n import org.apache.stratos.autoscaler.stub.deployment.policy.DeploymentPolicy;\n import org.apache.stratos.autoscaler.stub.exception.InvalidKubernetesGroupException;\n+import org.apache.stratos.cloud.controller.stub.*;\n import org.apache.stratos.cloud.controller.stub.domain.CartridgeConfig;\n import org.apache.stratos.cloud.controller.stub.domain.CartridgeInfo;\n-import org.apache.stratos.cloud.controller.stub.CloudControllerServiceInvalidCartridgeTypeExceptionException;\n-import org.apache.stratos.cloud.controller.stub.CloudControllerServiceInvalidKubernetesGroupExceptionException;\n-import org.apache.stratos.cloud.controller.stub.CloudControllerServiceInvalidKubernetesHostExceptionException;\n-import org.apache.stratos.cloud.controller.stub.CloudControllerServiceInvalidKubernetesMasterExceptionException;\n-import org.apache.stratos.cloud.controller.stub.CloudControllerServiceNonExistingKubernetesGroupExceptionException;\n-import org.apache.stratos.cloud.controller.stub.CloudControllerServiceNonExistingKubernetesHostExceptionException;\n-import org.apache.stratos.cloud.controller.stub.CloudControllerServiceNonExistingKubernetesMasterExceptionException;\n-import org.apache.stratos.cloud.controller.stub.CloudControllerServiceUnregisteredCartridgeExceptionException;\n import org.apache.stratos.common.Property;\n import org.apache.stratos.manager.client.AutoscalerServiceClient;\n import org.apache.stratos.manager.client.CloudControllerServiceClient;\n@@ -207,8 +201,8 @@ static ApplicationSubscription getApplicationSubscriptions(String appId, Configu\n         }\n     }\n \n-    public static void unDeployApplication(String appId, ConfigurationContext ctxt,\n-                                           String userName, String tenantDomain) throws RestAPIException {\n+    public static void removeApplication(String appId, ConfigurationContext ctxt,\n+                                         String userName, String tenantDomain) throws RestAPIException {\n \n         try {\n             int tenantId = ApplicationManagementUtil.getTenantId(ctxt);\n@@ -243,6 +237,20 @@ public static void unDeployApplication(String appId, ConfigurationContext ctxt,\n         return commonPolicies.toArray(new DeploymentPolicy[0]);\n     }\n \n+    public static void undeployApplication(String applicationId) throws RestAPIException {\n+        AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();\n+        if (autoscalerServiceClient != null) {\n+            try {\n+                autoscalerServiceClient.unDeployDeploymentPolicy(applicationId);\n+            } catch (RemoteException e) {\n+                log.error(\"Error while unDeploying the Deployment Policy for  \" + applicationId);\n+                throw new RestAPIException(e);\n+            }\n+        }\n+\n+\n+    }\n+\n     public static void undeployCartridge(String cartridgeType) throws RestAPIException {\n \n         CloudControllerServiceClient cloudControllerServiceClient = getCloudControllerServiceClient();\n@@ -394,11 +402,16 @@ public static void updateAutoscalingPolicy(AutoscalePolicy autoscalePolicyBean)\n         }\n     }\n \n-    public static void deployDeploymentPolicy(\n+    public static String deployDeploymentPolicy(\n             org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy deploymentPolicyBean)\n             throws RestAPIException {\n \n-        log.info(String.format(\"Deploying deployment policy: [id] %s\", deploymentPolicyBean.id));\n+        String policyId = null;\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Starting to deploy a deployment policy of application: \"\n+                    + deploymentPolicyBean.applicationPolicy.applicationId);\n+        }\n \n         AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();\n         if (autoscalerServiceClient != null) {\n@@ -407,7 +420,7 @@ public static void deployDeploymentPolicy(\n                     PojoConverter.convetToASDeploymentPolicyPojo(deploymentPolicyBean);\n \n             try {\n-                autoscalerServiceClient.deployDeploymentPolicy(deploymentPolicy);\n+                policyId = autoscalerServiceClient.deployDeploymentPolicy(deploymentPolicy);\n             } catch (RemoteException e) {\n                 log.error(e.getMessage(), e);\n                 throw new RestAPIException(e.getMessage(), e);\n@@ -417,33 +430,37 @@ public static void deployDeploymentPolicy(\n                 throw new RestAPIException(message, e);\n             }\n \n+            log.info(String.format(\"Deployed deployment policy: [id] %s\", policyId));\n         }\n+        \n+        return policyId;\n     }\n \n     public static void updateDeploymentPolicy(\n             org.apache.stratos.rest.endpoint.bean.autoscaler.policy.deployment.DeploymentPolicy deploymentPolicyBean)\n             throws RestAPIException {\n \n-        log.info(String.format(\"Updating deployment policy: [id] %s\", deploymentPolicyBean.id));\n-\n-        AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();\n-        if (autoscalerServiceClient != null) {\n-\n-            org.apache.stratos.autoscaler.stub.deployment.policy.DeploymentPolicy deploymentPolicy =\n-                    PojoConverter.convetToASDeploymentPolicyPojo(deploymentPolicyBean);\n-\n-\n-            try {\n-                autoscalerServiceClient.updateDeploymentPolicy(deploymentPolicy);\n-            } catch (RemoteException e) {\n-                log.error(e.getMessage(), e);\n-                throw new RestAPIException(e.getMessage(), e);\n-            } catch (AutoScalerServiceInvalidPolicyExceptionException e) {\n-                String message = e.getFaultMessage().getInvalidPolicyException().getMessage();\n-                log.error(message, e);\n-                throw new RestAPIException(message, e);\n-            }\n-        }\n+        //FIXME we do not have any use-case now?? - Nirmal\n+//        log.info(String.format(\"Updating deployment policy: [id] %s\", deploymentPolicyBean.id));\n+//\n+//        AutoscalerServiceClient autoscalerServiceClient = getAutoscalerServiceClient();\n+//        if (autoscalerServiceClient != null) {\n+//\n+//            org.apache.stratos.autoscaler.stub.deployment.policy.DeploymentPolicy deploymentPolicy =\n+//                    PojoConverter.convetToASDeploymentPolicyPojo(deploymentPolicyBean);\n+//\n+//\n+//            try {\n+//                autoscalerServiceClient.updateDeploymentPolicy(deploymentPolicy);\n+//            } catch (RemoteException e) {\n+//                log.error(e.getMessage(), e);\n+//                throw new RestAPIException(e.getMessage(), e);\n+//            } catch (AutoScalerServiceInvalidPolicyExceptionException e) {\n+//                String message = e.getFaultMessage().getInvalidPolicyException().getMessage();\n+//                log.error(message, e);\n+//                throw new RestAPIException(message, e);\n+//            }\n+//        }\n     }\n \n     private static CloudControllerServiceClient getCloudControllerServiceClient() throws RestAPIException {",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/api/StratosApiV41Utils.java",
                "sha": "08ef896bd1ecf8790d789a763a1fe675680ce897",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/deployment/DeploymentPolicy.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/deployment/DeploymentPolicy.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/deployment/DeploymentPolicy.java",
                "patch": "@@ -29,8 +29,6 @@\n @XmlRootElement\n public class DeploymentPolicy {\n \n-    public String id;\n-    \n     public String description;\n     \n     public boolean isPublic;",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/autoscaler/policy/deployment/DeploymentPolicy.java",
                "sha": "9b5c70f61a0fb13c1c18dba3abeeae7022176530",
                "status": "modified"
            },
            {
                "additions": 51,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/FloatingNetworkBean.java",
                "changes": 51,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/FloatingNetworkBean.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/FloatingNetworkBean.java",
                "patch": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.stratos.rest.endpoint.bean.cartridge.definition;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+\n+/**\n+ * @author rajkumar\n+ */\n+@XmlRootElement (name = \"floatingNetworks\")\n+public class FloatingNetworkBean {\n+\tpublic String name;\n+\tpublic String networkUuid;\n+\tpublic String floatingIP;\n+\t\n+    public String toString () {\n+    \tStringBuilder sb = new StringBuilder('{');\n+    \tString delimeter = \"\";\n+    \tif (name != null) {\n+    \t\tsb.append(delimeter).append(\"name : \").append(name);\n+    \t\tdelimeter = \", \";\n+    \t}\n+    \tif (networkUuid != null) {\n+    \t\tsb.append(delimeter).append(\"networkUuid : \").append(networkUuid);\n+    \t\tdelimeter = \", \";\n+    \t}\n+    \tif (floatingIP != null) {\n+    \t\tsb.append(delimeter).append(\"floatingIP : \").append(floatingIP);\n+    \t\tdelimeter = \", \";\n+    \t}\n+    \tsb.append('}');\n+        return sb.toString();\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/FloatingNetworkBean.java",
                "sha": "e6df7e1d810a25c2dcab12a121071ea8ea4fba30",
                "status": "added"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/NetworkInterfaceBean.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/NetworkInterfaceBean.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/NetworkInterfaceBean.java",
                "patch": "@@ -19,13 +19,16 @@\n \n package org.apache.stratos.rest.endpoint.bean.cartridge.definition;\n \n+import java.util.List;\n+\n import javax.xml.bind.annotation.XmlRootElement;\n \n @XmlRootElement (name = \"networkInterfaces\")\n public class NetworkInterfaceBean {\n \tpublic String networkUuid;\n \tpublic String fixedIp;\n \tpublic String portUuid;\n+\tpublic List<FloatingNetworkBean> floatingNetworks;\n     public String toString () {\n     \tStringBuilder sb = new StringBuilder('{');\n     \tString delimeter = \"\";\n@@ -41,7 +44,25 @@ public String toString () {\n     \t\tsb.append(delimeter).append(\"portUuid : \").append(portUuid);\n     \t\tdelimeter = \", \";\n     \t}\n+    \tif (floatingNetworks != null) {\n+    \tsb.append(delimeter).append(\"floatingNetworks : \").append(getFloatingNetworks());\n+    \tdelimeter = \", \";\n+    \t}\n     \tsb.append('}');\n         return sb.toString();\n     }\n+    \n+    private String getFloatingNetworks() {\n+    \tStringBuilder sb = new StringBuilder();\n+    \tif (floatingNetworks != null) {\n+    \t\tsb.append('[');\n+    \t\tString delimeter = \"\";\n+    \t\tfor (FloatingNetworkBean floatingNetworkBean:floatingNetworks) {\n+    \t\t\tsb.append(delimeter).append(floatingNetworkBean);\n+    \t\t\tdelimeter = \", \";\n+    \t\t}\n+    \t\tsb.append(']');\n+    \t}\n+    \treturn sb.toString();\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/cartridge/definition/NetworkInterfaceBean.java",
                "sha": "707e7fe5a178d4b9b050c9ab239dc9d86eb98540",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/util/converter/PojoConverter.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/util/converter/PojoConverter.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 4,
                "filename": "components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/util/converter/PojoConverter.java",
                "patch": "@@ -293,13 +293,35 @@ private static NetworkInterfaces getNetworkInterfaces(List<NetworkInterfaceBean>\n             networkInterface.setNetworkUuid(nib.networkUuid);\n             networkInterface.setFixedIp(nib.fixedIp);\n             networkInterface.setPortUuid(nib.portUuid);\n+            if (nib.floatingNetworks != null && !nib.floatingNetworks.isEmpty()) {\n+            \tnetworkInterface.setFloatingNetworks(PojoConverter.getFloatingNetworks(nib.floatingNetworks));\n+            }\n+\n             networkInterfacesArray[i++] = networkInterface;\n         }\n \n         NetworkInterfaces networkInterfaces = new NetworkInterfaces();\n         networkInterfaces.setNetworkInterfaces(networkInterfacesArray);\n         return networkInterfaces;\n     }\n+    \n+    private static FloatingNetworks getFloatingNetworks(List<FloatingNetworkBean> floatingNetworkBeans) {\n+    \t\n+    \tFloatingNetwork[] floatingNetworksArray = new FloatingNetwork[floatingNetworkBeans.size()];\n+    \t\n+    \tint i =0;\n+    \tfor (FloatingNetworkBean floatingNetworkBean : floatingNetworkBeans) {\n+    \tFloatingNetwork floatingNetwork = new FloatingNetwork();\n+    \tfloatingNetwork.setName(floatingNetworkBean.name);\n+    \tfloatingNetwork.setNetworkUuid(floatingNetworkBean.networkUuid);\n+    \tfloatingNetwork.setFloatingIP(floatingNetworkBean.floatingIP);\n+    \tfloatingNetworksArray[i++] = floatingNetwork;\n+    \t}\n+    \t\n+    \tFloatingNetworks floatingNetworks = new FloatingNetworks();\n+    \tfloatingNetworks.setFloatingNetworks(floatingNetworksArray);\n+    \treturn floatingNetworks;\n+    \t}\n \n     public static org.apache.stratos.autoscaler.stub.deployment.partition.Partition convertToCCPartitionPojo\n             (Partition partitionBean) {\n@@ -380,7 +402,6 @@ private static NetworkInterfaces getNetworkInterfaces(List<NetworkInterfaceBean>\n         org.apache.stratos.autoscaler.stub.deployment.policy.DeploymentPolicy deploymentPolicy =\n                 new org.apache.stratos.autoscaler.stub.deployment.policy.DeploymentPolicy();\n \n-        deploymentPolicy.setId(deploymentPolicyBean.id);\n         deploymentPolicy.setDescription(deploymentPolicyBean.description);\n         deploymentPolicy.setIsPublic(deploymentPolicyBean.isPublic);\n         if (deploymentPolicyBean.applicationPolicy != null\n@@ -463,7 +484,7 @@ private static NetworkInterfaces getNetworkInterfaces(List<NetworkInterfaceBean>\n         cluster1.property = getPropertyBeans(cluster.getProperties());\n         cluster1.member = new ArrayList<Member>();\n         cluster1.hostNames = new ArrayList<String>();\n-        cluster1.status = cluster.getStatus(null).toString();\n+        cluster1.status = cluster.getStatus(null).toString(); //TODO why null is passed?\n \n         for (org.apache.stratos.messaging.domain.topology.Member tmp : cluster.getMembers()) {\n             Member member = new Member();\n@@ -726,7 +747,6 @@ public static DeploymentPolicy populateDeploymentPolicyPojo(org.apache.stratos.a\n             return deploymentPolicyBean;\n         }\n \n-        deploymentPolicyBean.id = deploymentPolicy.getId();\n         deploymentPolicyBean.description = deploymentPolicy.getDescription();\n         deploymentPolicyBean.isPublic = deploymentPolicy.getIsPublic();\n //TODO populate the Network partition based on new policy structure\n@@ -1199,7 +1219,7 @@ public static GroupBean toGroupBean(Group group) {\n         }\n \n         GroupBean groupBean = new GroupBean();\n-        groupBean.setStatus(group.getStatus(null).toString());\n+        groupBean.setStatus(group.getStatus(null).toString()); // TODO -- why null is passed?\n         groupBean.setAlias(group.getUniqueIdentifier());\n         //TODO*******groupBean.setDeploymentPolicy(group.getDeploymentPolicy());\n         groupBean.setAutoScalingPolicy(group.getAutoscalingPolicy());",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/bean/util/converter/PojoConverter.java",
                "sha": "128a33ecffa80cd310cc22d5439c021da3773d80",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/MockContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/MockContext.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/MockContext.java",
                "patch": "@@ -570,7 +570,7 @@ public StratosApiResponse addDeploymentPolicyDefinition(DeploymentPolicy deploym\n     \t\t}\n     \t}\n     \t\n-    \tpolicies.put(deploymentPolicy.id,deploymentPolicy);\n+    \tpolicies.put(deploymentPolicy.applicationPolicy.applicationId+UUID.randomUUID().getLeastSignificantBits(),deploymentPolicy);\n         StratosApiResponse stratosApiResponse = new StratosApiResponse();\n         stratosApiResponse.setMessage(\"Successfully deployed deployment policy definition\");\n         return stratosApiResponse;",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/components/org.apache.stratos.rest.endpoint/src/main/java/org/apache/stratos/rest/endpoint/mock/MockContext.java",
                "sha": "727037130bbaa150f9bc08e67a310b71534405e7",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/dependencies/pom.xml",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/dependencies/pom.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 5,
                "filename": "dependencies/pom.xml",
                "patch": "@@ -33,11 +33,10 @@\n     <url>http://apache.org</url>\n \n     <modules>\n-        <module>jclouds/apis/vcloud/1.8.0-stratos</module>\n-        <module>jclouds/apis/ec2/1.8.0-stratos</module>\n-        <module>jclouds/apis/openstack-nova/1.8.0-stratos</module>\n-        <module>jclouds/apis/gce/1.8.0-stratos</module>\n-        <module>jclouds/provider/aws-ec2/1.8.0-stratos</module>\n+        <module>jclouds/apis/vcloud/1.8.1-stratos</module>\n+\t<module>jclouds/apis/openstack-neutron/1.8.1-stratos</module>\n+        <module>jclouds/apis/gce/1.8.1-stratos</module>\n+        <module>jclouds/provider/aws-ec2/1.8.1-stratos</module>\n         <module>org.wso2.carbon.ui</module>\n     </modules>\n </project>",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/dependencies/pom.xml",
                "sha": "46bed0893845a4cd1976dfde3f357e527b0e83ec",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/extensions/cep/artifacts/executionplans/AverageInFlightRequestsFinder.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/extensions/cep/artifacts/executionplans/AverageInFlightRequestsFinder.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 1,
                "filename": "extensions/cep/artifacts/executionplans/AverageInFlightRequestsFinder.xml",
                "patch": "@@ -45,7 +45,7 @@\n         \tstratos:divider(served_count , instances_count) as requests_per_instance\n         \tinsert into served_requests_per_instance;\n         from served_requests_per_instance[requests_per_instance>0]#window.timeBatch(10 min)\n-\t\tselect cluster_id,network_partition_id, avg(requests_per_instance) as average_served_count\n+\t\tselect cluster_id, instance_id, network_partition_id, avg(requests_per_instance) as average_served_count\n \t\tinsert into average_served_request_count;]]></queryExpressions>\n   <exportedStreams>\n     <stream name=\"average_in_flight_requests\"",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/extensions/cep/artifacts/executionplans/AverageInFlightRequestsFinder.xml",
                "sha": "e8cd8f63fc21de28eaf47018f974c2b96763d9c1",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/extensions/cep/stratos-cep-extension/src/main/java/org/apache/stratos/cep/extension/CEPTopologyEventReceiver.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/extensions/cep/stratos-cep-extension/src/main/java/org/apache/stratos/cep/extension/CEPTopologyEventReceiver.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "extensions/cep/stratos-cep-extension/src/main/java/org/apache/stratos/cep/extension/CEPTopologyEventReceiver.java",
                "patch": "@@ -31,6 +31,8 @@\n import org.apache.stratos.messaging.message.receiver.topology.TopologyEventReceiver;\n import org.apache.stratos.messaging.message.receiver.topology.TopologyManager;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * CEP Topology Receiver for Fault Handling Window Processor.\n  */\n@@ -41,6 +43,7 @@\n     private TopologyEventReceiver topologyEventReceiver;\n     private boolean terminated;\n     private FaultHandlingWindowProcessor faultHandler;\n+\tprivate ExecutorService executorService;\n \n     public CEPTopologyEventReceiver(FaultHandlingWindowProcessor faultHandler) {\n         this.topologyEventReceiver = new TopologyEventReceiver();\n@@ -101,8 +104,9 @@ public void run() {\n             Thread.sleep(15000);\n         } catch (InterruptedException ignore) {\n         }\n-        Thread thread = new Thread(topologyEventReceiver);\n-        thread.start();\n+        topologyEventReceiver.setExecutorService(executorService);\n+\t    topologyEventReceiver.execute();\n+\t //   executorService.execute(topologyEventReceiver);\n         log.info(\"CEP topology receiver thread started\");\n \n         // Keep the thread live until terminated\n@@ -122,4 +126,12 @@ public void terminate() {\n         topologyEventReceiver.terminate();\n         terminated = true;\n     }\n+\n+\tpublic ExecutorService getExecutorService() {\n+\t\treturn executorService;\n+\t}\n+\n+\tpublic void setExecutorService(ExecutorService executorService) {\n+\t\tthis.executorService = executorService;\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/extensions/cep/stratos-cep-extension/src/main/java/org/apache/stratos/cep/extension/CEPTopologyEventReceiver.java",
                "sha": "e384d9564a59086bb1e1f3fae0e0191bb387f0ce",
                "status": "modified"
            },
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/extensions/cep/stratos-cep-extension/src/main/java/org/apache/stratos/cep/extension/FaultHandlingWindowProcessor.java",
                "changes": 98,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/extensions/cep/stratos-cep-extension/src/main/java/org/apache/stratos/cep/extension/FaultHandlingWindowProcessor.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 46,
                "filename": "extensions/cep/stratos-cep-extension/src/main/java/org/apache/stratos/cep/extension/FaultHandlingWindowProcessor.java",
                "patch": "@@ -20,6 +20,7 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.apache.log4j.Logger;\n+import org.apache.stratos.common.threading.StratosThreadPool;\n import org.apache.stratos.messaging.broker.publish.EventPublisher;\n import org.apache.stratos.messaging.broker.publish.EventPublisherPool;\n import org.apache.stratos.messaging.domain.topology.*;\n@@ -46,6 +47,7 @@\n \n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n@@ -56,50 +58,52 @@\n @SiddhiExtension(namespace = \"stratos\", function = \"faultHandling\")\n public class FaultHandlingWindowProcessor extends WindowProcessor implements RunnableWindowProcessor {\n \n-    private static final int TIME_OUT = 60 * 1000;\n-    static final Logger log = Logger.getLogger(FaultHandlingWindowProcessor.class);\n-    private ScheduledExecutorService faultHandleScheduler;\n-    private ThreadBarrier threadBarrier;\n-    private long timeToKeep;\n-    private ISchedulerSiddhiQueue<StreamEvent> window;\n-    private EventPublisher healthStatPublisher = EventPublisherPool.getPublisher(Util.Topics.HEALTH_STAT_TOPIC.getTopicName());\n-    private Map<String, Object> MemberFaultEventMap = new HashMap<String, Object>();\n-    private Map<String, Object> memberFaultEventMessageMap = new HashMap<String, Object>();\n-\n-    // Map of member id's to their last received health event time stamp\n-    private ConcurrentHashMap<String, Long> memberTimeStampMap = new ConcurrentHashMap<String, Long>();\n-\n-    // Event receiver to receive topology events published by cloud-controller\n-    private CEPTopologyEventReceiver cepTopologyEventReceiver = new CEPTopologyEventReceiver(this);\n-\n-    // Stratos member id attribute index in stream execution plan\n-    private int memberIdAttrIndex;\n-\n-    @Override\n-    protected void processEvent(InEvent event) {\n-        addDataToMap(event);\n-    }\n-\n-    @Override\n-    protected void processEvent(InListEvent listEvent) {\n-        for (int i = 0, size = listEvent.getActiveEvents(); i < size; i++) {\n-            addDataToMap((InEvent) listEvent.getEvent(i));\n-        }\n-    }\n-\n-    /**\n-     * Add new entry to time stamp map from the received event.\n-     *\n-     * @param event Event received by Siddhi.\n-     */\n-    protected void addDataToMap(InEvent event) {\n-        String id = (String) event.getData()[memberIdAttrIndex];\n-        //checking whether this member is the topology.\n-        //sometimes there can be a delay between publishing member terminated events\n-        //and actually terminating instances. Hence CEP might get events for already terminated members\n-        //so we are checking the topology for the member existence\n-        Member member = getMemberFromId(id);\n-        if (null == member) {\n+\tprivate static final int TIME_OUT = 60 * 1000;\n+\tstatic final Logger log = Logger.getLogger(FaultHandlingWindowProcessor.class);\n+\tpublic static final String IDENTIFIER = \"AutoScaler\";\n+\tprivate ScheduledExecutorService faultHandleScheduler;\n+\tprivate ThreadBarrier threadBarrier;\n+\tprivate long timeToKeep;\n+\tprivate ISchedulerSiddhiQueue<StreamEvent> window;\n+\tprivate EventPublisher healthStatPublisher =\n+\t\t\tEventPublisherPool.getPublisher(Util.Topics.HEALTH_STAT_TOPIC.getTopicName());\n+\tprivate Map<String, Object> MemberFaultEventMap = new HashMap<String, Object>();\n+\tprivate Map<String, Object> memberFaultEventMessageMap = new HashMap<String, Object>();\n+\n+\t// Map of member id's to their last received health event time stamp\n+\tprivate ConcurrentHashMap<String, Long> memberTimeStampMap = new ConcurrentHashMap<String, Long>();\n+\n+\t// Event receiver to receive topology events published by cloud-controller\n+\tprivate CEPTopologyEventReceiver cepTopologyEventReceiver = new CEPTopologyEventReceiver(this);\n+\n+\t// Stratos member id attribute index in stream execution plan\n+\tprivate int memberIdAttrIndex;\n+\n+\t@Override\n+\tprotected void processEvent(InEvent event) {\n+\t\taddDataToMap(event);\n+\t}\n+\n+\t@Override\n+\tprotected void processEvent(InListEvent listEvent) {\n+\t\tfor (int i = 0, size = listEvent.getActiveEvents(); i < size; i++) {\n+\t\t\taddDataToMap((InEvent) listEvent.getEvent(i));\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Add new entry to time stamp map from the received event.\n+\t *\n+\t * @param event Event received by Siddhi.\n+\t */\n+\tprotected void addDataToMap(InEvent event) {\n+\t\tString id = (String) event.getData()[memberIdAttrIndex];\n+\t\t//checking whether this member is the topology.\n+\t\t//sometimes there can be a delay between publishing member terminated events\n+\t\t//and actually terminating instances. Hence CEP might get events for already terminated members\n+\t\t//so we are checking the topology for the member existence\n+\t\tMember member = getMemberFromId(id);\n+\t\tif (null == member) {\n \t\t\tlog.debug(\"Member not found in the toplogy. Event rejected\");\n \t\t\treturn;\n \t\t}\n@@ -255,6 +259,7 @@ protected void restoreState(Object[] data) {\n     @Override\n     protected void init(Expression[] parameters, QueryPostProcessingElement nextProcessor,\n                         AbstractDefinition streamDefinition, String elementId, boolean async, SiddhiContext siddhiContext) {\n+\n         if (parameters[0] instanceof IntConstant) {\n             timeToKeep = ((IntConstant) parameters[0]).getValue();\n         } else {\n@@ -271,8 +276,9 @@ protected void init(Expression[] parameters, QueryPostProcessingElement nextProc\n         }\n         MemberFaultEventMap.put(\"org.apache.stratos.messaging.event.health.stat.MemberFaultEvent\", memberFaultEventMessageMap);\n \n-        Thread topologyTopicSubscriberThread = new Thread(cepTopologyEventReceiver);\n-        topologyTopicSubscriberThread.start();\n+\t    ExecutorService executorService= StratosThreadPool.getExecutorService(\"AutoScaler\",10);\n+\t    cepTopologyEventReceiver.setExecutorService(executorService);\n+\t    executorService.execute(cepTopologyEventReceiver);\n \n         //Ordinary scheduling\n         window.schedule();",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/extensions/cep/stratos-cep-extension/src/main/java/org/apache/stratos/cep/extension/FaultHandlingWindowProcessor.java",
                "sha": "8bfcb2c094e171274469f36921053605e6b263da",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/Main.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/Main.java?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 24,
                "filename": "extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/Main.java",
                "patch": "@@ -22,37 +22,43 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.apache.log4j.PropertyConfigurator;\n+import org.apache.stratos.common.threading.StratosThreadPool;\n import org.apache.stratos.load.balancer.extension.api.LoadBalancerExtension;\n \n+import java.util.concurrent.ExecutorService;\n+\n /**\n  * HAProxy extension main class.\n  */\n public class Main {\n-    private static final Log log = LogFactory.getLog(Main.class);\n-\n-    public static void main(String[] args) {\n+\tprivate static final Log log = LogFactory.getLog(Main.class);\n+\tprivate static ExecutorService executorService;\n \n-        LoadBalancerExtension extension = null;\n-        try {\n-            // Configure log4j properties\n-            PropertyConfigurator.configure(System.getProperty(\"log4j.properties.file.path\"));\n+\tpublic static void main(String[] args) {\n \n-            if (log.isInfoEnabled()) {\n-                log.info(\"HAProxy extension started\");\n-            }\n+\t\tLoadBalancerExtension extension = null;\n+\t\ttry {\n+\t\t\t// Configure log4j properties\n+\t\t\tPropertyConfigurator.configure(System.getProperty(\"log4j.properties.file.path\"));\n \n-            // Validate runtime parameters\n-            HAProxyContext.getInstance().validate();\n-            extension = new LoadBalancerExtension(new HAProxy(), (HAProxyContext.getInstance().isCEPStatsPublisherEnabled() ? new HAProxyStatisticsReader() : null));\n-            Thread thread = new Thread(extension);\n-            thread.start();\n-        } catch (Exception e) {\n-            if (log.isErrorEnabled()) {\n-                log.error(e);\n-            }\n-            if (extension != null) {\n-                extension.terminate();\n-            }\n-        }\n-    }\n+\t\t\tif (log.isInfoEnabled()) {\n+\t\t\t\tlog.info(\"HAProxy extension started\");\n+\t\t\t}\n+\t\t\texecutorService = StratosThreadPool.getExecutorService(\"Load_Balance_Extension\", 10);\n+\t\t\t// Validate runtime parameters\n+\t\t\tHAProxyContext.getInstance().validate();\n+\t\t\textension = new LoadBalancerExtension(new HAProxy(),\n+\t\t\t                                      (HAProxyContext.getInstance().isCEPStatsPublisherEnabled() ?\n+\t\t\t                                       new HAProxyStatisticsReader() : null));\n+\t\t\tThread thread = new Thread(extension);\n+\t\t\tthread.start();\n+\t\t} catch (Exception e) {\n+\t\t\tif (log.isErrorEnabled()) {\n+\t\t\t\tlog.error(e);\n+\t\t\t}\n+\t\t\tif (extension != null) {\n+\t\t\t\textension.terminate();\n+\t\t\t}\n+\t\t}\n+\t}\n }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/extensions/load-balancer/haproxy-extension/src/main/java/org/apache/stratos/haproxy/extension/Main.java",
                "sha": "7996672031549268e84d6700a0dcb015330fdbf2",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/features/cloud-controller/org.apache.stratos.cloud.controller.feature/pom.xml",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/features/cloud-controller/org.apache.stratos.cloud.controller.feature/pom.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 11,
                "filename": "features/cloud-controller/org.apache.stratos.cloud.controller.feature/pom.xml",
                "patch": "@@ -120,19 +120,19 @@\n             <version>${jclouds.version}</version>\n         </dependency>\n         <dependency>\n-            <groupId>org.apache.stratos</groupId>\n+            <groupId>org.apache.jclouds.api</groupId>\n             <artifactId>ec2</artifactId>\n-            <version>1.8.0-stratos</version>\n+            <version>${jclouds.version}</version>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.stratos</groupId>\n             <artifactId>aws-ec2</artifactId>\n-            <version>1.8.0-stratos</version>\n+            <version>${jclouds.stratos.version}</version>\n         </dependency>\n         <dependency>\n-            <groupId>org.apache.stratos</groupId>\n+            <groupId>org.apache.jclouds.api</groupId>\n             <artifactId>openstack-nova</artifactId>\n-            <version>1.8.0-stratos</version>\n+            <version>${jclouds.version}</version>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.commons</groupId>\n@@ -163,7 +163,7 @@\n         <dependency>\n             <groupId>org.apache.stratos</groupId>\n             <artifactId>vcloud</artifactId>\n-            <version>1.8.0-stratos</version>\n+            <version>${jclouds.stratos.version}</version>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.stratos</groupId>\n@@ -301,15 +301,16 @@\n                                 <bundleDef>org.apache.jclouds.driver:jclouds-enterprise:${jclouds.version}</bundleDef>\n                                 <bundleDef>org.apache.jclouds:jclouds-core:${jclouds.version}</bundleDef>\n                                 <bundleDef>org.apache.jclouds:jclouds-compute:${jclouds.version}</bundleDef>\n-                                <bundleDef>org.apache.stratos:ec2:1.8.0-stratos</bundleDef>\n-                                <bundleDef>org.apache.stratos:openstack-nova:1.8.0-stratos</bundleDef>\n-                                <bundleDef>org.apache.stratos:vcloud:1.8.0-stratos</bundleDef>\n-                                <bundleDef>org.apache.stratos:gce:1.8.0-stratos</bundleDef>\n+\t\t\t\t<bundleDef>org.apache.jclouds.api:ec2:${jclouds.version}</bundleDef>\n+                                <bundleDef>org.apache.jclouds.api:openstack-nova:${jclouds.version}</bundleDef>\n+                                <bundleDef>org.apache.stratos:openstack-neutron:${jclouds.stratos.version}</bundleDef>\n+                                <bundleDef>org.apache.stratos:vcloud:${jclouds.stratos.version}</bundleDef>\n+                                <bundleDef>org.apache.stratos:gce:${jclouds.stratos.version}</bundleDef>\n+\t\t\t\t<bundleDef>org.apache.stratos:aws-ec2:${jclouds.stratos.version}</bundleDef>\n                                 <bundleDef>org.apache.commons:commons-compress:1.5</bundleDef>\n                                 <bundleDef>com.jamesmurty.utils.wso2:java-xmlbuilder:0.4.wso2v1</bundleDef>\n                                 <bundleDef>org.apache.jclouds.common:openstack-common:${jclouds.version}</bundleDef>\n                                 <bundleDef>org.apache.jclouds.api:openstack-keystone:${jclouds.version}</bundleDef>\n-                                <bundleDef>org.apache.stratos:aws-ec2:1.8.0-stratos</bundleDef>\n                                 <bundleDef>com.google.guava:guava:17.0</bundleDef>\n \t\t\t\t<bundleDef>org.apache.jclouds.api:cloudstack:${jclouds.version}</bundleDef>\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/features/cloud-controller/org.apache.stratos.cloud.controller.feature/pom.xml",
                "sha": "c12fcfa5b2dd08d2f71c84ac6465258adb44c26b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/features/cloud-controller/org.apache.stratos.cloud.controller.feature/src/main/resources/conf/cloud-controller.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/features/cloud-controller/org.apache.stratos.cloud.controller.feature/src/main/resources/conf/cloud-controller.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "features/cloud-controller/org.apache.stratos.cloud.controller.feature/src/main/resources/conf/cloud-controller.xml",
                "patch": "@@ -57,6 +57,7 @@\n \t\t\t<property name=\"jclouds.endpoint\" value=\"http://192.168.16.20:5000/\" />\n            \t\t<property name=\"jclouds.openstack-nova.auto-create-floating-ips\" value=\"false\"/>\n \t\t\t<property name=\"jclouds.api-version\" value=\"2.0/\" />\n+\t\t\t<property name=\"openstack.networking.provider\" value=\"nova\" />\n \t\t\t<property name=\"X\" value=\"x\" />\n \t\t\t<property name=\"Y\" value=\"y\" />\n \t\t</iaasProvider -->",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/features/cloud-controller/org.apache.stratos.cloud.controller.feature/src/main/resources/conf/cloud-controller.xml",
                "sha": "8817d9a2e4726caeac7ce70cd114922ea633dac1",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/pom.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "pom.xml",
                "patch": "@@ -546,7 +546,7 @@\n         <carbon.platform.package.import.version.range>[4.2.0, 5.0.0)</carbon.platform.package.import.version.range>\n         <carbon.platform.package.export.version>4.2.0</carbon.platform.package.export.version>\n         <axis2.osgi.version>1.6.1.wso2v10</axis2.osgi.version>\n-        <jclouds.version>1.8.0</jclouds.version>\n-        <jclouds.stratos.version>1.8.0-stratos</jclouds.stratos.version>\n+        <jclouds.version>1.8.1</jclouds.version>\n+        <jclouds.stratos.version>1.8.1-stratos</jclouds.stratos.version>\n     </properties>\n </project>",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/pom.xml",
                "sha": "5375adaadd54f07b7e373493331805bd4ff35968",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/conf/stratos-config.xml",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/conf/stratos-config.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "products/stratos/conf/stratos-config.xml",
                "patch": "@@ -0,0 +1,30 @@\n+<!--\n+  ~ /*\n+  ~  * Licensed to the Apache Software Foundation (ASF) under one\n+  ~  * or more contributor license agreements. See the NOTICE file\n+  ~  * distributed with this work for additional information\n+  ~  * regarding copyright ownership. The ASF licenses this file\n+  ~  * to you under the Apache License, Version 2.0 (the\n+  ~  * \"License\"); you may not use this file except in compliance\n+  ~  * with the License. You may obtain a copy of the License at\n+  ~  *\n+  ~  * http://www.apache.org/licenses/LICENSE-2.0\n+  ~  *\n+  ~  * Unless required by applicable law or agreed to in writing,\n+  ~  * software distributed under the License is distributed on an\n+  ~  * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~  * KIND, either express or implied. See the License for the\n+  ~  * specific language governing permissions and limitations\n+  ~  * under the License.\n+  ~  */\n+  -->\n+<configuration>\n+    <threadPool>\n+        <autoscaler>\n+            <identifier>Autoscaler</identifier>\n+            <threadPoolSize>10</threadPoolSize>\n+        </autoscaler>\n+    </threadPool>\n+</configuration>\n+\n+",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/conf/stratos-config.xml",
                "sha": "47b84ce54e3b1e4183d40eaf0fefb467ff9ecd28",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/assembly/bin.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/assembly/bin.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "products/stratos/modules/distribution/src/assembly/bin.xml",
                "patch": "@@ -687,6 +687,12 @@\n             <filtered>true</filtered>\r\n             <fileMode>755</fileMode>\r\n         </file>\r\n+        <file>\r\n+            <source>src/main/conf/drools/dependent-scaling.drl</source>\r\n+            <outputDirectory>${pom.artifactId}-${pom.version}/repository/conf/drools</outputDirectory>\r\n+            <filtered>true</filtered>\r\n+            <fileMode>755</fileMode>\r\n+        </file>\r\n         <file>\r\n             <source>src/main/conf/drools/terminateall.drl</source>\r\n             <outputDirectory>${pom.artifactId}-${pom.version}/repository/conf/drools</outputDirectory>\r",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/assembly/bin.xml",
                "sha": "26bc3dc0bfcefe3e5ae7210c52a8b54ba9ef2f02",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/autoscaler.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/autoscaler.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "products/stratos/modules/distribution/src/main/conf/autoscaler.xml",
                "patch": "@@ -64,5 +64,9 @@\n \t\t     <service>60000</service>\n \t\t</kubernetes>\n  \t    </monitorInterval>\n+        <threadpool>\n+            <identifier>Autoscaler</identifier>\n+            <threadPoolSize>10</threadPoolSize>\n+        </threadpool>\n \t</autoscaler>\n </configuration>",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/autoscaler.xml",
                "sha": "d298ead43798c317045e6bdb3a1f161b6ef5e381",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/container-mincheck.drl",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/container-mincheck.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 8,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/container-mincheck.drl",
                "patch": "@@ -23,17 +23,17 @@ import org.apache.commons.logging.Log;\n import org.apache.stratos.autoscaler.context.cluster.KubernetesClusterContext;\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n-global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;\n+global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n global java.lang.String clusterId;\n  \n rule \"Container Minimum Rule\"\n dialect \"mvel\"\n \twhen\n-           $kubernetesClusterContext : KubernetesClusterContext ()\n-\t   kubernetesClusterId : String() from $kubernetesClusterContext.getKubernetesClusterID()\n-           minReplicas : Integer() from $kubernetesClusterContext.getMinReplicas()\n-           nonTerminatedReplicas : Integer() from $kubernetesClusterContext.getNonTerminatedMemberCount()\n-           isServiceClusterCreated : Boolean() from $kubernetesClusterContext.isServiceClusterCreated()\n+           kubernetesClusterContext : KubernetesClusterContext ()\n+\t   kubernetesClusterId : String() from kubernetesClusterContext.getKubernetesClusterID()\n+           minReplicas : Integer() from kubernetesClusterContext.getMinReplicas()\n+           nonTerminatedReplicas : Integer() from kubernetesClusterContext.getNonTerminatedMemberCount()\n+           isServiceClusterCreated : Boolean() from kubernetesClusterContext.isServiceClusterCreated()\n \t   \n            eval(log.info(\"Running minimum rule: [kub-cluster] \" + kubernetesClusterId + \" [cluster] \" + clusterId))\n            eval(log.info(\"[min-check] \" + \" [cluster] : \" + clusterId + \" [Replicas] nonTerminated : \" + nonTerminatedReplicas))\n@@ -44,11 +44,11 @@ dialect \"mvel\"\n              // we suceeded calling startContainer() once, can't call it again\n               log.info(\"[min-check] Decided to scale-up : [cluster] : \" + clusterId);\n  \t      log.info(\"[min-check] \" + \" [cluster] : \" + clusterId + \" ; min-rule not satisfied, scaling up to minReplicas : \" + minReplicas);\n-              $delegator.delegateScaleUpContainers($kubernetesClusterContext, minReplicas);\n+              delegator.delegateScaleUpContainers(kubernetesClusterContext, minReplicas);\n \t   } else {\n              // we should call startContainer\n               log.info(\"[min-check] Decided to create the cluster : [cluster] : \" + clusterId);\n  \t      log.info(\"[min-check] \" + \" [cluster] : \" + clusterId + \" ; min-rule not satisfied, no containers created yet, creating minReplicas : \" + minReplicas);\n-              $delegator.delegateStartContainers($kubernetesClusterContext);\n+              delegator.delegateStartContainers(kubernetesClusterContext);\n            }\n end",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/container-mincheck.drl",
                "sha": "4d0aa5e7376c701936fd631ce385fb18a13342a8",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/container-obsoletecheck.drl",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/container-obsoletecheck.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 7,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/container-obsoletecheck.drl",
                "patch": "@@ -23,24 +23,24 @@ import org.apache.commons.logging.Log;\n import org.apache.stratos.autoscaler.context.cluster.KubernetesClusterContext;\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n-global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;\n+global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n global java.lang.String clusterId;\n  \n rule \"Terminate Obsoleted Containers\"\n dialect \"mvel\"\n         when\n-           $kubernetesClusterContext : KubernetesClusterContext ()\n-           kubernetesClusterId : String() from $kubernetesClusterContext.getKubernetesClusterID()\n-           obsoleteReplicas : Integer() from $kubernetesClusterContext.getObsoletedMembers().size()\n+           kubernetesClusterContext : KubernetesClusterContext ()\n+           kubernetesClusterId : String() from kubernetesClusterContext.getKubernetesClusterID()\n+           obsoleteReplicas : Integer() from kubernetesClusterContext.getObsoletedMembers().size()\n \n            eval(log.info(\"Running obsolete containers rule [kub-cluster] : \" + kubernetesClusterId + \" [cluster] : \" + clusterId))\n            eval(log.info(\"[obsolete-check] \" + \"[cluster] : \" + clusterId + \" [Replicas] obsoleteReplicas : \" + obsoleteReplicas))\n-           eval($kubernetesClusterContext.getObsoletedMembers().keySet().size() > 0)\n-           memberId : String() from $kubernetesClusterContext.getObsoletedMembers().keySet()\n+           eval(kubernetesClusterContext.getObsoletedMembers().keySet().size() > 0)\n+           memberId : String() from kubernetesClusterContext.getObsoletedMembers().keySet()\n            eval(log.debug(\"[obsolete-check] [kub-cluster] : \" + kubernetesClusterId + \" [cluster] : \" + clusterId + \" Member id : \" + memberId))\n         then\n            log.info(\"[obsolete-check] Terminating the obsolete member with id : \" + memberId + \" in the cluster : \" + clusterId);\n-           $delegator.delegateTerminateContainer($kubernetesClusterContext, memberId);\n+           delegator.delegateTerminateContainer(kubernetesClusterContext, memberId);\n end\n \n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/container-obsoletecheck.drl",
                "sha": "f6dd3e75abf9c5a682d37a53c688bc1f70e1bb5c",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/container-scaling.drl",
                "changes": 64,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/container-scaling.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 32,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/container-scaling.drl",
                "patch": "@@ -24,7 +24,7 @@ import org.apache.stratos.autoscaler.pojo.policy.autoscale.LoadThresholds;\n import org.apache.stratos.autoscaler.context.cluster.KubernetesClusterContext;\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n-global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;\n+global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n global org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy autoscalePolicy;\n global java.lang.String clusterId;\n global java.lang.Boolean rifReset;\n@@ -34,40 +34,40 @@ global java.lang.Boolean laReset;\n rule \"Containers Scaling Rule\"\n dialect \"mvel\"\n \twhen\n-        $kubernetesClusterContext : KubernetesClusterContext ()\n-\tkubernetesClusterId : String() from $kubernetesClusterContext.getKubernetesClusterID()\n-\tminReplicas : Integer() from $kubernetesClusterContext.getMinReplicas()\n-        maxReplicas : Integer() from $kubernetesClusterContext.getMaxReplicas()\n-        nonTerminatedReplicas : Integer() from $kubernetesClusterContext.getNonTerminatedMemberCount()\n-        activeReplicas : Integer() from $kubernetesClusterContext.getActiveMemberCount()\n+        kubernetesClusterContext : KubernetesClusterContext ()\n+\tkubernetesClusterId : String() from kubernetesClusterContext.getKubernetesClusterID()\n+\tminReplicas : Integer() from kubernetesClusterContext.getMinReplicas()\n+        maxReplicas : Integer() from kubernetesClusterContext.getMaxReplicas()\n+        nonTerminatedReplicas : Integer() from kubernetesClusterContext.getNonTerminatedMemberCount()\n+        activeReplicas : Integer() from kubernetesClusterContext.getActiveMemberCount()\n \n         eval(log.info(\"Running scaling rule [kub-cluster] : \" + kubernetesClusterId + \" [cluster] : \" + clusterId))\n \t\n-\t$loadThresholds : LoadThresholds() from  autoscalePolicy.getLoadThresholds()\n+\tloadThresholds : LoadThresholds() from  autoscalePolicy.getLoadThresholds()\n \n-        rifUpperLimit : Float() from  $loadThresholds.getRequestsInFlight().getUpperLimit()\n-        rifLowerLimit : Float() from  $loadThresholds.getRequestsInFlight().getLowerLimit()\n+        rifUpperLimit : Float() from  loadThresholds.getRequestsInFlight().getUpperLimit()\n+        rifLowerLimit : Float() from  loadThresholds.getRequestsInFlight().getLowerLimit()\n \n-        rifAverage : Float() from  $kubernetesClusterContext.getAverageRequestsInFlight()\n-        rifGradient : Float() from  $kubernetesClusterContext.getRequestsInFlightGradient()\n-        rifSecondDerivative : Float() from  $kubernetesClusterContext.getRequestsInFlightSecondDerivative()\n-\trifPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(rifAverage, rifGradient, rifSecondDerivative, 1)\n+        rifAverage : Float() from  kubernetesClusterContext.getAverageRequestsInFlight()\n+        rifGradient : Float() from  kubernetesClusterContext.getRequestsInFlightGradient()\n+        rifSecondDerivative : Float() from  kubernetesClusterContext.getRequestsInFlightSecondDerivative()\n+\trifPredictedValue : Double() from delegator.getPredictedValueForNextMinute(rifAverage, rifGradient, rifSecondDerivative, 1)\n \n-        mcUpperLimit : Float() from  $loadThresholds.getMemoryConsumption().getUpperLimit()\n-        mcLowerLimit : Float() from  $loadThresholds.getMemoryConsumption().getLowerLimit()\n+        mcUpperLimit : Float() from  loadThresholds.getMemoryConsumption().getUpperLimit()\n+        mcLowerLimit : Float() from  loadThresholds.getMemoryConsumption().getLowerLimit()\n \n-        memoryConsumptionAverage : Float() from  $kubernetesClusterContext.getAverageMemoryConsumption()\n-        memoryConsumptionGradient : Float() from  $kubernetesClusterContext.getMemoryConsumptionGradient()\n-        memoryConsumptionSecondDerivative : Float() from  $kubernetesClusterContext.getMemoryConsumptionSecondDerivative()\n-\tmcPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(memoryConsumptionAverage, memoryConsumptionGradient, memoryConsumptionSecondDerivative, 1)\n+        memoryConsumptionAverage : Float() from  kubernetesClusterContext.getAverageMemoryConsumption()\n+        memoryConsumptionGradient : Float() from  kubernetesClusterContext.getMemoryConsumptionGradient()\n+        memoryConsumptionSecondDerivative : Float() from  kubernetesClusterContext.getMemoryConsumptionSecondDerivative()\n+\tmcPredictedValue : Double() from delegator.getPredictedValueForNextMinute(memoryConsumptionAverage, memoryConsumptionGradient, memoryConsumptionSecondDerivative, 1)\n \n-        laUpperLimit : Float() from  $loadThresholds.getLoadAverage().getUpperLimit()\n-        laLowerLimit : Float() from  $loadThresholds.getLoadAverage().getLowerLimit()\n+        laUpperLimit : Float() from  loadThresholds.getLoadAverage().getUpperLimit()\n+        laLowerLimit : Float() from  loadThresholds.getLoadAverage().getLowerLimit()\n \n-        loadAverageAverage : Float() from  $kubernetesClusterContext.getAverageLoadAverage()\n-        loadAverageGradient : Float() from  $kubernetesClusterContext.getLoadAverageGradient()\n-        loadAverageSecondDerivative : Float() from  $kubernetesClusterContext.getLoadAverageSecondDerivative()\n-\tlaPredictedValue : Double() from $delegator.getPredictedValueForNextMinute(loadAverageAverage, loadAverageGradient, loadAverageSecondDerivative, 1)\n+        loadAverageAverage : Float() from  kubernetesClusterContext.getAverageLoadAverage()\n+        loadAverageGradient : Float() from  kubernetesClusterContext.getLoadAverageGradient()\n+        loadAverageSecondDerivative : Float() from  kubernetesClusterContext.getLoadAverageSecondDerivative()\n+\tlaPredictedValue : Double() from delegator.getPredictedValueForNextMinute(loadAverageAverage, loadAverageGradient, loadAverageSecondDerivative, 1)\n \n         scaleUpForRif : Boolean() from (rifReset && (rifPredictedValue > rifUpperLimit))\n         scaleUpForMc : Boolean() from (mcReset && (mcPredictedValue > mcUpperLimit))\n@@ -107,21 +107,21 @@ dialect \"mvel\"\n         if (scaleUp) {\n \t    int requiredReplicas = 0;\n \t    if (scaleUpForRif) {\n-              int predictedReplicasForRif = $delegator.getPredictedReplicasForStat(minReplicas, rifUpperLimit, rifPredictedValue);\n+              int predictedReplicasForRif = delegator.getPredictedReplicasForStat(minReplicas, rifUpperLimit, rifPredictedValue);\n \t      log.info(\"[scaling] \" + \" [cluster] : \" + clusterId + \" [RequestInFlight] predicted replicas : \" + predictedReplicasForRif);\n               if (predictedReplicasForRif > requiredReplicas ) {\n                 requiredReplicas = predictedReplicasForRif;\n               }\n \t    } \n \t    if (scaleUpForMc) {\n-              int predictedReplicasForMc = $delegator.getPredictedReplicasForStat(minReplicas, mcUpperLimit, mcPredictedValue);\n+              int predictedReplicasForMc = delegator.getPredictedReplicasForStat(minReplicas, mcUpperLimit, mcPredictedValue);\n               log.info(\"[scaling] \" + \" [cluster] : \" + clusterId + \" [MemoryConsumption] predicted replicas : \" + predictedReplicasForMc);\n               if (predictedReplicasForMc > requiredReplicas ) {\n                 requiredReplicas = predictedReplicasForMc;\n               }\n             }\n             if (scaleUpForLa) {\n-              int predictedReplicasForLa = $delegator.getPredictedReplicasForStat(minReplicas, laUpperLimit, laPredictedValue);\n+              int predictedReplicasForLa = delegator.getPredictedReplicasForStat(minReplicas, laUpperLimit, laPredictedValue);\n               log.info(\"[scaling] \" + \" [cluster] : \" + clusterId + \" [LoadAverage] predicted replicas : \" + predictedReplicasForLa);\n               if (predictedReplicasForLa > requiredReplicas ) {\n                 requiredReplicas = predictedReplicasForLa;\n@@ -141,14 +141,14 @@ dialect \"mvel\"\n             if (requiredReplicas > nonTerminatedReplicas) {\n               log.info(\"[scaling] Decided to scale-up : [cluster] : \" + clusterId);\n  \t      log.info(\"[scaling-up] \" + \" [cluster] : \" + clusterId + \" valid number of replicas to expand : \" + requiredReplicas);\n-\t      $delegator.delegateScaleUpContainers($kubernetesClusterContext, requiredReplicas);\n+\t      delegator.delegateScaleUpContainers(kubernetesClusterContext, requiredReplicas);\n             }\n             //shrink the cluster\n             if (requiredReplicas < nonTerminatedReplicas) {\n               if (requiredReplicas < activeReplicas) {\n                 log.info(\"[scaling] Decided to scale-down : [cluster] : \" + clusterId);\n  \t        log.info(\"[scaling-down] \" + \" [cluster] : \" + clusterId + \" valid number of replicas to shrink : \" + requiredReplicas);\n-\t        $delegator.delegateScaleDownContainers($kubernetesClusterContext, requiredReplicas);\n+\t        delegator.delegateScaleDownContainers(kubernetesClusterContext, requiredReplicas);\n               } else {\n \t        log.info(\"[scaling] \" + \" [cluster] : \" + clusterId + \" Even if requiredReplicas < nonTerminatedReplicas, still requiredReplicas >= activeReplicas ; hence not scaling down \");\n               }\n@@ -162,7 +162,7 @@ dialect \"mvel\"\n               log.info(\"[scaling] Decided to scale-down [cluster] : \" + clusterId);\n               log.info(\"[scaling-down] \" + \" [cluster] : \" + clusterId + \" shrink the cluster to minReplicas : \" + minReplicas);\n               //shrink the cluster to minReplicas\n-              $delegator.delegateScaleDownContainers($kubernetesClusterContext, minReplicas);\n+              delegator.delegateScaleDownContainers(kubernetesClusterContext, minReplicas);\n             } else {\n \t      log.info(\"[scaling] \" + \" [cluster] : \" + clusterId + \" Even if all predicted stats < upperLimit, still activeReplicas <= minReplicas ; hence not scaling down \");\n             }",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/container-scaling.drl",
                "sha": "56a2fae69aa056454321ae9fee40e7c61d57770d",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/dependent-scaling.drl",
                "changes": 119,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/dependent-scaling.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 115,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/dependent-scaling.drl",
                "patch": "@@ -19,132 +19,21 @@\n \n package org.apache.stratos.autoscaler.rule;\n \n-import org.apache.stratos.messaging.domain.topology.Service;\n-import org.apache.stratos.messaging.domain.topology.Cluster;\n-import org.apache.stratos.autoscaler.context.AutoscalerContext;\n-import org.apache.stratos.autoscaler.context.member.MemberStatsContext;\n-import org.apache.stratos.autoscaler.Constants;\n-import org.apache.stratos.autoscaler.context.partition.network.ClusterLevelNetworkPartitionContext;\n-import org.apache.stratos.autoscaler.pojo.policy.PolicyManager;\n-import org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy;\n-import org.apache.stratos.autoscaler.client.CloudControllerClient;\n-import org.apache.stratos.autoscaler.algorithm.AutoscaleAlgorithm;\n-import org.apache.stratos.autoscaler.algorithm.OneAfterAnother;\n-import org.apache.stratos.autoscaler.algorithm.RoundRobin;\n-import org.apache.stratos.autoscaler.context.partition.ClusterLevelPartitionContext;\n-import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;\n-import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.network.NetworkPartition;\n-import org.apache.stratos.cloud.controller.domain.xsd.Partition;\n-import org.apache.stratos.cloud.controller.domain.xsd.MemberContext;\n-\n-import org.apache.stratos.autoscaler.pojo.policy.autoscale.LoadAverage\n-import org.apache.stratos.autoscaler.pojo.policy.autoscale.MemoryConsumption\n+import org.apache.stratos.autoscaler.context.cluster.ClusterInstanceContext;\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n-global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;\n-global org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy autoscalePolicy;\n global java.lang.String clusterId;\n-global java.lang.String instanceId;\n-global java.lang.Float laReset;\n-global java.lang.Float numberOfRequiredInstances;\n-global java.lang.Boolean isPrimary;\n-global java.lang.String lbRef;\n-global java.util.List primaryMembers;\n+global Integer roundedRequiredInstanceCount;\n+global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n \n rule \"Dependent Scaling Rule\"\n dialect \"mvel\"\n \twhen\n \n-        networkPartitionContext : ClusterLevelNetworkPartitionContext ()\n-\t    algorithmName : String() from networkPartitionContext.getPartitionAlgorithm();\n-        autoscaleAlgorithm : AutoscaleAlgorithm() from  $delegator.getAutoscaleAlgorithm(algorithmName)\n-\n-        roundedRequiredInstanceCount : Integer() from networkPartitionContext.getRequiredInstanceCountBasedOnDependencies();\n-        activeInstancesCount : Integer() from $delegator.getMemberCount(clusterId , 0);\n-\n-        scaleUp : Boolean() from (activeInstancesCount < roundedRequiredInstanceCount )\n-        scaleDown : Boolean() from (activeInstancesCount > roundedRequiredInstanceCount )\n-\n-        eval(log.debug(\"[dependent-scaling] \" + \" [cluster] \" + clusterId + \" Scale-up action: \" + scaleUp))\n-        eval(log.debug(\"[dependent-scaling] \" + \" [cluster] \" + clusterId + \" Scale-down action: \" + scaleDown))\n+       clusterInstanceContext : ClusterInstanceContext ()\n \n \tthen\n \n-        if(scaleUp){\n-\n-            int additionalInstances = roundedRequiredInstanceCount - activeInstancesCount ;\n-            int count = 0;\n-            while(count != additionalInstances){\n-                Partition partition =  autoscaleAlgorithm.getNextScaleUpPartition(networkPartitionContext, clusterId);\n-                if(partition != null){\n-                    log.info(\"[scale-up] Partition available, hence trying to spawn an instance to scale up!\" );\n-                    log.debug(\"[scale-up] \" + \" [partition] \" + partition.getId() + \" [cluster] \" + clusterId );\n-                    $delegator.delegateSpawn(networkPartitionContext.getPartitionCtxt(partition.getId()), clusterId, instanceId, lbRef, isPrimary);\n-                    count++;\n-                }\n-            }\n-        } else if(scaleDown){\n-\n-            log.debug(\"[scale-down] Decided to Scale down [cluster] \" + clusterId);\n-\n-            MemberStatsContext selectedMemberStatsContext = null;\n-            double lowestOverallLoad = 0.0;\n-            boolean foundAValue = false;\n-            Partition partition =  autoscaleAlgorithm.getNextScaleDownPartition(networkPartitionContext, clusterId);\n-            if(partition != null){\n-                log.info(\"[scale-down] Partition available to scale down \");\n-                log.debug(\"[scale-down] \" + \" [partition] \" + partition.getId() + \" [cluster] \" + clusterId);\n-                partitionContext = networkPartitionContext.getPartitionCtxt(partition.getId());\n-\n-\n-                // In partition context member stat context, all the primary members need to be\n-                // avoided being selected as the member to terminated\n-\n-                for(MemberStatsContext memberStatsContext: partitionContext.getMemberStatsContexts().values()){\n-\n-                    if( !primaryMembers.contains(memberStatsContext.getMemberId()) ) {\n-\n-                        LoadAverage loadAverage = memberStatsContext.getLoadAverage();\n-                        log.debug(\"[scale-down] \" + \" [cluster] \"\n-                            + clusterId + \" [member] \" + memberStatsContext.getMemberId() + \" Load average: \" + loadAverage);\n-\n-                        MemoryConsumption memoryConsumption = memberStatsContext.getMemoryConsumption();\n-                        log.debug(\"[scale-down] \" + \" [partition] \" + partition.getId() + \" [cluster] \"\n-                            + clusterId + \" [member] \" + memberStatsContext.getMemberId() + \" Memory consumption: \" + memoryConsumption);\n-\n-                        double predictedCpu = $delegator.getPredictedValueForNextMinute(loadAverage.getAverage(),loadAverage.getGradient(),loadAverage.getSecondDerivative(), 1);\n-                        log.debug(\"[scale-down] \" + \" [partition] \" + partition.getId() + \" [cluster] \"\n-                            + clusterId + \" [member] \" + memberStatsContext.getMemberId() + \" Predicted CPU: \" + predictedCpu);\n-\n-                        double predictedMemoryConsumption = $delegator.getPredictedValueForNextMinute(memoryConsumption.getAverage(),memoryConsumption.getGradient(),memoryConsumption.getSecondDerivative(), 1);\n-                        log.debug(\"[scale-down] \" + \" [partition] \" + partition.getId() + \" [cluster] \"\n-                            + clusterId + \" [member] \" + memberStatsContext.getMemberId() + \" Predicted memory consumption: \" + predictedMemoryConsumption);\n-\n-                        double overallLoad = (predictedCpu + predictedMemoryConsumption) / 2;\n-                        log.debug(\"[scale-down] \" + \" [partition] \" + partition.getId() + \" [cluster] \"\n-                            + clusterId + \" [member] \" + memberStatsContext.getMemberId() + \" Overall load: \" + overallLoad);\n-\n-                        if(!foundAValue){\n-                            foundAValue = true;\n-                            selectedMemberStatsContext = memberStatsContext;\n-                            lowestOverallLoad = overallLoad;\n-                        } else if(overallLoad < lowestOverallLoad){\n-                            selectedMemberStatsContext = memberStatsContext;\n-                            lowestOverallLoad = overallLoad;\n-                        }\n-                    }\n-                }\n-                if(selectedMemberStatsContext != null) {\n-                    log.info(\"[scale-down] Trying to terminating an instance to scale down!\" );\n-                    log.debug(\"[scale-down] \" + \" [partition] \" + partition.getId() + \" [cluster] \"\n-                        + clusterId + \" Member with lowest overall load: \" + selectedMemberStatsContext.getMemberId());\n-\n-                    $delegator.delegateTerminate(partitionContext, selectedMemberStatsContext.getMemberId());\n-                }\n-            }\n-        }  else{\n-\n-        }\n \n end\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/dependent-scaling.drl",
                "sha": "791a23879074801e5027cb7cf037ab9492e1c199",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/mincheck.drl",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/mincheck.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 2,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/mincheck.drl",
                "patch": "@@ -42,8 +42,8 @@ import org.apache.stratos.cloud.controller.stub.domain.MemberContext;\n import org.apache.stratos.autoscaler.context.cluster.ClusterInstanceContext;\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n-global org.apache.stratos.autoscaler.pojo.policy.PolicyManager $manager;\n-global org.apache.stratos.autoscaler.context.AutoscalerContext $context;\n+global org.apache.stratos.autoscaler.pojo.policy.PolicyManager manager;\n+global org.apache.stratos.autoscaler.context.AutoscalerContext context;\n global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n global java.util.Map partitionCtxts;\n global java.lang.String clusterId;",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/mincheck.drl",
                "sha": "c8a5df89578590a0280a37e303095a526836b5bf",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/obsoletecheck.drl",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/obsoletecheck.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 18,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/obsoletecheck.drl",
                "patch": "@@ -41,10 +41,10 @@ import org.apache.stratos.cloud.controller.stub.domain.Partition;\n import org.apache.stratos.cloud.controller.stub.domain.MemberContext;\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n-global org.apache.stratos.autoscaler.pojo.policy.PolicyManager $manager;\n-global org.apache.stratos.autoscaler.context.AutoscalerContext $context;\n-global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;\n-global org.apache.stratos.messaging.domain.topology.Topology $topology;\n+global org.apache.stratos.autoscaler.pojo.policy.PolicyManager manager;\n+global org.apache.stratos.autoscaler.context.AutoscalerContext context;\n+global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n+global org.apache.stratos.messaging.domain.topology.Topology topology;\n global java.util.Map partitionCtxts;\n global java.lang.String clusterId;\n global java.lang.String lbRef;\n@@ -54,26 +54,26 @@ global Integer primaryMemberCount;\n rule \"Terminate Obsoleted Instances\"\n dialect \"mvel\"\n         when\n-            $ctxt : ClusterLevelPartitionContext ()\n-            eval(log.debug(\"Running obsolete instances rule: [partition] \" + $ctxt.getPartitionId() + \" [network-partition] \" + $ctxt.getNetworkPartitionId()))\n-            eval(log.debug(\"[obsolete-check] [network-partition] \" + $ctxt.getNetworkPartitionId() + \" [partition] \" + $ctxt.getPartitionId() +\" Obsolete member count: \" + $ctxt.getObsoletedMembers().size()))\n-            eval($ctxt.getObsoletedMembers().keySet().size() > 0)\n-            memberId : String() from $ctxt.getObsoletedMembers().keySet()\n-            eval(log.debug(\"[obsolete-check] [network-partition] \" + $ctxt.getNetworkPartitionId() + \" [partition] \" + $ctxt.getPartitionId() + \" Member id: \" + memberId))\n+            ctxt : ClusterLevelPartitionContext ()\n+            eval(log.debug(\"Running obsolete instances rule: [partition] \" + ctxt.getPartitionId() + \" [network-partition] \" + ctxt.getNetworkPartitionId()))\n+            eval(log.debug(\"[obsolete-check] [network-partition] \" + ctxt.getNetworkPartitionId() + \" [partition] \" + ctxt.getPartitionId() +\" Obsolete member count: \" + ctxt.getObsoletedMembers().size()))\n+            eval(ctxt.getObsoletedMembers().keySet().size() > 0)\n+            memberId : String() from ctxt.getObsoletedMembers().keySet()\n+            eval(log.debug(\"[obsolete-check] [network-partition] \" + ctxt.getNetworkPartitionId() + \" [partition] \" + ctxt.getPartitionId() + \" Member id: \" + memberId))\n         then\n-           $delegator.terminateObsoleteInstance(memberId);\n+           delegator.terminateObsoleteInstance(memberId);\n end\n \n rule \"Cleanup Instances which are pending termination\"\n dialect \"mvel\"\n         when\n-            $ctxt : ClusterLevelPartitionContext ()\n-            eval(log.debug(\"Running instances cleanup event sender rule: [partition] \" + $ctxt.getPartitionId() + \" [network-partition] \" + $ctxt.getNetworkPartitionId()))\n-            eval(log.debug(\"[instance-cleanup-check] [network-partition] \" + $ctxt.getNetworkPartitionId() + \" [partition] \" + $ctxt.getPartitionId() +\" Pending termination member count: \" + $ctxt.getTerminationPendingMembers().size()))\n-            eval($ctxt.getTerminationPendingMembers().size() > 0)\n-            memberId : String() from $ctxt.getTerminationPendingMembers()\n-            eval(log.debug(\"[instance-cleanup-check ] [network-partition] \" + $ctxt.getNetworkPartitionId() + \" [partition] \" + $ctxt.getPartitionId() + \" Member id: \" + memberId))\n+            ctxt : ClusterLevelPartitionContext ()\n+            eval(log.debug(\"Running instances cleanup event sender rule: [partition] \" + ctxt.getPartitionId() + \" [network-partition] \" + ctxt.getNetworkPartitionId()))\n+            eval(log.debug(\"[instance-cleanup-check] [network-partition] \" + ctxt.getNetworkPartitionId() + \" [partition] \" + ctxt.getPartitionId() +\" Pending termination member count: \" + ctxt.getTerminationPendingMembers().size()))\n+            eval(ctxt.getTerminationPendingMembers().size() > 0)\n+            memberId : String() from ctxt.getTerminationPendingMembers()\n+            eval(log.debug(\"[instance-cleanup-check ] [network-partition] \" + ctxt.getNetworkPartitionId() + \" [partition] \" + ctxt.getPartitionId() + \" Member id: \" + memberId))\n         then\n-           $delegator.delegateInstanceCleanup(memberId);\n+           delegator.delegateInstanceCleanup(memberId);\n end\n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/obsoletecheck.drl",
                "sha": "894cf2acd25a586bfe13d7ff58baa3ef8c70c85e",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/scaling.drl",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/scaling.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 9,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/scaling.drl",
                "patch": "@@ -42,14 +42,14 @@ import org.apache.stratos.autoscaler.rule.AutoscalerRuleEvaluator;\n import org.apache.stratos.autoscaler.pojo.policy.deployment.partition.network.NetworkPartition;\n import org.apache.stratos.cloud.controller.stub.domain.Partition;\n import org.apache.stratos.cloud.controller.stub.domain.MemberContext;\n+import org.apache.stratos.autoscaler.context.cluster.ClusterInstanceContext;\n \n import org.apache.stratos.autoscaler.pojo.policy.autoscale.LoadAverage\n import org.apache.stratos.autoscaler.pojo.policy.autoscale.MemoryConsumption\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n global org.apache.stratos.autoscaler.pojo.policy.autoscale.AutoscalePolicy autoscalePolicy;\n-global org.apache.stratos.autoscaler.context.cluster.ClusterInstanceContext clusterInstanceContext;\n global java.lang.String clusterId;\n global java.lang.String instanceId;\n global java.lang.Boolean rifReset;\n@@ -58,19 +58,19 @@ global java.lang.Boolean laReset;\n global java.lang.Boolean isPrimary;\n global java.util.List primaryMembers;\n global java.lang.Boolean arspiReset;\n+global java.lang.String algorithmName;\n \n rule \"Scaling Rule\"\n dialect \"mvel\"\n \twhen\n-        networkPartitionContext : ClusterLevelNetworkPartitionContext ()\n+       clusterInstanceContext : ClusterInstanceContext ()\n \n         loadThresholds : LoadThresholds() from  autoscalePolicy.getLoadThresholds()\n-\t    algorithmName : String() from networkPartitionContext.getPartitionAlgorithm();\n         autoscaleAlgorithm : AutoscaleAlgorithm() from  delegator.getAutoscaleAlgorithm(algorithmName)\n \n-        eval(log.debug(\"Running scale up rule: [network-partition] \" + networkPartitionContext.getId() + \" [cluster] \" + clusterId))\n-        eval(log.debug(\"[scaling] [network-partition] \" + networkPartitionContext.getId() + \" [cluster] \" + clusterId + \" Algorithm name: \" + algorithmName))\n-        eval(log.debug(\"[scaling] [network-partition] \" + networkPartitionContext.getId() + \" [cluster] \" + clusterId + \" Algorithm: \" + autoscaleAlgorithm))\n+        eval(log.debug(\"Running scale up rule: [network-partition] \" + clusterInstanceContext.getNetworkPartitionId() + \" [cluster] \" + clusterId))\n+        eval(log.debug(\"[scaling] [network-partition] \" + clusterInstanceContext.getNetworkPartitionId() + \" [cluster] \" + clusterId + \" Algorithm name: \" + algorithmName))\n+        eval(log.debug(\"[scaling] [network-partition] \" + clusterInstanceContext.getNetworkPartitionId() + \" [cluster] \" + clusterId + \" Algorithm: \" + autoscaleAlgorithm))\n \n \t\n         rifUpperLimit : Float() from  loadThresholds.getRequestsInFlight().getUpperLimit()\n@@ -133,7 +133,7 @@ dialect \"mvel\"\n \n             //Calculating the factor scaling\n             float factor = numberOfRequiredInstances / clusterInstanceContext.getMinMembers();\n-            delegator.delegateScalingDependencyNotification(clusterId, networkPartitionContext.getId(), factor);\n+            delegator.delegateScalingDependencyNotification(clusterId, clusterInstanceContext.getId(), factor);\n \n             while(count != additionalInstances){\n             ClusterLevelPartitionContext partitionContext =  (ClusterLevelPartitionContext)autoscaleAlgorithm.getNextScaleUpPartitionContext(clusterInstanceContext.getPartitionCtxtsAsAnArray());\n@@ -147,7 +147,7 @@ dialect \"mvel\"\n         } else if(scaleDown){\n \n             float factor = numberOfRequiredInstances / clusterInstanceContext.getMinMembers();\n-            delegator.delegateScalingDependencyNotification(clusterId, networkPartitionContext.getId(), factor);\n+            delegator.delegateScalingDependencyNotification(clusterId, clusterInstanceContext.getNetworkPartitionId(), factor);\n \n             log.debug(\"[scale-down] Decided to Scale down [cluster] \" + clusterId);\n             if(clusterInstanceContext.getScaleDownRequestsCount() > 5 ){\n@@ -159,7 +159,7 @@ dialect \"mvel\"\n                 if(partitionContext != null){\n                     log.info(\"[scale-down] Partition available to scale down \");\n //                    log.debug(\"[scale-down] \" + \" [partition] \" + partition.getId() + \" [cluster] \" + clusterId);\n-//                    partitionContext = networkPartitionContext.getPartitionCtxt(partition.getId());\n+//                    partitionContext = clusterInstanceContext.getPartitionCtxt(partition.getId());\n //\n \n \t\t\t\t\t// In partition context member stat context, all the primary members need to be",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/scaling.drl",
                "sha": "85230889b155b3bb4f2df087276d072b258b8ef5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/terminateall.drl",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/terminateall.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 8,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/terminateall.drl",
                "patch": "@@ -23,21 +23,21 @@ import org.apache.stratos.messaging.domain.topology.Cluster;\n import org.apache.stratos.autoscaler.context.partition.ClusterLevelPartitionContext;\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n-global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;\n+global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n \n rule \"Terminate all Rule\"\n \n dialect \"mvel\"\n         when\n-            $ctxt : ClusterLevelPartitionContext ()\n-            eval(log.debug(\"Running terminate all rule: [partition] \" + $ctxt.getPartitionId() + \" [network-partition] \" + $ctxt.getNetworkPartitionId()))\n-            eval(log.debug(\"[terminate all] [network-partition] \" + $ctxt.getNetworkPartitionId() + \" [partition] \" + $ctxt.getPartitionId() +\" Member count: \" + $ctxt.getMemberStatsContexts().size()))\n-            eval($ctxt.getMemberStatsContexts().size() > 0)\n-            memberId : String() from $ctxt.getMemberStatsContexts().keySet()\n-            eval(log.debug(\"[terminate all] [network-partition] \" + $ctxt.getNetworkPartitionId() + \" [partition] \" + $ctxt.getPartitionId() + \" Member id: \" + memberId))\n+            ctxt : ClusterLevelPartitionContext ()\n+            eval(log.debug(\"Running terminate all rule: [partition] \" + ctxt.getPartitionId() + \" [network-partition] \" + ctxt.getNetworkPartitionId()))\n+            eval(log.debug(\"[terminate all] [network-partition] \" + ctxt.getNetworkPartitionId() + \" [partition] \" + ctxt.getPartitionId() +\" Member count: \" + ctxt.getMemberStatsContexts().size()))\n+            eval(ctxt.getMemberStatsContexts().size() > 0)\n+            memberId : String() from ctxt.getMemberStatsContexts().keySet()\n+            eval(log.debug(\"[terminate all] [network-partition] \" + ctxt.getNetworkPartitionId() + \" [partition] \" + ctxt.getPartitionId() + \" Member id: \" + memberId))\n \n         then\n-           $delegator.delegateTerminate($ctxt, memberId);\n+           delegator.delegateTerminate(ctxt, memberId);\n end\n \n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/terminateall.drl",
                "sha": "512bebd0d40d11deff9f835e225c436f1458bf3d",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/terminatedependency.drl",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/products/stratos/modules/distribution/src/main/conf/drools/terminatedependency.drl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 8,
                "filename": "products/stratos/modules/distribution/src/main/conf/drools/terminatedependency.drl",
                "patch": "@@ -23,7 +23,7 @@ import org.apache.stratos.messaging.domain.topology.Cluster;\n import org.apache.stratos.autoscaler.context.partition.ClusterLevelPartitionContext;\n \n global org.apache.stratos.autoscaler.rule.RuleLog log;\n-global org.apache.stratos.autoscaler.rule.RuleTasksDelegator $delegator;\n+global org.apache.stratos.autoscaler.rule.RuleTasksDelegator delegator;\n global java.util.Map partitionCtxts;\n global java.lang.String clusterId;\n global java.lang.String lbRef;\n@@ -35,17 +35,17 @@ rule \"Terminate Dependency Rule\"\n \n dialect \"mvel\"\n         when\n-            $ctxt : ClusterLevelPartitionContext ()\n-            eval(log.debug(\"Running terminate dependency rule: [partition] \" + $ctxt.getPartitionId() + \" [network-partition] \" + $ctxt.getNetworkPartitionId()))\n-            eval(log.debug(\"[terminate dependency] [network-partition] \" + $ctxt.getNetworkPartitionId() + \" [partition] \" + $ctxt.getPartitionId() +\" Member count: \" + $ctxt.getMemberStatsContexts().size()))\n-            eval(log.debug(\"Grouping ... in terminatedependency rule terminating all members \" + $ctxt.getAllMemberForTerminationCount()))\n-            eval(!$ctxt.checkKillDependencies(serviceId, clusterId))\n-            eval(log.debug(\"[terminate dependency] [network-partition] \" + $ctxt.getNetworkPartitionId() + \" [partition] \" + $ctxt.getPartitionId() + \" successfully terminated members\"))\n+            ctxt : ClusterLevelPartitionContext ()\n+            eval(log.debug(\"Running terminate dependency rule: [partition] \" + ctxt.getPartitionId() + \" [network-partition] \" + ctxt.getNetworkPartitionId()))\n+            eval(log.debug(\"[terminate dependency] [network-partition] \" + ctxt.getNetworkPartitionId() + \" [partition] \" + ctxt.getPartitionId() +\" Member count: \" + ctxt.getMemberStatsContexts().size()))\n+            eval(log.debug(\"Grouping ... in terminatedependency rule terminating all members \" + ctxt.getAllMemberForTerminationCount()))\n+            eval(!ctxt.checkKillDependencies(serviceId, clusterId))\n+            eval(log.debug(\"[terminate dependency] [network-partition] \" + ctxt.getNetworkPartitionId() + \" [partition] \" + ctxt.getPartitionId() + \" successfully terminated members\"))\n  \n             eval(log.debug(\"Grouping:terminatedependency:terminating all\"))\n \n         then\n-           $delegator.delegateTerminateAll(clusterId);\n+           delegator.delegateTerminateAll(clusterId);\n end\n \n ",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/products/stratos/modules/distribution/src/main/conf/drools/terminatedependency.drl",
                "sha": "c7f313c4ee353176fd14c08acb4b40ffad28e92f",
                "status": "modified"
            },
            {
                "additions": 240,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/service-stubs/org.apache.stratos.autoscaler.service.stub/src/main/resources/AutoScalerService.wsdl",
                "changes": 429,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/service-stubs/org.apache.stratos.autoscaler.service.stub/src/main/resources/AutoScalerService.wsdl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 189,
                "filename": "service-stubs/org.apache.stratos.autoscaler.service.stub/src/main/resources/AutoScalerService.wsdl",
                "patch": "@@ -1,4 +1,4 @@\n-<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:ax29=\"http://policy.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ns=\"http://api.autoscaler.stratos.apache.org\" xmlns:ax25=\"http://common.stratos.apache.org/xsd\" xmlns:ax23=\"http://deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax24=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax217=\"http://kubernetes.exception.autoscaler.stratos.apache.org/xsd\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:ax219=\"http://application.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax227=\"http://pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax214=\"http://kubernetes.common.stratos.apache.org/xsd\" xmlns:ns1=\"http://org.apache.axis2/xsd\" xmlns:ax221=\"http://pojo.applications.autoscaler.stratos.apache.org/xsd\" xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\" xmlns:ax224=\"http://exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax211=\"http://autoscale.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:mime=\"http://schemas.xmlsoap.org/wsdl/mime/\" xmlns:soap12=\"http://schemas.xmlsoap.org/wsdl/soap12/\" targetNamespace=\"http://api.autoscaler.stratos.apache.org\">\n+<wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:ax27=\"http://common.stratos.apache.org/xsd\" xmlns:ns=\"http://api.autoscaler.stratos.apache.org\" xmlns:ax25=\"http://deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax26=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax23=\"http://policy.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax217=\"http://autoscale.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:ax219=\"http://application.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax227=\"http://pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ns1=\"http://org.apache.axis2/xsd\" xmlns:ax221=\"http://pojo.applications.autoscaler.stratos.apache.org/xsd\" xmlns:ax213=\"http://kubernetes.common.stratos.apache.org/xsd\" xmlns:wsaw=\"http://www.w3.org/2006/05/addressing/wsdl\" xmlns:ax224=\"http://exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax211=\"http://kubernetes.exception.autoscaler.stratos.apache.org/xsd\" xmlns:http=\"http://schemas.xmlsoap.org/wsdl/http/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:mime=\"http://schemas.xmlsoap.org/wsdl/mime/\" xmlns:soap12=\"http://schemas.xmlsoap.org/wsdl/soap12/\" targetNamespace=\"http://api.autoscaler.stratos.apache.org\">\n     <wsdl:documentation>AutoScalerService</wsdl:documentation>\n     <wsdl:types>\n         <xs:schema attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://autoscale.policy.pojo.autoscaler.stratos.apache.org/xsd\">\n@@ -9,15 +9,15 @@\n                     <xs:element minOccurs=\"0\" name=\"id\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"instanceRoundingFactor\" type=\"xs:float\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"isPublic\" type=\"xs:boolean\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"loadThresholds\" nillable=\"true\" type=\"ax211:LoadThresholds\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"loadThresholds\" nillable=\"true\" type=\"ax217:LoadThresholds\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"tenantId\" type=\"xs:int\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n             <xs:complexType name=\"LoadThresholds\">\n                 <xs:sequence>\n-                    <xs:element minOccurs=\"0\" name=\"loadAverage\" nillable=\"true\" type=\"ax211:LoadAverageThresholds\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"memoryConsumption\" nillable=\"true\" type=\"ax211:MemoryConsumptionThresholds\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"requestsInFlight\" nillable=\"true\" type=\"ax211:RequestsInFlightThresholds\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"loadAverage\" nillable=\"true\" type=\"ax217:LoadAverageThresholds\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"memoryConsumption\" nillable=\"true\" type=\"ax217:MemoryConsumptionThresholds\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"requestsInFlight\" nillable=\"true\" type=\"ax217:RequestsInFlightThresholds\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n             <xs:complexType name=\"LoadAverageThresholds\">\n@@ -46,7 +46,7 @@\n                     <xs:element minOccurs=\"0\" name=\"alias\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"applicationId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"components\" nillable=\"true\" type=\"ax221:ComponentContext\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax25:Properties\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax27:Properties\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"teantAdminUsername\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"tenantDomain\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"tenantId\" type=\"xs:int\"></xs:element>\n@@ -76,7 +76,7 @@\n                     <xs:element minOccurs=\"0\" name=\"maxMembers\" type=\"xs:int\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"minMembers\" type=\"xs:int\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"privateRepo\" type=\"xs:boolean\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax25:Properties\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax27:Properties\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"repoPassword\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"repoUrl\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"repoUsername\" nillable=\"true\" type=\"xs:string\"></xs:element>\n@@ -118,16 +118,16 @@\n                 </xs:sequence>\n             </xs:complexType>\n         </xs:schema>\n-        <xs:schema xmlns:ax27=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\">\n+        <xs:schema xmlns:ax29=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\">\n             <xs:import namespace=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\"></xs:import>\n             <xs:complexType name=\"DeploymentPolicy\">\n                 <xs:sequence>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"allPartitions\" nillable=\"true\" type=\"ax27:Partition\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"allPartitions\" nillable=\"true\" type=\"ax29:Partition\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"applicationId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"applicationLevelNetworkPartitions\" nillable=\"true\" type=\"ax27:ApplicationLevelNetworkPartition\"></xs:element>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"childLevelNetworkPartitions\" nillable=\"true\" type=\"ax27:ChildLevelNetworkPartition\"></xs:element>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"childPolicies\" nillable=\"true\" type=\"ax23:ChildPolicy\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"childPolicyHolder\" nillable=\"true\" type=\"ax27:ChildPolicyHolder\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"applicationLevelNetworkPartitions\" nillable=\"true\" type=\"ax29:ApplicationLevelNetworkPartition\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"childLevelNetworkPartitions\" nillable=\"true\" type=\"ax29:ChildLevelNetworkPartition\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"childPolicies\" nillable=\"true\" type=\"ax25:ChildPolicy\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"childPolicyHolder\" nillable=\"true\" type=\"ax29:ChildPolicyHolder\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"description\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"id\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"isPublic\" type=\"xs:boolean\"></xs:element>\n@@ -136,7 +136,7 @@\n             </xs:complexType>\n             <xs:complexType name=\"ChildPolicy\">\n                 <xs:sequence>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"childLevelNetworkPartitions\" nillable=\"true\" type=\"ax27:ChildLevelNetworkPartition\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"childLevelNetworkPartitions\" nillable=\"true\" type=\"ax29:ChildLevelNetworkPartition\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"id\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n@@ -148,27 +148,27 @@\n                 </xs:sequence>\n             </xs:complexType>\n         </xs:schema>\n-        <xs:schema xmlns:ax26=\"http://common.stratos.apache.org/xsd\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\">\n+        <xs:schema xmlns:ax28=\"http://common.stratos.apache.org/xsd\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\">\n             <xs:import namespace=\"http://common.stratos.apache.org/xsd\"></xs:import>\n             <xs:complexType name=\"Partition\">\n                 <xs:sequence>\n                     <xs:element minOccurs=\"0\" name=\"description\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"id\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"isPublic\" type=\"xs:boolean\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax25:Properties\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax27:Properties\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"provider\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n             <xs:complexType name=\"ApplicationLevelNetworkPartition\">\n                 <xs:sequence>\n                     <xs:element minOccurs=\"0\" name=\"activeByDefault\" type=\"xs:boolean\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"id\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"partitions\" nillable=\"true\" type=\"ax24:Partition\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"partitions\" nillable=\"true\" type=\"ax26:Partition\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n             <xs:complexType name=\"ChildLevelNetworkPartition\">\n                 <xs:sequence>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"childLevelPartitions\" nillable=\"true\" type=\"ax24:ChildLevelPartition\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"childLevelPartitions\" nillable=\"true\" type=\"ax26:ChildLevelPartition\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"id\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"min\" type=\"xs:int\"></xs:element>\n                     <xs:element minOccurs=\"0\" name=\"partitionAlgo\" nillable=\"true\" type=\"xs:string\"></xs:element>\n@@ -191,7 +191,7 @@\n         <xs:schema attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://common.stratos.apache.org/xsd\">\n             <xs:complexType name=\"Properties\">\n                 <xs:sequence>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax25:Property\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax27:Property\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n             <xs:complexType name=\"Property\">\n@@ -201,420 +201,434 @@\n                 </xs:sequence>\n             </xs:complexType>\n         </xs:schema>\n-        <xs:schema xmlns:ax220=\"http://application.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax212=\"http://autoscale.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax213=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax28=\"http://deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax210=\"http://policy.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax223=\"http://pojo.applications.autoscaler.stratos.apache.org/xsd\" xmlns:ax225=\"http://exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax226=\"http://common.stratos.apache.org/xsd\" xmlns:ax216=\"http://kubernetes.common.stratos.apache.org/xsd\" xmlns:ax228=\"http://pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax218=\"http://kubernetes.exception.autoscaler.stratos.apache.org/xsd\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://api.autoscaler.stratos.apache.org\">\n-            <xs:import namespace=\"http://deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\"></xs:import>\n+        <xs:schema xmlns:ax215=\"http://kubernetes.common.stratos.apache.org/xsd\" xmlns:ax220=\"http://application.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax212=\"http://kubernetes.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax210=\"http://deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax223=\"http://pojo.applications.autoscaler.stratos.apache.org/xsd\" xmlns:ax225=\"http://exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax226=\"http://common.stratos.apache.org/xsd\" xmlns:ax24=\"http://policy.exception.autoscaler.stratos.apache.org/xsd\" xmlns:ax216=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax228=\"http://pojo.autoscaler.stratos.apache.org/xsd\" xmlns:ax218=\"http://autoscale.policy.pojo.autoscaler.stratos.apache.org/xsd\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://api.autoscaler.stratos.apache.org\">\n             <xs:import namespace=\"http://policy.exception.autoscaler.stratos.apache.org/xsd\"></xs:import>\n-            <xs:import namespace=\"http://autoscale.policy.pojo.autoscaler.stratos.apache.org/xsd\"></xs:import>\n-            <xs:import namespace=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\"></xs:import>\n-            <xs:import namespace=\"http://kubernetes.common.stratos.apache.org/xsd\"></xs:import>\n+            <xs:import namespace=\"http://deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\"></xs:import>\n             <xs:import namespace=\"http://kubernetes.exception.autoscaler.stratos.apache.org/xsd\"></xs:import>\n+            <xs:import namespace=\"http://kubernetes.common.stratos.apache.org/xsd\"></xs:import>\n+            <xs:import namespace=\"http://network.partition.deployment.policy.pojo.autoscaler.stratos.apache.org/xsd\"></xs:import>\n+            <xs:import namespace=\"http://autoscale.policy.pojo.autoscaler.stratos.apache.org/xsd\"></xs:import>\n             <xs:import namespace=\"http://application.exception.autoscaler.stratos.apache.org/xsd\"></xs:import>\n             <xs:import namespace=\"http://pojo.applications.autoscaler.stratos.apache.org/xsd\"></xs:import>\n             <xs:import namespace=\"http://exception.autoscaler.stratos.apache.org/xsd\"></xs:import>\n             <xs:import namespace=\"http://common.stratos.apache.org/xsd\"></xs:import>\n             <xs:import namespace=\"http://pojo.autoscaler.stratos.apache.org/xsd\"></xs:import>\n-            <xs:element name=\"getValidDeploymentPoliciesforCartridge\">\n+            <xs:element name=\"AutoScalerServiceInvalidPolicyException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"cartridgeType\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"InvalidPolicyException\" nillable=\"true\" type=\"ax23:InvalidPolicyException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getValidDeploymentPoliciesforCartridgeResponse\">\n+            <xs:element name=\"updateDeploymentPolicy\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax28:DeploymentPolicy\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"deploymentPolicy\" nillable=\"true\" type=\"ax25:DeploymentPolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceInvalidPolicyException\">\n+            <xs:element name=\"updateDeploymentPolicyResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"InvalidPolicyException\" nillable=\"true\" type=\"ax29:InvalidPolicyException\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"addDeploymentPolicy\">\n+            <xs:element name=\"AutoScalerServiceNonExistingKubernetesGroupException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"deploymentPolicy\" nillable=\"true\" type=\"ax28:DeploymentPolicy\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"NonExistingKubernetesGroupException\" nillable=\"true\" type=\"ax212:NonExistingKubernetesGroupException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"addDeploymentPolicyResponse\">\n+            <xs:element name=\"getKubernetesGroup\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"kubernetesGroupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateDeploymentPolicy\">\n+            <xs:element name=\"getKubernetesGroupResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"deploymentPolicy\" nillable=\"true\" type=\"ax28:DeploymentPolicy\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax215:KubernetesGroup\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateDeploymentPolicyResponse\">\n+            <xs:element name=\"getPartitionsOfGroup\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"deploymentPolicyId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"groupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"addAutoScalingPolicy\">\n+            <xs:element name=\"getPartitionsOfGroupResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"autoscalePolicy\" nillable=\"true\" type=\"ax212:AutoscalePolicy\"></xs:element>\n+                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax26:Partition\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"addAutoScalingPolicyResponse\">\n+            <xs:element name=\"getAutoscalingPolicy\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"autoscalingPolicyId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateAutoScalingPolicy\">\n+            <xs:element name=\"getAutoscalingPolicyResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"autoscalePolicy\" nillable=\"true\" type=\"ax212:AutoscalePolicy\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax217:AutoscalePolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateAutoScalingPolicyResponse\">\n+            <xs:element name=\"AutoScalerServiceApplicationDefinitionException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"ApplicationDefinitionException\" nillable=\"true\" type=\"ax219:ApplicationDefinitionException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getAutoscalingPolicy\">\n+            <xs:element name=\"deployApplicationDefinition\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"autoscalingPolicyId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"applicationContext\" nillable=\"true\" type=\"ax221:ApplicationContext\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getAutoscalingPolicyResponse\">\n+            <xs:element name=\"unDeployApplicationDefinition\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax212:AutoscalePolicy\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"applicationId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"tenantId\" type=\"xs:int\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"tenantDomain\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getNetworkPartitions\">\n+            <xs:element name=\"AutoScalerServiceInvalidKubernetesMasterException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"deploymentPolicyId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"InvalidKubernetesMasterException\" nillable=\"true\" type=\"ax212:InvalidKubernetesMasterException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getNetworkPartitionsResponse\">\n+            <xs:element name=\"AutoScalerServiceNonExistingKubernetesMasterException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax24:ApplicationLevelNetworkPartition\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"NonExistingKubernetesMasterException\" nillable=\"true\" type=\"ax212:NonExistingKubernetesMasterException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getAllKubernetesGroups\">\n+            <xs:element name=\"updateKubernetesMaster\">\n                 <xs:complexType>\n-                    <xs:sequence></xs:sequence>\n+                    <xs:sequence>\n+                        <xs:element minOccurs=\"0\" name=\"kubernetesMaster\" nillable=\"true\" type=\"ax215:KubernetesMaster\"></xs:element>\n+                    </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getAllKubernetesGroupsResponse\">\n+            <xs:element name=\"updateKubernetesMasterResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax216:KubernetesGroup\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceNonExistingKubernetesGroupException\">\n+            <xs:element name=\"AutoScalerServiceInvalidKubernetesHostException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"NonExistingKubernetesGroupException\" nillable=\"true\" type=\"ax217:NonExistingKubernetesGroupException\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"InvalidKubernetesHostException\" nillable=\"true\" type=\"ax212:InvalidKubernetesHostException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getMasterForKubernetesGroup\">\n+            <xs:element name=\"AutoScalerServiceNonExistingKubernetesHostException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"kubernetesGroupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"NonExistingKubernetesHostException\" nillable=\"true\" type=\"ax212:NonExistingKubernetesHostException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getMasterForKubernetesGroupResponse\">\n+            <xs:element name=\"updateKubernetesHost\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax216:KubernetesMaster\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"kubernetesHost\" nillable=\"true\" type=\"ax215:KubernetesHost\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getHostsForKubernetesGroup\">\n+            <xs:element name=\"updateKubernetesHostResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"kubernetesGroupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getHostsForKubernetesGroupResponse\">\n+            <xs:element name=\"getAllDeploymentPolicies\">\n                 <xs:complexType>\n-                    <xs:sequence>\n-                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax216:KubernetesHost\"></xs:element>\n-                    </xs:sequence>\n+                    <xs:sequence></xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceInvalidKubernetesGroupException\">\n+            <xs:element name=\"getAllDeploymentPoliciesResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"InvalidKubernetesGroupException\" nillable=\"true\" type=\"ax217:InvalidKubernetesGroupException\"></xs:element>\n+                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax25:DeploymentPolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"addKubernetesGroup\">\n+            <xs:element name=\"getAllAutoScalingPolicy\">\n+                <xs:complexType>\n+                    <xs:sequence></xs:sequence>\n+                </xs:complexType>\n+            </xs:element>\n+            <xs:element name=\"getAllAutoScalingPolicyResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"kubernetesGroup\" nillable=\"true\" type=\"ax216:KubernetesGroup\"></xs:element>\n+                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax217:AutoscalePolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"addKubernetesGroupResponse\">\n+            <xs:element name=\"getValidDeploymentPoliciesforCartridge\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"cartridgeType\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceInvalidKubernetesHostException\">\n+            <xs:element name=\"getValidDeploymentPoliciesforCartridgeResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"InvalidKubernetesHostException\" nillable=\"true\" type=\"ax217:InvalidKubernetesHostException\"></xs:element>\n+                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax25:DeploymentPolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"addKubernetesHost\">\n+            <xs:element name=\"addDeploymentPolicy\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"groupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                        <xs:element minOccurs=\"0\" name=\"kubernetesHost\" nillable=\"true\" type=\"ax216:KubernetesHost\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"deploymentPolicy\" nillable=\"true\" type=\"ax25:DeploymentPolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"addKubernetesHostResponse\">\n+            <xs:element name=\"addDeploymentPolicyResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"removeKubernetesGroup\">\n+            <xs:element name=\"undeployDeploymentPolicy\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"groupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"applicationId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"removeKubernetesGroupResponse\">\n+            <xs:element name=\"undeployDeploymentPolicyResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n                         <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceNonExistingKubernetesHostException\">\n+            <xs:element name=\"addAutoScalingPolicy\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"NonExistingKubernetesHostException\" nillable=\"true\" type=\"ax217:NonExistingKubernetesHostException\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"autoscalePolicy\" nillable=\"true\" type=\"ax217:AutoscalePolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"removeKubernetesHost\">\n+            <xs:element name=\"addAutoScalingPolicyResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"hostId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"removeKubernetesHostResponse\">\n+            <xs:element name=\"updateAutoScalingPolicy\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"autoscalePolicy\" nillable=\"true\" type=\"ax217:AutoscalePolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceApplicationDefinitionException\">\n+            <xs:element name=\"updateAutoScalingPolicyResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"ApplicationDefinitionException\" nillable=\"true\" type=\"ax219:ApplicationDefinitionException\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"deployApplicationDefinition\">\n+            <xs:element name=\"getNetworkPartitions\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"applicationContext\" nillable=\"true\" type=\"ax221:ApplicationContext\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"deploymentPolicyId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"unDeployApplicationDefinition\">\n+            <xs:element name=\"getNetworkPartitionsResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"applicationId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                        <xs:element minOccurs=\"0\" name=\"tenantId\" type=\"xs:int\"></xs:element>\n-                        <xs:element minOccurs=\"0\" name=\"tenantDomain\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax26:ApplicationLevelNetworkPartition\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceInvalidArgumentException\">\n+            <xs:element name=\"getAllKubernetesGroups\">\n+                <xs:complexType>\n+                    <xs:sequence></xs:sequence>\n+                </xs:complexType>\n+            </xs:element>\n+            <xs:element name=\"getAllKubernetesGroupsResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"InvalidArgumentException\" nillable=\"true\" type=\"ax224:InvalidArgumentException\"></xs:element>\n+                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax215:KubernetesGroup\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateClusterMonitor\">\n+            <xs:element name=\"getMasterForKubernetesGroup\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"clusterId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                        <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax25:Properties\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"kubernetesGroupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceInvalidServiceGroupException\">\n+            <xs:element name=\"getMasterForKubernetesGroupResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"InvalidServiceGroupException\" nillable=\"true\" type=\"ax217:InvalidServiceGroupException\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax215:KubernetesMaster\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"deployServiceGroup\">\n+            <xs:element name=\"getHostsForKubernetesGroup\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"servicegroup\" nillable=\"true\" type=\"ax228:ServiceGroup\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"kubernetesGroupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"serviceGroupExist\">\n+            <xs:element name=\"getHostsForKubernetesGroupResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"serviceName\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax215:KubernetesHost\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"serviceGroupExistResponse\">\n+            <xs:element name=\"AutoScalerServiceInvalidKubernetesGroupException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"InvalidKubernetesGroupException\" nillable=\"true\" type=\"ax212:InvalidKubernetesGroupException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceAutoScalerException\">\n+            <xs:element name=\"addKubernetesGroup\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"AutoScalerException\" nillable=\"true\" type=\"ax224:AutoScalerException\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"kubernetesGroup\" nillable=\"true\" type=\"ax215:KubernetesGroup\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"undeployServiceGroup\">\n+            <xs:element name=\"addKubernetesGroupResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"name\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceInvalidKubernetesMasterException\">\n+            <xs:element name=\"addKubernetesHost\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"InvalidKubernetesMasterException\" nillable=\"true\" type=\"ax217:InvalidKubernetesMasterException\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"groupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"kubernetesHost\" nillable=\"true\" type=\"ax215:KubernetesHost\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"AutoScalerServiceNonExistingKubernetesMasterException\">\n+            <xs:element name=\"addKubernetesHostResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"NonExistingKubernetesMasterException\" nillable=\"true\" type=\"ax217:NonExistingKubernetesMasterException\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateKubernetesMaster\">\n+            <xs:element name=\"removeKubernetesGroup\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"kubernetesMaster\" nillable=\"true\" type=\"ax216:KubernetesMaster\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"groupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateKubernetesMasterResponse\">\n+            <xs:element name=\"removeKubernetesGroupResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n                         <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateKubernetesHost\">\n+            <xs:element name=\"removeKubernetesHost\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"kubernetesHost\" nillable=\"true\" type=\"ax216:KubernetesHost\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"hostId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"updateKubernetesHostResponse\">\n+            <xs:element name=\"removeKubernetesHostResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n                         <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getKubernetesGroup\">\n+            <xs:element name=\"AutoScalerServiceInvalidArgumentException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"kubernetesGroupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"InvalidArgumentException\" nillable=\"true\" type=\"ax224:InvalidArgumentException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getKubernetesGroupResponse\">\n+            <xs:element name=\"updateClusterMonitor\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax216:KubernetesGroup\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"clusterId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax27:Properties\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getPartitionsOfGroup\">\n+            <xs:element name=\"AutoScalerServiceInvalidServiceGroupException\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"deploymentPolicyId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                        <xs:element minOccurs=\"0\" name=\"groupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"InvalidServiceGroupException\" nillable=\"true\" type=\"ax212:InvalidServiceGroupException\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getPartitionsOfGroupResponse\">\n+            <xs:element name=\"deployServiceGroup\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax24:Partition\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"servicegroup\" nillable=\"true\" type=\"ax228:ServiceGroup\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getAllDeploymentPolicies\">\n+            <xs:element name=\"serviceGroupExist\">\n                 <xs:complexType>\n-                    <xs:sequence></xs:sequence>\n+                    <xs:sequence>\n+                        <xs:element minOccurs=\"0\" name=\"serviceName\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getAllDeploymentPoliciesResponse\">\n+            <xs:element name=\"serviceGroupExistResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax28:DeploymentPolicy\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" type=\"xs:boolean\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getAllAutoScalingPolicy\">\n+            <xs:element name=\"AutoScalerServiceAutoScalerException\">\n                 <xs:complexType>\n-                    <xs:sequence></xs:sequence>\n+                    <xs:sequence>\n+                        <xs:element minOccurs=\"0\" name=\"AutoScalerException\" nillable=\"true\" type=\"ax224:AutoScalerException\"></xs:element>\n+                    </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n-            <xs:element name=\"getAllAutoScalingPolicyResponse\">\n+            <xs:element name=\"undeployServiceGroup\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax212:AutoscalePolicy\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"name\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n@@ -628,7 +642,7 @@\n             <xs:element name=\"getDeploymentPolicyResponse\">\n                 <xs:complexType>\n                     <xs:sequence>\n-                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax28:DeploymentPolicy\"></xs:element>\n+                        <xs:element minOccurs=\"0\" name=\"return\" nillable=\"true\" type=\"ax25:DeploymentPolicy\"></xs:element>\n                     </xs:sequence>\n                 </xs:complexType>\n             </xs:element>\n@@ -659,76 +673,76 @@\n                 </xs:complexType>\n             </xs:element>\n         </xs:schema>\n-        <xs:schema xmlns:ax215=\"http://common.stratos.apache.org/xsd\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://kubernetes.common.stratos.apache.org/xsd\">\n-            <xs:import namespace=\"http://common.stratos.apache.org/xsd\"></xs:import>\n-            <xs:complexType name=\"KubernetesGroup\">\n+        <xs:schema attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://kubernetes.exception.autoscaler.stratos.apache.org/xsd\">\n+            <xs:complexType name=\"NonExistingKubernetesGroupException\">\n                 <xs:sequence>\n-                    <xs:element minOccurs=\"0\" name=\"description\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"groupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"kubernetesHosts\" nillable=\"true\" type=\"ax214:KubernetesHost\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"kubernetesMaster\" nillable=\"true\" type=\"ax214:KubernetesMaster\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"portRange\" nillable=\"true\" type=\"ax214:PortRange\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax25:Properties\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-            <xs:complexType name=\"KubernetesHost\">\n+            <xs:complexType name=\"InvalidKubernetesMasterException\">\n                 <xs:sequence>\n-                    <xs:element minOccurs=\"0\" name=\"hostId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"hostIpAddress\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"hostname\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax25:Properties\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-            <xs:complexType name=\"KubernetesMaster\">\n-                <xs:complexContent>\n-                    <xs:extension base=\"ax214:KubernetesHost\">\n-                        <xs:sequence>\n-                            <xs:element minOccurs=\"0\" name=\"endpoint\" nillable=\"true\" type=\"xs:string\"></xs:element>\n-                        </xs:sequence>\n-                    </xs:extension>\n-                </xs:complexContent>\n-            </xs:complexType>\n-            <xs:complexType name=\"PortRange\">\n+            <xs:complexType name=\"NonExistingKubernetesMasterException\">\n                 <xs:sequence>\n-                    <xs:element minOccurs=\"0\" name=\"lower\" type=\"xs:int\"></xs:element>\n-                    <xs:element minOccurs=\"0\" name=\"upper\" type=\"xs:int\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-        </xs:schema>\n-        <xs:schema attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://kubernetes.exception.autoscaler.stratos.apache.org/xsd\">\n-            <xs:complexType name=\"NonExistingKubernetesGroupException\">\n+            <xs:complexType name=\"InvalidKubernetesHostException\">\n                 <xs:sequence>\n                     <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-            <xs:complexType name=\"InvalidKubernetesGroupException\">\n+            <xs:complexType name=\"NonExistingKubernetesHostException\">\n                 <xs:sequence>\n                     <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-            <xs:complexType name=\"InvalidKubernetesHostException\">\n+            <xs:complexType name=\"InvalidKubernetesGroupException\">\n                 <xs:sequence>\n                     <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-            <xs:complexType name=\"NonExistingKubernetesHostException\">\n+            <xs:complexType name=\"InvalidServiceGroupException\">\n                 <xs:sequence>\n                     <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-            <xs:complexType name=\"InvalidServiceGroupException\">\n+        </xs:schema>\n+        <xs:schema xmlns:ax214=\"http://common.stratos.apache.org/xsd\" attributeFormDefault=\"qualified\" elementFormDefault=\"qualified\" targetNamespace=\"http://kubernetes.common.stratos.apache.org/xsd\">\n+            <xs:import namespace=\"http://common.stratos.apache.org/xsd\"></xs:import>\n+            <xs:complexType name=\"KubernetesGroup\">\n                 <xs:sequence>\n-                    <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"description\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"groupId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    <xs:element maxOccurs=\"unbounded\" minOccurs=\"0\" name=\"kubernetesHosts\" nillable=\"true\" type=\"ax213:KubernetesHost\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"kubernetesMaster\" nillable=\"true\" type=\"ax213:KubernetesMaster\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"portRange\" nillable=\"true\" type=\"ax213:PortRange\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax27:Properties\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-            <xs:complexType name=\"InvalidKubernetesMasterException\">\n+            <xs:complexType name=\"KubernetesHost\">\n                 <xs:sequence>\n-                    <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"hostId\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"hostIpAddress\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"hostname\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"properties\" nillable=\"true\" type=\"ax27:Properties\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n-            <xs:complexType name=\"NonExistingKubernetesMasterException\">\n+            <xs:complexType name=\"KubernetesMaster\">\n+                <xs:complexContent>\n+                    <xs:extension base=\"ax213:KubernetesHost\">\n+                        <xs:sequence>\n+                            <xs:element minOccurs=\"0\" name=\"endpoint\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                        </xs:sequence>\n+                    </xs:extension>\n+                </xs:complexContent>\n+            </xs:complexType>\n+            <xs:complexType name=\"PortRange\">\n                 <xs:sequence>\n-                    <xs:element minOccurs=\"0\" name=\"message\" nillable=\"true\" type=\"xs:string\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"lower\" type=\"xs:int\"></xs:element>\n+                    <xs:element minOccurs=\"0\" name=\"upper\" type=\"xs:int\"></xs:element>\n                 </xs:sequence>\n             </xs:complexType>\n         </xs:schema>\n@@ -950,6 +964,12 @@\n     <wsdl:message name=\"getNetworkPartitionsResponse\">\n         <wsdl:part name=\"parameters\" element=\"ns:getNetworkPartitionsResponse\"></wsdl:part>\n     </wsdl:message>\n+    <wsdl:message name=\"undeployDeploymentPolicyRequest\">\n+        <wsdl:part name=\"parameters\" element=\"ns:undeployDeploymentPolicy\"></wsdl:part>\n+    </wsdl:message>\n+    <wsdl:message name=\"undeployDeploymentPolicyResponse\">\n+        <wsdl:part name=\"parameters\" element=\"ns:undeployDeploymentPolicyResponse\"></wsdl:part>\n+    </wsdl:message>\n     <wsdl:portType name=\"AutoScalerServicePortType\">\n         <wsdl:operation name=\"updateKubernetesMaster\">\n             <wsdl:input message=\"ns:updateKubernetesMasterRequest\" wsaw:Action=\"urn:updateKubernetesMaster\"></wsdl:input>\n@@ -1092,6 +1112,10 @@\n             <wsdl:input message=\"ns:getNetworkPartitionsRequest\" wsaw:Action=\"urn:getNetworkPartitions\"></wsdl:input>\n             <wsdl:output message=\"ns:getNetworkPartitionsResponse\" wsaw:Action=\"urn:getNetworkPartitionsResponse\"></wsdl:output>\n         </wsdl:operation>\n+        <wsdl:operation name=\"undeployDeploymentPolicy\">\n+            <wsdl:input message=\"ns:undeployDeploymentPolicyRequest\" wsaw:Action=\"urn:undeployDeploymentPolicy\"></wsdl:input>\n+            <wsdl:output message=\"ns:undeployDeploymentPolicyResponse\" wsaw:Action=\"urn:undeployDeploymentPolicyResponse\"></wsdl:output>\n+        </wsdl:operation>\n     </wsdl:portType>\n     <wsdl:binding name=\"AutoScalerServiceSoap11Binding\" type=\"ns:AutoScalerServicePortType\">\n         <soap:binding transport=\"http://schemas.xmlsoap.org/soap/http\" style=\"document\"></soap:binding>\n@@ -1416,6 +1440,15 @@\n                 <soap:fault use=\"literal\" name=\"AutoScalerServiceNonExistingKubernetesGroupException\"></soap:fault>\n             </wsdl:fault>\n         </wsdl:operation>\n+        <wsdl:operation name=\"undeployDeploymentPolicy\">\n+            <soap:operation soapAction=\"urn:undeployDeploymentPolicy\" style=\"document\"></soap:operation>\n+            <wsdl:input>\n+                <soap:body use=\"literal\"></soap:body>\n+            </wsdl:input>\n+            <wsdl:output>\n+                <soap:body use=\"literal\"></soap:body>\n+            </wsdl:output>\n+        </wsdl:operation>\n         <wsdl:operation name=\"getNetworkPartitions\">\n             <soap:operation soapAction=\"urn:getNetworkPartitions\" style=\"document\"></soap:operation>\n             <wsdl:input>\n@@ -1749,6 +1782,15 @@\n                 <soap12:fault use=\"literal\" name=\"AutoScalerServiceNonExistingKubernetesGroupException\"></soap12:fault>\n             </wsdl:fault>\n         </wsdl:operation>\n+        <wsdl:operation name=\"undeployDeploymentPolicy\">\n+            <soap12:operation soapAction=\"urn:undeployDeploymentPolicy\" style=\"document\"></soap12:operation>\n+            <wsdl:input>\n+                <soap12:body use=\"literal\"></soap12:body>\n+            </wsdl:input>\n+            <wsdl:output>\n+                <soap12:body use=\"literal\"></soap12:body>\n+            </wsdl:output>\n+        </wsdl:operation>\n         <wsdl:operation name=\"getNetworkPartitions\">\n             <soap12:operation soapAction=\"urn:getNetworkPartitions\" style=\"document\"></soap12:operation>\n             <wsdl:input>\n@@ -2016,6 +2058,15 @@\n                 <mime:content type=\"text/xml\" part=\"parameters\"></mime:content>\n             </wsdl:output>\n         </wsdl:operation>\n+        <wsdl:operation name=\"undeployDeploymentPolicy\">\n+            <http:operation location=\"undeployDeploymentPolicy\"></http:operation>\n+            <wsdl:input>\n+                <mime:content type=\"text/xml\" part=\"parameters\"></mime:content>\n+            </wsdl:input>\n+            <wsdl:output>\n+                <mime:content type=\"text/xml\" part=\"parameters\"></mime:content>\n+            </wsdl:output>\n+        </wsdl:operation>\n         <wsdl:operation name=\"getNetworkPartitions\">\n             <http:operation location=\"getNetworkPartitions\"></http:operation>\n             <wsdl:input>\n@@ -2028,22 +2079,22 @@\n     </wsdl:binding>\n     <wsdl:service name=\"AutoScalerService\">\n         <wsdl:port name=\"AutoScalerServiceHttpSoap11Endpoint\" binding=\"ns:AutoScalerServiceSoap11Binding\">\n-            <soap:address location=\"http://172.17.42.1:9763/services/AutoScalerService.AutoScalerServiceHttpSoap11Endpoint/\"></soap:address>\n+            <soap:address location=\"http://192.168.30.23:9763/services/AutoScalerService.AutoScalerServiceHttpSoap11Endpoint/\"></soap:address>\n         </wsdl:port>\n         <wsdl:port name=\"AutoScalerServiceHttpsSoap11Endpoint\" binding=\"ns:AutoScalerServiceSoap11Binding\">\n-            <soap:address location=\"https://172.17.42.1:9443/services/AutoScalerService.AutoScalerServiceHttpsSoap11Endpoint/\"></soap:address>\n+            <soap:address location=\"https://192.168.30.23:9443/services/AutoScalerService.AutoScalerServiceHttpsSoap11Endpoint/\"></soap:address>\n         </wsdl:port>\n         <wsdl:port name=\"AutoScalerServiceHttpsSoap12Endpoint\" binding=\"ns:AutoScalerServiceSoap12Binding\">\n-            <soap12:address location=\"https://172.17.42.1:9443/services/AutoScalerService.AutoScalerServiceHttpsSoap12Endpoint/\"></soap12:address>\n+            <soap12:address location=\"https://192.168.30.23:9443/services/AutoScalerService.AutoScalerServiceHttpsSoap12Endpoint/\"></soap12:address>\n         </wsdl:port>\n         <wsdl:port name=\"AutoScalerServiceHttpSoap12Endpoint\" binding=\"ns:AutoScalerServiceSoap12Binding\">\n-            <soap12:address location=\"http://172.17.42.1:9763/services/AutoScalerService.AutoScalerServiceHttpSoap12Endpoint/\"></soap12:address>\n+            <soap12:address location=\"http://192.168.30.23:9763/services/AutoScalerService.AutoScalerServiceHttpSoap12Endpoint/\"></soap12:address>\n         </wsdl:port>\n         <wsdl:port name=\"AutoScalerServiceHttpEndpoint\" binding=\"ns:AutoScalerServiceHttpBinding\">\n-            <http:address location=\"http://172.17.42.1:9763/services/AutoScalerService.AutoScalerServiceHttpEndpoint/\"></http:address>\n+            <http:address location=\"http://192.168.30.23:9763/services/AutoScalerService.AutoScalerServiceHttpEndpoint/\"></http:address>\n         </wsdl:port>\n         <wsdl:port name=\"AutoScalerServiceHttpsEndpoint\" binding=\"ns:AutoScalerServiceHttpBinding\">\n-            <http:address location=\"https://172.17.42.1:9443/services/AutoScalerService.AutoScalerServiceHttpsEndpoint/\"></http:address>\n+            <http:address location=\"https://192.168.30.23:9443/services/AutoScalerService.AutoScalerServiceHttpsEndpoint/\"></http:address>\n         </wsdl:port>\n     </wsdl:service>\n </wsdl:definitions>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/service-stubs/org.apache.stratos.autoscaler.service.stub/src/main/resources/AutoScalerService.wsdl",
                "sha": "36b0e1facc3d768b71d811d8d65d59a1d11a091c",
                "status": "modified"
            },
            {
                "additions": 931,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/service-stubs/org.apache.stratos.cloud.controller.service.stub/src/main/resources/CloudControllerService.wsdl",
                "changes": 1805,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/service-stubs/org.apache.stratos.cloud.controller.service.stub/src/main/resources/CloudControllerService.wsdl?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 874,
                "filename": "service-stubs/org.apache.stratos.cloud.controller.service.stub/src/main/resources/CloudControllerService.wsdl",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/service-stubs/org.apache.stratos.cloud.controller.service.stub/src/main/resources/CloudControllerService.wsdl",
                "sha": "4213cbecd5f64572806490a3f378abf12c98cc1b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/tools/stratos-installer/conf/setup.conf",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/tools/stratos-installer/conf/setup.conf?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "tools/stratos-installer/conf/setup.conf",
                "patch": "@@ -87,6 +87,8 @@ export openstack_credential=\"password\" # Openstack login password\n export openstack_jclouds_endpoint=\"http://hostname:5000/v2.0\"\n export openstack_keypair_name=\"\"\n export openstack_security_groups=\"\"\n+# default to nova. If you have neutron networking environment, set it to neutron\n+export openstack_networking_provider=\"nova\"\n \n # vCloud\n export vcloud_provider_enabled=false",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/tools/stratos-installer/conf/setup.conf",
                "sha": "acdc39bf1db8c635cf80252a8a86db0165f2e6f3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/tools/stratos-installer/config/all/repository/conf/cloud-controller.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/tools/stratos-installer/config/all/repository/conf/cloud-controller.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "tools/stratos-installer/config/all/repository/conf/cloud-controller.xml",
                "patch": "@@ -68,6 +68,7 @@\n                         <property name=\"jclouds.endpoint\" value=\"OPENSTACK_ENDPOINT\" />\n             \t\t<property name=\"jclouds.openstack-nova.auto-create-floating-ips\" value=\"false\"/>\n                         <property name=\"jclouds.api-version\" value=\"2.0/\" />\n+\t\t\t<property name=\"openstack.networking.provider\" value=\"OPENSTACK_NETWORKING_PROVIDER\" />\n                         <property name=\"X\" value=\"x\" />\n                         <property name=\"Y\" value=\"y\" />\n                         <property name=\"securityGroups\" value=\"OPENSTACK_SECURITY_GROUPS\"/>",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/tools/stratos-installer/config/all/repository/conf/cloud-controller.xml",
                "sha": "ee8ffe8f08ea2a59a1a7cbff1d1fd175089d971f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/tools/stratos-installer/config/cc/repository/conf/cloud-controller.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/tools/stratos-installer/config/cc/repository/conf/cloud-controller.xml?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "tools/stratos-installer/config/cc/repository/conf/cloud-controller.xml",
                "patch": "@@ -69,6 +69,7 @@\n                         <property name=\"jclouds.endpoint\" value=\"OPENSTACK_ENDPOINT\" />\n             \t\t<property name=\"jclouds.openstack-nova.auto-create-floating-ips\" value=\"false\"/>\n                         <property name=\"jclouds.api-version\" value=\"2.0/\" />\n+\t\t\t<property name=\"openstack.networking.provider\" value=\"OPENSTACK_NETWORKING_PROVIDER\" />\n                         <property name=\"X\" value=\"x\" />\n                         <property name=\"Y\" value=\"y\" />\n                         <property name=\"securityGroups\" value=\"OPENSTACK_SECURITY_GROUPS\"/>",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/tools/stratos-installer/config/cc/repository/conf/cloud-controller.xml",
                "sha": "73369f1268666ef26320254179bc233d6d76d66c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/attic-stratos/blob/f58c585989a5b19df0e026d43bdd29660a56c118/tools/stratos-installer/openstack.sh",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/attic-stratos/contents/tools/stratos-installer/openstack.sh?ref=f58c585989a5b19df0e026d43bdd29660a56c118",
                "deletions": 0,
                "filename": "tools/stratos-installer/openstack.sh",
                "patch": "@@ -54,6 +54,7 @@ ${SED} -i \"s@OPENSTACK_PROVIDER_START@@g\" repository/conf/cloud-controller.xml\n ${SED} -i \"s@OPENSTACK_IDENTITY@$openstack_identity@g\"  repository/conf/cloud-controller.xml\n ${SED} -i \"s@OPENSTACK_CREDENTIAL@$openstack_credential@g\"  repository/conf/cloud-controller.xml\n ${SED} -i \"s@OPENSTACK_ENDPOINT@$openstack_jclouds_endpoint@g\"  repository/conf/cloud-controller.xml\n+${SED} -i \"s@OPENSTACK_NETWORKING_PROVIDER@$openstack_networking_provider@g\"  repository/conf/cloud-controller.xml\n ${SED} -i \"s@OPENSTACK_PROVIDER_END@@g\"  repository/conf/cloud-controller.xml\n ${SED} -i \"s@OPENSTACK_SECURITY_GROUPS@$openstack_security_groups@g\" repository/conf/cloud-controller.xml\n ${SED} -i \"s@OPENSTACK_KEYPAIR@$openstack_keypair_name@g\" repository/conf/cloud-controller.xml",
                "raw_url": "https://github.com/apache/attic-stratos/raw/f58c585989a5b19df0e026d43bdd29660a56c118/tools/stratos-installer/openstack.sh",
                "sha": "5ac36c18ccd43cd956a39187053fc2e6cc7bd65b",
                "status": "modified"
            }
        ],
        "message": "Fixing merge conflicts and NPE s",
        "parent": "https://github.com/apache/attic-stratos/commit/00a3e63397840f1d21c768bd763d3e8ec795d3cb",
        "patched_files": [
            "AverageInFlightRequestsFinder.xml",
            "AutoScalerService.wsdl",
            "ApplicationBuilder.java",
            "ClusterContextFactory.java",
            "CloudControllerServiceImpl.java",
            "AutoscalerUtil.java",
            "PojoConverter.java",
            "RuleTasksDelegator.java",
            "TenantEventReceiver.java",
            "TopologyBuilder.java",
            "TopologyEventPublisher.java",
            "InstanceNotificationPublisher.java",
            "KubernetesClusterMonitor.java",
            "AutoScalerServiceInterface.java",
            "DependencyOrder.java",
            "AlgorithmContext.java",
            "ApplicationInactivatedMessageProcessor.java",
            "VMLbClusterMonitor.java",
            "ApplicationTerminatedMessageProcessor.java",
            "ADCManagementServerComponent.java",
            "InstanceStatusTopicReceiver.java",
            "container-mincheck.drl",
            "InstanceNotifierEventReceiver.java",
            "CloudControllerContext.java",
            "cartridgeagentconstants.py",
            "LoadBalancerServiceComponent.java",
            "ClusterLevelPartitionContext.java",
            "CEPTopologyEventReceiver.java",
            "ApplicationsEventPublisher.java",
            "StatusChecker.java",
            "NetworkInterfaceBean.java",
            "ScalingDependentList.java",
            "ClusterStatusTopicReceiver.java",
            "StratosCommonServiceComponent.java",
            "AutoscalerServerComponent.java",
            "PolicyManager.java",
            "StratosThreadPool.java",
            "CloudControllerService.java",
            "AlgorithmContextMap.java",
            "StratosApiV41.java",
            "ApplicationInstanceTerminatedEvent.java",
            "GroupStatusTerminatedProcessor.java",
            "dependent-scaling.drl",
            "AutoscalerTopologyEventReceiver.java",
            "HealthStatEventReceiver.java",
            "Cluster.java",
            "ClusterInstanceCreatedMessageProcessor.java",
            "MonitorFactory.java",
            "FloatingNetworkBean.java",
            "NetworkInterface.java",
            "scaling.drl",
            "VMClusterMonitor.java",
            "ClusterLevelNetworkPartitionContext.java",
            "StratosConstants.java",
            "ClusterInstanceContext.java",
            "InstanceCleanupClusterEvent.java",
            "autoscaler.xml",
            "terminateall.drl",
            "cloud-controller.xml",
            "Monitor.java",
            "AbstractClusterMonitor.java",
            "ApplicationTopicReceiver.java",
            "StratosApiV41Utils.java",
            "ServiceReferenceHolder.java",
            "FloatingNetwork.java",
            "ClusterInstanceCreatedEvent.java",
            "LoadBalancerTenantEventReceiver.java",
            "DependencyBuilder.java",
            "ApplicationTerminatingMessageProcessor.java",
            "KubernetesServiceClusterMonitor.java",
            "DeploymentPolicy.java",
            "container-obsoletecheck.drl",
            "Constants.java",
            "InstanceStatusEventReceiver.java",
            "bin.xml",
            "ApplicationsEventReceiver.java",
            "FaultHandlingWindowProcessor.java",
            "ApplicationInstanceInactivatedEvent.java",
            "StratosManagerTopologyEventReceiver.java",
            "container-scaling.drl",
            "TopologyEventMessageDelegator.java",
            "cartridgeagentconfiguration.py",
            "AutoscalerRuleEvaluator.java",
            "VMClusterContext.java",
            "LoadBalancerTopologyEventReceiver.java",
            "healthstats.py",
            "HazelcastDistributedObjectProvider.java",
            "obsoletecheck.drl",
            "AutoscalerContext.java",
            "StratosApiV40Utils.java",
            "MockContext.java",
            "ParentComponentMonitor.java",
            "CloudControllerServiceComponent.java",
            "HazelcastDistributedListProvider.java",
            "AutoscalerServiceClient.java",
            "CloudControllerServiceClient.java",
            "CloudControllerClient.java",
            "ClusterStatusEventReceiver.java",
            "ClusterStatusTerminatedProcessor.java",
            "openstack.sh",
            "GroupStatusTerminatingProcessor.java",
            "ApplicationInstanceTerminatingEvent.java",
            "ConfUtil.java",
            "FloatingNetworks.java",
            "CartridgeAgent.java",
            "pom.xml",
            "mincheck.drl",
            "stratos-config.xml",
            "DefaultApplicationParser.java",
            "ApplicationMonitor.java",
            "LoadBalancerExtension.java",
            "CloudControllerService.wsdl",
            "AutoScalerServiceImpl.java",
            "AutoscalerHealthStatEventReceiver.java",
            "GroupMonitor.java",
            "ListEntryListener.java",
            "TopologyEventReceiver.java",
            "DistributedObjectProvider.java",
            "setup.conf",
            "Main.java",
            "terminatedependency.drl"
        ],
        "repo": "attic-stratos",
        "unit_tests": [
            "CloudControllerContextTest.java",
            "TestRulesPackaged.java",
            "CommonTest.java",
            "DistributedObjectProviderTest.java"
        ]
    }
}