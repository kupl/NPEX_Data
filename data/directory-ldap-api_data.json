[
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/70588acbe8aac80edc7d012d944b0be80cb25ee1",
        "file": [
            {
                "patch": "@@ -686,7 +686,11 @@ public boolean connect() throws LdapException\n                 \n                     if ( !isSecured )\n                     {\n-                        Throwable cause = ( Throwable ) connectionFuture.getSession().getAttribute( EXCEPTION_KEY );\n+                        Throwable cause = connectionFuture.getException();\n+                        if ( cause == null && connectionFuture.getSession() != null )\n+                        {\n+                            cause = ( Throwable ) connectionFuture.getSession().getAttribute( EXCEPTION_KEY );\n+                        }\n                         throw new LdapTlsHandshakeException( I18n.err( I18n.ERR_04120_TLS_HANDSHAKE_ERROR ), cause );\n                     }\n                 }",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/70588acbe8aac80edc7d012d944b0be80cb25ee1/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "95a466d15298dd54dbddbbb557101f2f2d89bbba",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/70588acbe8aac80edc7d012d944b0be80cb25ee1/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=70588acbe8aac80edc7d012d944b0be80cb25ee1"
            }
        ],
        "bug_id": "directory-ldap-api_1",
        "parent": "https://github.com/apache/directory-ldap-api/commit/2f74af7cb06317f5818106cf58b1521cfbccc830",
        "message": "DIRAPI-339: Fix NullPointerException",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/104adb97d3e474d269a2f94c1509b4cc71ef5a35",
        "file": [
            {
                "patch": "@@ -427,7 +427,10 @@ protected void processDSML( OutputStream outStream ) throws IOException\n         }\n \n         // We can now write the tag, as we don't have an error\n-        respWriter.write( batchResponseTag );\n+        if ( respWriter != null )\n+        {\n+            respWriter.write( batchResponseTag );\n+        }\n \n         // (Request == null when there's no more request to process)\n         while ( request != null )",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/104adb97d3e474d269a2f94c1509b4cc71ef5a35/dsml/engine/src/main/java/org/apache/directory/api/dsmlv2/engine/Dsmlv2Engine.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "365fe291ea880e3d1515e5daa448f1307959bcf8",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/104adb97d3e474d269a2f94c1509b4cc71ef5a35/dsml/engine/src/main/java/org/apache/directory/api/dsmlv2/engine/Dsmlv2Engine.java",
                "filename": "dsml/engine/src/main/java/org/apache/directory/api/dsmlv2/engine/Dsmlv2Engine.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/engine/src/main/java/org/apache/directory/api/dsmlv2/engine/Dsmlv2Engine.java?ref=104adb97d3e474d269a2f94c1509b4cc71ef5a35"
            }
        ],
        "bug_id": "directory-ldap-api_2",
        "parent": "https://github.com/apache/directory-ldap-api/commit/821565d38784c688a60f4e340704592a33cde015",
        "message": "Applied fix for DIRAPI-300 (without the potential NPE ;-)",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/c26c197059527fcbce14941c160df6ed3b78f7b1",
        "file": [
            {
                "patch": "@@ -495,7 +495,7 @@ private Value createBinaryValue( AttributeType attributeType, byte[] value )\n     {\n         Value value = get();\n \n-        if ( !isHR && ( value != null ) )\n+        if ( !isHumanReadable() && ( value != null ) )\n         {\n             return value.getBytes();\n         }\n@@ -514,7 +514,7 @@ public String getString() throws LdapInvalidAttributeValueException\n     {\n         Value value = get();\n \n-        if ( isHR && ( value != null ) )\n+        if ( isHumanReadable() && ( value != null ) )\n         {\n             return value.getValue();\n         }",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c26c197059527fcbce14941c160df6ed3b78f7b1/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultAttribute.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "b1b0557f6f68eb6b07b4961439e2f39444773db7",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c26c197059527fcbce14941c160df6ed3b78f7b1/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultAttribute.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultAttribute.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultAttribute.java?ref=c26c197059527fcbce14941c160df6ed3b78f7b1"
            },
            {
                "patch": "@@ -1082,6 +1082,11 @@ else if ( obj instanceof Dn )\n         // Shortcut if the Dn is normalized\n         if ( isSchemaAware() )\n         {\n+            if ( normName == null )\n+            {\n+                // equals() should never NPE\n+                return other.normName == null;\n+            }\n             return normName.equals( other.normName );\n         }\n         ",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c26c197059527fcbce14941c160df6ed3b78f7b1/ldap/model/src/main/java/org/apache/directory/api/ldap/model/name/Dn.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "c5a0f8a551be872348a27bd2731f053510c1cde8",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c26c197059527fcbce14941c160df6ed3b78f7b1/ldap/model/src/main/java/org/apache/directory/api/ldap/model/name/Dn.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/name/Dn.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/name/Dn.java?ref=c26c197059527fcbce14941c160df6ed3b78f7b1"
            }
        ],
        "bug_id": "directory-ldap-api_3",
        "parent": "https://github.com/apache/directory-ldap-api/commit/73d8c2dc10240f7035fc20ba7d99508990b78c8f",
        "message": "A couple of NPE fixes",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/3c6a7652e171772dbc0c55042ad10260002002b9",
        "file": [
            {
                "patch": "@@ -32,6 +32,7 @@\n import org.apache.directory.api.ldap.model.message.ResultCodeEnum;\n import org.apache.directory.api.ldap.model.schema.AttributeType;\n import org.apache.directory.api.ldap.model.schema.LdapComparator;\n+import org.apache.directory.api.ldap.model.schema.LdapSyntax;\n import org.apache.directory.api.ldap.model.schema.MatchingRule;\n import org.apache.directory.api.ldap.model.schema.Normalizer;\n import org.apache.directory.api.ldap.model.schema.SyntaxChecker;\n@@ -269,7 +270,9 @@ public Value( AttributeType attributeType, String upValue ) throws LdapInvalidAt\n         if ( !attributeType.isRelaxed() )\n         {\n             // Check the value\n-            if ( attributeType.getSyntax().getSyntaxChecker() != null )\n+            LdapSyntax syntax = attributeType.getSyntax();\n+            \n+            if ( ( syntax != null ) && ( syntax.getSyntaxChecker() != null ) ) \n             {\n                 if ( !attributeType.getSyntax().getSyntaxChecker().isValidSyntax( upValue ) )\n                 {",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3c6a7652e171772dbc0c55042ad10260002002b9/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "7bb5bb4bece49e51716a899d2dc66a5b416dd0ea",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3c6a7652e171772dbc0c55042ad10260002002b9/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java?ref=3c6a7652e171772dbc0c55042ad10260002002b9"
            },
            {
                "patch": "@@ -38,6 +38,7 @@\n \n import org.apache.directory.api.ldap.model.exception.LdapException;\n import org.apache.directory.api.ldap.model.exception.LdapInvalidAttributeValueException;\n+import org.apache.directory.api.ldap.model.schema.AttributeType;\n import org.apache.directory.api.util.Strings;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -1529,4 +1530,15 @@ public void testSerializeAttributeBinaryValue() throws LdapException, IOExceptio\n         assertTrue( dcaSer.contains( password ) );\n         assertFalse( dcaSer.isHumanReadable() );\n     }\n+    \n+    \n+    /**\n+     * test that we properly throw an exception, and not a NPE, when no AttributeType is provided.\n+     */\n+    @Test( expected=IllegalArgumentException.class )\n+    public void testNullAT() throws LdapInvalidAttributeValueException\n+    {\n+        AttributeType attributeType = new AttributeType(\"mail\");\n+        Value stringValue = new Value(attributeType, \"test@test.com\");\n+    }\n }",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3c6a7652e171772dbc0c55042ad10260002002b9/ldap/model/src/test/java/org/apache/directory/api/ldap/model/entry/AttributeTest.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "5263347ca7f35e035afc7ff1feb16741032386eb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3c6a7652e171772dbc0c55042ad10260002002b9/ldap/model/src/test/java/org/apache/directory/api/ldap/model/entry/AttributeTest.java",
                "filename": "ldap/model/src/test/java/org/apache/directory/api/ldap/model/entry/AttributeTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/test/java/org/apache/directory/api/ldap/model/entry/AttributeTest.java?ref=3c6a7652e171772dbc0c55042ad10260002002b9"
            }
        ],
        "bug_id": "directory-ldap-api_4",
        "parent": "https://github.com/apache/directory-ldap-api/commit/1aea113c1b34a39c4dad2a71d4bb38074766bb66",
        "message": "Fix for DIRAPI-302. We now throw an IllegalArgumentException instead of\na NPE.",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/aa91a9034314b4b54919a3bb1942ff7600e46377",
        "file": [
            {
                "patch": "@@ -1994,9 +1994,9 @@ private boolean isNoticeOfDisconnect( Message message )\n     {\n         if ( message instanceof ExtendedResponse )\n         {\n-            ExtendedResponse response = ( ExtendedResponse ) message;\n+            String responseName = ( ( ExtendedResponse ) message ).getResponseName();\n \n-            if ( response.getResponseName().equals( NoticeOfDisconnect.EXTENSION_OID ) )\n+            if ( NoticeOfDisconnect.EXTENSION_OID.equals( responseName ) )\n             {\n                 return true;\n             }",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/aa91a9034314b4b54919a3bb1942ff7600e46377/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "ee765c72ca7dcac3acc4cbf4b909085e84155c48",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/aa91a9034314b4b54919a3bb1942ff7600e46377/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=aa91a9034314b4b54919a3bb1942ff7600e46377"
            }
        ],
        "bug_id": "directory-ldap-api_5",
        "parent": "https://github.com/apache/directory-ldap-api/commit/01ab748e62534821c2bd842aae907a576a15b2a9",
        "message": "Fixed a potential NPE (DIRAPI-268)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-value@1796564 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/e9debf9ed42e3b9a1e603e3b73dd439602001062",
        "file": [
            {
                "patch": "@@ -1998,9 +1998,9 @@ private boolean isNoticeOfDisconnect( Message message )\n     {\n         if ( message instanceof ExtendedResponse )\n         {\n-            ExtendedResponse response = ( ExtendedResponse ) message;\n+            String responseName = ( ( ExtendedResponse ) message ).getResponseName();\n \n-            if ( response.getResponseName().equals( NoticeOfDisconnect.EXTENSION_OID ) )\n+            if ( NoticeOfDisconnect.EXTENSION_OID.equals( responseName ) )\n             {\n                 return true;\n             }",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e9debf9ed42e3b9a1e603e3b73dd439602001062/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "d12f44b50da98d619766987ccf42702267c1a8f1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e9debf9ed42e3b9a1e603e3b73dd439602001062/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=e9debf9ed42e3b9a1e603e3b73dd439602001062"
            }
        ],
        "bug_id": "directory-ldap-api_6",
        "parent": "https://github.com/apache/directory-ldap-api/commit/234829a227364252a9319e24998e1998992fc1c9",
        "message": "Fixed a potential NPE (DIRAPI-268)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1796563 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/3d0191ce21588c865c57fb9baee37d4842875772",
        "file": [
            {
                "patch": "@@ -42,7 +42,7 @@ public final void setClosureMonitor( ClosureMonitor monitor )\n     {\n         if ( monitor == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_02001 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_02001 ) );\n         }\n         \n         this.monitor = monitor;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/AbstractCursor.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "16ec2f1eed9becbd604bd7f1ecc1627bf4449e9c",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/AbstractCursor.java",
                "filename": "cursor/src/main/java/org/apache/directory/shared/ldap/cursor/AbstractCursor.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/AbstractCursor.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -40,8 +40,9 @@ public final void setClosureMonitor( ClosureMonitor monitor )\n     {\n         if ( monitor == null )\n         {\n-            throw new NullPointerException( \"monitor\" );\n+            throw new IllegalArgumentException( \"monitor\" );\n         }\n+        \n         this.monitor = monitor;\n     }\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/AbstractTupleCursor.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "8b6797e92563156252d8adcd2fd16dd904958f0a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/AbstractTupleCursor.java",
                "filename": "cursor/src/main/java/org/apache/directory/shared/ldap/cursor/AbstractTupleCursor.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/AbstractTupleCursor.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -118,7 +118,7 @@ private static void generate( Schema schema ) throws Exception\n         if ( schema == null )\n         {\n             log.error( I18n.err( I18n.ERR_06005 ) );\n-            throw new NullPointerException( I18n.err( I18n.ERR_06006 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_06006 ) );\n         }\n \n         InputStream in = schema.getInput();",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap-convert/src/main/java/org/apache/directory/shared/converter/schema/SchemaToLdif.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "a699ca3630f190742b8f5e8381ef4e6d7dd9e94c",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap-convert/src/main/java/org/apache/directory/shared/converter/schema/SchemaToLdif.java",
                "filename": "ldap-convert/src/main/java/org/apache/directory/shared/converter/schema/SchemaToLdif.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-convert/src/main/java/org/apache/directory/shared/converter/schema/SchemaToLdif.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -25,9 +25,11 @@\n import java.util.List;\n import java.util.Set;\n \n+import javax.naming.NamingException;\n+\n import org.apache.directory.shared.i18n.I18n;\n-import org.apache.directory.shared.ldap.entry.DefaultModification;\n import org.apache.directory.shared.ldap.entry.DefaultEntryAttribute;\n+import org.apache.directory.shared.ldap.entry.DefaultModification;\n import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n import org.apache.directory.shared.ldap.entry.Modification;\n@@ -256,12 +258,12 @@ public static LdifEntry reverseMove( DN newSuperiorDn, DN modifiedDn ) throws Ld\n \n         if ( newSuperiorDn == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_12074 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_12074 ) );\n         }\n \n         if ( modifiedDn == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_12075 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_12075 ) );\n         }\n \n         if ( modifiedDn.size() == 0 )\n@@ -433,12 +435,12 @@ private static LdifEntry generateReverted( DN newSuperior, RDN newRdn, DN newDn,\n \n         if ( newRdn == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_12077 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_12077 ) );\n         }\n \n         if ( parentDn == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_12078 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_12078 ) );\n         }\n \n         if ( parentDn.size() == 0 )",
                "additions": 7,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifRevertor.java",
                "status": "modified",
                "changes": 12,
                "deletions": 5,
                "sha": "785513d2a40d9ca8cd0e13a0f139566f086b0894",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifRevertor.java",
                "filename": "ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifRevertor.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifRevertor.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -101,7 +101,7 @@ private String getOid( Entry entry, String objectType ) throws LdapInvalidAttrib\n         {\n             String msg = I18n.err( I18n.ERR_10005, objectType, MetaSchemaConstants.M_OID_AT );\n             LOG.warn( msg );\n-            throw new NullPointerException( msg );\n+            throw new IllegalArgumentException( msg );\n         }\n \n         String oid = mOid.getString();\n@@ -130,7 +130,7 @@ private String getOid( SchemaObject description, String objectType ) throws Ldap\n         {\n             String msg = I18n.err( I18n.ERR_10005, objectType, MetaSchemaConstants.M_OID_AT );\n             LOG.warn( msg );\n-            throw new NullPointerException( msg );\n+            throw new IllegalArgumentException( msg );\n         }\n \n         if ( !OID.isOID( oid ) )\n@@ -153,7 +153,7 @@ private void checkEntry( Entry entry, String schemaEntity )\n         {\n             String msg = I18n.err( I18n.ERR_10007, schemaEntity );\n             LOG.warn( msg );\n-            throw new NullPointerException( msg );\n+            throw new IllegalArgumentException( msg );\n         }\n     }\n \n@@ -167,7 +167,7 @@ private void checkDescription( SchemaObject description, String schemaEntity )\n         {\n             String msg = I18n.err( I18n.ERR_10008, schemaEntity );\n             LOG.warn( msg );\n-            throw new NullPointerException( msg );\n+            throw new IllegalArgumentException( msg );\n         }\n     }\n \n@@ -993,7 +993,7 @@ private String getFqcn( Entry entry, String objectType ) throws LdapInvalidAttri\n         {\n             String msg = I18n.err( I18n.ERR_10028, objectType, MetaSchemaConstants.M_FQCN_AT );\n             LOG.warn( msg );\n-            throw new NullPointerException( msg );\n+            throw new IllegalArgumentException( msg );\n         }\n \n         return mFqcn.getString();\n@@ -1012,30 +1012,13 @@ private String getFqcn( LoadableSchemaObject description, String objectType )\n         {\n             String msg = I18n.err( I18n.ERR_10028, objectType, MetaSchemaConstants.M_FQCN_AT );\n             LOG.warn( msg );\n-            throw new NullPointerException( msg );\n+            throw new IllegalArgumentException( msg );\n         }\n \n         return mFqcn;\n     }\n \n-\n-    /*\n-     * Process the ByteCode attribute\n-     */\n-    //    private EntryAttribute getByteCode( Entry entry, String objectType )\n-    //    {\n-    //        EntryAttribute byteCode = entry.get( MetaSchemaConstants.M_BYTECODE_AT );\n-    //\n-    //        if ( byteCode == null )\n-    //        {\n-    //            String msg = I18n.err( I18n.ERR_10028, objectType, MetaSchemaConstants.M_BYTECODE_AT );\n-    //            LOG.warn( msg );\n-    //            throw new NullPointerException( msg );\n-    //        }\n-    //\n-    //        return byteCode;\n-    //    }\n-\n+    \n     /**\n      * Process the ByteCode attribute\n      */\n@@ -1047,7 +1030,7 @@ private EntryAttribute getByteCode( LoadableSchemaObject description, String obj\n         {\n             String msg = I18n.err( I18n.ERR_10028, objectType, MetaSchemaConstants.M_BYTECODE_AT );\n             LOG.warn( msg );\n-            throw new NullPointerException( msg );\n+            throw new IllegalArgumentException( msg );\n         }\n \n         byte[] bytecode = Base64.decode( byteCodeString.toCharArray() );",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap-schema-loader/src/main/java/org/apache/directory/shared/ldap/schema/loader/ldif/SchemaEntityFactory.java",
                "status": "modified",
                "changes": 33,
                "deletions": 25,
                "sha": "2a5e5a8b70ae1836a77037657c539b847acf6c92",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap-schema-loader/src/main/java/org/apache/directory/shared/ldap/schema/loader/ldif/SchemaEntityFactory.java",
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/ldap/schema/loader/ldif/SchemaEntityFactory.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/ldap/schema/loader/ldif/SchemaEntityFactory.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -61,15 +61,17 @@ protected ACIItem(String identificationTag, int precedence, AuthenticationLevel\n     {\n         if ( identificationTag == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_04001 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_04001 ) );\n         }\n+        \n         if ( precedence < 0 || precedence > 255 )\n         {\n             throw new IllegalArgumentException( I18n.err( I18n.ERR_04002, precedence ) );\n         }\n+        \n         if ( authenticationLevel == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_04003 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_04003 ) );\n         }\n \n         this.identificationTag = identificationTag;",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ACIItem.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "c94a1f2ec4c8bdc7f3654c942c29815e2a90f218",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ACIItem.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/aci/ACIItem.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ACIItem.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -81,7 +81,7 @@ public ACITuple(\n     {\n         if ( authenticationLevel == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_04003) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_04003) );\n         }\n \n         if ( precedence < 0 || precedence > 255 )",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ACITuple.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "46736976e7fe8cfb588ee7d907f133bc6c10d59f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ACITuple.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/aci/ACITuple.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ACITuple.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -623,7 +623,7 @@ public RangeOfValues( ExprNode filter )\n         {\n             if ( filter == null )\n             {\n-                throw new NullPointerException( \"filter\" );\n+                throw new IllegalArgumentException( \"filter\" );\n             }\n \n             this.filter = filter;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ProtectedItem.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "96cd636824ed47a7af47707321c12d235fa856a2",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ProtectedItem.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/aci/ProtectedItem.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/aci/ProtectedItem.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -135,7 +135,7 @@ protected Schema getSchema( Entry entry ) throws Exception\n     {\n         if ( entry == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_04261 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_04261 ) );\n         }\n \n         EntryAttribute objectClasses = entry.get( SchemaConstants.OBJECT_CLASS_AT );\n@@ -162,14 +162,14 @@ protected Schema getSchema( Entry entry ) throws Exception\n \n         if ( entry.get( SchemaConstants.CN_AT ) == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_04262 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_04262 ) );\n         }\n \n         name = entry.get( SchemaConstants.CN_AT ).getString();\n \n         if ( entry.get( SchemaConstants.CREATORS_NAME_AT ) == null )\n         {\n-            throw new NullPointerException( \"entry must have a valid \" + SchemaConstants.CREATORS_NAME_AT\n+            throw new IllegalArgumentException( \"entry must have a valid \" + SchemaConstants.CREATORS_NAME_AT\n                 + \" attribute\" );\n         }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "18f11246e1ef58eefe1319bb5b18477b3dc1bb16",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -105,7 +105,7 @@ public DefaultSchema( String name, String owner, String[] dependencies, boolean\n     {\n         if ( name == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_04266 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_04266 ) );\n         }\n         \n         this.name = name;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/DefaultSchema.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "1c49b381332843277d0d4e92c6d62b4ebeb36d22",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/DefaultSchema.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/DefaultSchema.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/DefaultSchema.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            },
            {
                "patch": "@@ -31,6 +31,9 @@\n import javax.naming.directory.Attributes;\n import javax.naming.directory.BasicAttribute;\n import javax.naming.directory.BasicAttributes;\n+import javax.naming.directory.InvalidAttributeIdentifierException;\n+import javax.naming.ldap.ExtendedRequest;\n+import javax.naming.ldap.ExtendedResponse;\n \n import org.apache.commons.lang.ArrayUtils;\n import org.apache.directory.shared.i18n.I18n;\n@@ -42,6 +45,7 @@\n import org.apache.directory.shared.ldap.entry.Value;\n import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.exception.LdapInvalidAttributeTypeException;\n+import org.apache.directory.shared.ldap.message.internal.InternalExtendedRequest;\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.schema.AttributeType;\n import org.apache.directory.shared.ldap.schema.MatchingRule;\n@@ -1325,4 +1329,55 @@ else if ( value instanceof byte[] )\n             return null;\n         }\n     }\n+    \n+    \n+    public static ExtendedRequest toJndiExtendedRequest( final InternalExtendedRequest request )\n+    {\n+        class JndiExtendedRequest implements ExtendedRequest\n+        {\n+            public ExtendedResponse createExtendedResponse( String id, byte[] berValue, int offset, int length )\n+                throws NamingException\n+            {\n+                return toJndiExtendedResponse( request );\n+            }\n+\n+            public byte[] getEncodedValue()\n+            {\n+                return request.getPayload();\n+            }\n+\n+            public String getID()\n+            {\n+                return request.getOid();\n+            }\n+            \n+        } \n+        \n+        return new JndiExtendedRequest();\n+    }\n+    \n+    \n+    /**\n+     * TODO toJndiExtendedResponse. This is NOT correct ATM\n+     *\n+     * @param request\n+     * @return\n+     */\n+    public static ExtendedResponse toJndiExtendedResponse( final InternalExtendedRequest request )\n+    {\n+        class JndiExtendedResponse implements ExtendedResponse\n+        {\n+            public byte[] getEncodedValue()\n+            {\n+                return request.getEncodedValue();\n+            }\n+\n+            public String getID()\n+            {\n+                return request.getID();\n+            }\n+        } \n+        \n+        return new JndiExtendedResponse();\n+    }\n }",
                "additions": 55,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "status": "modified",
                "changes": 55,
                "deletions": 0,
                "sha": "c080eff7eb33443ba0d73a771a7417b9c09ca813",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3d0191ce21588c865c57fb9baee37d4842875772/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java?ref=3d0191ce21588c865c57fb9baee37d4842875772"
            }
        ],
        "bug_id": "directory-ldap-api_7",
        "parent": "https://github.com/apache/directory-ldap-api/commit/2afacc48ab5812e9139dfaaef5a69bc01fa85d8a",
        "message": "Replaced the throw new NullPointerException by throw new IllegalArgumentException\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@951408 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/923385759a2a33db42487d69a6d9f18b793ae85c",
        "file": [
            {
                "patch": "@@ -104,7 +104,20 @@ public boolean equals( Object o )\n             \n             if ( attributeTypes != null )\n             {\n-                return attributeTypes.equals( that.attributeTypes );\n+                if ( ( that.attributeTypes == null ) || ( that.attributeTypes.size() != attributeTypes.size() ) )\n+                {\n+                    return false;\n+                }\n+                \n+                for ( AttributeType attributeType : attributeTypes )\n+                {\n+                    if ( !that.attributeTypes.contains( attributeType ) )\n+                    {\n+                        return false;\n+                    }\n+                }\n+                \n+                return true;\n             }\n             else\n             {",
                "additions": 14,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/923385759a2a33db42487d69a6d9f18b793ae85c/ldap/extras/aci/src/main/java/org/apache/directory/api/ldap/aci/protectedItem/AbstractAttributeTypeProtectedItem.java",
                "status": "modified",
                "changes": 15,
                "deletions": 1,
                "sha": "9fbb9972087411cf85bb83823c6749c9f3040290",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/923385759a2a33db42487d69a6d9f18b793ae85c/ldap/extras/aci/src/main/java/org/apache/directory/api/ldap/aci/protectedItem/AbstractAttributeTypeProtectedItem.java",
                "filename": "ldap/extras/aci/src/main/java/org/apache/directory/api/ldap/aci/protectedItem/AbstractAttributeTypeProtectedItem.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/aci/src/main/java/org/apache/directory/api/ldap/aci/protectedItem/AbstractAttributeTypeProtectedItem.java?ref=923385759a2a33db42487d69a6d9f18b793ae85c"
            },
            {
                "patch": "@@ -80,7 +80,11 @@ public int hashCode()\n     {\n         int hash = 37;\n         hash = hash * 17 + maxCount;\n-        hash = hash * 17 + attributeType.hashCode();\n+        \n+        if ( attributeType != null )\n+        {\n+            hash = hash * 17 + attributeType.hashCode();\n+        }\n         \n         return hash;\n     }\n@@ -124,6 +128,22 @@ public boolean equals( Object o )\n     @Override\n     public String toString()\n     {\n-        return \"{ type \" + attributeType.getName() + \", maxCount \" + maxCount + \" }\";\n+        StringBuilder sb = new StringBuilder();\n+        \n+        sb.append( \"{ type \" );\n+        \n+        if ( attributeType != null )\n+        {\n+            sb.append( attributeType.getName() );\n+        }\n+        else\n+        {\n+            sb.append( \"null\" );\n+        }\n+        \n+        sb.append( \", maxCount \" ).append( maxCount );\n+        sb.append( \"}\" );\n+        \n+        return sb.toString();\n     }\n }",
                "additions": 22,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/923385759a2a33db42487d69a6d9f18b793ae85c/ldap/extras/aci/src/main/java/org/apache/directory/api/ldap/aci/protectedItem/MaxValueCountElem.java",
                "status": "modified",
                "changes": 24,
                "deletions": 2,
                "sha": "b3282bf6d74addf5742c7154b2198fe387112763",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/923385759a2a33db42487d69a6d9f18b793ae85c/ldap/extras/aci/src/main/java/org/apache/directory/api/ldap/aci/protectedItem/MaxValueCountElem.java",
                "filename": "ldap/extras/aci/src/main/java/org/apache/directory/api/ldap/aci/protectedItem/MaxValueCountElem.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/aci/src/main/java/org/apache/directory/api/ldap/aci/protectedItem/MaxValueCountElem.java?ref=923385759a2a33db42487d69a6d9f18b793ae85c"
            }
        ],
        "bug_id": "directory-ldap-api_8",
        "parent": "https://github.com/apache/directory-ldap-api/commit/1c12e53763657bcc6ca17e51c11d850f32bfe8c7",
        "message": "Protected the code against potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1769371 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/6bd05cca6f3e9ee31b963fed8afa55d803da1fbd",
        "file": [
            {
                "patch": "@@ -449,7 +449,16 @@ public int computeLength()\n                 {\n                     for ( Value value : modification.getAttribute() )\n                     {\n-                        localValuesLength += 1 + TLV.getNbBytes( value.getBytes().length ) + value.getBytes().length;\n+                        byte[] valueBytes = value.getBytes();\n+                        \n+                        if ( valueBytes != null )\n+                        {\n+                            localValuesLength += 1 + TLV.getNbBytes( valueBytes.length ) + valueBytes.length;\n+                        }\n+                        else\n+                        {\n+                            localValuesLength += 1 + 1;\n+                        }\n                     }\n                 }\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/6bd05cca6f3e9ee31b963fed8afa55d803da1fbd/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/decorators/ModifyRequestDecorator.java",
                "status": "modified",
                "changes": 11,
                "deletions": 1,
                "sha": "2c8eb25de9f8bdfa6ace9c08438d7062f7e1e696",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/6bd05cca6f3e9ee31b963fed8afa55d803da1fbd/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/decorators/ModifyRequestDecorator.java",
                "filename": "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/decorators/ModifyRequestDecorator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/decorators/ModifyRequestDecorator.java?ref=6bd05cca6f3e9ee31b963fed8afa55d803da1fbd"
            }
        ],
        "bug_id": "directory-ldap-api_9",
        "parent": "https://github.com/apache/directory-ldap-api/commit/5c5e2f73de10d26251203e5378fc73c645ed8bd1",
        "message": "Fixed a potential NPE when the Value is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-value@1748905 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e",
        "file": [
            {
                "patch": "@@ -45,14 +45,14 @@\n     /**\n      * @return The number of possible attempts on the password before it's locked\n      */\n-    int getGraceAuthNsRemaining();\n+    int getGraceAuthNRemaining();\n \n \n     /**\n      * Sets the number of remaining wrong authentication for this password\n-     * @param graceAuthNsRemaining The number of remaining attempts\n+     * @param graceAuthNRemaining The number of remaining attempts\n      */\n-    void setGraceAuthNsRemaining( int graceAuthNsRemaining );\n+    void setGraceAuthNRemaining( int graceAuthNRemaining );\n \n \n     /**",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyResponse.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "0b077d5d87b4ab7f03abac86cf08627380ac6b30",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyResponse.java",
                "filename": "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyResponse.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyResponse.java?ref=bbed4f1fe3362fbcd42a4d57632f3e44fc82574e"
            },
            {
                "patch": "@@ -32,7 +32,7 @@\n     private int timeBeforeExpiration = -1;\n \n     /** number of remaining grace authentications */\n-    private int graceAuthNsRemaining = -1;\n+    private int graceAuthNRemaining = -1;\n \n     /** number representing the password policy error */\n     private PasswordPolicyErrorEnum ppolicyError;\n@@ -59,18 +59,18 @@ public void setTimeBeforeExpiration( int timeBeforeExpiration )\n     /**\n      * {@inheritDoc}\n      */\n-    public int getGraceAuthNsRemaining()\n+    public int getGraceAuthNRemaining()\n     {\n-        return graceAuthNsRemaining;\n+        return graceAuthNRemaining;\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n-    public void setGraceAuthNsRemaining( int graceAuthNsRemaining )\n+    public void setGraceAuthNRemaining( int graceAuthNRemaining )\n     {\n-        this.graceAuthNsRemaining = graceAuthNsRemaining;\n+        this.graceAuthNRemaining = graceAuthNRemaining;\n     }\n \n ",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyResponseImpl.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "90f4881188d2f088471cf58d80a92a39bdffb679",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyResponseImpl.java",
                "filename": "ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyResponseImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec-api/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyResponseImpl.java?ref=bbed4f1fe3362fbcd42a4d57632f3e44fc82574e"
            },
            {
                "patch": "@@ -113,9 +113,9 @@ public int computeLength()\n             timeBeforeExpirationTagLength = TLV.getNbBytes( getResponse().getTimeBeforeExpiration() );\n             warningLength = 1 + TLV.getNbBytes( timeBeforeExpirationTagLength ) + timeBeforeExpirationTagLength;\n         }\n-        else if ( getResponse().getGraceAuthNsRemaining() >= 0 )\n+        else if ( getResponse().getGraceAuthNRemaining() >= 0 )\n         {\n-            graceAuthNsRemainingTagLength = TLV.getNbBytes( getResponse().getGraceAuthNsRemaining() );\n+            graceAuthNsRemainingTagLength = TLV.getNbBytes( getResponse().getGraceAuthNRemaining() );\n             warningLength = 1 + TLV.getNbBytes( graceAuthNsRemainingTagLength ) + graceAuthNsRemainingTagLength;\n         }\n \n@@ -151,7 +151,7 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n             throw new EncoderException( I18n.err( I18n.ERR_04023 ) );\n         }\n \n-        if ( ( getResponse().getTimeBeforeExpiration() < 0 ) && ( getResponse().getGraceAuthNsRemaining() < 0 ) && (\n+        if ( ( getResponse().getTimeBeforeExpiration() < 0 ) && ( getResponse().getGraceAuthNRemaining() < 0 ) && (\n             getResponse().getPasswordPolicyError() == null ) )\n         {\n             return buffer;\n@@ -174,11 +174,11 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n                     buffer.put( TLV.getBytes( timeBeforeExpirationTagLength ) );\n                     buffer.put( BerValue.getBytes( getResponse().getTimeBeforeExpiration() ) );\n                 }\n-                else if ( getResponse().getGraceAuthNsRemaining() >= 0 )\n+                else if ( getResponse().getGraceAuthNRemaining() >= 0 )\n                 {\n                     buffer.put( ( byte ) PasswordPolicyTags.GRACE_AUTHNS_REMAINING_TAG.getValue() );\n                     buffer.put( TLV.getBytes( graceAuthNsRemainingTagLength ) );\n-                    buffer.put( BerValue.getBytes( getResponse().getGraceAuthNsRemaining() ) );\n+                    buffer.put( BerValue.getBytes( getResponse().getGraceAuthNRemaining() ) );\n                 }\n             }\n \n@@ -207,9 +207,9 @@ public String toString()\n             sb.append( \"   timeBeforeExpiration          : '\" ).append( getResponse().getTimeBeforeExpiration() )\n                 .append( '\\n' );\n         }\n-        else if ( hasResponse() && getResponse().getGraceAuthNsRemaining() >= 0 )\n+        else if ( hasResponse() && getResponse().getGraceAuthNRemaining() >= 0 )\n         {\n-            sb.append( \"   graceAuthNsRemaining          : '\" ).append( getResponse().getGraceAuthNsRemaining() )\n+            sb.append( \"   graceAuthNsRemaining          : '\" ).append( getResponse().getGraceAuthNRemaining() )\n                 .append( '\\n' );\n         }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/PasswordPolicyDecorator.java",
                "status": "modified",
                "changes": 14,
                "deletions": 7,
                "sha": "4bf6504e2a7e7d850f5c8016d1377a9296873964",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/PasswordPolicyDecorator.java",
                "filename": "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/PasswordPolicyDecorator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/PasswordPolicyDecorator.java?ref=bbed4f1fe3362fbcd42a4d57632f3e44fc82574e"
            },
            {
                "patch": "@@ -103,7 +103,7 @@ private PasswordPolicyGrammar()\n             .getValue()] = new GrammarTransition(\n             PasswordPolicyStates.PPOLICY_WARNING_TAG_STATE, PasswordPolicyStates.PPOLICY_GRACE_AUTHNS_REMAINING_STATE,\n             PasswordPolicyTags.GRACE_AUTHNS_REMAINING_TAG.getValue(),\n-            new StoreGraceAuthsRemaining() );\n+            new StoreGraceAuthNRemaining() );\n \n         // PasswordPolicyResponseValue ::= SEQUENCE {\n         //              ...",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/PasswordPolicyGrammar.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "107c0463a78f751a54ebaad46cd4875ad38216ea",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/PasswordPolicyGrammar.java",
                "filename": "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/PasswordPolicyGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/PasswordPolicyGrammar.java?ref=bbed4f1fe3362fbcd42a4d57632f3e44fc82574e"
            },
            {
                "patch": "@@ -30,13 +30,13 @@\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n @SuppressWarnings(\"rawtypes\")\n-public class StoreGraceAuthsRemaining extends AbstractReadInteger\n+public class StoreGraceAuthNRemaining extends AbstractReadInteger\n {\n \n     /**\n      * Instantiates a new StoreCusec action.\n      */\n-    public StoreGraceAuthsRemaining()\n+    public StoreGraceAuthNRemaining()\n     {\n         super( \"PPolicy graceAuthnsRemains\" );\n     }\n@@ -50,7 +50,7 @@ protected void setIntegerValue( int value, Asn1Container container )\n     {\n         PasswordPolicyContainer ppolicyContainer = ( PasswordPolicyContainer ) container;\n \n-        ppolicyContainer.getPasswordPolicyResponseControl().getResponse().setGraceAuthNsRemaining( value );\n+        ppolicyContainer.getPasswordPolicyResponseControl().getResponse().setGraceAuthNRemaining( value );\n \n         ppolicyContainer.setGrammarEndAllowed( true );\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/StoreGraceAuthNRemaining.java",
                "previous_filename": "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/StoreGraceAuthsRemaining.java",
                "status": "renamed",
                "changes": 6,
                "deletions": 3,
                "sha": "74d1a6e524b3e4cebafdd83ec8e692844143b256",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/StoreGraceAuthNRemaining.java",
                "filename": "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/StoreGraceAuthNRemaining.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/controls/ppolicy_impl/StoreGraceAuthNRemaining.java?ref=bbed4f1fe3362fbcd42a4d57632f3e44fc82574e"
            },
            {
                "patch": "@@ -28,7 +28,6 @@\n import java.nio.ByteBuffer;\n \n import org.apache.directory.api.ldap.extras.AbstractCodecServiceTest;\n-import org.apache.directory.api.ldap.extras.controls.ppolicy.PasswordPolicy;\n import org.apache.directory.api.ldap.extras.controls.ppolicy_impl.PasswordPolicyDecorator;\n import org.apache.directory.api.util.Strings;\n import org.junit.Test;\n@@ -49,9 +48,13 @@ public void testDecodeRespWithExpiryWarningAndError() throws Exception\n         bb.put( new byte[]\n             {\n                 0x30, 0x08,\n-                  ( byte ) 0xA0, 0x03, // timeBeforeExpiration\n-                    ( byte ) 0x80, 0x01, 0x01,\n-                  ( byte ) 0x81, 0x01, 0x01 // ppolicyError\n+                ( byte ) 0xA0, 0x03, // timeBeforeExpiration\n+                ( byte ) 0x80,\n+                0x01,\n+                0x01,\n+                ( byte ) 0x81,\n+                0x01,\n+                0x01 // ppolicyError\n         } );\n \n         bb.flip();\n@@ -77,9 +80,13 @@ public void testDecodeRespWithGraceAuthWarningAndError() throws Exception\n         bb.put( new byte[]\n             {\n                 0x30, 0x08,\n-                  ( byte ) 0xA0, 0x03, // warning\n-                    ( byte ) 0x81, 0x01, 0x01, // graceAuthNsRemaining\n-                  ( byte ) 0x81, 0x01, 0x01 // error\n+                ( byte ) 0xA0, 0x03, // warning\n+                ( byte ) 0x81,\n+                0x01,\n+                0x01, // graceAuthNsRemaining\n+                ( byte ) 0x81,\n+                0x01,\n+                0x01 // error\n         } );\n \n         bb.flip();\n@@ -88,7 +95,7 @@ public void testDecodeRespWithGraceAuthWarningAndError() throws Exception\n         PasswordPolicy passwordPolicy = ( PasswordPolicy ) control.decode( bb.array() );\n \n         assertTrue( passwordPolicy.hasResponse() );\n-        assertEquals( 1, passwordPolicy.getResponse().getGraceAuthNsRemaining() );\n+        assertEquals( 1, passwordPolicy.getResponse().getGraceAuthNRemaining() );\n         assertEquals( 1, passwordPolicy.getResponse().getPasswordPolicyError().getValue() );\n \n         ByteBuffer encoded = ( ( PasswordPolicyDecorator ) passwordPolicy ).encode(\n@@ -105,8 +112,8 @@ public void testDecodeRespWithTimeBeforeExpiryWarningOnly() throws Exception\n         bb.put( new byte[]\n             {\n                 0x30, 0x05,\n-                  ( byte ) 0xA0, 0x03,\n-                    ( byte ) 0x80, 0x01, 0x01 //  timeBeforeExpiration\n+                ( byte ) 0xA0, 0x03,\n+                ( byte ) 0x80, 0x01, 0x01 //  timeBeforeExpiration\n         } );\n \n         bb.flip();\n@@ -131,8 +138,8 @@ public void testDecodeRespWithGraceAuthWarningOnly() throws Exception\n         bb.put( new byte[]\n             {\n                 0x30, 0x05,\n-                  ( byte ) 0xA0, 0x03,\n-                    ( byte ) 0x81, 0x01, 0x01 //  graceAuthNsRemaining\n+                ( byte ) 0xA0, 0x03,\n+                ( byte ) 0x81, 0x01, 0x01 //  graceAuthNsRemaining\n         } );\n \n         bb.flip();\n@@ -141,7 +148,7 @@ public void testDecodeRespWithGraceAuthWarningOnly() throws Exception\n         PasswordPolicy passwordPolicy = ( PasswordPolicy ) control.decode( bb.array() );\n \n         assertTrue( passwordPolicy.hasResponse() );\n-        assertEquals( 1, passwordPolicy.getResponse().getGraceAuthNsRemaining() );\n+        assertEquals( 1, passwordPolicy.getResponse().getGraceAuthNRemaining() );\n \n         ByteBuffer encoded = ( ( PasswordPolicyDecorator ) passwordPolicy ).encode(\n             ByteBuffer.allocate( ( ( PasswordPolicyDecorator ) passwordPolicy ).computeLength() ) );\n@@ -157,7 +164,7 @@ public void testDecodeRespWithErrorOnly() throws Exception\n         bb.put( new byte[]\n             {\n                 0x30, 0x03,\n-                  ( byte ) 0x81, 0x01, 0x01 //  error\n+                ( byte ) 0x81, 0x01, 0x01 //  error\n         } );\n \n         bb.flip();\n@@ -182,7 +189,7 @@ public void testDecodeRespWithoutWarningAndError() throws Exception\n         bb.put( new byte[]\n             {\n                 0x30, 0x00\n-            } );\n+        } );\n \n         bb.flip();\n ",
                "additions": 22,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec/src/test/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyTest.java",
                "status": "modified",
                "changes": 37,
                "deletions": 15,
                "sha": "cbc78b3b23cb3d4a21ca53e4c2e268701a47e677",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bbed4f1fe3362fbcd42a4d57632f3e44fc82574e/ldap/extras/codec/src/test/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyTest.java",
                "filename": "ldap/extras/codec/src/test/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec/src/test/java/org/apache/directory/api/ldap/extras/controls/ppolicy/PasswordPolicyTest.java?ref=bbed4f1fe3362fbcd42a4d57632f3e44fc82574e"
            }
        ],
        "bug_id": "directory-ldap-api_10",
        "parent": "https://github.com/apache/directory-ldap-api/commit/ba5f774816a21a26849c36818cec601527dafcee",
        "message": "o Fixed a NPE if the pwdGraceAuthNLimit is set to 0 with an expired pwdAge \no Added some more protections against NPE in PP code\no Added some tests for PP\no Renamed a class (type)\no Renamed two methods (typoes too, I guess)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1467813 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/211642c1e3d708f166ad3cbe7e38a0a75e27990c",
        "file": [
            {
                "patch": "@@ -21,12 +21,14 @@\n package org.apache.directory.shared.dsmlv2.reponse;\n \n \n+import java.util.Collection;\n import java.util.List;\n \n import org.apache.directory.shared.dsmlv2.DsmlDecorator;\n import org.apache.directory.shared.dsmlv2.ParserUtils;\n import org.apache.directory.shared.ldap.message.LdapResult;\n import org.apache.directory.shared.ldap.message.Message;\n+import org.apache.directory.shared.ldap.message.Referral;\n import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.util.LdapURL;\n@@ -76,11 +78,11 @@ public Element toDsml( Element root )\n         }\n \n         // Matched DN\n-        String matchedDN = result.getMatchedDn().getName();\n+        DN matchedDN = result.getMatchedDn();\n \n-        if ( !matchedDN.equals( \"\" ) )\n+        if ( ( matchedDN != null ) && ( !matchedDN.getName().equals( \"\" ) ) )\n         {\n-            root.addAttribute( \"matchedDN\", matchedDN );\n+            root.addAttribute( \"matchedDN\", matchedDN.getName() );\n         }\n \n         // Controls\n@@ -99,15 +101,18 @@ public Element toDsml( Element root )\n             errorMessageElement.addText( errorMessage );\n         }\n \n-        // Referals\n-        List<String> referals = ( List<String> ) result.getReferral().getLdapUrls();\n-\n-        if ( referals != null )\n+        // Referrals\n+        Referral referral = result.getReferral();\n+        if ( referral != null )\n         {\n-            for ( String url : referals )\n+            Collection<String> ldapUrls = referral.getLdapUrls();\n+            if ( ldapUrls != null )\n             {\n-                Element referalElement = root.addElement( \"referal\" );\n-                referalElement.addText( url );\n+                for ( String ldapUrl : ldapUrls )\n+                {\n+                    Element referalElement = root.addElement( \"referal\" );\n+                    referalElement.addText( ldapUrl );\n+                }\n             }\n         }\n ",
                "additions": 15,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/211642c1e3d708f166ad3cbe7e38a0a75e27990c/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/LdapResultDsml.java",
                "status": "modified",
                "changes": 25,
                "deletions": 10,
                "sha": "6cc49e3d3f6ca361b62a8298a6a8023f4438970e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/211642c1e3d708f166ad3cbe7e38a0a75e27990c/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/LdapResultDsml.java",
                "filename": "dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/LdapResultDsml.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/LdapResultDsml.java?ref=211642c1e3d708f166ad3cbe7e38a0a75e27990c"
            }
        ],
        "bug_id": "directory-ldap-api_11",
        "parent": "https://github.com/apache/directory-ldap-api/commit/e1357b48e0350a7349d45ce13e14750f7c7678ea",
        "message": "Fixed NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1005740 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/334865336d3fdf5fb9b61d149deae7ad4266bda4",
        "file": [
            {
                "patch": "@@ -110,8 +110,11 @@ options\n     public void init( SchemaManager schemaManager )\n     {\n         this.schemaManager = schemaManager;\n-        OBJECT_CLASS_AT = schemaManager.getAttributeType( SchemaConstants.OBJECT_CLASS_AT );\n         \n+        if ( schemaManager != null )\n+        {\n+            OBJECT_CLASS_AT = schemaManager.getAttributeType( SchemaConstants.OBJECT_CLASS_AT );\n+        }\n     }\n     \n     ",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/334865336d3fdf5fb9b61d149deae7ad4266bda4/ldap/model/src/main/antlr/subtree-specification.g",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "fc84c49d3a207a459da5f01772eb12ba4fd7ab65",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/334865336d3fdf5fb9b61d149deae7ad4266bda4/ldap/model/src/main/antlr/subtree-specification.g",
                "filename": "ldap/model/src/main/antlr/subtree-specification.g",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/antlr/subtree-specification.g?ref=334865336d3fdf5fb9b61d149deae7ad4266bda4"
            }
        ],
        "bug_id": "directory-ldap-api_12",
        "parent": "https://github.com/apache/directory-ldap-api/commit/71598808fcc7f76f780eea7a01980df6af42b3a9",
        "message": "Fix for DIRSHARED-136 (NPE in AntlrSubtreeSpecificationParser when initialized with an empty schema manager) and DIRSTUDIO-829 (NPE when trying to add a 'subtreeSpecification' value)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1377704 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/63f008531c7da773c66aa8b6d478a3084e9bcc01",
        "file": [
            {
                "patch": "@@ -936,7 +936,7 @@ public BindResponse bind( DN name, String credentials ) throws LdapException, IO\n \n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, StringTools.getBytesUtf8( credentials ), null,\n-            ( Control ) null );\n+            new Control[0] );\n \n         return bind( bindRequest );\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/63f008531c7da773c66aa8b6d478a3084e9bcc01/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "8cc8b1a929ccf73885a9d5aaa2bb8209262e5343",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/63f008531c7da773c66aa8b6d478a3084e9bcc01/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=63f008531c7da773c66aa8b6d478a3084e9bcc01"
            }
        ],
        "bug_id": "directory-ldap-api_13",
        "parent": "https://github.com/apache/directory-ldap-api/commit/34e0aff621b8363ded926d95385fbcec57c91bb0",
        "message": "Fixed an NPE occurring in AbstractMessage.\nSending null in a variable length argument list (Type arg...) creates an array filled with a null value ([null]) and not an empty array ([]).\nThis caused a NPE later in the AbstractMessage class.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1022853 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/153979600a22485aa4b4548284e49e3cb5877b32",
        "file": [
            {
                "patch": "@@ -124,7 +124,7 @@\n \n     /** Define the default ports for LDAP and LDAPS */\n     private static final int DEFAULT_LDAP_PORT = 389; \n-    private static final int DEFAULT_LDAPS_PORT = 686;\n+    private static final int DEFAULT_LDAPS_PORT = 636;\n     \n     /** The default host : localhost */\n     private static final String DEFAULT_LDAP_HOST = \"127.0.0.1\";\n@@ -447,7 +447,7 @@ public LdapConnection()\n     \n     /**\n      * Create a new instance of a LdapConnection on localhost,\n-     * port 389 if the SSL flag is off, or 686 otherwise.\n+     * port 389 if the SSL flag is off, or 636 otherwise.\n      * \n      * @param useSsl A flag to tell if it's a SSL connection or not.\n      */\n@@ -480,7 +480,7 @@ public LdapConnection( String server )\n     /**\n      * Create a new instance of a LdapConnection on a given\n      * server, using the default port (389) if the SSL flag \n-     * is off, or 686 otherwise.\n+     * is off, or 636 otherwise.\n      *\n      * @param server The server we want to be connected to\n      * @param useSsl A flag to tell if it's a SSL connection or not.",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/153979600a22485aa4b4548284e49e3cb5877b32/client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnection.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "37726a71a94b551f891d54203fb0f7f270435abb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/153979600a22485aa4b4548284e49e3cb5877b32/client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnection.java",
                "filename": "client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnection.java?ref=153979600a22485aa4b4548284e49e3cb5877b32"
            },
            {
                "patch": "@@ -60,7 +60,7 @@\n \n     /** Define the default ports for LDAP and LDAPS */\n     private static final int DEFAULT_LDAP_PORT = 389; \n-    private static final int DEFAULT_LDAPS_PORT = 686;\n+    private static final int DEFAULT_LDAPS_PORT = 636;\n     \n     /** The default host : localhost */\n     private static final String DEFAULT_LDAP_HOST = \"127.0.0.1\";",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/153979600a22485aa4b4548284e49e3cb5877b32/client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnectionImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "07b8e107a9a739ea1750fa674ee3d2bfd412ec56",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/153979600a22485aa4b4548284e49e3cb5877b32/client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnectionImpl.java",
                "filename": "client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnectionImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnectionImpl.java?ref=153979600a22485aa4b4548284e49e3cb5877b32"
            }
        ],
        "bug_id": "directory-ldap-api_14",
        "parent": "https://github.com/apache/directory-ldap-api/commit/7f0bb2418576790e36dbedbf143b83a5df4dc951",
        "message": "o Fixed a NPE when no server.xml is provided\no Fixed another NPE : LDAPS was not correctly initialized when the default config is used. \no Replaced 686 by 636 everywhere it was used by mistake\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@773848 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/2153a3d82872f31a8912ee6ee965e7c49ac4b334",
        "file": [
            {
                "patch": "@@ -45,17 +45,17 @@ public int compare( Object byteArray1, Object byteArray2 )\n         // Handle some basis cases\n         // -------------------------------------------------------------------\n \n-        if ( b1 == null && b2 == null )\n+        if ( ( b1 == null ) && ( b2 == null ) )\n         {\n             return 0;\n         }\n         \n-        if ( b1 != null && b2 == null )\n+        if ( ( b1 != null ) && ( b2 == null ) )\n         {\n             return 1;\n         }\n         \n-        if ( b1 == null && b2 != null )\n+        if ( ( b1 == null ) && ( b2 != null ) )\n         {\n             return -1;\n         }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/schema/ByteArrayComparator.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "29b835032b80157583e2d6c4afedd8cc4b31d11e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/schema/ByteArrayComparator.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/ByteArrayComparator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/ByteArrayComparator.java?ref=2153a3d82872f31a8912ee6ee965e7c49ac4b334"
            },
            {
                "patch": "@@ -37,15 +37,15 @@\n \n     public int compare( Object o1, Object o2 )\n     {\n-        if ( o1 == null && o2 == null )\n+        if ( ( o1 == null ) && ( o2 == null ) )\n         {\n             return 0;\n         }\n-        else if ( o1 != null && o2 == null )\n+        else if ( ( o1 != null ) && ( o2 == null ) )\n         {\n             return 1;\n         }\n-        else if ( o1 == null && o2 != null )\n+        else if ( ( o1 == null ) && ( o2 != null ) )\n         {\n             return -1;\n         }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/schema/ObjectIdentifierComparator.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "7e83b02ddc5c51cad718063f80bf1b511dd60f5e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/schema/ObjectIdentifierComparator.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/ObjectIdentifierComparator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/ObjectIdentifierComparator.java?ref=2153a3d82872f31a8912ee6ee965e7c49ac4b334"
            },
            {
                "patch": "@@ -4590,7 +4590,11 @@ public static String bidi( String str )\n     public static StringBuilder bidi( char[] array )\n     {\n         StringBuilder sb = new StringBuilder( array == null ? 0 : array.length );\n-        sb.append( array );\n+        \n+        if ( array != null )\n+        {\n+            sb.append( array );\n+        }\n         \n         return sb;\n     }",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "f26ccde5cd1e2a2206a26aba0b1985e0528f824b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java?ref=2153a3d82872f31a8912ee6ee965e7c49ac4b334"
            },
            {
                "patch": "@@ -54,7 +54,7 @@\n     private List<Pattern> compiledREs;\n     \n     /** The default pattern used to check a TelephoneNumber */\n-    private final String DEFAULT_REGEXP = \"^ *[+]? *((\\\\([0-9- ]+\\\\))|[0-9- ]+)+$\";\n+    private final static String DEFAULT_REGEXP = \"^ *[+]? *((\\\\([0-9- ]+\\\\))|[0-9- ]+)+$\";\n     \n     /** The compiled default pattern */\n     private Pattern defaultPattern =  Pattern.compile( DEFAULT_REGEXP );",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "993a9c97f7c1d06d6cb552eb3f3c5e7c39ea6ec6",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java?ref=2153a3d82872f31a8912ee6ee965e7c49ac4b334"
            },
            {
                "patch": "@@ -3774,7 +3774,7 @@ else if ( array.length == 0 )\n         final Double[] result = new Double[array.length];\n         for ( int i = 0; i < array.length; i++ )\n         {\n-            result[i] = new Double( array[i] );\n+            result[i] = Double.valueOf( array[i] );\n         }\n         return result;\n     }\n@@ -3881,7 +3881,7 @@ else if ( array.length == 0 )\n         final Float[] result = new Float[array.length];\n         for ( int i = 0; i < array.length; i++ )\n         {\n-            result[i] = new Float( array[i] );\n+            result[i] = Float.valueOf( array[i] );\n         }\n         return result;\n     }",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/util/ArrayUtils.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "662e580150a2a6db38032b031a9aef9672df6d55",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/util/ArrayUtils.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/ArrayUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/ArrayUtils.java?ref=2153a3d82872f31a8912ee6ee965e7c49ac4b334"
            },
            {
                "patch": "@@ -782,7 +782,7 @@ public static boolean toBoolean( String str )\n         // Similar performance for null, 'false', and other strings not length\n         // 2/3/4.\n         // 'true'/'TRUE' match 4 times slower, 'tRUE'/'True' 7 times slower.\n-        if ( str == \"true\" )\n+        if ( \"true\".equals( str ) )\n         {\n             return true;\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/util/BooleanUtils.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "07606fba3e405063829b4e3a1e0ef56bdbdd581b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/util/BooleanUtils.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/BooleanUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/BooleanUtils.java?ref=2153a3d82872f31a8912ee6ee965e7c49ac4b334"
            },
            {
                "patch": "@@ -256,9 +256,9 @@ public static int parseAlphaASCII( byte[] byteArray, int index )\n         }\n         else\n         {\n-            byte c = byteArray[index++];\n+            byte b = byteArray[index++];\n \n-            if ( ( c > 127 ) || ( StringTools.ALPHA[c] == false ) )\n+            if ( StringTools.isAlpha( b ) == false )\n             {\n                 return -1;\n             }\n@@ -290,7 +290,7 @@ public static int parseAlphaASCII( char[] charArray, int index )\n         {\n             char c = charArray[index++];\n \n-            if ( ( c > 127 ) || ( StringTools.ALPHA[c] == false ) )\n+            if ( StringTools.isAlpha( c ) == false )\n             {\n                 return PARSING_ERROR;\n             }\n@@ -393,9 +393,14 @@ public static boolean isPairChar( char[] charArray, int index )\n      */\n     public static int isPairChar( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return PARSING_ERROR;\n+        }\n+\n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return PARSING_ERROR;\n         }\n@@ -501,9 +506,14 @@ public static int isStringChar( char[] charArray, int index )\n      */\n     public static int isStringChar( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return PARSING_ERROR;\n+        }\n+        \n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return PARSING_ERROR;\n         }\n@@ -595,9 +605,14 @@ public static int isQuoteChar( char[] charArray, int index )\n      */\n     public static int isQuoteChar( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return PARSING_ERROR;\n+        }\n+\n         int length = string.length();\n \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return PARSING_ERROR;\n         }\n@@ -717,8 +732,7 @@ public static int parseHexPair( String string, int index )\n      */\n     private static byte getHexPair( String string, int index )\n     {\n-    \treturn (byte)((StringTools.HEX_VALUE[string.charAt( index )] << 4) | \n-    \t\t\t\t(StringTools.HEX_VALUE[string.charAt( index + 1 )]) );\n+    \treturn StringTools.getHexValue( string.charAt( index ), string.charAt( index + 1 ) );\n     }\n \n     /**",
                "additions": 22,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/util/DNUtils.java",
                "status": "modified",
                "changes": 30,
                "deletions": 8,
                "sha": "006002249205f59b6cfd39c95c7b8302b954dca7",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/util/DNUtils.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/DNUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/DNUtils.java?ref=2153a3d82872f31a8912ee6ee965e7c49ac4b334"
            },
            {
                "patch": "@@ -82,7 +82,7 @@\n     private static final int UTF8_SIX_BYTES = 0x00FC;\n \n     /** &lt;alpha> ::= [0x41-0x5A] | [0x61-0x7A] */\n-    public static final boolean[] ALPHA =\n+    private static final boolean[] ALPHA =\n         { \n             false, false, false, false, false, false, false, false, \n             false, false, false, false, false, false, false, false, \n@@ -103,7 +103,7 @@\n         };\n \n     /** &lt;alpha-lower-case> ::= [0x61-0x7A] */\n-    public static final boolean[] ALPHA_LOWER_CASE =\n+    private static final boolean[] ALPHA_LOWER_CASE =\n         { \n             false, false, false, false, false, false, false, false, \n             false, false, false, false, false, false, false, false, \n@@ -124,7 +124,7 @@\n         };\n \n     /** &lt;alpha-upper-case> ::= [0x41-0x5A] */\n-    public static final boolean[] ALPHA_UPPER_CASE =\n+    private static final boolean[] ALPHA_UPPER_CASE =\n         { \n             false, false, false, false, false, false, false, false, \n             false, false, false, false, false, false, false, false, \n@@ -145,7 +145,7 @@\n         };\n \n     /** &lt;alpha-digit> | &lt;digit> */\n-    public static final boolean[] ALPHA_DIGIT =\n+    private static final boolean[] ALPHA_DIGIT =\n         { \n             false, false, false, false, false, false, false, false, \n             false, false, false, false, false, false, false, false, \n@@ -166,7 +166,7 @@\n         };\n \n     /** &lt;alpha> | &lt;digit> | '-' */\n-    public static final boolean[] CHAR =\n+    private static final boolean[] CHAR =\n         { \n             false, false, false, false, false, false, false, false, \n             false, false, false, false, false, false, false, false, \n@@ -187,7 +187,7 @@\n         };\n \n     /** '0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9' */\n-    public static final boolean[] DIGIT =\n+    private static final boolean[] DIGIT =\n         { \n             false, false, false, false, false, false, false, false, \n             false, false, false, false, false, false, false, false, \n@@ -250,7 +250,7 @@\n \n \n     /** &lt;hex> ::= [0x30-0x39] | [0x41-0x46] | [0x61-0x66] */\n-    public static final byte[] HEX_VALUE =\n+    private static final byte[] HEX_VALUE =\n         { \n             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 00 -> 0F\n             -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, // 10 -> 1F\n@@ -262,7 +262,7 @@\n         };\n \n     /** lowerCase = 'a' .. 'z', '0'..'9', '-' */\n-    public static final char[] LOWER_CASE =\n+    private static final char[] LOWER_CASE =\n         { \n               0,   0,   0,   0,   0,   0,   0,   0, \n               0,   0,   0,   0,   0,   0,   0,   0, \n@@ -291,7 +291,7 @@\n         };\n \n     /** upperCase = 'A' .. 'Z', '0'..'9', '-' */\n-    public static final char[] UPPER_CASE =\n+    private static final char[] UPPER_CASE =\n         { \n               0,   0,   0,   0,   0,   0,   0,   0, \n               0,   0,   0,   0,   0,   0,   0,   0, \n@@ -318,6 +318,7 @@\n               0,   0,   0,   0,   0,   0,   0,   0, \n               0,   0,   0,   0,   0,   0,   0,   0 \n         };\n+    \n     private static final int CHAR_ONE_BYTE_MASK = 0xFFFFFF80;\n \n     private static final int CHAR_TWO_BYTES_MASK = 0xFFFFF800;\n@@ -846,7 +847,6 @@ public static final Pattern getRegex( String ldapRegex ) throws PatternSyntaxExc\n      */\n     public static final List getPaths( String paths, FileFilter filter )\n     {\n-        final int max = paths.length() - 1;\n         int start = 0;\n         int stop = -1;\n         String path = null;\n@@ -858,6 +858,8 @@ public static final List getPaths( String paths, FileFilter filter )\n             return list;\n         }\n \n+        final int max = paths.length() - 1;\n+\n         // Loop spliting string using OS path separator: terminate\n         // when the start index is at the end of the paths string.\n         while ( start < max )\n@@ -1483,12 +1485,16 @@ public static final int areEquals( char[] charArray, int index, char[] charArray\n      */\n     public static final boolean areEquals( String string1, int index, String text )\n     {\n+        if ( ( string1 == null ) || ( text == null ) ) \n+        {\n+            return false;\n+        }\n+        \n         int length1 = string1.length();\n         int length2 = text.length();\n \n-        if ( ( string1 == null ) || ( length1 == 0 ) || ( length1 <= index ) || ( index < 0 )\n-            || ( text == null ) || ( length2 == 0 )\n-            || ( length2 > ( length1 + index ) ) )\n+        if ( ( length1 == 0 ) || ( length1 <= index ) || ( index < 0 )\n+            || ( length2 == 0 ) || ( length2 > ( length1 + index ) ) )\n         {\n             return false;\n         }\n@@ -1625,9 +1631,14 @@ public static final boolean isCharASCII( String string, int index, char car )\n      */\n     public static final boolean isBit( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return false;\n+        }\n+        \n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return false;\n         }\n@@ -1650,9 +1661,14 @@ public static final boolean isBit( String string, int index )\n      */\n     public static final char charAt( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return '\\0';\n+        }\n+        \n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return '\\0';\n         }\n@@ -1662,6 +1678,25 @@ public static final char charAt( String string, int index )\n         }\n     }\n \n+    public static byte getHexValue( char c1, char c2 )\n+    {\n+        if ( ( c1 > 127 ) || (c2 > 127 ) || ( c1 < 0 ) | ( c2 < 0 ) )\n+        {\n+            return -1;\n+        }\n+        \n+        return (byte)( ( HEX_VALUE[c1] << 4 ) | HEX_VALUE[c2] );\n+    }\n+\n+    public static byte getHexValue( char c )\n+    {\n+        if ( ( c > 127 ) || ( c < 0 ) )\n+        {\n+            return -1;\n+        }\n+        \n+        return HEX_VALUE[c];\n+    }\n \n     /**\n      * Check if the current character is an Hex Char &lt;hex> ::= [0x30-0x39] |\n@@ -1793,6 +1828,34 @@ public static final boolean isDigit( char car )\n         return ( car >= '0' ) && ( car <= '9' );\n     }\n \n+    /**\n+     * Test if the current byte is an Alpha character : \n+     * &lt;alpha> ::= [0x41-0x5A] | [0x61-0x7A]\n+     * \n+     * @param c The byte to test\n+     * \n+     * @return <code>true</code> if the byte is an Alpha\n+     *         character\n+     */\n+    public static final boolean isAlpha( byte c )\n+    {\n+        return ( ( c > 127 ) || ( ALPHA[c] == false ) );\n+    }\n+\n+    /**\n+     * Test if the current character is an Alpha character : \n+     * &lt;alpha> ::= [0x41-0x5A] | [0x61-0x7A]\n+     * \n+     * @param c The char to test\n+     * \n+     * @return <code>true</code> if the character is an Alpha\n+     *         character\n+     */\n+    public static final boolean isAlpha( char c )\n+    {\n+        return ( ( c > 127 ) || ( ALPHA[c] == false ) );\n+    }\n+\n \n     /**\n      * Test if the current character is an Alpha character : &lt;alpha> ::=\n@@ -1872,9 +1935,14 @@ public static final boolean isAlphaASCII( char[] chars, int index )\n      */\n     public static final boolean isAlphaASCII( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return false;\n+        }\n+        \n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return false;\n         }\n@@ -1906,9 +1974,14 @@ public static final boolean isAlphaASCII( String string, int index )\n      */\n     public static final boolean isAlphaLowercaseASCII( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return false;\n+        }\n+\n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return false;\n         }\n@@ -1940,9 +2013,14 @@ public static final boolean isAlphaLowercaseASCII( String string, int index )\n      */\n     public static final boolean isAlphaUppercaseASCII( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return false;\n+        }\n+\n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return false;\n         }\n@@ -2019,9 +2097,14 @@ public static final boolean isDigit( char[] chars, int index )\n      */\n     public static final boolean isDigit( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return false;\n+        }\n+\n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return false;\n         }\n@@ -2065,9 +2148,14 @@ public static final boolean isDigit( char[] chars )\n      */\n     public static final boolean isAlphaDigit( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return false;\n+        }\n+\n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return false;\n         }\n@@ -2163,9 +2251,14 @@ public static final boolean isAlphaDigitMinus( char[] chars, int index )\n      */\n     public static final boolean isAlphaDigitMinus( String string, int index )\n     {\n+        if ( string == null )\n+        {\n+            return false;\n+        }\n+\n         int length = string.length();\n         \n-        if ( ( string == null ) || ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n+        if ( ( length == 0 ) || ( index < 0 ) || ( index >= length ) )\n         {\n             return false;\n         }\n@@ -2690,6 +2783,7 @@ public static final String upperCase( String str )\n         {\n             return null;\n         }\n+        \n         return str.toUpperCase();\n     }\n \n@@ -2718,6 +2812,7 @@ public static final String lowerCase( String str )\n         {\n             return null;\n         }\n+        \n         return str.toLowerCase();\n     }\n \n@@ -2979,7 +3074,7 @@ public static final String mapToString( Map map, String tabs )\n      */\n     public static final String getDefaultCharsetName()\n     {\n-    \tif (null == defaultCharset) \n+    \tif ( null == defaultCharset ) \n     \t{\n     \t\ttry \n     \t\t{\n@@ -3012,6 +3107,7 @@ public static final String decodeHexString( String str ) throws InvalidNameExcep\n         }\n         \n         char[] chars = str.toCharArray();\n+        \n         if ( chars[0] != '#' )\n         {\n             throw new InvalidNameException( \"Expected string to start with a '#' character.  \" +\n@@ -3043,11 +3139,18 @@ public static final String decodeHexString( String str ) throws InvalidNameExcep\n      */\n     public static final String decodeEscapedHex( String str ) throws InvalidNameException\n     {\n+        if ( str == null )\n+        {\n+            throw new InvalidNameException( \"Expected string to be non-null \" +\n+            \"with valid index.\"  );\n+        }\n+        \n         int length = str.length();\n-        if ( str == null || length == 0 )\n+        \n+        if ( length == 0 )\n         {\n-            throw new InvalidNameException( \"Expected string to be non-empty or non-null \" +\n-                    \"with valid index.\"  );\n+            throw new InvalidNameException( \"Expected string to be non-empty \" +\n+            \"with valid index.\"  );\n         }\n         \n         // create buffer and add everything before start of scan\n@@ -3085,6 +3188,7 @@ public static final String decodeEscapedHex( String str ) throws InvalidNameExce\n     private static int collectEscapedHexBytes( ByteBuffer bb, String str, int index )\n     {\n         int advanceBy = 0;\n+        \n         for ( int ii = index; ii < str.length(); ii += 3, advanceBy += 3 )\n         {\n             // we have the start of a hex escape sequence",
                "additions": 129,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "status": "modified",
                "changes": 154,
                "deletions": 25,
                "sha": "22a72f74699870d9730b0b2dae0791317a855254",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/2153a3d82872f31a8912ee6ee965e7c49ac4b334/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java?ref=2153a3d82872f31a8912ee6ee965e7c49ac4b334"
            }
        ],
        "bug_id": "directory-ldap-api_15",
        "parent": "https://github.com/apache/directory-ldap-api/commit/3e0bbd50d8797b5c47c253e195e971ad3ba7171c",
        "message": "commiting on behalf of elecharny: Fixed potential NPE. Modified some static fields to private in StringTools. Added some accessor methods. Basically, cleaned some code to avoid NPE and potential errors\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@491358 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/f73e74ea8ae5e88e120cb10696624631c162da94",
        "file": [
            {
                "patch": "@@ -2590,7 +2590,11 @@ public String toString( String tabs )\n                 {\n                     AttributeType attributeType = schemaManager.getAttributeType( id );\n \n-                    if ( !attributeType.equals( objectClassAttributeType ) )\n+                    if ( attributeType == null )\n+                    {\n+                        sb.append( tabs + \"id: \" + id );\n+                    }\n+                    else if ( !attributeType.equals( objectClassAttributeType ) )\n                     {\n                         sb.append( attribute.toString( tabs + \"    \" ) );\n                         continue;",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/f73e74ea8ae5e88e120cb10696624631c162da94/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultEntry.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "6ef73436e0fcde3c9871b9fdaa59c759754c1319",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/f73e74ea8ae5e88e120cb10696624631c162da94/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultEntry.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultEntry.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/DefaultEntry.java?ref=f73e74ea8ae5e88e120cb10696624631c162da94"
            }
        ],
        "bug_id": "directory-ldap-api_16",
        "parent": "https://github.com/apache/directory-ldap-api/commit/165e3f8a08e3b5e666ba42b5f785e5528206a8a1",
        "message": "Fixed a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1509631 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/c7fae58bbd9992e85e6932ab7cdaffdb47b280e3",
        "file": [
            {
                "patch": "@@ -79,27 +79,27 @@\n {\n     /** the logger */\n     private static final Logger LOG = LoggerFactory.getLogger( DefaultSchemaLoader.class );\n-    \n+\n     /** the connection to the ldap server */\n     private LdapConnection connection;\n \n     /** the subschemaSubentry DN */\n     private Dn subschemaSubentryDn;\n \n     /** The SubschemaSubentry descriptions parsers */\n-    private static AttributeTypeDescriptionSchemaParser        AT_DESCR_SCHEMA_PARSER = new AttributeTypeDescriptionSchemaParser();\n-    private static DITStructureRuleDescriptionSchemaParser     DSR_DESCR_SCHEMA_PARSER = new DITStructureRuleDescriptionSchemaParser();\n-    private static DITContentRuleDescriptionSchemaParser       DCR_DESCR_SCHEMA_PARSER = new DITContentRuleDescriptionSchemaParser();\n-    private static MatchingRuleDescriptionSchemaParser         MR_DESCR_SCHEMA_PARSER = new MatchingRuleDescriptionSchemaParser();\n-    private static MatchingRuleUseDescriptionSchemaParser      MRU_DESCR_SCHEMA_PARSER = new MatchingRuleUseDescriptionSchemaParser();\n-    private static NameFormDescriptionSchemaParser             NF_DESCR_SCHEMA_PARSER = new NameFormDescriptionSchemaParser();\n-    private static ObjectClassDescriptionSchemaParser          OC_DESCR_SCHEMA_PARSER = new ObjectClassDescriptionSchemaParser();\n-    private static LdapSyntaxDescriptionSchemaParser           LS_DESCR_SCHEMA_PARSER = new LdapSyntaxDescriptionSchemaParser();\n-\n-    private static LdapComparatorDescriptionSchemaParser       C_DESCR_SCHEMA_PARSER = new LdapComparatorDescriptionSchemaParser();\n-    private static NormalizerDescriptionSchemaParser           N_DESCR_SCHEMA_PARSER = new NormalizerDescriptionSchemaParser();\n-    private static SyntaxCheckerDescriptionSchemaParser        SC_DESCR_SCHEMA_PARSER = new SyntaxCheckerDescriptionSchemaParser();\n-    \n+    private static AttributeTypeDescriptionSchemaParser AT_DESCR_SCHEMA_PARSER = new AttributeTypeDescriptionSchemaParser();\n+    private static DITStructureRuleDescriptionSchemaParser DSR_DESCR_SCHEMA_PARSER = new DITStructureRuleDescriptionSchemaParser();\n+    private static DITContentRuleDescriptionSchemaParser DCR_DESCR_SCHEMA_PARSER = new DITContentRuleDescriptionSchemaParser();\n+    private static MatchingRuleDescriptionSchemaParser MR_DESCR_SCHEMA_PARSER = new MatchingRuleDescriptionSchemaParser();\n+    private static MatchingRuleUseDescriptionSchemaParser MRU_DESCR_SCHEMA_PARSER = new MatchingRuleUseDescriptionSchemaParser();\n+    private static NameFormDescriptionSchemaParser NF_DESCR_SCHEMA_PARSER = new NameFormDescriptionSchemaParser();\n+    private static ObjectClassDescriptionSchemaParser OC_DESCR_SCHEMA_PARSER = new ObjectClassDescriptionSchemaParser();\n+    private static LdapSyntaxDescriptionSchemaParser LS_DESCR_SCHEMA_PARSER = new LdapSyntaxDescriptionSchemaParser();\n+\n+    private static LdapComparatorDescriptionSchemaParser C_DESCR_SCHEMA_PARSER = new LdapComparatorDescriptionSchemaParser();\n+    private static NormalizerDescriptionSchemaParser N_DESCR_SCHEMA_PARSER = new NormalizerDescriptionSchemaParser();\n+    private static SyntaxCheckerDescriptionSchemaParser SC_DESCR_SCHEMA_PARSER = new SyntaxCheckerDescriptionSchemaParser();\n+\n \n     /**\n      * Creates a new instance of NetworkSchemaLoader.\n@@ -114,17 +114,17 @@ public DefaultSchemaLoader( LdapConnection connection ) throws LdapException\n         {\n             throw new InvalidConnectionException( \"Cannot connect on the server, the connection is null\" );\n         }\n-        \n+\n         // Get the subschemaSubentry Dn from the rootDSE\n         try\n         {\n             this.connection = connection;\n             connection.connect();\n             Entry rootDse = connection.lookup( Dn.ROOT_DSE, SchemaConstants.SUBSCHEMA_SUBENTRY_AT );\n-            \n+\n             String subschemaSubentryStr = rootDse.get( SchemaConstants.SUBSCHEMA_SUBENTRY_AT ).getString();\n             subschemaSubentryDn = new Dn( connection.getSchemaManager(), subschemaSubentryStr );\n-            \n+\n             loadSchemas();\n         }\n         catch ( IOException ioe )\n@@ -164,7 +164,7 @@ public DefaultSchemaLoader( LdapConnection connection, Dn subschemaSubentryDn )\n     private void loadSchemas() throws LdapException\n     {\n         LOG.debug( \"initializing schemas\" );\n-        \n+\n         // Load all the elements from the SubschemaSubentry\n         Entry subschemaSubentry = connection.lookup( subschemaSubentryDn,\n             SchemaConstants.ATTRIBUTE_TYPES_AT,\n@@ -179,47 +179,47 @@ private void loadSchemas() throws LdapException\n             SchemaConstants.OBJECT_CLASSES_AT,\n             SchemaConstants.SYNTAX_CHECKERS_AT\n             );\n-        \n+\n         // Load all the AT\n         Attribute attributeTypes = subschemaSubentry.get( SchemaConstants.ATTRIBUTE_TYPES_AT );\n         loadAttributeTypes( attributeTypes );\n-        \n+\n         // Load all the C\n         Attribute comparators = subschemaSubentry.get( SchemaConstants.COMPARATORS_AT );\n         loadComparators( comparators );\n-        \n+\n         // Load all the DCR\n         Attribute ditContentRules = subschemaSubentry.get( SchemaConstants.DIT_CONTENT_RULES_AT );\n         loadDitContentRules( ditContentRules );\n-        \n+\n         // Load all the DSR\n         Attribute ditStructureRules = subschemaSubentry.get( SchemaConstants.DIT_STRUCTURE_RULES_AT );\n         loadDitStructureRules( ditStructureRules );\n-        \n+\n         // Load all the LS\n         Attribute ldapSytaxes = subschemaSubentry.get( SchemaConstants.LDAP_SYNTAXES_AT );\n         loadLdapSyntaxes( ldapSytaxes );\n-        \n+\n         // Load all the MR\n         Attribute matchingRules = subschemaSubentry.get( SchemaConstants.MATCHING_RULES_AT );\n         loadMatchingRules( matchingRules );\n-        \n+\n         // Load all the MRU\n         Attribute matchingRuleUse = subschemaSubentry.get( SchemaConstants.MATCHING_RULE_USE_AT );\n         loadMatchingRuleUses( matchingRuleUse );\n-        \n+\n         // Load all the N\n         Attribute normalizers = subschemaSubentry.get( SchemaConstants.NORMALIZERS_AT );\n         loadNormalizers( normalizers );\n-        \n+\n         // Load all the NF\n         Attribute nameForms = subschemaSubentry.get( SchemaConstants.NAME_FORMS_AT );\n         loadNameForms( nameForms );\n-        \n+\n         // Load all the OC\n         Attribute objectClasses = subschemaSubentry.get( SchemaConstants.OBJECT_CLASSES_AT );\n         loadObjectClasses( objectClasses );\n-        \n+\n         // Load all the SC\n         Attribute syntaxCheckers = subschemaSubentry.get( SchemaConstants.SYNTAX_CHECKERS_AT );\n         loadSyntaxCheckers( syntaxCheckers );\n@@ -229,47 +229,21 @@ private void loadSchemas() throws LdapException\n     /**\n      * {@inheritDoc}\n      */\n-    public List<Entry> loadAttributeTypes( Schema... schemas ) throws LdapException, IOException\n+    private void loadAttributeTypes( Attribute attributeTypes ) throws LdapException\n     {\n-        List<Entry> attributeTypeEntries = new ArrayList<Entry>();\n-        AttributesFactory factory = new AttributesFactory();\n-\n-        for ( Schema schema : schemas )\n+        if ( attributeTypes == null )\n         {\n-            Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n-            for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n-            {\n-                SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n-                if ( schemaObject instanceof AttributeType )\n-                {\n-                    AttributeType attributeType = (AttributeType)schemaObject;\n-\n-                    Entry attributeTypeEntry = factory.convert( attributeType, schema, null );\n-\n-                    attributeTypeEntries.add( attributeTypeEntry );\n-                }\n-            }\n+            return;\n         }\n \n-        return attributeTypeEntries;\n-    }\n-\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    private void loadAttributeTypes( Attribute attributeTypes ) throws LdapException\n-    {\n         for ( Value<?> value : attributeTypes )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 AttributeType attributeType = AT_DESCR_SCHEMA_PARSER.parseAttributeTypeDescription( desc );\n-                \n+\n                 updateSchemas( attributeType );\n             }\n             catch ( ParseException pe )\n@@ -285,14 +259,19 @@ private void loadAttributeTypes( Attribute attributeTypes ) throws LdapException\n      */\n     private void loadComparators( Attribute comparators ) throws LdapException\n     {\n+        if ( comparators == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : comparators )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 LdapComparatorDescription comparator = C_DESCR_SCHEMA_PARSER.parseComparatorDescription( desc );\n-                \n+\n                 updateSchemas( comparator );\n             }\n             catch ( ParseException pe )\n@@ -308,14 +287,19 @@ private void loadComparators( Attribute comparators ) throws LdapException\n      */\n     private void loadDitContentRules( Attribute ditContentRules ) throws LdapException\n     {\n+        if ( ditContentRules == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : ditContentRules )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 DITContentRule ditContentRule = DCR_DESCR_SCHEMA_PARSER.parseDITContentRuleDescription( desc );\n-                \n+\n                 updateSchemas( ditContentRule );\n             }\n             catch ( ParseException pe )\n@@ -331,14 +315,19 @@ private void loadDitContentRules( Attribute ditContentRules ) throws LdapExcepti\n      */\n     private void loadDitStructureRules( Attribute ditStructureRules ) throws LdapException\n     {\n+        if ( ditStructureRules == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : ditStructureRules )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 DITStructureRule ditStructureRule = DSR_DESCR_SCHEMA_PARSER.parseDITStructureRuleDescription( desc );\n-                \n+\n                 updateSchemas( ditStructureRule );\n             }\n             catch ( ParseException pe )\n@@ -354,14 +343,19 @@ private void loadDitStructureRules( Attribute ditStructureRules ) throws LdapExc\n      */\n     private void loadLdapSyntaxes( Attribute ldapSyntaxes ) throws LdapException\n     {\n+        if ( ldapSyntaxes == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : ldapSyntaxes )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 LdapSyntax ldapSyntax = LS_DESCR_SCHEMA_PARSER.parseLdapSyntaxDescription( desc );\n-                \n+\n                 updateSchemas( ldapSyntax );\n             }\n             catch ( ParseException pe )\n@@ -377,14 +371,19 @@ private void loadLdapSyntaxes( Attribute ldapSyntaxes ) throws LdapException\n      */\n     private void loadMatchingRules( Attribute matchingRules ) throws LdapException\n     {\n+        if ( matchingRules == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : matchingRules )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 MatchingRule matchingRule = MR_DESCR_SCHEMA_PARSER.parseMatchingRuleDescription( desc );\n-                \n+\n                 updateSchemas( matchingRule );\n             }\n             catch ( ParseException pe )\n@@ -400,14 +399,19 @@ private void loadMatchingRules( Attribute matchingRules ) throws LdapException\n      */\n     private void loadMatchingRuleUses( Attribute matchingRuleUses ) throws LdapException\n     {\n+        if ( matchingRuleUses == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : matchingRuleUses )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 MatchingRuleUse matchingRuleUse = MRU_DESCR_SCHEMA_PARSER.parseMatchingRuleUseDescription( desc );\n-                \n+\n                 updateSchemas( matchingRuleUse );\n             }\n             catch ( ParseException pe )\n@@ -423,14 +427,19 @@ private void loadMatchingRuleUses( Attribute matchingRuleUses ) throws LdapExcep\n      */\n     private void loadNameForms( Attribute nameForms ) throws LdapException\n     {\n+        if ( nameForms == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : nameForms )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 NameForm nameForm = NF_DESCR_SCHEMA_PARSER.parseNameFormDescription( desc );\n-                \n+\n                 updateSchemas( nameForm );\n             }\n             catch ( ParseException pe )\n@@ -446,14 +455,19 @@ private void loadNameForms( Attribute nameForms ) throws LdapException\n      */\n     private void loadNormalizers( Attribute normalizers ) throws LdapException\n     {\n+        if ( normalizers == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : normalizers )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 NormalizerDescription normalizer = N_DESCR_SCHEMA_PARSER.parseNormalizerDescription( desc );\n-                \n+\n                 updateSchemas( normalizer );\n             }\n             catch ( ParseException pe )\n@@ -469,14 +483,19 @@ private void loadNormalizers( Attribute normalizers ) throws LdapException\n      */\n     private void loadObjectClasses( Attribute objectClasses ) throws LdapException\n     {\n+        if ( objectClasses == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : objectClasses )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 ObjectClass objectClass = OC_DESCR_SCHEMA_PARSER.parseObjectClassDescription( desc );\n-                \n+\n                 updateSchemas( objectClass );\n             }\n             catch ( ParseException pe )\n@@ -492,14 +511,19 @@ private void loadObjectClasses( Attribute objectClasses ) throws LdapException\n      */\n     private void loadSyntaxCheckers( Attribute syntaxCheckers ) throws LdapException\n     {\n+        if ( syntaxCheckers == null )\n+        {\n+            return;\n+        }\n+\n         for ( Value<?> value : syntaxCheckers )\n         {\n             String desc = value.getString();\n \n             try\n             {\n                 SyntaxCheckerDescription syntaxChecker = SC_DESCR_SCHEMA_PARSER.parseSyntaxCheckerDescription( desc );\n-                \n+\n                 updateSchemas( syntaxChecker );\n             }\n             catch ( ParseException pe )\n@@ -508,13 +532,13 @@ private void loadSyntaxCheckers( Attribute syntaxCheckers ) throws LdapException\n             }\n         }\n     }\n-    \n-    \n+\n+\n     private void updateSchemas( SchemaObject schemaObject )\n     {\n         String schemaName = schemaObject.getSchemaName();\n         Schema schema = null;\n-        \n+\n         if ( Strings.isEmpty( schemaName ) || Strings.equals( \"null\", schemaName ) )\n         {\n             schemaName = \"default\";\n@@ -524,14 +548,14 @@ private void updateSchemas( SchemaObject schemaObject )\n         {\n             schema = schemaMap.get( schemaName );\n         }\n-        \n+\n         if ( schema == null )\n         {\n             schema = new DefaultSchema( schemaName );\n-            \n+\n             schemaMap.put( schemaName, schema );\n         }\n-          \n+\n         schema.getContent().add( new SchemaObjectWrapper( schemaObject ) );\n \n     }\n@@ -540,110 +564,71 @@ private void updateSchemas( SchemaObject schemaObject )\n     /**\n      * {@inheritDoc}\n      */\n-    public List<Entry> loadComparators( Schema... schemas ) throws LdapException, IOException\n+    public List<Entry> loadAttributeTypes( Schema... schemas ) throws LdapException, IOException\n     {\n-        List<Entry> comparatorEntries = new ArrayList<Entry>();\n+        List<Entry> attributeTypeEntries = new ArrayList<Entry>();\n+\n+        if ( schemas == null )\n+        {\n+            return attributeTypeEntries;\n+        }\n+\n+        AttributesFactory factory = new AttributesFactory();\n \n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n-                if ( schemaObject instanceof LdapComparatorDescription )\n+\n+                if ( schemaObject instanceof AttributeType )\n                 {\n-                    LdapComparatorDescription ldapComparatorDescription = (LdapComparatorDescription)schemaObject;\n-                    Entry lcEntry = getEntry( ldapComparatorDescription );\n+                    AttributeType attributeType = ( AttributeType ) schemaObject;\n \n-                    comparatorEntries.add( lcEntry );\n+                    Entry attributeTypeEntry = factory.convert( attributeType, schema, null );\n+\n+                    attributeTypeEntries.add( attributeTypeEntry );\n                 }\n             }\n         }\n \n-        return comparatorEntries;\n+        return attributeTypeEntries;\n     }\n \n-    \n-    private Entry getEntry( LdapComparatorDescription comparatorDescription )\n-    {\n-        Entry entry = new DefaultEntry();\n \n-        entry.put( SchemaConstants.OBJECT_CLASS_AT,\n-            SchemaConstants.TOP_OC,\n-            MetaSchemaConstants.META_TOP_OC,\n-            MetaSchemaConstants.META_COMPARATOR_OC );\n-\n-        entry.put( MetaSchemaConstants.M_OID_AT, comparatorDescription.getOid() );\n-        entry.put( MetaSchemaConstants.M_FQCN_AT, comparatorDescription.getFqcn() );\n-\n-        if ( comparatorDescription.getBytecode() != null )\n-        {\n-            entry.put( MetaSchemaConstants.M_BYTECODE_AT,\n-                Base64.decode( comparatorDescription.getBytecode().toCharArray() ) );\n-        }\n-\n-        if ( comparatorDescription.getDescription() != null )\n-        {\n-            entry.put( MetaSchemaConstants.M_DESCRIPTION_AT, comparatorDescription.getDescription() );\n-        }\n-\n-        return entry;\n-    }\n-\n-    \n-    private Entry getEntry( SyntaxCheckerDescription syntaxCheckerDescription )\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public List<Entry> loadComparators( Schema... schemas ) throws LdapException, IOException\n     {\n-        Entry entry = new DefaultEntry();\n-\n-        entry.put( SchemaConstants.OBJECT_CLASS_AT,\n-            SchemaConstants.TOP_OC,\n-            MetaSchemaConstants.META_TOP_OC,\n-            MetaSchemaConstants.META_SYNTAX_CHECKER_OC );\n-\n-        entry.put( MetaSchemaConstants.M_OID_AT, syntaxCheckerDescription.getOid() );\n-        entry.put( MetaSchemaConstants.M_FQCN_AT, syntaxCheckerDescription.getFqcn() );\n+        List<Entry> comparatorEntries = new ArrayList<Entry>();\n \n-        if ( syntaxCheckerDescription.getBytecode() != null )\n+        if ( schemas == null )\n         {\n-            entry.put( MetaSchemaConstants.M_BYTECODE_AT,\n-                Base64.decode( syntaxCheckerDescription.getBytecode().toCharArray() ) );\n+            return comparatorEntries;\n         }\n \n-        if ( syntaxCheckerDescription.getDescription() != null )\n+        for ( Schema schema : schemas )\n         {\n-            entry.put( MetaSchemaConstants.M_DESCRIPTION_AT, syntaxCheckerDescription.getDescription() );\n-        }\n-\n-        return entry;\n-    }\n-\n-    \n-    private Entry getEntry( NormalizerDescription normalizerDescription )\n-    {\n-        Entry entry = new DefaultEntry();\n-\n-        entry.put( SchemaConstants.OBJECT_CLASS_AT,\n-            SchemaConstants.TOP_OC,\n-            MetaSchemaConstants.META_TOP_OC,\n-            MetaSchemaConstants.META_NORMALIZER_OC );\n+            Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n \n-        entry.put( MetaSchemaConstants.M_OID_AT, normalizerDescription.getOid() );\n-        entry.put( MetaSchemaConstants.M_FQCN_AT, normalizerDescription.getFqcn() );\n+            for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n+            {\n+                SchemaObject schemaObject = schemaObjectWrapper.get();\n \n-        if ( normalizerDescription.getBytecode() != null )\n-        {\n-            entry.put( MetaSchemaConstants.M_BYTECODE_AT,\n-                Base64.decode( normalizerDescription.getBytecode().toCharArray() ) );\n-        }\n+                if ( schemaObject instanceof LdapComparatorDescription )\n+                {\n+                    LdapComparatorDescription ldapComparatorDescription = ( LdapComparatorDescription ) schemaObject;\n+                    Entry lcEntry = getEntry( ldapComparatorDescription );\n \n-        if ( normalizerDescription.getDescription() != null )\n-        {\n-            entry.put( MetaSchemaConstants.M_DESCRIPTION_AT, normalizerDescription.getDescription() );\n+                    comparatorEntries.add( lcEntry );\n+                }\n+            }\n         }\n \n-        return entry;\n+        return comparatorEntries;\n     }\n \n \n@@ -653,19 +638,25 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     public List<Entry> loadDitContentRules( Schema... schemas ) throws LdapException, IOException\n     {\n         List<Entry> ditContentRuleEntries = new ArrayList<Entry>();\n+\n+        if ( schemas == null )\n+        {\n+            return ditContentRuleEntries;\n+        }\n+\n         AttributesFactory factory = new AttributesFactory();\n \n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof DITContentRule )\n                 {\n-                    DITContentRule ditContentRule = (DITContentRule)schemaObject;\n+                    DITContentRule ditContentRule = ( DITContentRule ) schemaObject;\n \n                     Entry ditContentRuleEntry = factory.convert( ditContentRule, schema, null );\n \n@@ -674,7 +665,6 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n             }\n         }\n \n-\n         return ditContentRuleEntries;\n     }\n \n@@ -685,19 +675,25 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     public List<Entry> loadDitStructureRules( Schema... schemas ) throws LdapException, IOException\n     {\n         List<Entry> ditStructureRuleEntries = new ArrayList<Entry>();\n+\n+        if ( schemas == null )\n+        {\n+            return ditStructureRuleEntries;\n+        }\n+\n         AttributesFactory factory = new AttributesFactory();\n \n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof DITStructureRule )\n                 {\n-                    DITStructureRule ditStructureRule = (DITStructureRule)schemaObject;\n+                    DITStructureRule ditStructureRule = ( DITStructureRule ) schemaObject;\n \n                     Entry ditStructureRuleEntry = factory.convert( ditStructureRule, schema, null );\n \n@@ -706,7 +702,6 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n             }\n         }\n \n-\n         return ditStructureRuleEntries;\n     }\n \n@@ -717,19 +712,25 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     public List<Entry> loadMatchingRuleUses( Schema... schemas ) throws LdapException, IOException\n     {\n         List<Entry> matchingRuleUseEntries = new ArrayList<Entry>();\n+\n+        if ( schemas == null )\n+        {\n+            return matchingRuleUseEntries;\n+        }\n+\n         AttributesFactory factory = new AttributesFactory();\n \n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof MatchingRuleUse )\n                 {\n-                    MatchingRuleUse matchingRuleUse = (MatchingRuleUse)schemaObject;\n+                    MatchingRuleUse matchingRuleUse = ( MatchingRuleUse ) schemaObject;\n \n                     Entry matchingRuleUseEntry = factory.convert( matchingRuleUse, schema, null );\n \n@@ -738,7 +739,6 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n             }\n         }\n \n-\n         return matchingRuleUseEntries;\n     }\n \n@@ -749,19 +749,25 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     public List<Entry> loadMatchingRules( Schema... schemas ) throws LdapException, IOException\n     {\n         List<Entry> matchingRuleEntries = new ArrayList<Entry>();\n+\n+        if ( schemas == null )\n+        {\n+            return matchingRuleEntries;\n+        }\n+\n         AttributesFactory factory = new AttributesFactory();\n \n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof MatchingRule )\n                 {\n-                    MatchingRule matchingRule = (MatchingRule)schemaObject;\n+                    MatchingRule matchingRule = ( MatchingRule ) schemaObject;\n \n                     Entry matchingRuleEntry = factory.convert( matchingRule, schema, null );\n \n@@ -780,19 +786,25 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     public List<Entry> loadNameForms( Schema... schemas ) throws LdapException, IOException\n     {\n         List<Entry> nameFormEntries = new ArrayList<Entry>();\n+\n+        if ( schemas == null )\n+        {\n+            return nameFormEntries;\n+        }\n+\n         AttributesFactory factory = new AttributesFactory();\n \n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof NameForm )\n                 {\n-                    NameForm nameForm = (NameForm)schemaObject;\n+                    NameForm nameForm = ( NameForm ) schemaObject;\n \n                     Entry nameFormEntry = factory.convert( nameForm, schema, null );\n \n@@ -801,7 +813,6 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n             }\n         }\n \n-\n         return nameFormEntries;\n     }\n \n@@ -813,25 +824,29 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     {\n         List<Entry> normalizerEntries = new ArrayList<Entry>();\n \n+        if ( schemas == null )\n+        {\n+            return normalizerEntries;\n+        }\n+\n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof NormalizerDescription )\n                 {\n-                    NormalizerDescription normalizerDescription = (NormalizerDescription)schemaObject;\n+                    NormalizerDescription normalizerDescription = ( NormalizerDescription ) schemaObject;\n                     Entry normalizerEntry = getEntry( normalizerDescription );\n \n                     normalizerEntries.add( normalizerEntry );\n                 }\n             }\n         }\n \n-\n         return normalizerEntries;\n     }\n \n@@ -842,23 +857,29 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     public List<Entry> loadObjectClasses( Schema... schemas ) throws LdapException, IOException\n     {\n         List<Entry> objectClassEntries = new ArrayList<Entry>();\n+\n+        if ( schemas == null )\n+        {\n+            return objectClassEntries;\n+        }\n+\n         AttributesFactory factory = new AttributesFactory();\n \n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof ObjectClass )\n                 {\n-                    ObjectClass objectClass = (ObjectClass)schemaObject;\n+                    ObjectClass objectClass = ( ObjectClass ) schemaObject;\n \n                     Entry objectClassEntry = factory.convert( objectClass, schema, null );\n \n-                    objectClassEntries.add(objectClassEntry );\n+                    objectClassEntries.add( objectClassEntry );\n                 }\n             }\n         }\n@@ -874,17 +895,22 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     {\n         List<Entry> syntaxCheckerEntries = new ArrayList<Entry>();\n \n+        if ( schemas == null )\n+        {\n+            return syntaxCheckerEntries;\n+        }\n+\n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof SyntaxCheckerDescription )\n                 {\n-                    SyntaxCheckerDescription syntaxCheckerDescription = (SyntaxCheckerDescription)schemaObject;\n+                    SyntaxCheckerDescription syntaxCheckerDescription = ( SyntaxCheckerDescription ) schemaObject;\n                     Entry syntaxCheckerEntry = getEntry( syntaxCheckerDescription );\n \n                     syntaxCheckerEntries.add( syntaxCheckerEntry );\n@@ -902,19 +928,25 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n     public List<Entry> loadSyntaxes( Schema... schemas ) throws LdapException, IOException\n     {\n         List<Entry> syntaxEntries = new ArrayList<Entry>();\n+\n+        if ( schemas == null )\n+        {\n+            return syntaxEntries;\n+        }\n+\n         AttributesFactory factory = new AttributesFactory();\n \n         for ( Schema schema : schemas )\n         {\n             Set<SchemaObjectWrapper> schemaObjectWrappers = schema.getContent();\n-            \n+\n             for ( SchemaObjectWrapper schemaObjectWrapper : schemaObjectWrappers )\n             {\n                 SchemaObject schemaObject = schemaObjectWrapper.get();\n-                \n+\n                 if ( schemaObject instanceof LdapSyntax )\n                 {\n-                    LdapSyntax ldapSyntax = (LdapSyntax)schemaObject;\n+                    LdapSyntax ldapSyntax = ( LdapSyntax ) schemaObject;\n \n                     Entry ldapSyntaxEntry = factory.convert( ldapSyntax, schema, null );\n \n@@ -923,7 +955,87 @@ private Entry getEntry( NormalizerDescription normalizerDescription )\n             }\n         }\n \n-\n         return syntaxEntries;\n     }\n+\n+\n+    private Entry getEntry( LdapComparatorDescription comparatorDescription )\n+    {\n+        Entry entry = new DefaultEntry();\n+\n+        entry.put( SchemaConstants.OBJECT_CLASS_AT,\n+            SchemaConstants.TOP_OC,\n+            MetaSchemaConstants.META_TOP_OC,\n+            MetaSchemaConstants.META_COMPARATOR_OC );\n+\n+        entry.put( MetaSchemaConstants.M_OID_AT, comparatorDescription.getOid() );\n+        entry.put( MetaSchemaConstants.M_FQCN_AT, comparatorDescription.getFqcn() );\n+\n+        if ( comparatorDescription.getBytecode() != null )\n+        {\n+            entry.put( MetaSchemaConstants.M_BYTECODE_AT,\n+                Base64.decode( comparatorDescription.getBytecode().toCharArray() ) );\n+        }\n+\n+        if ( comparatorDescription.getDescription() != null )\n+        {\n+            entry.put( MetaSchemaConstants.M_DESCRIPTION_AT, comparatorDescription.getDescription() );\n+        }\n+\n+        return entry;\n+    }\n+\n+\n+    private Entry getEntry( SyntaxCheckerDescription syntaxCheckerDescription )\n+    {\n+        Entry entry = new DefaultEntry();\n+\n+        entry.put( SchemaConstants.OBJECT_CLASS_AT,\n+            SchemaConstants.TOP_OC,\n+            MetaSchemaConstants.META_TOP_OC,\n+            MetaSchemaConstants.META_SYNTAX_CHECKER_OC );\n+\n+        entry.put( MetaSchemaConstants.M_OID_AT, syntaxCheckerDescription.getOid() );\n+        entry.put( MetaSchemaConstants.M_FQCN_AT, syntaxCheckerDescription.getFqcn() );\n+\n+        if ( syntaxCheckerDescription.getBytecode() != null )\n+        {\n+            entry.put( MetaSchemaConstants.M_BYTECODE_AT,\n+                Base64.decode( syntaxCheckerDescription.getBytecode().toCharArray() ) );\n+        }\n+\n+        if ( syntaxCheckerDescription.getDescription() != null )\n+        {\n+            entry.put( MetaSchemaConstants.M_DESCRIPTION_AT, syntaxCheckerDescription.getDescription() );\n+        }\n+\n+        return entry;\n+    }\n+\n+\n+    private Entry getEntry( NormalizerDescription normalizerDescription )\n+    {\n+        Entry entry = new DefaultEntry();\n+\n+        entry.put( SchemaConstants.OBJECT_CLASS_AT,\n+            SchemaConstants.TOP_OC,\n+            MetaSchemaConstants.META_TOP_OC,\n+            MetaSchemaConstants.META_NORMALIZER_OC );\n+\n+        entry.put( MetaSchemaConstants.M_OID_AT, normalizerDescription.getOid() );\n+        entry.put( MetaSchemaConstants.M_FQCN_AT, normalizerDescription.getFqcn() );\n+\n+        if ( normalizerDescription.getBytecode() != null )\n+        {\n+            entry.put( MetaSchemaConstants.M_BYTECODE_AT,\n+                Base64.decode( normalizerDescription.getBytecode().toCharArray() ) );\n+        }\n+\n+        if ( normalizerDescription.getDescription() != null )\n+        {\n+            entry.put( MetaSchemaConstants.M_DESCRIPTION_AT, normalizerDescription.getDescription() );\n+        }\n+\n+        return entry;\n+    }\n }",
                "additions": 297,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c7fae58bbd9992e85e6932ab7cdaffdb47b280e3/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/DefaultSchemaLoader.java",
                "status": "modified",
                "changes": 482,
                "deletions": 185,
                "sha": "734e052e8a7964a8d60b036436ee784b5b12ed53",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c7fae58bbd9992e85e6932ab7cdaffdb47b280e3/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/DefaultSchemaLoader.java",
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/DefaultSchemaLoader.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/DefaultSchemaLoader.java?ref=c7fae58bbd9992e85e6932ab7cdaffdb47b280e3"
            }
        ],
        "bug_id": "directory-ldap-api_17",
        "parent": "https://github.com/apache/directory-ldap-api/commit/8fc6e047b622b8f90311777f84196f157f838495",
        "message": "Prevented NPEs.\nRe-grouped methods by kind.\nApplied code formatter.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1243871 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/27f07a188b04282f324dc3e19131e27ebdcd8b1c",
        "file": [
            {
                "patch": "@@ -109,5 +109,6 @@ public void setSchemaManager( SchemaManager schemaManager )\n \n         ((LdapComparator<E>)wrapped).setSchemaManager( schemaManager );\n         super.setSchemaManager( schemaManager );\n+        this.schemaManager = schemaManager;\n     }\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/27f07a188b04282f324dc3e19131e27ebdcd8b1c/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/schema/comparators/SerializableComparator.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "03f8968c5951bba289eb44224347a39f814276bb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/27f07a188b04282f324dc3e19131e27ebdcd8b1c/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/schema/comparators/SerializableComparator.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/schema/comparators/SerializableComparator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/schema/comparators/SerializableComparator.java?ref=27f07a188b04282f324dc3e19131e27ebdcd8b1c"
            }
        ],
        "bug_id": "directory-ldap-api_18",
        "parent": "https://github.com/apache/directory-ldap-api/commit/b923bc855a3697b9d184b96b60eba6526a178ebb",
        "message": "o fixed an NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1196242 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/1b6b70579d5f0f2709e2bb45f6778bae8cc7108e",
        "file": [
            {
                "patch": "@@ -765,6 +765,11 @@ protected void bind( int messageId ) throws LdapException, EncoderException, Dec\n             return;\n         }\n         \n+        if ( connection == null )\n+        {\n+        \tthrow new IOException( I18n.err( I18n.ERR_03101_MISSING_CONNECTION_TO ) );\n+        }\n+        \n         BindRequest bindRequest = new BindRequestImpl();\n         bindRequest.setSimple( true );\n         bindRequest.setCredentials( Strings.getBytesUtf8(password) );",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/1b6b70579d5f0f2709e2bb45f6778bae8cc7108e/dsml/engine/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "af7a6e17d4b82f0ed9f64d547d34b810298d6b4d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/1b6b70579d5f0f2709e2bb45f6778bae8cc7108e/dsml/engine/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "filename": "dsml/engine/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/engine/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java?ref=1b6b70579d5f0f2709e2bb45f6778bae8cc7108e"
            },
            {
                "patch": "@@ -134,6 +134,9 @@\n     ERR_03039( \"ERR_03039\" ),\n     ERR_03040( \"ERR_03040\" ),\n \n+    // dsml-engine\n+    ERR_03101_MISSING_CONNECTION_TO( \"ERR_03101_MISSING_CONNECTION_TO\" ),\n+\n     // ldap\n     ERR_04001_NULL_IDENTIFICATION_TAG( \"ERR_04001_NULL_IDENTIFICATION_TAG\" ),\n     ERR_04002_BAD_PRECENDENCE( \"ERR_04002_BAD_PRECENDENCE\" ),",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/1b6b70579d5f0f2709e2bb45f6778bae8cc7108e/i18n/src/main/java/org/apache/directory/shared/i18n/I18n.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "6634a7280431e1263c034c0f855d27acfce3780b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/1b6b70579d5f0f2709e2bb45f6778bae8cc7108e/i18n/src/main/java/org/apache/directory/shared/i18n/I18n.java",
                "filename": "i18n/src/main/java/org/apache/directory/shared/i18n/I18n.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/i18n/src/main/java/org/apache/directory/shared/i18n/I18n.java?ref=1b6b70579d5f0f2709e2bb45f6778bae8cc7108e"
            },
            {
                "patch": "@@ -122,6 +122,9 @@ ERR_03038=The attribute requestID can''t be equal to 0\n ERR_03039=the given requestID is not an integer\n ERR_03040=unable to find the batch request\n \n+# dsml-parser\n+ERR_03101_MISSING_CONNECTION_TO BIND=Missing connection, can not bind\n+\n # ldap\n ERR_04001_NULL_IDENTIFICATION_TAG=identificationTag parameter is null\n ERR_04002_BAD_PRECENDENCE=precedence parameter not in [0-255] : {0}",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/1b6b70579d5f0f2709e2bb45f6778bae8cc7108e/i18n/src/main/resources/org/apache/directory/shared/i18n/errors.properties",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "7205675442ae5593d7123cd2ce485e2df6051cff",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/1b6b70579d5f0f2709e2bb45f6778bae8cc7108e/i18n/src/main/resources/org/apache/directory/shared/i18n/errors.properties",
                "filename": "i18n/src/main/resources/org/apache/directory/shared/i18n/errors.properties",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/i18n/src/main/resources/org/apache/directory/shared/i18n/errors.properties?ref=1b6b70579d5f0f2709e2bb45f6778bae8cc7108e"
            }
        ],
        "bug_id": "directory-ldap-api_19",
        "parent": "https://github.com/apache/directory-ldap-api/commit/bf4b457ab4c581ab9548e93ec7b61cf4bc7172bc",
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1178343 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/d266c0992d51514b4bfed1fd6c337818d54bbeb8",
        "file": [
            {
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.directory.shared.ldap.codec.api.ExtendedRequestDecorator;\n import org.apache.directory.shared.ldap.codec.api.LdapCodecService;\n import org.apache.directory.shared.ldap.extras.extended.StoredProcedureRequest;\n+import org.apache.directory.shared.ldap.extras.extended.StoredProcedureRequestImpl;\n import org.apache.directory.shared.ldap.extras.extended.StoredProcedureResponse;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -49,6 +50,8 @@\n     public StoredProcedureRequestDecorator( LdapCodecService codec, StoredProcedureRequest decoratedMessage )\n     {\n         super( codec, decoratedMessage );\n+        \n+        procedure = new StoredProcedure( ( StoredProcedureRequestImpl ) decoratedMessage );\n     }\n \n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/d266c0992d51514b4bfed1fd6c337818d54bbeb8/ldap-extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/extended/ads_impl/StoredProcedureRequestDecorator.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "cf0b32a4ad58f511c5f1ab20e51c6fc5f9b54292",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/d266c0992d51514b4bfed1fd6c337818d54bbeb8/ldap-extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/extended/ads_impl/StoredProcedureRequestDecorator.java",
                "filename": "ldap-extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/extended/ads_impl/StoredProcedureRequestDecorator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/extended/ads_impl/StoredProcedureRequestDecorator.java?ref=d266c0992d51514b4bfed1fd6c337818d54bbeb8"
            }
        ],
        "bug_id": "directory-ldap-api_20",
        "parent": "https://github.com/apache/directory-ldap-api/commit/d846b8b6ff8b310279bc79aa764030f252e7a66e",
        "message": "DIRSHARED-86: fixing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/akarasulu@1073649 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/08a2b2bbdf0d3bd3269c44dd1b1fab0d783a8375",
        "file": [
            {
                "patch": "@@ -23,8 +23,8 @@\n import org.apache.directory.shared.asn1.ber.AbstractContainer;\n import org.apache.directory.shared.ldap.codec.controls.AbstractControl;\n import org.apache.directory.shared.ldap.codec.decorators.MessageDecorator;\n-import org.apache.directory.shared.ldap.codec.decorators.SearchRequestDecorator;\n import org.apache.directory.shared.ldap.codec.decorators.ModifyRequestDecorator;\n+import org.apache.directory.shared.ldap.codec.decorators.SearchRequestDecorator;\n import org.apache.directory.shared.ldap.message.spi.BinaryAttributeDetector;\n import org.apache.directory.shared.ldap.model.message.AbandonRequest;\n import org.apache.directory.shared.ldap.model.message.AddRequest;\n@@ -269,12 +269,21 @@ public ModifyDnResponse getModifyDnResponse()\n     }\n \n \n+    /**\n+     * @return Returns the SearchRequest stored in the container\n+     */\n+    public SearchRequest getSearchRequest()\n+    {\n+        return (SearchRequest)(( SearchRequestDecorator ) message).getMessage();\n+    }\n+\n+\n     /**\n      * @return Returns the SearchRequest stored in the container\n      */\n     public SearchRequestDecorator getSearchRequestDecorator()\n     {\n-        return ( SearchRequestDecorator ) decorator;\n+        return ( SearchRequestDecorator ) message;\n     }\n \n ",
                "additions": 11,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/08a2b2bbdf0d3bd3269c44dd1b1fab0d783a8375/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageContainer.java",
                "status": "modified",
                "changes": 13,
                "deletions": 2,
                "sha": "e2e1fc3a53478168adab52443d5a75e0597839eb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/08a2b2bbdf0d3bd3269c44dd1b1fab0d783a8375/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageContainer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageContainer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageContainer.java?ref=08a2b2bbdf0d3bd3269c44dd1b1fab0d783a8375"
            },
            {
                "patch": "@@ -71,8 +71,8 @@\n import org.apache.directory.shared.ldap.codec.actions.StoreTypeMatchingRuleAction;\n import org.apache.directory.shared.ldap.codec.actions.ValueAction;\n import org.apache.directory.shared.ldap.codec.controls.ControlFactory;\n-import org.apache.directory.shared.ldap.codec.decorators.SearchRequestDecorator;\n import org.apache.directory.shared.ldap.codec.decorators.ModifyRequestDecorator;\n+import org.apache.directory.shared.ldap.codec.decorators.SearchRequestDecorator;\n import org.apache.directory.shared.ldap.codec.search.ExtensibleMatchFilter;\n import org.apache.directory.shared.ldap.codec.search.SubstringFilter;\n import org.apache.directory.shared.ldap.message.SearchRequestImpl;\n@@ -3602,8 +3602,10 @@ public void action( Asn1Container container )\n                     TLV tlv = ldapMessageContainer.getCurrentTLV();\n \n                     SearchRequest searchRequest = new SearchRequestImpl( ldapMessageContainer.getMessageId() );\n-                    ldapMessageContainer.setMessage( searchRequest );\n-                    ldapMessageContainer.getSearchRequestDecorator().setTlvId(tlv.getId());\n+                    SearchRequestDecorator searchRequestDecorator = new SearchRequestDecorator( searchRequest );\n+\n+                    searchRequestDecorator.setTlvId( tlv.getId());\n+                    ldapMessageContainer.setMessage( searchRequestDecorator );\n \n                     LOG.debug( \"Search Request\" );\n                 }\n@@ -3624,7 +3626,8 @@ public void action( Asn1Container container )\n                 public void action( Asn1Container container ) throws DecoderException\n                 {\n                     LdapMessageContainer ldapMessageContainer = ( LdapMessageContainer ) container;\n-                    SearchRequest searchRequest = ldapMessageContainer.getSearchRequestDecorator().getSearchRequest();\n+                    SearchRequestDecorator searchRequestDecorator = ldapMessageContainer.getSearchRequestDecorator();\n+                    SearchRequest searchRequest = searchRequestDecorator.getSearchRequest();\n \n                     TLV tlv = ldapMessageContainer.getCurrentTLV();\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/08a2b2bbdf0d3bd3269c44dd1b1fab0d783a8375/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageGrammar.java",
                "status": "modified",
                "changes": 11,
                "deletions": 4,
                "sha": "f8659ec954cd1659efec09d4c46a2e736b6def2e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/08a2b2bbdf0d3bd3269c44dd1b1fab0d783a8375/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageGrammar.java?ref=08a2b2bbdf0d3bd3269c44dd1b1fab0d783a8375"
            }
        ],
        "bug_id": "directory-ldap-api_21",
        "parent": "https://github.com/apache/directory-ldap-api/commit/315a3c3f2e30676954c1a0988d878b2583464e6e",
        "message": "Fixed some NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1063522 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/5ec39d160b6e769aaba89873eb1cd8bcc27745c1",
        "file": [
            {
                "patch": "@@ -169,9 +169,17 @@ public void addNodeToHead( ExprNode node )\n      */\n     public void setChildren( List<ExprNode> list )\n     {\n-        children = list;\n+        if ( list == null )\n+        {\n+            children.clear();\n+        }\n+        else\n+        {\n+            children = list;\n+        }\n     }\n     \n+    \n     /**\n      * Convenience method that gets the first child in the children array. Its\n      * very useful for NOT nodes since they only have one child by avoiding code",
                "additions": 9,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ec39d160b6e769aaba89873eb1cd8bcc27745c1/ldap/src/main/java/org/apache/directory/shared/ldap/filter/BranchNode.java",
                "status": "modified",
                "changes": 10,
                "deletions": 1,
                "sha": "07a5aadc441b39f99d379de0fee47532601bbd9d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ec39d160b6e769aaba89873eb1cd8bcc27745c1/ldap/src/main/java/org/apache/directory/shared/ldap/filter/BranchNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/BranchNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/BranchNode.java?ref=5ec39d160b6e769aaba89873eb1cd8bcc27745c1"
            },
            {
                "patch": "@@ -113,12 +113,20 @@ public void addNodeToHead( ExprNode node )\n      */\n     public void setChildren( List<ExprNode> childList )\n     {\n-        if ( ( childList != null ) && ( childList.size() > 1 ) )\n+        if ( childList == null )\n         {\n-            throw new IllegalStateException( I18n.err( I18n.ERR_04159 ) );            \n+            children.clear();\n+        }\n+        else\n+        {\n+            \n+            if ( childList.size() > 1 )\n+            {\n+                throw new IllegalStateException( I18n.err( I18n.ERR_04159 ) );\n+            }\n+    \n+            children = childList;\n         }\n-\n-        children = childList;\n     }\n \n     ",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ec39d160b6e769aaba89873eb1cd8bcc27745c1/ldap/src/main/java/org/apache/directory/shared/ldap/filter/NotNode.java",
                "status": "modified",
                "changes": 16,
                "deletions": 4,
                "sha": "6d784532dc68ffc003ed0fec96c458b43c0fbbee",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ec39d160b6e769aaba89873eb1cd8bcc27745c1/ldap/src/main/java/org/apache/directory/shared/ldap/filter/NotNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/NotNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/NotNode.java?ref=5ec39d160b6e769aaba89873eb1cd8bcc27745c1"
            },
            {
                "patch": "@@ -101,7 +101,7 @@ public boolean isValidSyntax( Object value )\n \n             for ( String regexp:expressions )\n             {\n-                match = match && str.matches( regexp );\n+                match = str.matches( regexp );\n \n                 if ( !match )\n                 {",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ec39d160b6e769aaba89873eb1cd8bcc27745c1/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntaxCheckers/RegexSyntaxChecker.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "87f270466d5f853e22c9a76bcebc8c678e1876d7",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ec39d160b6e769aaba89873eb1cd8bcc27745c1/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntaxCheckers/RegexSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntaxCheckers/RegexSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntaxCheckers/RegexSyntaxChecker.java?ref=5ec39d160b6e769aaba89873eb1cd8bcc27745c1"
            }
        ],
        "bug_id": "directory-ldap-api_22",
        "parent": "https://github.com/apache/directory-ldap-api/commit/9277a2a73f457d7b560057fc72caa063f809e0ea",
        "message": "o Fixed a potential NPE\no Removed a useless test\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1062542 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/543524998213e6c1f3e71481b6ffffac0142b0f7",
        "file": [
            {
                "patch": "@@ -620,7 +620,7 @@ public boolean close() throws IOException\n         }\n \n         // And close the connector if it has been created locally\n-        if ( localConnector )\n+        if ( localConnector && ( connector != null ) )\n         {\n             // Release the connector\n             connector.dispose();",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/543524998213e6c1f3e71481b6ffffac0142b0f7/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "6eda8d70f1aa87976574a6acf69f6aa902540839",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/543524998213e6c1f3e71481b6ffffac0142b0f7/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=543524998213e6c1f3e71481b6ffffac0142b0f7"
            }
        ],
        "bug_id": "directory-ldap-api_23",
        "parent": "https://github.com/apache/directory-ldap-api/commit/5eb2e14597f6534440a8f4d499c29d65d66d717e",
        "message": "Fixed a potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1028388 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/660bc1952d2be58639a5c3403458f633c8698ead",
        "file": [
            {
                "patch": "@@ -145,7 +145,7 @@ public void setHumanReadable( boolean humanReadable )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.isHumanReadable = humanReadable;\n@@ -176,7 +176,7 @@ public void setSyntaxChecker( SyntaxChecker syntaxChecker )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.syntaxChecker = syntaxChecker;\n@@ -195,7 +195,7 @@ public void updateSyntaxChecker( SyntaxChecker newSyntaxChecker )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         this.syntaxChecker = newSyntaxChecker;\n     }\n \n@@ -236,12 +236,13 @@ public void addToRegistries( List<Throwable> errors, Registries registries ) thr\n             }\n         }\n     }\n-    \n-    \n+\n+\n     /**\n      * {@inheritDoc}\n      */\n-    @SuppressWarnings(\"PMD.CollapsibleIfStatements\") // Used because of comments\n+    @SuppressWarnings(\"PMD.CollapsibleIfStatements\")\n+    // Used because of comments\n     public void removeFromRegistries( List<Throwable> errors, Registries registries ) throws LdapException\n     {\n         if ( registries != null )\n@@ -303,7 +304,19 @@ public boolean equals( Object o )\n         }\n \n         // Check the SyntaxChecker (not a equals)\n-        return syntaxChecker.getOid().equals( that.syntaxChecker.getOid() );\n+        if ( syntaxChecker != null )\n+        {\n+            if ( that.syntaxChecker == null )\n+            {\n+                return false;\n+            }\n+\n+            return syntaxChecker.getOid().equals( that.syntaxChecker.getOid() );\n+        }\n+        else\n+        {\n+            return that.syntaxChecker == null;\n+        }\n     }\n \n ",
                "additions": 20,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/660bc1952d2be58639a5c3403458f633c8698ead/ldap/src/main/java/org/apache/directory/shared/ldap/schema/LdapSyntax.java",
                "status": "modified",
                "changes": 27,
                "deletions": 7,
                "sha": "66e39473d15e5ec6cdb31d1419c07e32aef9ffaa",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/660bc1952d2be58639a5c3403458f633c8698ead/ldap/src/main/java/org/apache/directory/shared/ldap/schema/LdapSyntax.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/LdapSyntax.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/LdapSyntax.java?ref=660bc1952d2be58639a5c3403458f633c8698ead"
            },
            {
                "patch": "@@ -252,7 +252,7 @@ public void setSyntaxOid( String oid )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.ldapSyntaxOid = oid;\n@@ -271,7 +271,7 @@ public void setSyntax( LdapSyntax ldapSyntax )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.ldapSyntax = ldapSyntax;\n@@ -291,7 +291,7 @@ public void updateSyntax( LdapSyntax ldapSyntax )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         this.ldapSyntax = ldapSyntax;\n         this.ldapSyntaxOid = ldapSyntax.getOid();\n     }\n@@ -321,7 +321,7 @@ public void setLdapComparator( LdapComparator<?> ldapComparator )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.ldapComparator = ( LdapComparator<? super Object> ) ldapComparator;\n@@ -340,7 +340,7 @@ public void updateLdapComparator( LdapComparator<?> ldapComparator )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         this.ldapComparator = ( LdapComparator<? super Object> ) ldapComparator;\n     }\n \n@@ -369,7 +369,7 @@ public void setNormalizer( Normalizer normalizer )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         if ( !isReadOnly )\n         {\n             this.normalizer = normalizer;\n@@ -388,7 +388,7 @@ public void updateNormalizer( Normalizer normalizer )\n         {\n             throw new UnsupportedOperationException( I18n.err( I18n.ERR_04441, getName() ) );\n         }\n-        \n+\n         this.normalizer = normalizer;\n     }\n \n@@ -474,13 +474,29 @@ public boolean equals( Object o )\n             }\n         }\n \n-        // Check the Syntax\n+        // Check the Syntax OID\n         if ( !compareOid( ldapSyntaxOid, that.ldapSyntaxOid ) )\n         {\n             return false;\n         }\n \n-        return ldapSyntax.equals( that.ldapSyntax );\n+        // Check the Syntax\n+        if ( ldapSyntax != null )\n+        {\n+            if ( !ldapSyntax.equals( that.ldapSyntax ) )\n+            {\n+                return false;\n+            }\n+        }\n+        else\n+        {\n+            if ( that.ldapSyntax != null )\n+            {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n     }\n \n ",
                "additions": 25,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/660bc1952d2be58639a5c3403458f633c8698ead/ldap/src/main/java/org/apache/directory/shared/ldap/schema/MatchingRule.java",
                "status": "modified",
                "changes": 34,
                "deletions": 9,
                "sha": "5b05b4a37b3e913a6064e24b32819641e72b8033",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/660bc1952d2be58639a5c3403458f633c8698ead/ldap/src/main/java/org/apache/directory/shared/ldap/schema/MatchingRule.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/MatchingRule.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/MatchingRule.java?ref=660bc1952d2be58639a5c3403458f633c8698ead"
            }
        ],
        "bug_id": "directory-ldap-api_24",
        "parent": "https://github.com/apache/directory-ldap-api/commit/f2c8f68172ad679562aff8401e863f5ad09d09b2",
        "message": "Fixed a few NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1005803 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/e2addd8ad2157f24429de145193bc4c9e66da298",
        "file": [
            {
                "patch": "@@ -619,6 +619,7 @@\n     ERR_04478_NO_VALUE_NOT_ALLOWED( \"ERR_04478_NO_VALUE_NOT_ALLOWED\" ),\n     ERR_04479_INVALID_SYNTAX_VALUE( \"ERR_04479_INVALID_SYNTAX_VALUE\" ),\n     ERR_04480_END_OF_STREAM( \"ERR_04480_END_OF_STREAM\" ),\n+    ERR_04481_ENTRY_NULL_VALUE( \"ERR_04481_ENTRY_NULL_VALUE\" ),\n \n     // ldap-constants\n     ERR_05001( \"ERR_05001\" ),",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e2addd8ad2157f24429de145193bc4c9e66da298/i18n/src/main/java/org/apache/directory/shared/i18n/I18n.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "060d1e46e311798d6e6e936b35d75ee751e7355f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e2addd8ad2157f24429de145193bc4c9e66da298/i18n/src/main/java/org/apache/directory/shared/i18n/I18n.java",
                "filename": "i18n/src/main/java/org/apache/directory/shared/i18n/I18n.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/i18n/src/main/java/org/apache/directory/shared/i18n/I18n.java?ref=e2addd8ad2157f24429de145193bc4c9e66da298"
            },
            {
                "patch": "@@ -603,6 +603,7 @@ ERR_04477_NO_VALID_AT_FOR_THIS_ID=Cannot find a valid AttributeType for the ''{0\n ERR_04478_NO_VALUE_NOT_ALLOWED=Cannot create or add an Attribute with no value in it\n ERR_04479_INVALID_SYNTAX_VALUE= The value ''{0}'' does not respect the AttributeType ''{1}'' syntax\n ERR_04480_END_OF_STREAM=End of stream\n+ERR_04481_ENTRY_NULL_VALUE=Entry can't be null\n \n # ldap-constants\n ERR_05001=Unknown AuthenticationLevel {0}",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e2addd8ad2157f24429de145193bc4c9e66da298/i18n/src/main/resources/org/apache/directory/shared/i18n/errors.properties",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "f0c8e3bd9a345c792712f0aac67868e0ddf84160",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e2addd8ad2157f24429de145193bc4c9e66da298/i18n/src/main/resources/org/apache/directory/shared/i18n/errors.properties",
                "filename": "i18n/src/main/resources/org/apache/directory/shared/i18n/errors.properties",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/i18n/src/main/resources/org/apache/directory/shared/i18n/errors.properties?ref=e2addd8ad2157f24429de145193bc4c9e66da298"
            },
            {
                "patch": "@@ -25,6 +25,7 @@\n import java.util.LinkedList;\n import java.util.List;\n \n+import org.apache.directory.shared.i18n.I18n;\n import org.apache.directory.shared.ldap.exception.LdapException;\n \n import org.apache.directory.shared.asn1.ber.tlv.TLV;\n@@ -274,8 +275,13 @@ public void setEntryDn( DN entryDn )\n      *                    +--> ...\n      *                    +--> 0x04 L7-m-n value\n      */\n-    protected int computeLengthProtocolOp()\n+    protected int computeLengthProtocolOp() throws IllegalArgumentException\n     {\n+        if ( entry == null )\n+        {\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_04481_ENTRY_NULL_VALUE ) );\n+        }\n+        \n         // The entry\n         addRequestLength = 1 + TLV.getNbBytes( DN.getNbBytes( entry.getDn() ) ) + DN.getNbBytes( entry.getDn() );\n \n@@ -357,8 +363,13 @@ protected int computeLengthProtocolOp()\n      * \n      * @param buffer The buffer where to put the PDU\n      */\n-    protected void encodeProtocolOp( ByteBuffer buffer ) throws EncoderException\n+    protected void encodeProtocolOp( ByteBuffer buffer ) throws EncoderException, IllegalArgumentException\n     {\n+        if ( entry == null )\n+        {\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_04481_ENTRY_NULL_VALUE ) );\n+        }\n+        \n         try\n         {\n             // The AddRequest Tag",
                "additions": 13,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e2addd8ad2157f24429de145193bc4c9e66da298/ldap/src/main/java/org/apache/directory/shared/ldap/codec/add/AddRequestCodec.java",
                "status": "modified",
                "changes": 15,
                "deletions": 2,
                "sha": "ae0fa14168ac55877ca7f9ffae68caf062964bc4",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e2addd8ad2157f24429de145193bc4c9e66da298/ldap/src/main/java/org/apache/directory/shared/ldap/codec/add/AddRequestCodec.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/add/AddRequestCodec.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/add/AddRequestCodec.java?ref=e2addd8ad2157f24429de145193bc4c9e66da298"
            }
        ],
        "bug_id": "directory-ldap-api_25",
        "parent": "https://github.com/apache/directory-ldap-api/commit/c7580291f4d6d9d3ca272a9dfc39cdd477ba0ded",
        "message": "Avoid unexpected NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@951423 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/c40d9f0d00134bd4613c64d57f18a904f8c5937b",
        "file": [
            {
                "patch": "@@ -582,7 +582,7 @@ public int hashCode()\n     {\n         int result = 37;\n \n-        if ( entry.getDn() != null )\n+        if ( entry != null && entry.getDn() != null )\n         {\n             result = result*17 + entry.getDn().hashCode();\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c40d9f0d00134bd4613c64d57f18a904f8c5937b/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e804b1ca615d02d683b609a5d39b23ddba45c499",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c40d9f0d00134bd4613c64d57f18a904f8c5937b/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "filename": "ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-ldif/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java?ref=c40d9f0d00134bd4613c64d57f18a904f8c5937b"
            }
        ],
        "bug_id": "directory-ldap-api_26",
        "parent": "https://github.com/apache/directory-ldap-api/commit/9ee3f49e4c7fd16cad2d719c21b0bdb88163590b",
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@951312 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/e0f6d47ed462282f6bff0c4f44b98fea60d2a992",
        "file": [
            {
                "patch": "@@ -141,7 +141,14 @@ public String toString()\n          */\n         protected NamedUserClass( Set<DN> names )\n         {\n-            this.names = Collections.unmodifiableSet( new HashSet<DN>( names ) );\n+            if ( names == null )\n+            {\n+                this.names = Collections.unmodifiableSet( new HashSet<DN>() );\n+            }\n+            else\n+            {\n+                this.names = Collections.unmodifiableSet( new HashSet<DN>( names ) );\n+            }\n         }\n \n ",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e0f6d47ed462282f6bff0c4f44b98fea60d2a992/ldap/src/main/java/org/apache/directory/shared/ldap/aci/UserClass.java",
                "status": "modified",
                "changes": 9,
                "deletions": 1,
                "sha": "ed0c115bb941ab0657c862e9669687450f2c0e87",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e0f6d47ed462282f6bff0c4f44b98fea60d2a992/ldap/src/main/java/org/apache/directory/shared/ldap/aci/UserClass.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/aci/UserClass.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/aci/UserClass.java?ref=e0f6d47ed462282f6bff0c4f44b98fea60d2a992"
            }
        ],
        "bug_id": "directory-ldap-api_27",
        "parent": "https://github.com/apache/directory-ldap-api/commit/1dcdf4de027bdd1b08a805b4bf1562f00438fc0f",
        "message": "Fix NPE when parameter 'names' is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@945806 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/b3a6a28ea0b771792fac51f8e54b80074523fe4f",
        "file": [
            {
                "patch": "@@ -399,17 +399,11 @@ private void processRequest( LdapMessageCodec request ) throws EncoderException,\n                 //     - O to n SearchResultReference\n                 //     - 1 (only) SearchResultDone\n                 // So we have to include those individual responses in a \"General\" SearchResponse\n-                //            Element searchResponse = xmlResponse.getRootElement().addElement( \"searchResponse\" );\n-                SearchResponseDsml searchResponseDsml = null; //new SearchResponseDsml();\n+                SearchResponseDsml searchResponseDsml = null;\n     \n                 // RequestID\n                 int requestID = response.getMessageId();\n                 \n-                if ( requestID != 0 )\n-                {\n-                    searchResponseDsml.setMessageId( requestID );\n-                }\n-    \n                 while ( MessageTypeEnum.SEARCH_RESULT_DONE != response.getMessageType() )\n                 {\n                     if ( MessageTypeEnum.SEARCH_RESULT_ENTRY == response.getMessageType() )",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/b3a6a28ea0b771792fac51f8e54b80074523fe4f/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "status": "modified",
                "changes": 8,
                "deletions": 7,
                "sha": "c88cd7e0736ec9987cc430f0bc0a103338bf286e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/b3a6a28ea0b771792fac51f8e54b80074523fe4f/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "filename": "dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java?ref=b3a6a28ea0b771792fac51f8e54b80074523fe4f"
            }
        ],
        "bug_id": "directory-ldap-api_28",
        "parent": "https://github.com/apache/directory-ldap-api/commit/1b1491f1ce90f2d7a4692d839e7c8a0f97c2a070",
        "message": "Fixed a potential NPE and removed dead code\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@921605 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/47fc5b70c14caec98bf60821fa876cc83924d85a",
        "file": [
            {
                "patch": "@@ -328,7 +328,10 @@ public String toString()\n \n         sb.append( \"    ModifyDN Response\\n\" );\n         sb.append( \"        Entry : '\" ).append( name ).append( \"'\\n\" );\n-        sb.append( \"        New RDN : '\" ).append( newRdn.toString() ).append( \"'\\n\" );\n+        if( newRdn != null )\n+        {\n+            sb.append( \"        New RDN : '\" ).append( newRdn.toString() ).append( \"'\\n\" );\n+        }\n         sb.append( \"        Delete old RDN : \" ).append( deleteOldRdn ).append( \"\\n\" );\n \n         if ( newSuperior != null )",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/47fc5b70c14caec98bf60821fa876cc83924d85a/ldap/src/main/java/org/apache/directory/shared/ldap/message/ModifyDnRequestImpl.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "30af7372ae9f9a1a82718f4fc388d99706b28341",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/47fc5b70c14caec98bf60821fa876cc83924d85a/ldap/src/main/java/org/apache/directory/shared/ldap/message/ModifyDnRequestImpl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/ModifyDnRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/ModifyDnRequestImpl.java?ref=47fc5b70c14caec98bf60821fa876cc83924d85a"
            }
        ],
        "bug_id": "directory-ldap-api_29",
        "parent": "https://github.com/apache/directory-ldap-api/commit/cde147bedf627cca64d716b27133e69595aa2fd1",
        "message": "fixed a NPE in toString() method\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@917172 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/bf7e6c3c2e376252dcd66f040adde6dfdd4713c5",
        "file": [
            {
                "patch": "@@ -930,7 +930,7 @@ public AttributeType getAttributeType( SchemaManager schemaManager, Entry entry,\n         // Syntax\n         EntryAttribute mSyntax = entry.get( MetaSchemaConstants.M_SYNTAX_AT );\n \n-        if ( mSyntax != null )\n+        if ( ( mSyntax != null ) && ( mSyntax.get() != null ) )\n         {\n             attributeType.setSyntaxOid( mSyntax.getString() );\n         }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bf7e6c3c2e376252dcd66f040adde6dfdd4713c5/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/SchemaEntityFactory.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "103f4bc7dc16732dfc2ed002f7f162536a1bac9e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bf7e6c3c2e376252dcd66f040adde6dfdd4713c5/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/SchemaEntityFactory.java",
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/SchemaEntityFactory.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/SchemaEntityFactory.java?ref=bf7e6c3c2e376252dcd66f040adde6dfdd4713c5"
            }
        ],
        "bug_id": "directory-ldap-api_30",
        "parent": "https://github.com/apache/directory-ldap-api/commit/69a3ff303d7e972699a45fa667bfa0d45a41f605",
        "message": "Fixed a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@892897 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/03b6903e48d1700a7de44ca8cd90da624df84895",
        "file": [
            {
                "patch": "@@ -19,6 +19,7 @@\n  */\n package org.apache.directory.shared.ldap.ldif;\n \n+\n import java.io.BufferedReader;\n import java.io.Closeable;\n import java.io.DataInputStream;\n@@ -59,6 +60,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+\n /**\n  * <pre>\n  *  &lt;ldif-file&gt; ::= &quot;version:&quot; &lt;fill&gt; &lt;number&gt; &lt;seps&gt; &lt;dn-spec&gt; &lt;sep&gt; \n@@ -181,6 +183,7 @@\n         /** The current position */\n         private int pos;\n \n+\n         /**\n          * Creates a new instance of Position.\n          */\n@@ -189,6 +192,7 @@ public Position()\n             pos = 0;\n         }\n \n+\n         /**\n          * Increment the current position by one\n          *\n@@ -198,6 +202,7 @@ public void inc()\n             pos++;\n         }\n \n+\n         /**\n          * Increment the current position by the given value\n          *\n@@ -259,6 +264,7 @@ public void inc( int val )\n      */\n     protected Exception error;\n \n+\n     /**\n      * Constructors\n      */\n@@ -268,7 +274,7 @@ public LdifReader()\n         position = new Position();\n         version = DEFAULT_VERSION;\n     }\n-    \n+\n \n     private void init( BufferedReader reader ) throws NamingException\n     {\n@@ -284,6 +290,7 @@ private void init( BufferedReader reader ) throws NamingException\n         prefetched = parseEntry();\n     }\n \n+\n     /**\n      * A constructor which takes a file name\n      * \n@@ -311,14 +318,14 @@ public LdifReader( String ldifFileName ) throws NamingException\n         {\n             init( new BufferedReader( new FileReader( file ) ) );\n         }\n-        catch (FileNotFoundException fnfe)\n+        catch ( FileNotFoundException fnfe )\n         {\n             LOG.error( \"File {} cannot be found\", file.getAbsoluteFile() );\n             throw new NamingException( \"Cannot find file \" + file.getAbsoluteFile() );\n         }\n     }\n \n-    \n+\n     /**\n      * A constructor which takes a Reader\n      * \n@@ -332,6 +339,7 @@ public LdifReader( Reader in ) throws NamingException\n         init( new BufferedReader( in ) );\n     }\n \n+\n     /**\n      * A constructor which takes an InputStream\n      * \n@@ -345,6 +353,7 @@ public LdifReader( InputStream in ) throws NamingException\n         init( new BufferedReader( new InputStreamReader( in ) ) );\n     }\n \n+\n     /**\n      * A constructor which takes a File\n      * \n@@ -371,13 +380,14 @@ public LdifReader( File file ) throws NamingException\n         {\n             init( new BufferedReader( new FileReader( file ) ) );\n         }\n-        catch (FileNotFoundException fnfe)\n+        catch ( FileNotFoundException fnfe )\n         {\n             LOG.error( \"File {} cannot be found\", file.getAbsoluteFile() );\n             throw new NamingException( \"Cannot find file \" + file.getAbsoluteFile() );\n         }\n     }\n \n+\n     /**\n      * @return The ldif file version\n      */\n@@ -386,6 +396,7 @@ public int getVersion()\n         return version;\n     }\n \n+\n     /**\n      * @return The maximum size of a file which is used into an attribute value.\n      */\n@@ -394,6 +405,7 @@ public long getSizeLimit()\n         return sizeLimit;\n     }\n \n+\n     /**\n      * Set the maximum file size that can be accepted for an attribute value\n      * \n@@ -405,6 +417,7 @@ public void setSizeLimit( long sizeLimit )\n         this.sizeLimit = sizeLimit;\n     }\n \n+\n     // <fill> ::= ' ' <fill> | \ufffd\n     private static void parseFill( char[] document, Position position )\n     {\n@@ -415,6 +428,7 @@ private static void parseFill( char[] document, Position position )\n         }\n     }\n \n+\n     /**\n      * Parse a number following the rules :\n      * \n@@ -453,6 +467,7 @@ private static String parseNumber( char[] document, Position position )\n         }\n     }\n \n+\n     /**\n      * Parse the changeType\n      * \n@@ -490,6 +505,7 @@ else if ( \"modrdn\".equalsIgnoreCase( modOp ) )\n         return operation;\n     }\n \n+\n     /**\n      * Parse the DN of an entry\n      * \n@@ -527,7 +543,7 @@ else if ( line.charAt( 3 ) == ':' )\n                     {\n                         dn = new String( Base64.decode( trimmedLine.toCharArray() ), \"UTF-8\" );\n                     }\n-                    catch (UnsupportedEncodingException uee)\n+                    catch ( UnsupportedEncodingException uee )\n                     {\n                         // The DN is not base 64 encoded\n                         LOG.error( \"The ldif entry is supposed to have a base 64 encoded DN\" );\n@@ -557,7 +573,7 @@ else if ( line.charAt( 3 ) == ':' )\n         {\n             LdapDnParser.parseInternal( dn, new ArrayList<Rdn>() );\n         }\n-        catch (InvalidNameException ine)\n+        catch ( InvalidNameException ine )\n         {\n             LOG.error( \"The DN {} is not valid\" );\n             throw ine;\n@@ -566,6 +582,7 @@ else if ( line.charAt( 3 ) == ':' )\n         return dn;\n     }\n \n+\n     /**\n      * Parse the value part.\n      * \n@@ -598,6 +615,7 @@ protected static Object parseSimpleValue( String line, int pos )\n         }\n     }\n \n+\n     /**\n      * Parse the value part.\n      * \n@@ -651,7 +669,7 @@ else if ( c == '<' )\n                             }\n                             else\n                             {\n-                                byte[] data = new byte[(int) length];\n+                                byte[] data = new byte[( int ) length];\n                                 DataInputStream inf = null;\n \n                                 try\n@@ -661,15 +679,15 @@ else if ( c == '<' )\n \n                                     return data;\n                                 }\n-                                catch (FileNotFoundException fnfe)\n+                                catch ( FileNotFoundException fnfe )\n                                 {\n                                     // We can't reach this point, the file\n                                     // existence has already been\n                                     // checked\n                                     LOG.error( \"File {} not found\", fileName );\n                                     throw new NamingException( \"Bad URL, file not found\" );\n                                 }\n-                                catch (IOException ioe)\n+                                catch ( IOException ioe )\n                                 {\n                                     LOG.error( \"File {} error reading\", fileName );\n                                     throw new NamingException( \"Bad URL, file can't be read\" );\n@@ -695,7 +713,7 @@ else if ( c == '<' )\n                         throw new NamingException( \"Unsupported URL protocol\" );\n                     }\n                 }\n-                catch (MalformedURLException mue)\n+                catch ( MalformedURLException mue )\n                 {\n                     LOG.error( \"Bad URL {}\", urlName );\n                     throw new NamingException( \"Bad URL\" );\n@@ -712,6 +730,7 @@ else if ( c == '<' )\n         }\n     }\n \n+\n     /**\n      * Parse a control. The grammar is : &lt;control&gt; ::= \"control:\" &lt;fill&gt;\n      * &lt;ldap-oid&gt; &lt;critical-e&gt; &lt;value-spec-e&gt; &lt;sep&gt; &lt;critical-e&gt; ::= &lt;spaces&gt;\n@@ -766,7 +785,7 @@ private Control parseControl( String line ) throws NamingException\n         {\n             oid = new OID( oidString );\n         }\n-        catch (DecoderException de)\n+        catch ( DecoderException de )\n         {\n             LOG.error( \"The OID {} is not valid\", oidString );\n             throw new NamingException( \"Bad control oid\" );\n@@ -832,7 +851,7 @@ else if ( StringTools.isCharASCII( controlValue, criticalPos + 1, '<' ) )\n \n                 for ( int i = 0; i < length - criticalPos - 1; i++ )\n                 {\n-                    value[i] = (byte) controlValue[i + criticalPos + 1];\n+                    value[i] = ( byte ) controlValue[i + criticalPos + 1];\n                 }\n \n                 control.setValue( value );\n@@ -842,6 +861,7 @@ else if ( StringTools.isCharASCII( controlValue, criticalPos + 1, '<' ) )\n         return control;\n     }\n \n+\n     /**\n      * Parse an AttributeType/AttributeValue\n      * \n@@ -866,6 +886,7 @@ public static Attribute parseAttributeValue( String line )\n         }\n     }\n \n+\n     /**\n      * Parse an AttributeType/AttributeValue\n      * \n@@ -893,6 +914,7 @@ public void parseAttributeValue( LdifEntry entry, String line, String lowerLine\n         entry.addAttribute( attributeType, attributeValue );\n     }\n \n+\n     /**\n      * Parse a ModRDN operation\n      * \n@@ -916,8 +938,8 @@ private void parseModRdn( LdifEntry entry, Iterator<String> iter ) throws Naming\n             {\n                 int colonIndex = line.indexOf( ':' );\n                 Object attributeValue = parseValue( line, colonIndex );\n-                entry.setNewRdn( attributeValue instanceof String ? (String) attributeValue : StringTools\n-                        .utf8ToString( (byte[]) attributeValue ) );\n+                entry.setNewRdn( attributeValue instanceof String ? ( String ) attributeValue : StringTools\n+                    .utf8ToString( ( byte[] ) attributeValue ) );\n             }\n             else\n             {\n@@ -958,6 +980,7 @@ private void parseModRdn( LdifEntry entry, Iterator<String> iter ) throws Naming\n         return;\n     }\n \n+\n     /**\n      * Parse a modify change type.\n      * \n@@ -1085,20 +1108,21 @@ else if ( lowerLine.startsWith( \"replace:\" ) )\n \n                 if ( attributeValue instanceof String )\n                 {\n-                    attribute.add( (String)attributeValue );\n+                    attribute.add( ( String ) attributeValue );\n                 }\n                 else\n                 {\n-                    attribute.add( (byte[])attributeValue );\n+                    attribute.add( ( byte[] ) attributeValue );\n                 }\n-                \n+\n                 isEmptyValue = false;\n \n                 state = ATTRVAL_SPEC_OR_SEP;\n             }\n         }\n     }\n \n+\n     /**\n      * Parse a change operation. We have to handle different cases depending on\n      * the operation. 1) Delete : there should *not* be any line after the\n@@ -1167,8 +1191,8 @@ private void parseChange( LdifEntry entry, Iterator<String> iter, ChangeType ope\n                     {\n                         int colonIndex = line.indexOf( ':' );\n                         Object attributeValue = parseValue( line, colonIndex );\n-                        entry.setNewSuperior( attributeValue instanceof String ? (String) attributeValue : StringTools\n-                                .utf8ToString( (byte[]) attributeValue ) );\n+                        entry.setNewSuperior( attributeValue instanceof String ? ( String ) attributeValue\n+                            : StringTools.utf8ToString( ( byte[] ) attributeValue ) );\n                     }\n                     else\n                     {\n@@ -1197,6 +1221,7 @@ private void parseChange( LdifEntry entry, Iterator<String> iter, ChangeType ope\n         }\n     }\n \n+\n     /**\n      * Parse a ldif file. The following rules are processed :\n      * \n@@ -1222,7 +1247,7 @@ private LdifEntry parseEntry() throws NamingException\n         String line = lines.get( 0 );\n \n         String name = parseDn( line );\n-        \n+\n         LdapDN dn = new LdapDN( name );\n \n         // Ok, we have found a DN\n@@ -1352,6 +1377,7 @@ else if ( type == CHANGE )\n         return entry;\n     }\n \n+\n     /**\n      * Parse the version from the ldif input.\n      * \n@@ -1400,7 +1426,7 @@ private int parseVersion() throws NamingException\n             {\n                 ver = Integer.parseInt( versionNumber );\n             }\n-            catch (NumberFormatException nfe)\n+            catch ( NumberFormatException nfe )\n             {\n                 LOG.error( \"The version is not a number\" );\n                 throw new NamingException( \"Ldif parsing error\" );\n@@ -1410,7 +1436,7 @@ private int parseVersion() throws NamingException\n \n             // We have found the version, just discard the line from the list\n             lines.remove( 0 );\n-            \n+\n             // and read the next lines if the current buffer is empty\n             if ( lines.size() == 0 )\n             {\n@@ -1425,6 +1451,7 @@ private int parseVersion() throws NamingException\n         return ver;\n     }\n \n+\n     /**\n      * Reads an entry in a ldif buffer, and returns the resulting lines, without\n      * comments, and unfolded.\n@@ -1444,7 +1471,7 @@ protected void readLines() throws NamingException\n \n         try\n         {\n-            while ( ( line = ( (BufferedReader) reader ).readLine() ) != null )\n+            while ( ( line = ( ( BufferedReader ) reader ).readLine() ) != null )\n             {\n                 if ( line.length() == 0 )\n                 {\n@@ -1503,7 +1530,7 @@ else if ( sb.length() == 0 )\n                 }\n             }\n         }\n-        catch (IOException ioe)\n+        catch ( IOException ioe )\n         {\n             throw new NamingException( \"Error while reading ldif lines\" );\n         }\n@@ -1517,6 +1544,7 @@ else if ( sb.length() == 0 )\n         return;\n     }\n \n+\n     /**\n      * Parse a ldif file (using the default encoding).\n      * \n@@ -1531,6 +1559,7 @@ else if ( sb.length() == 0 )\n         return parseLdifFile( fileName, Charset.forName( StringTools.getDefaultCharsetName() ).toString() );\n     }\n \n+\n     /**\n      * Parse a ldif file, decoding it using the given charset encoding\n      * \n@@ -1557,18 +1586,18 @@ else if ( sb.length() == 0 )\n             LOG.error( \"Cannot parse the file {}, it does not exist\", fileName );\n             throw new NamingException( \"Filename \" + fileName + \" not found.\" );\n         }\n-        \n+\n         BufferedReader reader = null;\n \n         // Open the file and then get a channel from the stream\n         try\n         {\n-            reader = new BufferedReader( new InputStreamReader( new FileInputStream( file ), \n-                Charset.forName( encoding ) ) );\n+            reader = new BufferedReader(\n+                new InputStreamReader( new FileInputStream( file ), Charset.forName( encoding ) ) );\n \n             return parseLdif( reader );\n         }\n-        catch (FileNotFoundException fnfe)\n+        catch ( FileNotFoundException fnfe )\n         {\n             LOG.error( \"Cannot find file {}\", fileName );\n             throw new NamingException( \"Filename \" + fileName + \" not found.\" );\n@@ -1578,7 +1607,7 @@ else if ( sb.length() == 0 )\n             // close the reader\n             try\n             {\n-                reader.close();\n+                close();\n             }\n             catch ( IOException ioe )\n             {\n@@ -1587,6 +1616,7 @@ else if ( sb.length() == 0 )\n         }\n     }\n \n+\n     /**\n      * A method which parses a ldif string and returns a list of entries.\n      * \n@@ -1614,12 +1644,13 @@ else if ( sb.length() == 0 )\n \n             if ( LOG.isDebugEnabled() )\n             {\n-                LOG.debug( \"Parsed {} entries.\", ( entries == null ? Integer.valueOf( 0 ) : Integer.valueOf( entries.size() ) ) );\n+                LOG.debug( \"Parsed {} entries.\", ( entries == null ? Integer.valueOf( 0 ) : Integer.valueOf( entries\n+                    .size() ) ) );\n             }\n \n             return entries;\n         }\n-        catch (NamingException ne)\n+        catch ( NamingException ne )\n         {\n             LOG.error( \"Cannot parse the ldif buffer : {}\", ne.getMessage() );\n             throw new NamingException( \"Error while parsing the ldif buffer\" );\n@@ -1629,16 +1660,17 @@ else if ( sb.length() == 0 )\n             // Close the reader\n             try\n             {\n-                reader.close();\n+                close();\n             }\n             catch ( IOException ioe )\n             {\n                 // Nothing to do\n             }\n-            \n+\n         }\n     }\n \n+\n     // ------------------------------------------------------------------------\n     // Iterator Methods\n     // ------------------------------------------------------------------------\n@@ -1662,7 +1694,7 @@ private LdifEntry nextInternal()\n             {\n                 prefetched = parseEntry();\n             }\n-            catch (NamingException ne)\n+            catch ( NamingException ne )\n             {\n                 error = ne;\n                 throw new NoSuchElementException( ne.getMessage() );\n@@ -1672,15 +1704,15 @@ private LdifEntry nextInternal()\n \n             return entry;\n         }\n-        catch (NamingException ne)\n+        catch ( NamingException ne )\n         {\n             LOG.error( \"Premature termination of LDIF iterator\" );\n             error = ne;\n             return null;\n         }\n     }\n \n-    \n+\n     /**\n      * Gets the next LDIF on the channel.\n      * \n@@ -1703,7 +1735,7 @@ private boolean hasNextInternal()\n         return null != prefetched;\n     }\n \n-    \n+\n     /**\n      * Tests to see if another LDIF is on the input channel.\n      * \n@@ -1727,7 +1759,7 @@ private void removeInternal()\n         throw new UnsupportedOperationException();\n     }\n \n-    \n+\n     /**\n      * Always throws UnsupportedOperationException!\n      * \n@@ -1738,30 +1770,34 @@ public void remove()\n         removeInternal();\n     }\n \n+\n     /**\n      * @return An iterator on the file\n      */\n     public Iterator<LdifEntry> iterator()\n     {\n-        return new Iterator<LdifEntry>() \n+        return new Iterator<LdifEntry>()\n         {\n-            public boolean hasNext() \n+            public boolean hasNext()\n             {\n                 return hasNextInternal();\n             }\n-          \n-            public LdifEntry next() \n+\n+\n+            public LdifEntry next()\n             {\n                 return nextInternal();\n             }\n-          \n-            public void remove() \n+\n+\n+            public void remove()\n             {\n                 throw new UnsupportedOperationException();\n             }\n         };\n     }\n \n+\n     /**\n      * @return True if an error occured during parsing\n      */\n@@ -1770,6 +1806,7 @@ public boolean hasError()\n         return error != null;\n     }\n \n+\n     /**\n      * @return The exception that occurs during an entry parsing\n      */\n@@ -1778,6 +1815,7 @@ public Exception getError()\n         return error;\n     }\n \n+\n     /**\n      * The main entry point of the LdifParser. It reads a buffer and returns a\n      * List of entries.\n@@ -1802,7 +1840,7 @@ public Exception getError()\n         // When done, get the entries one by one.\n         try\n         {\n-            for ( LdifEntry entry:this )\n+            for ( LdifEntry entry : this )\n             {\n                 if ( entry != null )\n                 {\n@@ -1818,6 +1856,7 @@ public Exception getError()\n         return entries;\n     }\n \n+\n     /**\n      * @return True if the ldif file contains entries, fals if it contains\n      *         changes",
                "additions": 84,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/03b6903e48d1700a7de44ca8cd90da624df84895/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifReader.java",
                "status": "modified",
                "changes": 129,
                "deletions": 45,
                "sha": "74e4acde6a8cb76996de40c4ae3b71bce0934ad2",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/03b6903e48d1700a7de44ca8cd90da624df84895/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifReader.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifReader.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifReader.java?ref=03b6903e48d1700a7de44ca8cd90da624df84895"
            }
        ],
        "bug_id": "directory-ldap-api_31",
        "parent": "https://github.com/apache/directory-ldap-api/commit/8c92c7d98875be8fa083105a3ae0477ea6adac5f",
        "message": "Fixed a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@890287 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/3419be03990bc8eee4a9be70fa06db1a50070dfb",
        "file": [
            {
                "patch": "@@ -288,7 +288,10 @@ public String getOid( String name )\n         {\n             AttributeType attributeType = attributeTypeRegistry.lookup( name );\n             \n-            return attributeType.getOid();\n+            if ( attributeType != null )\n+            {\n+                return attributeType.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -300,7 +303,10 @@ public String getOid( String name )\n         {\n             ObjectClass objectClass = objectClassRegistry.lookup( name );\n             \n-            return objectClass.getOid();\n+            if ( objectClass != null )\n+            {\n+                return objectClass.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -312,7 +318,10 @@ public String getOid( String name )\n         {\n             LdapSyntax ldapSyntax = ldapSyntaxRegistry.lookup( name );\n             \n-            return ldapSyntax.getOid();\n+            if ( ldapSyntax != null )\n+            {\n+                return ldapSyntax.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -324,7 +333,10 @@ public String getOid( String name )\n         {\n             MatchingRule matchingRule = matchingRuleRegistry.lookup( name );\n             \n-            return matchingRule.getOid();\n+            if ( matchingRule != null )\n+            {\n+                return matchingRule.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -336,7 +348,10 @@ public String getOid( String name )\n         {\n             MatchingRuleUse matchingRuleUse = matchingRuleUseRegistry.lookup( name );\n             \n-            return matchingRuleUse.getOid();\n+            if ( matchingRuleUse != null )\n+            {\n+                return matchingRuleUse.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -348,7 +363,10 @@ public String getOid( String name )\n         {\n             NameForm nameForm = nameFormRegistry.lookup( name );\n             \n-            return nameForm.getOid();\n+            if ( nameForm != null )\n+            {\n+                return nameForm.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -360,7 +378,10 @@ public String getOid( String name )\n         {\n             DITContentRule ditContentRule = ditContentRuleRegistry.lookup( name );\n             \n-            return ditContentRule.getOid();\n+            if ( ditContentRule != null )\n+            {\n+                return ditContentRule.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n@@ -372,13 +393,17 @@ public String getOid( String name )\n         {\n             DITStructureRule ditStructureRule = ditStructureRuleRegistry.lookup( name );\n             \n-            return ditStructureRule.getOid();\n+            if ( ditStructureRule != null )\n+            {\n+                return ditStructureRule.getOid();\n+            }\n         }\n         catch ( NamingException ne )\n         {\n             // No more registries to look at...\n-            return null;\n         }\n+        \n+        return null;\n     }\n \n ",
                "additions": 34,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3419be03990bc8eee4a9be70fa06db1a50070dfb/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "status": "modified",
                "changes": 43,
                "deletions": 9,
                "sha": "e57d42062a79e1868cbc3ec88e86322a6e5116f6",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3419be03990bc8eee4a9be70fa06db1a50070dfb/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java?ref=3419be03990bc8eee4a9be70fa06db1a50070dfb"
            }
        ],
        "bug_id": "directory-ldap-api_32",
        "parent": "https://github.com/apache/directory-ldap-api/commit/44598c6e3fc43b4069d9fb85eecd1394513d5907",
        "message": "fixed some potential NPE in the getOid() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@883616 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/7089bbdf7f4c6daeab85ee1406cf426ec1084b83",
        "file": [
            {
                "patch": "@@ -907,6 +907,11 @@ public static int parse( String dn, Position pos, Rdn rdn ) throws InvalidNameEx\n      */\n     public static int parse( byte[] dn, Position pos, Rdn rdn ) throws InvalidNameException\n     {\n+    \tif ( rdn == null )\n+    \t{\n+    \t\tthrow new InvalidNameException( \"Cannot feed a null RDN structure\" );\n+    \t}\n+    \t\n         String type = null;\n         Object value = null;\n         int start = pos.start;\n@@ -921,10 +926,7 @@ public static int parse( byte[] dn, Position pos, Rdn rdn ) throws InvalidNameEx\n             return DNUtils.PARSING_ERROR;\n         }\n \n-        if ( rdn != null )\n-        {\n-            pos.start = pos.end;\n-        }\n+        pos.start = pos.end;\n \n         StringTools.trimLeft( dn, pos );\n \n@@ -946,14 +948,11 @@ public static int parse( byte[] dn, Position pos, Rdn rdn ) throws InvalidNameEx\n             return DNUtils.PARSING_ERROR;\n         }\n \n-        if ( rdn != null )\n-        {\n-            rdn.addAttributeTypeAndValue( type, type, value, value );\n-            rdn.normalize();\n+        rdn.addAttributeTypeAndValue( type, type, value, value );\n+        rdn.normalize();\n \n-            pos.start = pos.end;\n-            pos.length = 0;\n-        }\n+        pos.start = pos.end;\n+        pos.length = 0;\n \n         if ( parseNameComponents( dn, pos, rdn ) == DNUtils.PARSING_ERROR )\n         {",
                "additions": 10,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7089bbdf7f4c6daeab85ee1406cf426ec1084b83/ldap/src/main/java/org/apache/directory/shared/ldap/name/RdnParser.java",
                "status": "modified",
                "changes": 21,
                "deletions": 11,
                "sha": "a7233d5e42cfe7d5745d673530f9a2598c964615",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7089bbdf7f4c6daeab85ee1406cf426ec1084b83/ldap/src/main/java/org/apache/directory/shared/ldap/name/RdnParser.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/name/RdnParser.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/name/RdnParser.java?ref=7089bbdf7f4c6daeab85ee1406cf426ec1084b83"
            }
        ],
        "bug_id": "directory-ldap-api_33",
        "parent": "https://github.com/apache/directory-ldap-api/commit/e6df94160fe6146cf9c3aca98d6f948a9007afdb",
        "message": "Fixed a potential NPE in RdnParser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@627797 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/e6df94160fe6146cf9c3aca98d6f948a9007afdb",
        "file": [
            {
                "patch": "@@ -224,6 +224,26 @@ public void testRdnQuotedAttributeValue() throws InvalidNameException\n     }\n \n \n+    /**\n+     * Test the clone method for a RDN.\n+     */\n+    @Test\n+    public void testParseRDNNull() throws InvalidNameException\n+    {\n+        Rdn rdn = null;\n+\n+        try\n+        {\n+        \tRdnParser.parse( \"c=d\", rdn );\n+        \tfail();\n+        }\n+        catch ( InvalidNameException ine )\n+        {\n+        \tassertTrue( true );\n+        }\n+    }\n+\n+\n     /**\n      * Test the clone method for a RDN.\n      */",
                "additions": 20,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e6df94160fe6146cf9c3aca98d6f948a9007afdb/ldap/src/test/java/org/apache/directory/shared/ldap/name/RdnTest.java",
                "status": "modified",
                "changes": 20,
                "deletions": 0,
                "sha": "3e2399f5931ee89c9850cb39f999f8463c20b288",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e6df94160fe6146cf9c3aca98d6f948a9007afdb/ldap/src/test/java/org/apache/directory/shared/ldap/name/RdnTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/name/RdnTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/name/RdnTest.java?ref=e6df94160fe6146cf9c3aca98d6f948a9007afdb"
            }
        ],
        "bug_id": "directory-ldap-api_34",
        "parent": "https://github.com/apache/directory-ldap-api/commit/80147abe27ac892ecf95eada784ed90dc2b8e013",
        "message": "Fixed a potential NPE in RdnParser.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@627793 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/97b03968aff1f99861fce109610081506495015a",
        "file": [
            {
                "patch": "@@ -317,6 +317,6 @@ public boolean equals( Object obj )\n      */\n     public String toString()\n     {\n-        return \"<\" + oid.toString() + \", \" + names[0] + \">\";\n+        return \"<\" + oid + \", \" + ( names == null ? \"null\" : names[0] ) + \">\";\n     }\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/97b03968aff1f99861fce109610081506495015a/ldap/src/main/java/org/apache/directory/shared/ldap/schema/AbstractSchemaObject.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2fd7e8a70b3f4581967e0f01b05abba2a7aea36e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/97b03968aff1f99861fce109610081506495015a/ldap/src/main/java/org/apache/directory/shared/ldap/schema/AbstractSchemaObject.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/AbstractSchemaObject.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/AbstractSchemaObject.java?ref=97b03968aff1f99861fce109610081506495015a"
            }
        ],
        "bug_id": "directory-ldap-api_35",
        "parent": "https://github.com/apache/directory-ldap-api/commit/002fe4c5609777d1576da4c3dd214d2c68bf9657",
        "message": "Fixed a potential NPE in the toString() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@524054 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/bd74f69981957176b0cef555da359862b2c53a19",
        "file": [
            {
                "patch": "@@ -271,7 +271,7 @@ public String toNormName()\n \n            String newNormName = sb.toString();\n \n-           if ( normName != newNormName )\n+           if ( ( normName ==  null ) || !normName.equals( newNormName ) )\n            {\n                bytes = StringTools.getBytesUtf8( newNormName );\n                normName = newNormName;\n@@ -441,7 +441,7 @@ public int hashCode()\n    {\n        int result = 17;\n \n-       if ( ( rdns != null ) || ( rdns.size() == 0 ) )\n+       if ( ( rdns != null ) && ( rdns.size() == 0 ) )\n        {\n            for ( Rdn rdn:rdns )\n            {\n@@ -588,6 +588,7 @@ else if ( name instanceof LdapDN )\n                {\n                    e.printStackTrace();\n                    log.error( \"Failed to parse RDN for name \" + name.toString(), e );\n+                   return false;\n                }\n \n                if ( nameRdn.compareTo( ldapRdn ) != 0 )",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bd74f69981957176b0cef555da359862b2c53a19/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "3721c98c25630af06e0c0437318cdc2c132123f3",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bd74f69981957176b0cef555da359862b2c53a19/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java?ref=bd74f69981957176b0cef555da359862b2c53a19"
            }
        ],
        "bug_id": "directory-ldap-api_36",
        "parent": "https://github.com/apache/directory-ldap-api/commit/15814d019b14dfc8cd2ceb49c26bd3f1f62df76c",
        "message": "Fixed some potential NPE in 3 methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@491287 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/d2f58fb1c6a75a2543729e6591e8fcb9a7c444d2",
        "file": [
            {
                "patch": "@@ -22,6 +22,7 @@\n \n import java.io.IOException;\n \n+import org.apache.directory.shared.ldap.util.StringTools;\n import org.apache.directory.shared.ldap.util.unicode.InvalidCharacterException;\n // import org.apache.directory.shared.ldap.util.unicode.Normalizer;\n \n@@ -87,15 +88,29 @@ private static boolean isCombiningMark( char c )\n     \n     /**\n      * \n-     * TODO normalize.\n+     * We have to go through 6 steps :\n+     * \n+     * 1) Transcode\n+     * 2) Map\n+     * 3) Normalize\n+     * 4) Prohibit\n+     * 5) Bidi\n+     * 6) Insignifiant Character Handling\n+     * \n+     * The first step is already done, the step (3) is not done.\n      *\n      * @param str\n      * @return\n      * @throws IOException\n      */\n-    public static StringBuilder normalize( String str ) throws IOException\n+    public static String normalize( String str ) throws IOException\n     {\n-        return null; //Normalizer.normalize( str, Normalizer.Form.KC );\n+        String res = map( str );\n+        prohibit( res );\n+        res = bidi( res );\n+        res = insignifiantSpacesString( res );\n+        \n+        return res;\n     }\n     \n     /**\n@@ -3928,7 +3943,10 @@ public static StringBuilder map( char[] array )\n      */\n     public static void prohibit( String str ) throws InvalidCharacterException\n     {\n-        prohibit( str.toCharArray() );\n+        if ( !StringTools.isEmpty( str ) )\n+        {\n+            prohibit( str.toCharArray() );\n+        }\n     }\n     \n     /**\n@@ -3953,6 +3971,12 @@ public static void prohibit( char[] array ) throws InvalidCharacterException\n \n         for ( char c:array )\n         {\n+            // Shortcut ASCII chars\n+            if ( c < 0x0221 )\n+            {\n+                continue;\n+            }\n+            \n             // RFC 3454, Table A.1\n             switch ( c )\n             {\n@@ -4477,7 +4501,7 @@ public static void prohibit( char[] array ) throws InvalidCharacterException\n                 throw new InvalidCharacterException( c );\n             }\n \n-            if ( ( c == 0xFFFE ) || ( c <= 0xFFFF ) )\n+            if ( ( c == 0xFFFE ) || ( c == 0xFFFF ) )\n             {\n                 throw new InvalidCharacterException( c );\n             }\n@@ -4525,7 +4549,7 @@ public static void prohibit( char[] array ) throws InvalidCharacterException\n      */\n     public static String bidi( String str )\n     {\n-        return bidi( str.toCharArray() ).toString();\n+        return ( str == null ? str : bidi( str.toCharArray() ).toString() );\n     }\n     \n     /**",
                "additions": 30,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/d2f58fb1c6a75a2543729e6591e8fcb9a7c444d2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "status": "modified",
                "changes": 36,
                "deletions": 6,
                "sha": "a42093db1e82351707279425f4815f268536d031",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/d2f58fb1c6a75a2543729e6591e8fcb9a7c444d2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/PrepareString.java?ref=d2f58fb1c6a75a2543729e6591e8fcb9a7c444d2"
            }
        ],
        "bug_id": "directory-ldap-api_37",
        "parent": "https://github.com/apache/directory-ldap-api/commit/57531b0e682c1a5702d44a9a297cb92310369f2e",
        "message": "Added a normalize method, and fixed some possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@490956 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/0a25d994af6ddb7d12979e0c11f3f9901435bf40",
        "file": [
            {
                "patch": "@@ -52,7 +52,7 @@\n     /** The Syntax OID, according to RFC 4517, par. 3.3.31 */\n     public static final String OID = \"1.3.6.1.4.1.1466.115.121.1.50\";\n     \n-    /** Other regexp to extend the initial one */\n+    /** Other regexps to extend the initial one */\n     private List<String> regexps;\n     \n     /** Other regexp to extend the initial one, compiled */\n@@ -187,6 +187,11 @@ else if ( value instanceof byte[] )\n             }\n             else\n             {\n+                if ( compiledREs == null )\n+                {\n+                    return false;\n+                }\n+                \n                 // The default is not enough, let's try\n                 // the other regexps\n                 for ( Pattern pattern:compiledREs )",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/0a25d994af6ddb7d12979e0c11f3f9901435bf40/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "status": "modified",
                "changes": 7,
                "deletions": 1,
                "sha": "b31658f9d09104124d3200ed1ed4983c27663a4d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/0a25d994af6ddb7d12979e0c11f3f9901435bf40/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java?ref=0a25d994af6ddb7d12979e0c11f3f9901435bf40"
            }
        ],
        "bug_id": "directory-ldap-api_38",
        "parent": "https://github.com/apache/directory-ldap-api/commit/460e53ac90fc38143226b8cfa77ecf8e9330eece",
        "message": "fixed a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@487495 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/6b30ea237e73f3e92939dd5ab8f3130d95c1c3fe",
        "file": [
            {
                "patch": "@@ -117,6 +117,11 @@ else if ( \"userApplications\".equals( usage ) )\n      */\n     public static String render( UsageEnum usage )\n     {\n+        if ( usage == null)\n+        {\n+            return \"\";\n+        }\n+        \n         switch ( usage )\n         {\n             case DIRECTORY_OPERATION    : return \"directoryOperation\";",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/6b30ea237e73f3e92939dd5ab8f3130d95c1c3fe/ldap/src/main/java/org/apache/directory/shared/ldap/schema/UsageEnum.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "c0d9976a8135df938cd9fda27119524a4bd75fe5",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/6b30ea237e73f3e92939dd5ab8f3130d95c1c3fe/ldap/src/main/java/org/apache/directory/shared/ldap/schema/UsageEnum.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/UsageEnum.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/UsageEnum.java?ref=6b30ea237e73f3e92939dd5ab8f3130d95c1c3fe"
            }
        ],
        "bug_id": "directory-ldap-api_39",
        "parent": "https://github.com/apache/directory-ldap-api/commit/1dce3b8b6cf4f76704a0b9dd7e8daa15f812419e",
        "message": "Added a defensive test against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@485958 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/0e5e10f65ee0761d1516cf0676fe78fdb7e0ad28",
        "file": [
            {
                "patch": "@@ -605,7 +605,8 @@ public String toString()\n         sb.append( \"            Matched DN : '\" ).append( matchedDN == null ? \"\": matchedDN.toString() ).append( \"'\\n\" );\n         sb.append( \"            Error message : '\" ).append( errorMessage == null ? \"\" : errorMessage.toString() ).append( \"'\\n\" );\n \n-        if ( referrals.size() != 0 )\n+        \n+        if ( ( referrals != null ) && ( referrals.size() != 0 ) )\n         {\n             sb.append( \"            Referrals :\\n\" );\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/0e5e10f65ee0761d1516cf0676fe78fdb7e0ad28/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "5d2a993c01c8f4a3767390ca039e409fb330eb3d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/0e5e10f65ee0761d1516cf0676fe78fdb7e0ad28/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java?ref=0e5e10f65ee0761d1516cf0676fe78fdb7e0ad28"
            }
        ],
        "bug_id": "directory-ldap-api_40",
        "parent": "https://github.com/apache/directory-ldap-api/commit/3fc4419e5bd71e74e49bd2e7822d0e136fd3b1e1",
        "message": "Added a test in toString() method to avoid a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@463686 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/8bc6d72fad252ed02c5adf6173f5a7d1d91e25cf",
        "file": [
            {
                "patch": "@@ -312,8 +312,15 @@ private void treatTagEndState( IAsn1Container container ) throws DecoderExceptio\n \n         if ( IS_DEBUG )\n         {\n-            Tag tag = container.getCurrentTLV().getTag();\n-            log.debug( \"Tag {} has been decoded\", tag.toString() );\n+            if ( container.getCurrentTLV() != null )\n+            {\n+                Tag tag = container.getCurrentTLV().getTag();\n+                log.debug( \"Tag {} has been decoded\", tag.toString() );\n+            }\n+            else\n+            {\n+                log.debug( \"Tag has been decoded, but is null\" );\n+            }\n         }\n \n         // Create a link between the current TLV with its parent\n@@ -513,7 +520,14 @@ private void treatLengthEndState( IAsn1Container container ) throws DecoderExcep\n \n             if ( IS_DEBUG )\n             {\n-                log.debug( \"Root TLV[{}]\", new Integer( tlv.getLength().getLength() ) );\n+                if  ( ( tlv != null ) && ( tlv.getLength() != null ) )\n+                {\n+                    log.debug( \"Root TLV[{}]\", new Integer( tlv.getLength().getLength() ) );\n+                }\n+                else\n+                {\n+                    log.debug( \"Root TLV[ null ]\");\n+                }\n             }\n         }\n         else\n@@ -974,18 +988,32 @@ public void decode( ByteBuffer stream, IAsn1Container container ) throws Decoder\n \n             if ( container.getState() == TLVStateEnum.PDU_DECODED )\n             {\n-                log.debug( \"<-- Stop decoding : {}\", container.getCurrentTLV().toString() );\n+                if ( container.getCurrentTLV() != null )\n+                {\n+                    log.debug( \"<-- Stop decoding : {}\", container.getCurrentTLV().toString() );\n+                }\n+                else\n+                {\n+                    log.debug( \"<-- Stop decoding : null current TLV\" );\n+                }            \n             }\n             else\n             {\n-                log.debug( \"<-- End decoding : {}\", container.getCurrentTLV().toString() );\n+                if ( container.getCurrentTLV() != null )\n+                {\n+                    log.debug( \"<-- End decoding : {}\", container.getCurrentTLV().toString() );\n+                }\n+                else\n+                {\n+                    log.debug( \"<-- End decoding : null current TLV\" );\n+                }\n             }\n \n             log.debug( \"<<<==========================================\" );\n         }\n \n         return;\n-    } // end method decode\n+    }\n \n \n     /**\n@@ -1075,5 +1103,5 @@ public void setMaxTagLength( int maxTagLength )\n         this.maxTagLength = maxTagLength;\n     }\n \n-} // end class TLVTagDecoder\n+}\n ",
                "additions": 35,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8bc6d72fad252ed02c5adf6173f5a7d1d91e25cf/asn1/src/main/java/org/apache/directory/shared/asn1/ber/Asn1Decoder.java",
                "status": "modified",
                "changes": 42,
                "deletions": 7,
                "sha": "ef6be35a7ede8d6d2c1edf379f34b33ee21392fc",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8bc6d72fad252ed02c5adf6173f5a7d1d91e25cf/asn1/src/main/java/org/apache/directory/shared/asn1/ber/Asn1Decoder.java",
                "filename": "asn1/src/main/java/org/apache/directory/shared/asn1/ber/Asn1Decoder.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/asn1/src/main/java/org/apache/directory/shared/asn1/ber/Asn1Decoder.java?ref=8bc6d72fad252ed02c5adf6173f5a7d1d91e25cf"
            }
        ],
        "bug_id": "directory-ldap-api_41",
        "parent": "https://github.com/apache/directory-ldap-api/commit/5eadbce883b844ca1d84dc3cb38b29e4a0972ed0",
        "message": "Applied the patch for DIRSERVER-741 (NPE in debug mode)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@448504 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/ffce06cbf9ec0868964510b227fb7a5b8c2343a9",
        "file": [
            {
                "patch": "@@ -286,7 +286,7 @@ public String toString()\n         StringBuffer sb = new StringBuffer();\n         \n         sb.append(\"    Control\\n\");\n-        sb.append(\"        Control type : '\").append( controlType.toString() ).append(\"'\\n\");\n+        sb.append(\"        Control type : '\").append( controlType != null ? controlType.toString() : \"null\" ).append(\"'\\n\");\n         sb.append(\"        Criticality : '\").append( criticality ).append( \"'\\n\") ;\n         \n         if ( controlValue != null ) ",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ffce06cbf9ec0868964510b227fb7a5b8c2343a9/ldap/src/main/java/org/apache/ldap/common/codec/Control.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "926e14b583540343c58e011bf66436c24956ef29",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ffce06cbf9ec0868964510b227fb7a5b8c2343a9/ldap/src/main/java/org/apache/ldap/common/codec/Control.java",
                "filename": "ldap/src/main/java/org/apache/ldap/common/codec/Control.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/ldap/common/codec/Control.java?ref=ffce06cbf9ec0868964510b227fb7a5b8c2343a9"
            }
        ],
        "bug_id": "directory-ldap-api_42",
        "parent": "https://github.com/apache/directory-ldap-api/commit/86ccdba35e4ffd6e338aca4e082e351c6dbb7f09",
        "message": "Fixed a NPE in toString() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/common@372688 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/d12d36c40f6f512269b7cc1dc9cf3f26260baf4d",
        "file": [
            {
                "patch": "@@ -70,7 +70,7 @@\n \n     /** The final result containing SearchResponseDone response */\n     private SearchResultDone response;\n-    \n+\n     /** A flag set to tell the search what to do wth referrals */\n     private ReferralsPolicyEnum referralHandling = ReferralsPolicyEnum.THROW;\n \n@@ -370,7 +370,10 @@ public int hashCode()\n             // Order doesn't matter, thus just add hashCode\n             for ( String attr : attributes )\n             {\n-                hash = hash + attr.hashCode();\n+                if ( attr != null )\n+                {\n+                    hash = hash + attr.hashCode();\n+                }\n             }\n         }\n \n@@ -591,8 +594,8 @@ public String toString()\n \n         return super.toString( sb.toString() );\n     }\n-    \n-    \n+\n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -608,11 +611,11 @@ public boolean isFollowReferrals()\n     public SearchRequest followReferrals()\n     {\n         referralHandling = ReferralsPolicyEnum.FOLLOW;\n-        \n+\n         return this;\n     }\n-    \n-    \n+\n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -628,7 +631,7 @@ public boolean isIgnoreReferrals()\n     public SearchRequest ignoreReferrals()\n     {\n         referralHandling = ReferralsPolicyEnum.IGNORE;\n-        \n+\n         return this;\n     }\n }\n\\ No newline at end of file",
                "additions": 11,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/d12d36c40f6f512269b7cc1dc9cf3f26260baf4d/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/SearchRequestImpl.java",
                "status": "modified",
                "changes": 19,
                "deletions": 8,
                "sha": "f4e6f7ff415b0828e6daa5d0cb40db023119d867",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/d12d36c40f6f512269b7cc1dc9cf3f26260baf4d/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/SearchRequestImpl.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/SearchRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/SearchRequestImpl.java?ref=d12d36c40f6f512269b7cc1dc9cf3f26260baf4d"
            }
        ],
        "bug_id": "directory-ldap-api_43",
        "parent": "https://github.com/apache/directory-ldap-api/commit/372c4dbe2db332c8332eb232fc88ecaf9617481c",
        "message": "o Added a protection against a potential NPE if one attribute is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1659623 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/c5c4388990395d6eeff361eb42764f51e17d26c3",
        "file": [
            {
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.directory.api.ldap.model.schema.MatchingRule;\n import org.apache.directory.api.ldap.model.schema.Normalizer;\n import org.apache.directory.api.ldap.model.schema.SyntaxChecker;\n+import org.apache.directory.api.ldap.model.schema.comparators.StringComparator;\n import org.apache.directory.api.ldap.model.schema.normalizers.NoOpNormalizer;\n import org.apache.directory.api.util.Serialize;\n import org.apache.directory.api.util.Strings;\n@@ -94,6 +95,9 @@\n     /** Two flags used to tell if the value is HR or not in serialization */\n     private boolean isHR = true;\n     \n+    /** A default comparator if we don't have an EQUALITY MR */\n+    private static StringComparator stringComparator = new StringComparator( null );\n+    \n     // -----------------------------------------------------------------------\n     // Constructors\n     // -----------------------------------------------------------------------\n@@ -167,7 +171,7 @@ public Value( AttributeType attributeType, byte[] upValue ) throws LdapInvalidAt\n \n         this.attributeType = attributeType;\n         \n-        if ( !attributeType.isRelaxed() )\n+        if ( ( attributeType != null ) && !attributeType.isRelaxed() )\n         {\n             // Check the value\n             SyntaxChecker syntaxChecker = attributeType.getSyntax().getSyntaxChecker();\n@@ -1335,7 +1339,8 @@ else if ( other.bytes.length == 0 )\n                     \n                     if ( other.attributeType.getEquality() == null )\n                     {\n-                        return false;\n+                        // No equality ? Default to comparing using a String comparator\n+                        return stringComparator.compare( normValue, other.normValue ) == 0;\n                     }\n                     \n                     Normalizer normalizer = other.attributeType.getEquality().getNormalizer();",
                "additions": 7,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c5c4388990395d6eeff361eb42764f51e17d26c3/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "status": "modified",
                "changes": 9,
                "deletions": 2,
                "sha": "38fc7f095722261597b32485709d6675ab1860dd",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c5c4388990395d6eeff361eb42764f51e17d26c3/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/Value.java?ref=c5c4388990395d6eeff361eb42764f51e17d26c3"
            }
        ],
        "bug_id": "directory-ldap-api_44",
        "parent": "https://github.com/apache/directory-ldap-api/commit/994075b13579e0c83047f9cf006ce8f518cec5b7",
        "message": "o Added a default Comparator for when we don't have an Equality MathcingRule\no Added a test for a potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-value@1745846 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/bc38342b9897770229c1e9a3a8c78ade59373d4f",
        "file": [
            {
                "patch": "@@ -29,7 +29,7 @@\n public final class UndefinedNode extends AbstractExprNode\n {\n     /** A static instance of this node */\n-    public static final ExprNode UNDEFINED_NODE = new UndefinedNode();\n+    public static final UndefinedNode UNDEFINED_NODE = new UndefinedNode();\n \n \n     /**",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bc38342b9897770229c1e9a3a8c78ade59373d4f/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/UndefinedNode.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "487f280458f6a63fc35d1b03139af7ff824e6f4e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bc38342b9897770229c1e9a3a8c78ade59373d4f/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/UndefinedNode.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/UndefinedNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/UndefinedNode.java?ref=bc38342b9897770229c1e9a3a8c78ade59373d4f"
            }
        ],
        "bug_id": "directory-ldap-api_45",
        "parent": "https://github.com/apache/directory-ldap-api/commit/48c34b6c1d0baae0917644b3e0d5775197aaafa3",
        "message": "o fixed a NPE when an expression node contains zero count (DIRSERVER-1922)\no added a test to verify the fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1546397 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/25dde2f22765caaa878d583732a7b3d8eff9ec8d",
        "file": [
            {
                "patch": "@@ -28,7 +28,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class LeafNode extends AbstractExprNode\n+public abstract class LeafNode extends AbstractExprNode\n {\n     /** attributeType on which this leaf is based */\n     protected AttributeType attributeType;\n@@ -53,6 +53,10 @@ protected LeafNode( AttributeType attributeType, AssertionType assertionType )\n             this.attribute = attributeType.getName();\n             isSchemaAware = true;\n         }\n+        else\n+        {\n+            throw new NullPointerException( \"Cannot create a Node with a null Attribute\" );\n+        }\n     }\n \n ",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/25dde2f22765caaa878d583732a7b3d8eff9ec8d/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/LeafNode.java",
                "status": "modified",
                "changes": 6,
                "deletions": 1,
                "sha": "0ac4c2f6ed9526dfffd5c5d229d8cdf02d28cc8b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/25dde2f22765caaa878d583732a7b3d8eff9ec8d/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/LeafNode.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/LeafNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/filter/LeafNode.java?ref=25dde2f22765caaa878d583732a7b3d8eff9ec8d"
            }
        ],
        "bug_id": "directory-ldap-api_46",
        "parent": "https://github.com/apache/directory-ldap-api/commit/734f7b5663529a183de090fd6152309400ab1440",
        "message": "Throw a NPE if we try to create a LeafNode with a null Attribute (DIRSERVER-1707)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1480268 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756",
        "file": [
            {
                "patch": "@@ -1549,6 +1549,13 @@ public SearchFuture searchAsync( SearchRequest searchRequest ) throws LdapExcept\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( searchRequest.getBase() == null )\n+        {\n+            String msg = \"Cannot process a searchRequest which base DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         // If the session has not been establish, or is closed, we get out immediately\n         checkSession();\n \n@@ -2217,6 +2224,13 @@ public ModifyFuture modifyAsync( ModifyRequest modRequest ) throws LdapException\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( modRequest.getName() == null )\n+        {\n+            String msg = \"Cannot process a modifyRequest which DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         checkSession();\n \n         int newId = messageId.incrementAndGet();\n@@ -2326,7 +2340,7 @@ public void move( String entryDn, String newSuperiorDn ) throws LdapException\n \n         if ( newSuperiorDn == null )\n         {\n-            String msg = \"Cannot process a move to a null Dn\";\n+            String msg = \"Cannot process a move to a null newSuperior\";\n             LOG.debug( msg );\n             throw new IllegalArgumentException( msg );\n         }\n@@ -2357,7 +2371,7 @@ public void move( Dn entryDn, Dn newSuperiorDn ) throws LdapException\n \n         if ( newSuperiorDn == null )\n         {\n-            String msg = \"Cannot process a move to a null Dn\";\n+            String msg = \"Cannot process a move to a null newSuperior\";\n             LOG.debug( msg );\n             throw new IllegalArgumentException( msg );\n         }\n@@ -2522,6 +2536,20 @@ public ModifyDnFuture modifyDnAsync( ModifyDnRequest modDnRequest ) throws LdapE\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( modDnRequest.getName() == null )\n+        {\n+            String msg = \"Cannot process a modifyRequest which DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n+        if ( ( modDnRequest.getNewSuperior() == null ) && ( modDnRequest.getNewRdn() == null ) )\n+        {\n+            String msg = \"Cannot process a modifyRequest which new superior and new Rdn are null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         checkSession();\n \n         int newId = messageId.incrementAndGet();\n@@ -2711,6 +2739,13 @@ public DeleteFuture deleteAsync( DeleteRequest deleteRequest ) throws LdapExcept\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( deleteRequest.getName() == null )\n+        {\n+            String msg = \"Cannot process a deleteRequest which DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         checkSession();\n \n         int newId = messageId.incrementAndGet();\n@@ -2892,6 +2927,13 @@ public CompareFuture compareAsync( CompareRequest compareRequest ) throws LdapEx\n             throw new IllegalArgumentException( msg );\n         }\n \n+        if ( compareRequest.getName() == null )\n+        {\n+            String msg = \"Cannot process a compareRequest which DN is null\";\n+            LOG.debug( msg );\n+            throw new IllegalArgumentException( msg );\n+        }\n+\n         checkSession();\n \n         int newId = messageId.incrementAndGet();",
                "additions": 44,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 46,
                "deletions": 2,
                "sha": "4478bc3418d7239f0e7e80ff920d9323e1524ddb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756"
            },
            {
                "patch": "@@ -48,7 +48,7 @@\n     /** Dn of the entry to modify or PDU's <b>object</b> field */\n     private Dn name;\n \n-    /** Sequence of modifications or PDU's <b>modification</b> seqence field */\n+    /** Sequence of modifications or PDU's <b>modification</b> sequence field */\n     private List<Modification> mods = new ArrayList<Modification>();\n \n     /** The associated response */\n@@ -406,7 +406,7 @@ public boolean equals( Object obj )\n             }\n             else\n \n-            if ( !item.equals( ( DefaultModification ) mods.get( i ) ) )\n+            if ( !item.equals( mods.get( i ) ) )\n             {\n                 return false;\n             }",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/ModifyRequestImpl.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "9dd81c9fb39992e1eb690ce7cdd9ccf8107cf871",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/ModifyRequestImpl.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/ModifyRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/message/ModifyRequestImpl.java?ref=29ef7ab4108cbb6f8dc4a8a30e21860af1ce7756"
            }
        ],
        "bug_id": "directory-ldap-api_47",
        "parent": "https://github.com/apache/directory-ldap-api/commit/59dfc975067645ef37e59d7ef9ded6e8475e39ce",
        "message": "o Added some checks in the LdapNetworkConnection API for async operations so that we don't get NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1442292 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/7c05092d39e39c5eb17f6ab020315f18c81e2d97",
        "file": [
            {
                "patch": "@@ -123,7 +123,7 @@ public static void initialize( LdapApiService ldapCodecService )\n             {\n                 @SuppressWarnings(\"unchecked\")\n                 Class<? extends LdapApiService> serviceClass = ( Class<? extends LdapApiService> )\n-                    Class.forName( \"org.apache.directory.shared.ldap.codec.standalone.StandaloneLdapApiService\" );\n+                    Class.forName( \"org.apache.directory.api.ldap.codec.standalone.StandaloneLdapApiService\" );\n                 LdapApiServiceFactory.ldapCodecService = serviceClass.newInstance();\n                 usingStandaloneImplementation = true;\n             }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7c05092d39e39c5eb17f6ab020315f18c81e2d97/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapApiServiceFactory.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "b6cba17e95f42812e72871014c78964c52e5f03b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7c05092d39e39c5eb17f6ab020315f18c81e2d97/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapApiServiceFactory.java",
                "filename": "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapApiServiceFactory.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapApiServiceFactory.java?ref=7c05092d39e39c5eb17f6ab020315f18c81e2d97"
            }
        ],
        "bug_id": "directory-ldap-api_48",
        "parent": "https://github.com/apache/directory-ldap-api/commit/73d5537adcdda2600f56118f60d1eec98b7db2ca",
        "message": "Fixed a NPE generated by the api.standalone package renaming\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-refact@1424434 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/ca73e57ff00cf3f4c963d1cad517c7cc2e6110e1",
        "file": [
            {
                "patch": "@@ -40,7 +40,7 @@\n public interface LdapApiService\n {\n     String DEFAULT_PROTOCOL_CODEC_FACTORY =\n-        \"org.apache.directory.shared.ldap.codec.protocol.mina.LdapProtocolCodecFactory\";\n+        \"org.apache.directory.api.ldap.codec.protocol.mina.LdapProtocolCodecFactory\";\n \n \n     // ------------------------------------------------------------------------",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ca73e57ff00cf3f4c963d1cad517c7cc2e6110e1/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapApiService.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "ddf06fa0a094f7a70faf13a4de3048f96cc3f03f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ca73e57ff00cf3f4c963d1cad517c7cc2e6110e1/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapApiService.java",
                "filename": "ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapApiService.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/core/src/main/java/org/apache/directory/api/ldap/codec/api/LdapApiService.java?ref=ca73e57ff00cf3f4c963d1cad517c7cc2e6110e1"
            }
        ],
        "bug_id": "directory-ldap-api_49",
        "parent": "https://github.com/apache/directory-ldap-api/commit/d69407a1057801889536070ae5f38ae11761c431",
        "message": "Fixed a NPE by fixing the package name after the changed from shared to api\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-refact@1424341 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/40fca2278fb5a304e5b97a4997770fb7f95128ca",
        "file": [
            {
                "patch": "@@ -294,7 +294,7 @@ public String toString()\n         {\n             case NEW_COOKIE:\n                 sb.append( \"        newCookie : '\" ).\n-                    append( Strings.dumpBytes( getCookie() ) ).append( \"'\\n\" );\n+                    append( Strings.utf8ToString( getCookie() ) ).append( \"'\\n\" );\n                 break;\n \n             case REFRESH_DELETE:",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/40fca2278fb5a304e5b97a4997770fb7f95128ca/ldap/extras/codec-api/src/main/java/org/apache/directory/shared/ldap/extras/controls/SyncInfoValueImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "1ff404b0be2d0099bd99206b592c1d3dca27a4ba",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/40fca2278fb5a304e5b97a4997770fb7f95128ca/ldap/extras/codec-api/src/main/java/org/apache/directory/shared/ldap/extras/controls/SyncInfoValueImpl.java",
                "filename": "ldap/extras/codec-api/src/main/java/org/apache/directory/shared/ldap/extras/controls/SyncInfoValueImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec-api/src/main/java/org/apache/directory/shared/ldap/extras/controls/SyncInfoValueImpl.java?ref=40fca2278fb5a304e5b97a4997770fb7f95128ca"
            },
            {
                "patch": "@@ -544,4 +544,13 @@ public Asn1Object decode( byte[] controlBytes ) throws DecoderException\n         decoder.decode( bb, container );\n         return this;\n     }\n+    \n+    \n+    /**\n+     * @see Object#toString()\n+     */\n+    public String toString()\n+    {\n+        return getDecorated().toString();\n+    }\n }",
                "additions": 9,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/40fca2278fb5a304e5b97a4997770fb7f95128ca/ldap/extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/controls/syncrepl_impl/SyncInfoValueDecorator.java",
                "status": "modified",
                "changes": 9,
                "deletions": 0,
                "sha": "fc0e87f3da57c8f55458ae7cfa33a46234b5e1fe",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/40fca2278fb5a304e5b97a4997770fb7f95128ca/ldap/extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/controls/syncrepl_impl/SyncInfoValueDecorator.java",
                "filename": "ldap/extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/controls/syncrepl_impl/SyncInfoValueDecorator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/controls/syncrepl_impl/SyncInfoValueDecorator.java?ref=40fca2278fb5a304e5b97a4997770fb7f95128ca"
            },
            {
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.directory.shared.asn1.ber.tlv.BerValue;\n import org.apache.directory.shared.i18n.I18n;\n import org.apache.directory.shared.ldap.extras.controls.SyncInfoValue;\n+import org.apache.directory.shared.ldap.extras.controls.SynchronizationInfoEnum;\n import org.apache.directory.shared.util.Strings;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -100,6 +101,7 @@ private SyncInfoValueGrammar()\n                     public void action( SyncInfoValueContainer container )\n                     {\n                         SyncInfoValue control = container.getSyncInfoValueControl();\n+                        control.setType( SynchronizationInfoEnum.NEW_COOKIE );\n \n                         BerValue value = container.getCurrentTLV().getValue();\n \n@@ -138,6 +140,7 @@ public void action( SyncInfoValueContainer container )\n                     public void action( SyncInfoValueContainer container )\n                     {\n                         SyncInfoValue control = container.getSyncInfoValueControl();\n+                        control.setType( SynchronizationInfoEnum.REFRESH_DELETE );\n \n                         container.setSyncInfoValueControl( control );\n \n@@ -299,6 +302,7 @@ public void action( SyncInfoValueContainer container ) throws DecoderException\n                     public void action( SyncInfoValueContainer container )\n                     {\n                         SyncInfoValue control = container.getSyncInfoValueControl();\n+                        control.setType( SynchronizationInfoEnum.REFRESH_PRESENT );\n \n                         container.setSyncInfoValueControl( control );\n \n@@ -459,6 +463,7 @@ public void action( SyncInfoValueContainer container ) throws DecoderException\n                     public void action( SyncInfoValueContainer container )\n                     {\n                         SyncInfoValue control = container.getSyncInfoValueControl();\n+                        control.setType( SynchronizationInfoEnum.SYNC_ID_SET );\n \n                         container.setSyncInfoValueControl( control );\n                     }",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/40fca2278fb5a304e5b97a4997770fb7f95128ca/ldap/extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/controls/syncrepl_impl/SyncInfoValueGrammar.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "ad04e64a3dfe9d8cbef212462acd1dbc66f58d31",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/40fca2278fb5a304e5b97a4997770fb7f95128ca/ldap/extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/controls/syncrepl_impl/SyncInfoValueGrammar.java",
                "filename": "ldap/extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/controls/syncrepl_impl/SyncInfoValueGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec/src/main/java/org/apache/directory/shared/ldap/extras/controls/syncrepl_impl/SyncInfoValueGrammar.java?ref=40fca2278fb5a304e5b97a4997770fb7f95128ca"
            }
        ],
        "bug_id": "directory-ldap-api_50",
        "parent": "https://github.com/apache/directory-ldap-api/commit/f5c262ef3338cd70f5be3e1535d4b2e775d8fc3e",
        "message": "Fixed a NPE in the toStringmethod : we werent initializing the SyncInfoValue type\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1416610 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/cc0deec033261285738bf67dd8a27261c6ce7d05",
        "file": [
            {
                "patch": "@@ -282,15 +282,18 @@ private void deleteSchemaObjects( Schema schema, Registries registries ) throws\n \n         List<SchemaObject> toBeDeleted = new ArrayList<SchemaObject>();\n \n-        // Buid an intermediate list to avoid concurrent modifications\n-        for ( SchemaObjectWrapper schemaObjectWrapper : content )\n+        if ( content != null )\n         {\n-            toBeDeleted.add( schemaObjectWrapper.get() );\n-        }\n+            // Build an intermediate list to avoid concurrent modifications\n+            for ( SchemaObjectWrapper schemaObjectWrapper : content )\n+            {\n+                toBeDeleted.add( schemaObjectWrapper.get() );\n+            }\n \n-        for ( SchemaObject schemaObject : toBeDeleted )\n-        {\n-            registries.delete( errors, schemaObject );\n+            for ( SchemaObject schemaObject : toBeDeleted )\n+            {\n+                registries.delete( errors, schemaObject );\n+            }\n         }\n     }\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/cc0deec033261285738bf67dd8a27261c6ce7d05/ldap/schema/data/src/main/java/org/apache/directory/shared/ldap/schemamanager/impl/DefaultSchemaManager.java",
                "status": "modified",
                "changes": 17,
                "deletions": 7,
                "sha": "84e179a80c982ce89ef23f666d948c14f90a015b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/cc0deec033261285738bf67dd8a27261c6ce7d05/ldap/schema/data/src/main/java/org/apache/directory/shared/ldap/schemamanager/impl/DefaultSchemaManager.java",
                "filename": "ldap/schema/data/src/main/java/org/apache/directory/shared/ldap/schemamanager/impl/DefaultSchemaManager.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/schema/data/src/main/java/org/apache/directory/shared/ldap/schemamanager/impl/DefaultSchemaManager.java?ref=cc0deec033261285738bf67dd8a27261c6ce7d05"
            }
        ],
        "bug_id": "directory-ldap-api_51",
        "parent": "https://github.com/apache/directory-ldap-api/commit/9a8a7646c95161587bb2dd193897ebdeaa4328ee",
        "message": "Fixed a NPE : the deletion of a schema was failing if this schema contained no element (DIRSERVER-1718)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1392051 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/9a8a7646c95161587bb2dd193897ebdeaa4328ee",
        "file": [
            {
                "patch": "@@ -599,7 +599,15 @@ aMaxValueCount returns [ MaxValueCountElem maxValueCount ]\n     {\n         try\n         {\n-            attributeType = schemaManager.lookupAttributeTypeRegistry( oid );\n+            if ( schemaManager != null )\n+            {\n+                attributeType = schemaManager.lookupAttributeTypeRegistry( oid );\n+            }\n+            else\n+            {\n+                attributeType = new AttributeType( oid );\n+            }\n+\n             maxValueCount = new MaxValueCountElem( attributeType, token2Integer( token ) );\n         }\n         catch ( LdapException le )\n@@ -670,8 +678,17 @@ restrictedValue returns [ RestrictedByElem restrictedValue ]\n     {\n         try\n         {\n-            attributeType = schemaManager.lookupAttributeTypeRegistry( typeOid );\n-            valueInAttributeType = schemaManager.lookupAttributeTypeRegistry( valuesInOid );\n+            if ( schemaManager != null )\n+            {\n+                attributeType = schemaManager.lookupAttributeTypeRegistry( typeOid );\n+                valueInAttributeType = schemaManager.lookupAttributeTypeRegistry( valuesInOid );\n+            }\n+            else\n+            {\n+                attributeType = new AttributeType( typeOid );\n+                valueInAttributeType = new AttributeType( valuesInOid );\n+            }\n+            \n             restrictedValue = new RestrictedByElem( attributeType, valueInAttributeType );\n         }\n         catch ( LdapException le )\n@@ -695,7 +712,15 @@ attributeTypeSet returns [ Set<AttributeType> attributeTypeSet ]\n         {\n             try\n             {\n-                attributeType = schemaManager.lookupAttributeTypeRegistry( oid );\n+                if ( schemaManager != null )\n+                {\n+                    attributeType = schemaManager.lookupAttributeTypeRegistry( oid );\n+                }\n+                else\n+                {\n+                    attributeType = new AttributeType( oid );\n+                }\n+                \n                 attributeTypeSet.add( attributeType );\n             }\n             catch ( LdapException le )\n@@ -708,7 +733,15 @@ attributeTypeSet returns [ Set<AttributeType> attributeTypeSet ]\n             {\n                 try\n                 {\n-                    attributeType = schemaManager.lookupAttributeTypeRegistry( oid );\n+                    if ( schemaManager != null )\n+                    {\n+                        attributeType = schemaManager.lookupAttributeTypeRegistry( oid );\n+                    }\n+                    else\n+                    {\n+                        attributeType = new AttributeType( oid );\n+                    }\n+\n                     attributeTypeSet.add( attributeType );\n                 }\n                 catch ( LdapException le )",
                "additions": 38,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/9a8a7646c95161587bb2dd193897ebdeaa4328ee/ldap/extras/aci/src/main/antlr/ACIItem.g",
                "status": "modified",
                "changes": 43,
                "deletions": 5,
                "sha": "b9e76c8ef62db967b5ff8760b526f2bab3f1474a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/9a8a7646c95161587bb2dd193897ebdeaa4328ee/ldap/extras/aci/src/main/antlr/ACIItem.g",
                "filename": "ldap/extras/aci/src/main/antlr/ACIItem.g",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/aci/src/main/antlr/ACIItem.g?ref=9a8a7646c95161587bb2dd193897ebdeaa4328ee"
            }
        ],
        "bug_id": "directory-ldap-api_52",
        "parent": "https://github.com/apache/directory-ldap-api/commit/f6c2469ec5475f7b082eb85045fcd0f34bbd67c9",
        "message": "Fixed some potential NPE when trying to access a null SchemaManager (see DIRSTUDIO-833)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1391514 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e",
        "file": [
            {
                "patch": "@@ -1621,11 +1621,11 @@ public void action( Dsmlv2Container container ) throws XmlPullParserException\n             if ( attributeValue != null )\n             {\n                 searchResponse = new SearchResponse(\n-                    ParserUtils.parseAndVerifyRequestID( attributeValue, xpp ), null );\n+                    ParserUtils.parseAndVerifyRequestID( attributeValue, xpp ) );\n             }\n             else\n             {\n-                searchResponse = new SearchResponse( -1, null );\n+                searchResponse = new SearchResponse();\n             }\n \n             container.getBatchResponse().addResponse( new SearchResponseDsml(",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/Dsmlv2ResponseGrammar.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "e31a5c0aa24aae49cd3eade3c9fa172ec12c3d4a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/Dsmlv2ResponseGrammar.java",
                "filename": "dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/Dsmlv2ResponseGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/Dsmlv2ResponseGrammar.java?ref=a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e"
            },
            {
                "patch": "@@ -44,15 +44,23 @@\n     private SearchResultDoneDsml searchResultDone;\n \n \n+    /**\n+     * Creates a new instance of SearchResponse.\n+     */\n+    public SearchResponse()\n+    {\n+        super( -1, null );\n+    }\n+\n+\n     /**\n      * Creates a new instance of SearchResponse.\n      *\n      * @param messageId the response eliciting this Request\n-     * @param type the message type of the response\n      */\n-    public SearchResponse( int messageId, MessageTypeEnum type )\n+    public SearchResponse( int messageId )\n     {\n-        super( messageId, type );\n+        super( messageId, null );\n     }\n \n \n@@ -70,6 +78,20 @@ public boolean addSearchResultEntry( SearchResultEntryDsml searchResultEntry )\n     }\n \n \n+    /**\n+     * Removes a Search Result Entry\n+     *\n+     * @param searchResultEntry\n+     *      the Search Result Entry to remove\n+     * @return\n+     *      true (as per the general contract of the Collection.remove method)\n+     */\n+    public boolean removeSearchResultEntry( SearchResultEntryDsml searchResultEntry )\n+    {\n+        return searchResultEntryList.remove( searchResultEntry );\n+    }\n+\n+\n     /**\n      * Gets the Current Search Result Entry\n      * \n@@ -115,6 +137,20 @@ public boolean addSearchResultReference( SearchResultReferenceDsml searchResultR\n     }\n \n \n+    /**\n+     * Removes a Search Result Reference\n+     *\n+     * @param searchResultReference\n+     *      the Search Result Reference to remove\n+     * @return\n+     *      true (as per the general contract of the Collection.remove method)\n+     */\n+    public boolean removeSearchResultReference( SearchResultReferenceDsml searchResultReference )\n+    {\n+        return searchResultReferenceList.remove( searchResultReference );\n+    }\n+\n+\n     /**\n      * Gets the current Search Result Reference\n      *",
                "additions": 39,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResponse.java",
                "status": "modified",
                "changes": 42,
                "deletions": 3,
                "sha": "2bdbf46b8c5b847eba87b8b1f68b98a494ecb1b7",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResponse.java",
                "filename": "dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResponse.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResponse.java?ref=a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e"
            },
            {
                "patch": "@@ -55,7 +55,7 @@\n      */\n     public SearchResponseDsml( LdapApiService codec )\n     {\n-        super( codec, null );\n+        super( codec, new SearchResponse() );\n     }\n \n \n@@ -112,8 +112,30 @@ else if ( response instanceof SearchResultDone )\n      * @return\n      *      true if this list contained the specified element.\n      */\n-    public boolean removeResponse( DsmlDecorator<Response> response )\n+    public boolean removeResponse( DsmlDecorator<? extends Response> response )\n     {\n+        if ( response instanceof SearchResultEntry )\n+        {\n+            ( ( SearchResponse ) getDecorated() ).removeSearchResultEntry(\n+                ( SearchResultEntryDsml ) response );\n+        }\n+        else if ( response instanceof SearchResultReference )\n+        {\n+            ( ( SearchResponse ) getDecorated() ).removeSearchResultReference(\n+                ( SearchResultReferenceDsml ) response );\n+        }\n+        else if ( response instanceof SearchResultDone )\n+        {\n+            if ( response.equals( ( ( SearchResponse ) getDecorated() ).getSearchResultDone() ) )\n+            {\n+                ( ( SearchResponse ) getDecorated() ).setSearchResultDone( null );\n+            }\n+        }\n+        else\n+        {\n+            throw new IllegalArgumentException( \"Unidentified search resp type\" );\n+        }\n+\n         return responses.remove( response );\n     }\n ",
                "additions": 24,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResponseDsml.java",
                "status": "modified",
                "changes": 26,
                "deletions": 2,
                "sha": "67b803370c559b6adc31f7c7df87347961ba5ad9",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResponseDsml.java",
                "filename": "dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResponseDsml.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResponseDsml.java?ref=a7f4362bdb8ef0e09a35f6f5e08ce7878459c57e"
            }
        ],
        "bug_id": "directory-ldap-api_53",
        "parent": "https://github.com/apache/directory-ldap-api/commit/2cc63efd4989ea054c8b24cd68faf41e1627dc2a",
        "message": "Fix for a NPE raised in Studio when exporting entries to DSML, DIRSTUDIO-765 (Can not export DSML).\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1240225 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/ea3b238406a8a85257ecb200c7e8bce4ef9e6adc",
        "file": [
            {
                "patch": "@@ -41,6 +41,7 @@\n import java.util.concurrent.TimeoutException;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.locks.ReentrantLock;\n \n import javax.net.ssl.SSLContext;\n import javax.security.auth.Subject;\n@@ -186,8 +187,8 @@\n     /** The connector open with the remote server */\n     private IoConnector connector;\n \n-    /** A flag set to true when we used a local connector */\n-    private boolean localConnector;\n+    /** A mutex used to avoid a double close of the connector */\n+    private ReentrantLock connectorMutex = new ReentrantLock(); \n \n     /**\n      * The created session, created when we open a connection with\n@@ -494,7 +495,6 @@ public boolean connect() throws LdapException, IOException\n         if ( connector == null )\n         {\n             connector = new NioSocketConnector();\n-            localConnector = true;\n \n             // Add the codec to the chain\n             connector.getFilterChain().addLast( \"ldapCodec\", ldapProtocolFilter );\n@@ -657,12 +657,14 @@ public boolean close() throws IOException\n         }\n \n         // And close the connector if it has been created locally\n-        if ( localConnector && ( connector != null ) )\n+        // Release the connector\n+        connectorMutex.lock();\n+        if ( connector != null )\n         {\n-            // Release the connector\n             connector.dispose();\n             connector = null;\n         }\n+        connectorMutex.unlock();\n \n         // Reset the messageId\n         messageId.set( 0 );\n@@ -1766,7 +1768,7 @@ public void unBind() throws LdapException\n         clearMaps();\n \n         //  We now have to close the session\n-        if ( ( ldapSession != null ) && connected.get() )\n+        if ( ldapSession != null )\n         {\n             CloseFuture closeFuture = ldapSession.close( true );\n \n@@ -3696,17 +3698,20 @@ public void sessionClosed( IoSession session ) throws Exception\n         // Reset the messageId\n         messageId.set( 0 );\n \n-        // DO NOT call connector.dispose(), it is hanging when there is no network connection\n-        // set localConnector flag to false to avoid NPE when close() is called after this sessionClosed() method\n-        // gets called\n-        localConnector = false;\n-        connector = null;\n+        if ( connector != null )\n+        {\n+            connectorMutex.lock();\n+            connector.dispose();\n+            connector = null;\n+            connectorMutex.unlock();\n+        }\n \n         clearMaps();\n \n         if ( conCloseListeners != null )\n         {\n             LOG.debug( \"notifying the registered ConnectionClosedEventListeners..\" );\n+            \n             for ( ConnectionClosedEventListener listener : conCloseListeners )\n             {\n                 listener.connectionClosed();",
                "additions": 16,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ea3b238406a8a85257ecb200c7e8bce4ef9e6adc/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 27,
                "deletions": 11,
                "sha": "d6adbd342959544e7cc5b32084e8f4ef2d7edfa6",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ea3b238406a8a85257ecb200c7e8bce4ef9e6adc/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=ea3b238406a8a85257ecb200c7e8bce4ef9e6adc"
            }
        ],
        "bug_id": "directory-ldap-api_54",
        "parent": "https://github.com/apache/directory-ldap-api/commit/159ec99b032545f944222b14ef15b366874839c5",
        "message": "Fix for DIRAPI-52 : the connector was never closed. We also protected the code against some NPE by using a mutex.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1151527 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/8c09487127671c6281d29d82bda73e0d3837fd46",
        "file": [
            {
                "patch": "@@ -110,31 +110,6 @@\n \n   <build>\n     <plugins>\n-      <plugin>\n-        <artifactId>maven-surefire-plugin</artifactId>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <configuration>\n-          <systemPropertyVariables>\n-            <workingDirectory>${basedir}/target</workingDirectory>\n-            <felix.cache.rootdir>\n-              ${project.build.directory}\n-            </felix.cache.rootdir>\n-            <felix.cache.locking>\n-              true\n-            </felix.cache.locking>\n-            <org.osgi.framework.storage.clean>\n-              onFirstInit\n-            </org.osgi.framework.storage.clean>\n-            <org.osgi.framework.storage>\n-              osgi-cache\n-            </org.osgi.framework.storage>\n-            <codec.plugin.directory>\n-              ${codec.plugin.directory}\n-            </codec.plugin.directory>\n-          </systemPropertyVariables>\n-        </configuration>\n-      </plugin>\n-      \n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-dependency-plugin</artifactId>\n@@ -158,7 +133,6 @@\n           </execution>\n         </executions>\n       </plugin>\n-      \n     </plugins>\n   </build>\n </project>",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8c09487127671c6281d29d82bda73e0d3837fd46/integ/pom.xml",
                "status": "modified",
                "changes": 26,
                "deletions": 26,
                "sha": "a0c2c90f30f79d7bdf204075fc2042b789e85f8c",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8c09487127671c6281d29d82bda73e0d3837fd46/integ/pom.xml",
                "filename": "integ/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/integ/pom.xml?ref=8c09487127671c6281d29d82bda73e0d3837fd46"
            },
            {
                "patch": "@@ -68,42 +68,4 @@\n       <artifactId>org.apache.felix.framework</artifactId>\n     </dependency>\n   </dependencies>\n-\n-  <build>\n-    <plugins>\n-      <plugin>\n-        <artifactId>maven-surefire-plugin</artifactId>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <configuration>\n-          <systemPropertyVariables>\n-            <default.controls>\n-              org.apache.directory.shared.ldap.codec.controls.cascade.CascadeFactory,\n-              org.apache.directory.shared.ldap.codec.controls.manageDsaIT.ManageDsaITFactory,\n-              org.apache.directory.shared.ldap.codec.controls.search.entryChange.EntryChangeFactory,\n-              org.apache.directory.shared.ldap.codec.controls.search.pagedSearch.PagedResultsFactory,\n-              org.apache.directory.shared.ldap.codec.controls.search.persistentSearch.PersistentSearchFactory,\n-              org.apache.directory.shared.ldap.codec.controls.search.subentries.SubentriesFactory\n-            </default.controls>\n-            <extra.controls>\n-              org.apache.directory.shared.ldap.extras.controls.ppolicy.PasswordPolicyFactory,\n-              org.apache.directory.shared.ldap.extras.controls.syncrepl_impl.SyncDoneValueFactory,\n-              org.apache.directory.shared.ldap.extras.controls.syncrepl_impl.SyncInfoValueFactory,\n-              org.apache.directory.shared.ldap.extras.controls.syncrepl_impl.SyncModifyDnFactory,\n-              org.apache.directory.shared.ldap.extras.controls.syncrepl_impl.SyncRequestValueFactory,\n-              org.apache.directory.shared.ldap.extras.controls.syncrepl_impl.SyncStateValueFactory\n-            </extra.controls>\n-            <default.extendedOperation.requests>\n-              org.apache.directory.shared.ldap.extras.extended.ads_impl.cancel.CancelFactory,\n-              org.apache.directory.shared.ldap.extras.extended.ads_impl.certGeneration.CertGenerationFactory,\n-              org.apache.directory.shared.ldap.extras.extended.ads_impl.gracefulShutdown.GracefulShutdownFactory,\n-              org.apache.directory.shared.ldap.extras.extended.ads_impl.storedProcedure.StoredProcedureFactory\n-            </default.extendedOperation.requests>\n-            <default.extendedOperation.responses>\n-              org.apache.directory.shared.ldap.extras.extended.ads_impl.gracefulDisconnect.GracefulDisconnectFactory\n-            </default.extendedOperation.responses>\n-          </systemPropertyVariables>\n-        </configuration>\n-      </plugin>\n-    </plugins>\n-  </build>\n </project>",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8c09487127671c6281d29d82bda73e0d3837fd46/ldap/codec/standalone/pom.xml",
                "status": "modified",
                "changes": 38,
                "deletions": 38,
                "sha": "b1ce95e36c986f26d536d332451053a6310cc799",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8c09487127671c6281d29d82bda73e0d3837fd46/ldap/codec/standalone/pom.xml",
                "filename": "ldap/codec/standalone/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/standalone/pom.xml?ref=8c09487127671c6281d29d82bda73e0d3837fd46"
            },
            {
                "patch": "@@ -203,8 +203,13 @@ private void loadControls() throws Exception\n     private void loadDefaultControls() throws Exception\n     {\n         // Load defaults from command line properties if it exists\n-         String defaultControlsList = System.getProperty( DEFAULT_CONTROLS_LIST );\n+        String defaultControlsList = System.getProperty( DEFAULT_CONTROLS_LIST );\n         \n+        if ( Strings.isEmpty( defaultControlsList ) )\n+        {\n+            return;\n+        }\n+\n         for ( String control : defaultControlsList.split( \",\" ) )\n         {\n             System.out.println( control );",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8c09487127671c6281d29d82bda73e0d3837fd46/ldap/codec/standalone/src/main/java/org/apache/directory/shared/ldap/codec/standalone/StandaloneLdapApiService.java",
                "status": "modified",
                "changes": 7,
                "deletions": 1,
                "sha": "5101d0c4a4acfcb265487c92683859ab68dc9115",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8c09487127671c6281d29d82bda73e0d3837fd46/ldap/codec/standalone/src/main/java/org/apache/directory/shared/ldap/codec/standalone/StandaloneLdapApiService.java",
                "filename": "ldap/codec/standalone/src/main/java/org/apache/directory/shared/ldap/codec/standalone/StandaloneLdapApiService.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/standalone/src/main/java/org/apache/directory/shared/ldap/codec/standalone/StandaloneLdapApiService.java?ref=8c09487127671c6281d29d82bda73e0d3837fd46"
            }
        ],
        "bug_id": "directory-ldap-api_55",
        "parent": "https://github.com/apache/directory-ldap-api/commit/04bb16cd2a01c519fffa2d8cc6d29d015cadfb26",
        "message": "o Fixed a NPE\no emoved the config from pom.xml, it's not needed anymore\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-osgi@1104404 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/7f0a024a88d4c26040c40944cd3e86056e4b29fc",
        "file": [
            {
                "patch": "@@ -221,7 +221,7 @@ public void testAddAllWithMultivaluedAttribute() throws LdapException\n         Dn target = new Dn();\n \n         assertTrue( Dn.isValid( \"cn=Kate Bush+sn=Bush,ou=system\" ) );\n-        target = target.addAll( dn );\n+        target = target.add( dn );\n         assertEquals( \"cn=Kate Bush+sn=Bush,ou=system\", target.toString() );\n         assertEquals( \"cn=Kate Bush+sn=Bush,ou=system\", target.getName() );\n     }\n@@ -733,7 +733,7 @@ public void testDnAddAll() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn( \"c = d\" );\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"c = d,a = b\", dn.getName() );\n     }\n \n@@ -748,7 +748,7 @@ public void testDnAddAllAddedNameEmpty() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn();\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"a=b\", dn.getNormName() );\n         assertEquals( \"a = b\", dn.getName() );\n     }\n@@ -764,7 +764,7 @@ public void testDnAddAllNameEmpty() throws LdapException\n     {\n         Dn dn = new Dn();\n         Dn dn2 = new Dn( \"a = b\" );\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"a = b\", dn.getName() );\n     }\n \n@@ -779,7 +779,7 @@ public void testDnAt0AddAll() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn( \"c = d\" );\n-        dn = dn2.addAll( dn );\n+        dn = dn2.add( dn );\n         assertEquals( \"a = b,c = d\", dn.getName() );\n     }\n \n@@ -794,7 +794,7 @@ public void testDnAt1AddAll() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn( \"c = d\" );\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"c = d,a = b\", dn.getName() );\n     }\n \n@@ -809,7 +809,7 @@ public void testDnAddAllAt0AddedNameEmpty() throws LdapException\n     {\n         Dn dn = new Dn( \"a = b\" );\n         Dn dn2 = new Dn();\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"a=b\", dn.getNormName() );\n         assertEquals( \"a = b\", dn.getName() );\n     }\n@@ -825,7 +825,7 @@ public void testDnAddAllAt0NameEmpty() throws LdapException\n     {\n         Dn dn = new Dn();\n         Dn dn2 = new Dn( \"a = b\" );\n-        dn = dn.addAll( dn2 );\n+        dn = dn.add( dn2 );\n         assertEquals( \"a = b\", dn.getName() );\n     }\n \n@@ -1677,7 +1677,7 @@ public void testAddAllName0() throws Exception\n     {\n         Dn name = new Dn();\n         Dn name0 = new Dn( \"cn=HomeDir,cn=John,ou=Marketing,ou=East\" );\n-        assertTrue( name0.equals( name.addAll( name0 ) ) );\n+        assertTrue( name0.equals( name.add( name0 ) ) );\n     }\n \n \n@@ -1693,7 +1693,7 @@ public void testAddAllNameExisting0() throws Exception\n         Dn name1 = new Dn( \"ou=Marketing,ou=East\" );\n         Dn name2 = new Dn( \"cn=HomeDir,cn=John\" );\n         Dn nameAdded = new Dn( \"cn=HomeDir,cn=John, ou=Marketing,ou=East\" );\n-        assertTrue( nameAdded.equals( name1.addAll( name2 ) ) );\n+        assertTrue( nameAdded.equals( name1.add( name2 ) ) );\n     }\n \n \n@@ -1711,9 +1711,9 @@ public void testAddAllName1() throws Exception\n         Dn name1 = new Dn( \"cn=HomeDir,cn=John\" );\n         Dn name2 = new Dn( \"cn=HomeDir,cn=John,ou=Marketing,ou=East\" );\n \n-        name = name.addAll( name0 );\n+        name = name.add( name0 );\n         assertTrue( name0.equals( name ) );\n-        assertTrue( name2.equals( name.addAll( name1 ) ) );\n+        assertTrue( name2.equals( name.add( name1 ) ) );\n     }\n \n \n@@ -1731,9 +1731,9 @@ public void testAddAllintName0() throws Exception\n         Dn name1 = new Dn( \"cn=HomeDir,cn=John\" );\n         Dn name2 = new Dn( \"cn=HomeDir,cn=John,ou=Marketing,ou=East\" );\n \n-        name = name.addAll( name0 );\n+        name = name.add( name0 );\n         assertTrue( name0.equals( name ) );\n-        assertTrue( name2.equals( name.addAll( name1 ) ) );\n+        assertTrue( name2.equals( name.add( name1 ) ) );\n     }\n \n \n@@ -2113,7 +2113,7 @@ public void testAddAllName() throws LdapException, InvalidNameException\n         Dn aName = new Dn( \"cn=four,cn=three,cn=two,cn=one\" );\n \n         assertSame( jName, jName.addAll( new LdapName( \"cn=seven,cn=six\" ) ) );\n-        assertNotSame( aName, aName.addAll( new Dn( \"cn=seven,cn=six\" ) ) );\n+        assertNotSame( aName, aName.add( new Dn( \"cn=seven,cn=six\" ) ) );\n         assertNotSame( jName.toString(), aName.toString() );\n     }\n \n@@ -2128,15 +2128,15 @@ public void testAddAllIntName() throws LdapException, InvalidNameException\n         Dn aName = new Dn( \"cn=four,cn=three,cn=two,cn=one\" );\n \n         assertSame( jName, jName.addAll( 0, new LdapName( \"cn=zero,cn=zero.5\" ) ) );\n-        assertNotSame( aName, aName.addAll( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n+        assertNotSame( aName, aName.add( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n         assertNotSame( jName.toString(), aName.toString() );\n \n         assertSame( jName, jName.addAll( 2, new LdapName( \"cn=zero,cn=zero.5\" ) ) );\n-        assertNotSame( aName, aName.addAll( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n+        assertNotSame( aName, aName.add( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n         assertNotSame( jName.toString(), aName.toString() );\n \n         assertSame( jName, jName.addAll( jName.size(), new LdapName( \"cn=zero,cn=zero.5\" ) ) );\n-        assertNotSame( aName, aName.addAll( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n+        assertNotSame( aName, aName.add( new Dn( \"cn=zero,cn=zero.5\" ) ) );\n         assertNotSame( jName.toString(), aName.toString() );\n     }\n \n@@ -2918,7 +2918,7 @@ public void testNormalize() throws Exception\n \n         Dn anotherDn = new Dn( \"ou=x,ou=users\" );\n \n-        dn = dn.addAll( anotherDn );\n+        dn = dn.add( anotherDn );\n         assertTrue( dn.isSchemaAware() );\n \n         dn.applySchemaManager( schemaManager );",
                "additions": 19,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7f0a024a88d4c26040c40944cd3e86056e4b29fc/integ/src/test/java/org/apache/directory/shared/ldap/model/name/DnTest.java",
                "status": "modified",
                "changes": 38,
                "deletions": 19,
                "sha": "7c3e91431cf2d723c444771e41595681b56e04e3",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7f0a024a88d4c26040c40944cd3e86056e4b29fc/integ/src/test/java/org/apache/directory/shared/ldap/model/name/DnTest.java",
                "filename": "integ/src/test/java/org/apache/directory/shared/ldap/model/name/DnTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/integ/src/test/java/org/apache/directory/shared/ldap/model/name/DnTest.java?ref=7f0a024a88d4c26040c40944cd3e86056e4b29fc"
            },
            {
                "patch": "@@ -701,14 +701,12 @@ public Rdn getRdn( int posn )\n      */\n     public Rdn getRdn()\n     {\n-        if ( rdns.size() == 0 )\n-        {\n-            return null;\n-        }\n-        else\n+        if ( isNullOrEmpty( this ) )\n         {\n-            return rdns.get( 0 ).clone();\n+            return Rdn.EMPTY_RDN;\n         }\n+        \n+        return rdns.get( 0 ).clone();\n     }\n \n \n@@ -891,7 +889,7 @@ public Dn getAncestorOf( Dn descendant ) throws LdapInvalidDnException\n     /**\n      * {@inheritDoc}\n      */\n-    public Dn addAll( Dn suffix ) throws LdapInvalidDnException\n+    public Dn add( Dn suffix ) throws LdapInvalidDnException\n     {\n         if ( ( suffix == null ) || ( suffix.size() == 0 ) )\n         {\n@@ -979,14 +977,9 @@ public Dn add( Rdn newRdn )  throws LdapInvalidDnException\n      */\n     public Dn getParent()\n     {\n-        if ( isEmpty() )\n+        if ( isNullOrEmpty( this ) )\n         {\n-            return null;\n-        }\n-\n-        if ( rdns.size() == 0 )\n-        {\n-            return EMPTY_DN;\n+            return this;\n         }\n         \n         int posn = rdns.size() - 1;\n@@ -1299,12 +1292,7 @@ public boolean isSchemaAware()\n      */\n     public static boolean isNullOrEmpty( Dn dn )\n     {\n-        if ( dn != null )\n-        {\n-            return dn.isEmpty();\n-        }\n-\n-        return true;\n+        return ( dn == null ) || dn.isEmpty();\n     }\n     \n     ",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7f0a024a88d4c26040c40944cd3e86056e4b29fc/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java",
                "status": "modified",
                "changes": 28,
                "deletions": 20,
                "sha": "a5676c3fb64c3d8a409174974f8d0bce68cfb048",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7f0a024a88d4c26040c40944cd3e86056e4b29fc/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Dn.java?ref=7f0a024a88d4c26040c40944cd3e86056e4b29fc"
            }
        ],
        "bug_id": "directory-ldap-api_56",
        "parent": "https://github.com/apache/directory-ldap-api/commit/4aa638b7bd2e7b25751caf7a368b5214ac7e75a1",
        "message": "o Renamed the addAll( Dn ) method to add( Dn )\no Fixed some potential NPE\no Minor other refactorings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1085318 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/dcaa0ef69afea70419b1cd2a77d843937b1c11cd",
        "file": [
            {
                "patch": "@@ -53,22 +53,7 @@ private LdifControlSerializer()\n      */\n     public static void serialize( LdifControl ldifControl, ObjectOutput out ) throws IOException\n     {\n-        // The OID\n-        out.writeUTF( ldifControl.getOid() );\n-        \n-        // The criticality\n-        out.writeBoolean( ldifControl.isCritical() );\n-        \n-        // The value if any\n-        if ( ldifControl.hasValue() )\n-        {\n-            out.writeInt( ldifControl.getValue().length );\n-            out.write( ldifControl.getValue() );\n-        }\n-        else\n-        {\n-            out.writeInt( -1 );\n-        }\n+        ldifControl.writeExternal( out );\n         \n         out.flush();\n     }\n@@ -83,20 +68,15 @@ public static void serialize( LdifControl ldifControl, ObjectOutput out ) throws\n      */\n     public static LdifControl deserialize( ObjectInput in ) throws IOException\n     {\n-        // The OID\n-        String oid = in.readUTF();\n-        LdifControl ldifControl = new LdifControl( oid );\n-        \n-        // The criticality\n-        ldifControl.setCritical( in.readBoolean() );\n-        \n-        int valueSize = in.readInt();\n+        LdifControl ldifControl = new LdifControl();\n         \n-        if ( valueSize >=0 )\n+        try\n+        {\n+            ldifControl.readExternal( in );\n+        }\n+        catch ( ClassNotFoundException cnfe )\n         {\n-            byte[] value = new byte[ valueSize ];\n-            in.read( value );\n-            ldifControl.setValue( value );\n+            throw new IOException( cnfe.getMessage() );\n         }\n \n         return ldifControl;",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/dcaa0ef69afea70419b1cd2a77d843937b1c11cd/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/ldif/LdifControlSerializer.java",
                "status": "modified",
                "changes": 36,
                "deletions": 28,
                "sha": "d6b21def9e620b110fe1ab3a3b66150693008a6f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/dcaa0ef69afea70419b1cd2a77d843937b1c11cd/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/ldif/LdifControlSerializer.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/ldif/LdifControlSerializer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/ldif/LdifControlSerializer.java?ref=dcaa0ef69afea70419b1cd2a77d843937b1c11cd"
            },
            {
                "patch": "@@ -956,7 +956,7 @@ public boolean equals( Object o )\n         LdifEntry otherEntry = ( LdifEntry ) o;\n \n         // Check the Dn\n-        Dn thisDn = entry.getDn();\n+        Dn thisDn = entryDn;\n         Dn dnEntry = otherEntry.getDn();\n \n         if ( !thisDn.equals( dnEntry ) )",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/dcaa0ef69afea70419b1cd2a77d843937b1c11cd/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/ldif/LdifEntry.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "f23128e6e9030d51f28ae2eb869ca21ad04ac2b1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/dcaa0ef69afea70419b1cd2a77d843937b1c11cd/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/ldif/LdifEntry.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/ldif/LdifEntry.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/ldif/LdifEntry.java?ref=dcaa0ef69afea70419b1cd2a77d843937b1c11cd"
            },
            {
                "patch": "@@ -0,0 +1,526 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *  \n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License. \n+ *  \n+ */\n+package org.apache.directory.shared.ldap.model.ldif;\n+\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.mycila.junit.concurrent.Concurrency;\n+import com.mycila.junit.concurrent.ConcurrentJunitRunner;\n+\n+\n+/**\n+ * Test the LdifEntry class\n+ * \n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ */\n+@RunWith(ConcurrentJunitRunner.class)\n+@Concurrency()\n+public class LdifEntrySerializationTest\n+{\n+    @Test\n+    public void testLdifEntrySimple() throws Exception\n+    {\n+        String ldif = \n+            \"cn: app1\\n\" + \n+            \"objectClass: top\\n\" + \n+            \"objectClass: apApplication\\n\" + \n+            \"displayName:   app1   \\n\" +\n+            \"dependencies:\\n\" + \n+            \"envVars:\";\n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+        \n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+\n+\n+    /**\n+     * Test a simple LdifEntry\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testSimpleLdifEntry() throws Exception\n+    {\n+        String ldif = \n+            \"cn: app1\\n\" + \n+            \"objectClass: top\\n\" + \n+            \"objectClass: apApplication\\n\" + \n+            \"displayName:   app1   \\n\" +\n+            \"dependencies:\\n\" + \n+            \"envVars:\";\n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+    \n+    /**\n+     * Test a Delete changeType LdifEntry with no control\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testLdifParserChangeTypeDeleteNoControl() throws Exception\n+    {\n+        String ldif = \n+            \"# Delete an entry. The operation will attach the LDAPv3\\n\" +\n+            \"# Tree Delete Control defined in [9]. The criticality\\n\" +\n+            \"# field is \\\"true\\\" and the controlValue field is\\n\" + \n+            \"# absent, as required by [9].\\n\" +\n+            \"changetype: delete\\n\";\n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+    \n+    /**\n+     * Test a Delete changeType LdifEntry with one control\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testLdifParserChangeTypeDeleteWithControl() throws Exception\n+    {\n+        String ldif = \n+            \"# Delete an entry. The operation will attach the LDAPv3\\n\" +\n+            \"# Tree Delete Control defined in [9]. The criticality\\n\" +\n+            \"# field is \\\"true\\\" and the controlValue field is\\n\" + \n+            \"# absent, as required by [9].\\n\" +\n+            \"control: 1.2.840.113556.1.4.805 true\\n\" +\n+            \"changetype: delete\\n\";\n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+\n+    /**\n+     * Test a Delete changeType LdifEntry with controls\n+     * \n+     * @throws Exception\n+     */\n+    @Test\n+    public void testLdifParserChangeTypeDeleteWithControls() throws Exception\n+    {\n+        String ldif = \n+            \"# Delete an entry. The operation will attach the LDAPv3\\n\" +\n+            \"# Tree Delete Control defined in [9]. The criticality\\n\" +\n+            \"# field is \\\"true\\\" and the controlValue field is\\n\" + \n+            \"# absent, as required by [9].\\n\" +\n+            \"control: 1.2.840.113556.1.4.805 true\\n\" +\n+            \"control: 1.2.840.113556.1.4.806 false: test\\n\" +\n+            \"changetype: delete\\n\";\n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+\n+\n+    /**\n+     * Test a Add changeType LdifEntry with no control\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeAddNoControl() throws Exception\n+    {\n+        String ldif = \n+            \"changetype: add\\n\" +\n+            \"cn: app1\\n\" + \n+            \"objectClass: top\\n\" + \n+            \"objectClass: apApplication\\n\" + \n+            \"displayName:   app1   \\n\" +\n+            \"dependencies:\\n\" + \n+            \"envVars:\";\n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+    \n+    /**\n+     * Test a Add changeType LdifEntry with a control\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeAddWithControl() throws Exception\n+    {\n+        String ldif = \n+            \"control: 1.2.840.113556.1.4.805 true\\n\" +\n+            \"changetype: add\\n\" +\n+            \"cn: app1\\n\" + \n+            \"objectClass: top\\n\" + \n+            \"objectClass: apApplication\\n\" + \n+            \"displayName:   app1   \\n\" +\n+            \"dependencies:\\n\" + \n+            \"envVars:\";\n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+    \n+    /**\n+     * Test a Add changeType LdifEntry with controls\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeAddWithControls() throws Exception\n+    {\n+        String ldif = \n+            \"control: 1.2.840.113556.1.4.805 true\\n\" +\n+            \"control: 1.2.840.113556.1.4.806 false: test\\n\" +\n+            \"changetype: add\\n\" +\n+            \"cn: app1\\n\" + \n+            \"objectClass: top\\n\" + \n+            \"objectClass: apApplication\\n\" + \n+            \"displayName:   app1   \\n\" +\n+            \"dependencies:\\n\" + \n+            \"envVars:\";\n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+\n+\n+    /**\n+     * Test a ModDn changeType LdifEntry with no control\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeModDnNoControl() throws Exception\n+    {\n+        String ldif = \n+            \"changetype: moddn\\n\" +\n+            \"newrdn: cn=app2\\n\" + \n+            \"deleteoldrdn: 1\\n\"; \n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+\n+\n+    /**\n+     * Test a ModDn changeType LdifEntry with no control and a newSuperior\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeModDnRenameNoControlNewSuperior() throws Exception\n+    {\n+        String ldif = \n+            \"changetype: moddn\\n\" +\n+            \"newrdn: cn=app2\\n\" + \n+            \"deleteoldrdn: 1\\n\" +\n+            \"newsuperior: dc=example, dc=com\"; \n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+\n+    \n+    /**\n+     * Test a ModDn changeType LdifEntry with a control\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeModdnWithControl() throws Exception\n+    {\n+        String ldif = \n+            \"control: 1.2.840.113556.1.4.805 true\\n\" +\n+            \"changetype: moddn\\n\" +\n+            \"newrdn: cn=app2\\n\" + \n+            \"deleteoldrdn: 1\\n\"; \n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+    \n+    /**\n+     * Test a ModDN changeType LdifEntry with controls\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeModddnWithControls() throws Exception\n+    {\n+        String ldif = \n+            \"control: 1.2.840.113556.1.4.805 true\\n\" +\n+            \"control: 1.2.840.113556.1.4.806 false: test\\n\" +\n+            \"changetype: moddn\\n\" +\n+            \"newrdn: cn=app2\\n\" + \n+            \"deleteoldrdn: 1\\n\"; \n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+    \n+    /**\n+     * Test a Modify changeType LdifEntry with no control\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeModifySimple() throws Exception\n+    {\n+        String ldif = \n+            \"changetype: modify\\n\" +\n+            \"add: cn\\n\" +\n+            \"cn: v1\\n\" + \n+            \"cn: v2\\n\" +\n+            \"-\"; \n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+    \n+    /**\n+     * Test a Modify changeType LdifEntry with no attributes\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeModifyNoAttribute() throws Exception\n+    {\n+        String ldif = \n+            \"changetype: modify\\n\" +\n+            \"add: cn\\n\" +\n+            \"-\"; \n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+    \n+    \n+    /**\n+     * Test a Modify changeType LdifEntry with no attributes and controls\n+     */\n+    @Test\n+    public void testLdifEntryChangeTypeModifyNoAttributeWithControls() throws Exception\n+    {\n+        String ldif = \n+            \"control: 1.2.840.113556.1.4.805 true\\n\" +\n+            \"control: 1.2.840.113556.1.4.806 false: test\\n\" +\n+            \"changetype: modify\\n\" +\n+            \"add: cn\\n\" +\n+            \"-\"; \n+\n+        LdifEntry ldifEntry1 = new LdifEntry( \"cn=app1,ou=applications,ou=conf,dc=apache,dc=org\", ldif );\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream out = new ObjectOutputStream( baos );\n+\n+        LdifEntrySerializer.serialize( ldifEntry1, out );\n+        \n+        ObjectInputStream in = null;\n+\n+        byte[] data = baos.toByteArray();\n+        in = new ObjectInputStream( new ByteArrayInputStream( data ) );\n+\n+        LdifEntry ldifEntry2 = LdifEntrySerializer.deserialize( null, in );\n+\n+        assertEquals( ldifEntry1, ldifEntry2 );\n+    }\n+}",
                "additions": 526,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/dcaa0ef69afea70419b1cd2a77d843937b1c11cd/ldap/model/src/test/java/org/apache/directory/shared/ldap/model/ldif/LdifEntrySerializationTest.java",
                "status": "added",
                "changes": 526,
                "deletions": 0,
                "sha": "5d09e7dce2cfad9b3a1fcff35fd5095d4d5a031a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/dcaa0ef69afea70419b1cd2a77d843937b1c11cd/ldap/model/src/test/java/org/apache/directory/shared/ldap/model/ldif/LdifEntrySerializationTest.java",
                "filename": "ldap/model/src/test/java/org/apache/directory/shared/ldap/model/ldif/LdifEntrySerializationTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/test/java/org/apache/directory/shared/ldap/model/ldif/LdifEntrySerializationTest.java?ref=dcaa0ef69afea70419b1cd2a77d843937b1c11cd"
            }
        ],
        "bug_id": "directory-ldap-api_57",
        "parent": "https://github.com/apache/directory-ldap-api/commit/c222c88de1e70e4fed01162bf25dbe96d329207f",
        "message": "o Added a LdifControlSerializer test\no Added a LdifEntrySerializer test\no Fixed a NPE in LdifEntry.equals() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1082748 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/98d78cc91432f051010b08841703dc61f45be66b",
        "file": [
            {
                "patch": "@@ -237,7 +237,7 @@ public boolean equals( Object obj )\n      */\n     public String getResponseName()\n     {\n-        return responseName;\n+        return ( ( responseName == null ) ? \"\" : responseName.toString() );\n     }\n \n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/98d78cc91432f051010b08841703dc61f45be66b/ldap/src/main/java/org/apache/directory/shared/ldap/message/ExtendedResponseImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "de617192f08a52ae0cc13fced9f0eb8463b27a33",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/98d78cc91432f051010b08841703dc61f45be66b/ldap/src/main/java/org/apache/directory/shared/ldap/message/ExtendedResponseImpl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/ExtendedResponseImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/ExtendedResponseImpl.java?ref=98d78cc91432f051010b08841703dc61f45be66b"
            }
        ],
        "bug_id": "directory-ldap-api_58",
        "parent": "https://github.com/apache/directory-ldap-api/commit/6fae394c6db1b3b5ff290eff9962128bd9bf2183",
        "message": "Fixed a potential NPE when the responseName is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-codec-merge@986992 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/a9e7d19874b72c114ab34818cf3eac700dd0ba93",
        "file": [
            {
                "patch": "@@ -644,6 +644,7 @@ else if ( exprNode instanceof SubstringNode )\n                     // Transform Substring Nodes\n                     filter = new SubstringFilter();\n \n+                    ((SubstringFilter)filter).setType( ((SubstringNode)exprNode).getAttribute() );\n                     String initialString = ((SubstringNode)exprNode).getInitial();\n                     String finalString = ((SubstringNode)exprNode).getFinal();\n                     List<String> anyStrings = ((SubstringNode)exprNode).getAny();",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a9e7d19874b72c114ab34818cf3eac700dd0ba93/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapTransformer.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "16a23e30a1472866e91b662125bb2f2fb05bff2f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a9e7d19874b72c114ab34818cf3eac700dd0ba93/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapTransformer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapTransformer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapTransformer.java?ref=a9e7d19874b72c114ab34818cf3eac700dd0ba93"
            }
        ],
        "bug_id": "directory-ldap-api_59",
        "parent": "https://github.com/apache/directory-ldap-api/commit/3a315d6bc797b13bb8e365f7d6a25703ce979e03",
        "message": "Fixed DIRAPI-17 : the Substring filter was not containing the Attribute, leading to a NPE when encoding it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@955090 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/3dda17a38172466756cfcd032c1032d8e5f8ed35",
        "file": [
            {
                "patch": "@@ -269,7 +269,7 @@ public static boolean isRequestIdNeeded( Dsmlv2Container container ) throws XmlP\n \n \n     /**\n-     * XML Pretty Printer XSLT Tranformation\n+     * XML Pretty Printer XSLT Transformation\n      * \n      * @param document\n      *      the Dom4j Document\n@@ -288,8 +288,9 @@ public static Document styleDocument( Document document )\n         }\n         catch ( TransformerConfigurationException e1 )\n         {\n-            // TODO Auto-generated catch block\n             e1.printStackTrace();\n+            // return original document\n+            return document;\n         }\n \n         // now lets style the given document\n@@ -301,8 +302,9 @@ public static Document styleDocument( Document document )\n         }\n         catch ( TransformerException e )\n         {\n-            // TODO Auto-generated catch block\n             e.printStackTrace();\n+            // return original document\n+            return document;\n         }\n \n         // return the transformed document",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/3dda17a38172466756cfcd032c1032d8e5f8ed35/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/ParserUtils.java",
                "status": "modified",
                "changes": 8,
                "deletions": 3,
                "sha": "bc7471961e41672b7a131ac06e3448d73e086235",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/3dda17a38172466756cfcd032c1032d8e5f8ed35/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/ParserUtils.java",
                "filename": "dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/ParserUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml-parser/src/main/java/org/apache/directory/shared/dsmlv2/ParserUtils.java?ref=3dda17a38172466756cfcd032c1032d8e5f8ed35"
            }
        ],
        "bug_id": "directory-ldap-api_60",
        "parent": "https://github.com/apache/directory-ldap-api/commit/2662e1394ef4896de70c0c0aa4fbb5ee631b737f",
        "message": "If for whatever reason the pretty print transformation fails return the original document and avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@945221 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c",
        "file": [
            {
                "patch": "@@ -79,7 +79,6 @@\n import org.apache.directory.shared.ldap.client.api.messages.SearchResultDone;\n import org.apache.directory.shared.ldap.client.api.messages.SearchResultEntry;\n import org.apache.directory.shared.ldap.client.api.messages.SearchResultReference;\n-import org.apache.directory.shared.ldap.client.api.messages.future.BindFuture;\n import org.apache.directory.shared.ldap.client.api.messages.future.ResponseFuture;\n import org.apache.directory.shared.ldap.client.api.protocol.LdapProtocolCodecFactory;\n import org.apache.directory.shared.ldap.codec.ControlCodec;",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap-client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnection.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "25cb1c25c58c39bcff6ae57121452b425ce9e8dc",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap-client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnection.java",
                "filename": "ldap-client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-client-api/src/main/java/org/apache/directory/shared/ldap/client/api/LdapConnection.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -29,12 +29,9 @@\n import org.apache.directory.shared.asn1.ber.tlv.UniversalTag;\n import org.apache.directory.shared.asn1.ber.tlv.Value;\n import org.apache.directory.shared.asn1.codec.DecoderException;\n-import org.apache.directory.shared.asn1.util.BooleanDecoder;\n-import org.apache.directory.shared.asn1.util.BooleanDecoderException;\n import org.apache.directory.shared.asn1.util.IntegerDecoder;\n import org.apache.directory.shared.asn1.util.IntegerDecoderException;\n import org.apache.directory.shared.ldap.message.control.replication.SyncStateTypeEnum;\n-import org.apache.directory.shared.ldap.message.control.replication.SynchronizationModeEnum;\n import org.apache.directory.shared.ldap.util.StringTools;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/codec/controls/replication/syncStateValue/SyncStateValueControlGrammar.java",
                "status": "modified",
                "changes": 3,
                "deletions": 3,
                "sha": "2cb7e2a210a602d2e49386f08141675011d8a5c4",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/codec/controls/replication/syncStateValue/SyncStateValueControlGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/controls/replication/syncStateValue/SyncStateValueControlGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/controls/replication/syncStateValue/SyncStateValueControlGrammar.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -36,10 +36,8 @@\n import org.apache.directory.shared.ldap.entry.Modification;\n import org.apache.directory.shared.ldap.entry.ModificationOperation;\n import org.apache.directory.shared.ldap.entry.client.ClientModification;\n-import org.apache.directory.shared.ldap.entry.client.ClientStringValue;\n import org.apache.directory.shared.ldap.entry.client.DefaultClientAttribute;\n import org.apache.directory.shared.ldap.name.LdapDN;\n-import org.apache.directory.shared.ldap.util.StringTools;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n ",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modify/ModifyRequestCodec.java",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "8c1fc3c9de5837ba0d7b4a1fa7d4a7e5bad40b05",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modify/ModifyRequestCodec.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/modify/ModifyRequestCodec.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modify/ModifyRequestCodec.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -36,7 +36,6 @@\n import org.apache.directory.shared.ldap.codec.LdapMessageCodec;\n import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n-import org.apache.directory.shared.ldap.entry.client.ClientStringValue;\n import org.apache.directory.shared.ldap.entry.client.DefaultClientAttribute;\n import org.apache.directory.shared.ldap.entry.client.DefaultClientEntry;\n import org.apache.directory.shared.ldap.name.LdapDN;",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultEntryCodec.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "d0204c77b89c56032ced033504aef1d7da8a3cdb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultEntryCodec.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultEntryCodec.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultEntryCodec.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -26,7 +26,6 @@\n import org.apache.directory.shared.ldap.entry.Value;\n import org.apache.directory.shared.ldap.entry.client.ClientBinaryValue;\n import org.apache.directory.shared.ldap.entry.client.ClientStringValue;\n-import org.apache.directory.shared.ldap.util.StringTools;\n \n \n /**",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AbstractExprNode.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "ce4b52770aabf3c1f9e035a651bb01a8fb5d279e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AbstractExprNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/AbstractExprNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AbstractExprNode.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -20,12 +20,7 @@\n package org.apache.directory.shared.ldap.filter;\n \n \n-import java.util.Arrays;\n-\n import org.apache.directory.shared.ldap.entry.Value;\n-import org.apache.directory.shared.ldap.entry.client.ClientBinaryValue;\n-import org.apache.directory.shared.ldap.entry.client.ClientStringValue;\n-import org.apache.directory.shared.ldap.util.StringTools;\n \n \n /**",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ExtensibleNode.java",
                "status": "modified",
                "changes": 5,
                "deletions": 5,
                "sha": "fced5e2bf7d5c4801e315606e4f9fe9fd3499494",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ExtensibleNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/ExtensibleNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ExtensibleNode.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -22,8 +22,6 @@\n \n import org.apache.directory.shared.ldap.constants.SchemaConstants;\n import org.apache.directory.shared.ldap.entry.Value;\n-import org.apache.directory.shared.ldap.entry.client.ClientBinaryValue;\n-import org.apache.directory.shared.ldap.entry.client.ClientStringValue;\n \n \n /**",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SimpleNode.java",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "d7096bea0901ff3f3bac38a15f03e852edccad09",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SimpleNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/SimpleNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SimpleNode.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -26,7 +26,6 @@\n \n import javax.naming.NamingException;\n \n-import org.apache.directory.shared.ldap.entry.Value;\n import org.apache.directory.shared.ldap.entry.client.ClientStringValue;\n import org.apache.directory.shared.ldap.schema.Normalizer;\n import org.apache.directory.shared.ldap.util.StringTools;",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SubstringNode.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "fff1cc6b25c27dd6115404c4f4db3af7c5c9ac27",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SubstringNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/SubstringNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SubstringNode.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -45,7 +45,6 @@\n import org.apache.directory.shared.ldap.entry.client.DefaultClientEntry;\n import org.apache.directory.shared.ldap.name.LdapDN;\n import org.apache.directory.shared.ldap.name.Rdn;\n-import org.apache.directory.shared.ldap.util.DNUtils;\n import org.apache.directory.shared.ldap.util.StringTools;\n \n ",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "a7ec563777289d74381fd37763553e261bc4fefe",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifEntry.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -149,8 +149,6 @@\n      * \n      * Note : there is no Generic available classes in commons-collection...\n      */\n-    @SuppressWarnings(\n-        { \"unchecked\" })\n     private MultiMap atavTypes = new MultiValueMap();\n \n     /**\n@@ -297,8 +295,6 @@ public Rdn( String upType, String upValue ) throws InvalidNameException\n      * @param rdn\n      *            The non-null Rdn to be copied.\n      */\n-    @SuppressWarnings(\n-        { \"unchecked\" })\n     public Rdn( Rdn rdn )\n     {\n         nbAtavs = rdn.getNbAtavs();\n@@ -425,8 +421,6 @@ public Rdn normalize( Map<String, OidNormalizer> oidsMap ) throws InvalidNameExc\n     // WARNING : The protection level is left unspecified intentionally.\n     // We need this method to be visible from the DnParser class, but not\n     // from outside this package.\n-    @SuppressWarnings(\n-        { \"unchecked\" })\n     /* Unspecified protection */void addAttributeTypeAndValue( String upType, String type, Value<?> upValue,\n         Value<?> value ) throws InvalidNameException\n     {\n@@ -480,8 +474,6 @@ public Rdn normalize( Map<String, OidNormalizer> oidsMap ) throws InvalidNameExc\n     // WARNING : The protection level is left unspecified intentionnaly.\n     // We need this method to be visible from the DnParser class, but not\n     // from outside this package.\n-    @SuppressWarnings(\n-        { \"unchecked\" })\n     /* Unspecified protection */void addAttributeTypeAndValue( AVA value )\n     {\n         String normalizedType = value.getNormType();",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "status": "modified",
                "changes": 8,
                "deletions": 8,
                "sha": "79fb985e14468d3d2969483517806167e86e4234",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -19,10 +19,10 @@\n package org.apache.directory.shared.ldap.util;\n \n \n-import javax.naming.directory.Attribute;\n-import javax.naming.directory.DirContext;\n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n+import javax.naming.directory.Attribute;\n+import javax.naming.directory.DirContext;\n \n \n /**\n@@ -102,7 +102,6 @@ public DirContext getAttributeDefinition() throws NamingException\n     }\n \n \n-    @SuppressWarnings ( { \"CloneDoesntCallSuperClone\" } )\n     public Object clone()\n     {\n         throw new IllegalStateException( \"Now why would you ever want to clone an immutable object?\" );",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributeWrapper.java",
                "status": "modified",
                "changes": 5,
                "deletions": 3,
                "sha": "99167dc66c8e8f8ba7df85cc7312d2930186d45f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributeWrapper.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributeWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributeWrapper.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -90,7 +90,6 @@ public Attribute remove( String attrID )\n     }\n \n \n-    @SuppressWarnings ( { \"CloneDoesntCallSuperClone\" } )\n     public Object clone()\n     {\n         throw new IllegalStateException( \"Now why would you want to clone() an immutable object in the first place.\" );",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributesWrapper.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "7f93613f47eed3ee9170e94703bea9d191764525",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributesWrapper.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributesWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributesWrapper.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -27,8 +27,6 @@\n \n import java.text.ParseException;\n \n-import org.apache.directory.shared.ldap.entry.client.ClientBinaryValue;\n-import org.apache.directory.shared.ldap.util.StringTools;\n import org.junit.Test;\n \n ",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/test/java/org/apache/directory/shared/ldap/filter/FilterCloneTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "7888783f06b37459aa3f39b2beafc253464961a7",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/test/java/org/apache/directory/shared/ldap/filter/FilterCloneTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/filter/FilterCloneTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/filter/FilterCloneTest.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -20,23 +20,17 @@\n package org.apache.directory.shared.ldap.filter;\n \n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+\n import java.io.UnsupportedEncodingException;\n import java.text.ParseException;\n \n-import org.apache.directory.shared.ldap.entry.client.ClientBinaryValue;\n import org.apache.directory.shared.ldap.entry.client.ClientStringValue;\n-import org.apache.directory.shared.ldap.filter.BranchNode;\n-import org.apache.directory.shared.ldap.filter.ExtensibleNode;\n-import org.apache.directory.shared.ldap.filter.PresenceNode;\n-import org.apache.directory.shared.ldap.filter.SimpleNode;\n-import org.apache.directory.shared.ldap.filter.SubstringNode;\n-import org.apache.directory.shared.ldap.util.StringTools;\n import org.junit.Test;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.fail;\n-import static org.junit.Assert.assertNull;\n \n \n /**\n@@ -723,7 +717,6 @@ public void testSubstringStarAnyStar() throws ParseException\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testTwoByteUTF8Raw() throws ParseException\n     {\n@@ -732,7 +725,7 @@ public void testTwoByteUTF8Raw() throws ParseException\n \n         try\n         {\n-            String s = new String( bytes, \"UTF-8\" );\n+            new String( bytes, \"UTF-8\" );\n             String str = \"(cn=\\\\C2\\\\A2)\";\n             SimpleNode<?> node = ( SimpleNode<?> ) FilterParser.parse( str );\n \n@@ -749,7 +742,6 @@ public void testTwoByteUTF8Raw() throws ParseException\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testTwoByteUTF8Escaped() throws ParseException\n     {\n@@ -759,7 +751,7 @@ public void testTwoByteUTF8Escaped() throws ParseException\n         try\n         {\n             String str = \"(cn=\\\\C2\\\\A2)\";\n-            String s = new String( bytes, \"UTF-8\" );\n+            new String( bytes, \"UTF-8\" );\n \n             SimpleNode<?> node = ( SimpleNode<?> ) FilterParser.parse( str );\n \n@@ -776,7 +768,6 @@ public void testTwoByteUTF8Escaped() throws ParseException\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testThreeByteUTF8Raw() throws ParseException\n     {\n@@ -785,7 +776,7 @@ public void testThreeByteUTF8Raw() throws ParseException\n \n         try\n         {\n-            String s = new String( bytes, \"UTF-8\" );\n+            new String( bytes, \"UTF-8\" );\n             String str = \"(cn=\\\\E2\\\\89\\\\A0)\";\n             SimpleNode<?> node = ( SimpleNode<?> ) FilterParser.parse( str );\n \n@@ -802,7 +793,6 @@ public void testThreeByteUTF8Raw() throws ParseException\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testThreeByteUTF8Escaped() throws ParseException\n     {\n@@ -812,7 +802,7 @@ public void testThreeByteUTF8Escaped() throws ParseException\n         try\n         {\n             String str = \"(cn=\\\\E2\\\\89\\\\A0aa)\";\n-            String s = new String( bytes, \"UTF-8\" );\n+            new String( bytes, \"UTF-8\" );\n \n             SimpleNode<?> node = ( SimpleNode<?> ) FilterParser.parse( str );\n \n@@ -829,7 +819,6 @@ public void testThreeByteUTF8Escaped() throws ParseException\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testThreeByteJapaneseUTF8Raw() throws ParseException\n     {\n@@ -838,7 +827,7 @@ public void testThreeByteJapaneseUTF8Raw() throws ParseException\n \n         try\n         {\n-            String s = new String( bytes, \"UTF-8\" );\n+            new String( bytes, \"UTF-8\" );\n             String str = \"(cn=\\\\E3\\\\81\\\\99)\";\n             SimpleNode<?> node = ( SimpleNode<?> ) FilterParser.parse( str );\n \n@@ -855,7 +844,6 @@ public void testThreeByteJapaneseUTF8Raw() throws ParseException\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testThreeByteJapaneseUTF8Escaped() throws ParseException\n     {\n@@ -865,7 +853,7 @@ public void testThreeByteJapaneseUTF8Escaped() throws ParseException\n         try\n         {\n             String str = \"(cn=\\\\E3\\\\81\\\\99)\";\n-            String s = new String( bytes, \"UTF-8\" );\n+            new String( bytes, \"UTF-8\" );\n \n             SimpleNode<?> node = ( SimpleNode<?> ) FilterParser.parse( str );\n             assertEquals( \"cn\", node.getAttribute() );\n@@ -1055,19 +1043,10 @@ public void testPerf() throws ParseException\n     */\n \n \n-\n-\n-    @SuppressWarnings(\"unchecked\")\n     @Test\n     public void testBinaryValueEscaped() throws ParseException\n     {\n-        byte[] bytes =\n-            {   0x29, 0x4C, 0x04, (byte)0xB5, \n-                (byte)0xD4, (byte)0xED, 0x38, 0x46, \n-                (byte)0x87, (byte)0xEE, 0x77, 0x58, \n-                0x5C, 0x32, (byte)0xAD, (byte)0x91 }; \n-\n         String str = \"(objectguid=\\\\29\\\\4C\\\\04\\\\B5\\\\D4\\\\ED\\\\38\\\\46\\\\87\\\\EE\\\\77\\\\58\\\\5C\\\\32\\\\AD\\\\91)\";\n-        SimpleNode<String> node = ( SimpleNode<String> ) FilterParser.parse( str );\n+        FilterParser.parse( str );\n     }\n }",
                "additions": 13,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/test/java/org/apache/directory/shared/ldap/filter/FilterParserTest.java",
                "status": "modified",
                "changes": 47,
                "deletions": 34,
                "sha": "d881972dda9e74f60ccd09ec6aef92a36a4c33ba",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/test/java/org/apache/directory/shared/ldap/filter/FilterParserTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/filter/FilterParserTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/filter/FilterParserTest.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -19,29 +19,29 @@\n  */\n package org.apache.directory.shared.ldap.ldif;\n \n-import org.apache.directory.shared.ldap.entry.Entry;\n-import org.apache.directory.shared.ldap.entry.EntryAttribute;\n-import org.apache.directory.shared.ldap.entry.client.DefaultClientAttribute;\n-import org.apache.directory.shared.ldap.entry.client.DefaultClientEntry;\n-import org.apache.directory.shared.ldap.name.LdapDN;\n-import org.apache.directory.shared.ldap.name.Rdn;\n-import org.apache.directory.shared.ldap.util.StringTools;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import org.junit.Test;\n+import java.util.List;\n \n import javax.naming.NamingException;\n import javax.naming.directory.Attribute;\n import javax.naming.directory.Attributes;\n import javax.naming.directory.BasicAttribute;\n import javax.naming.directory.BasicAttributes;\n \n-import java.util.List;\n+import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.entry.EntryAttribute;\n+import org.apache.directory.shared.ldap.entry.client.DefaultClientAttribute;\n+import org.apache.directory.shared.ldap.entry.client.DefaultClientEntry;\n+import org.apache.directory.shared.ldap.name.LdapDN;\n+import org.apache.directory.shared.ldap.name.Rdn;\n+import org.apache.directory.shared.ldap.util.StringTools;\n+import org.junit.Test;\n \n \n /**\n@@ -336,18 +336,6 @@ public void testConvertToLdifAttrWithNullValues() throws NamingException\n     @Test\n     public void testConvertToLdif() throws NamingException\n     {\n-        String expected = \n-            \"dn:: Y249U2Fhcm\\n\" +\n-            \" Jyw7xja2VuLCBk\\n\" +\n-            \" Yz1leGFtcGxlLC\\n\" +\n-            \" BkYz1jb20=\\n\" +\n-            \"changeType: Add\\n\" +\n-            \"sn: test\\n\" +\n-            \"cn:: U2FhcmJyw7\\n xja2Vu\\n\" +\n-            \"objectClass: to\\n p\\n\" +\n-            \"objectClass: pe\\n rson\\n\" +\n-            \"objectClass: in\\n etorgPerson\\n\\n\";\n-        \n         LdifEntry entry = new LdifEntry();\n         entry.setDn( \"cn=Saarbr\\u00FCcken, dc=example, dc=com\" );\n         entry.setChangeType( ChangeType.Add );\n@@ -360,7 +348,7 @@ public void testConvertToLdif() throws NamingException\n         entry.addAttribute( \"cn\", \"Saarbr\\u00FCcken\" );\n         entry.addAttribute( \"sn\", \"test\" );\n \n-        String ldif = LdifUtils.convertToLdif( entry, 15 );\n+        LdifUtils.convertToLdif( entry, 15 );\n         //Attributes result = LdifUtils.convertFromLdif( ldif );\n         //assertEquals( entry, result );\n     }",
                "additions": 13,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/test/java/org/apache/directory/shared/ldap/ldif/LdifUtilsTest.java",
                "status": "modified",
                "changes": 38,
                "deletions": 25,
                "sha": "434e26007a244bf6000219c817c15f17b275708e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/test/java/org/apache/directory/shared/ldap/ldif/LdifUtilsTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/ldif/LdifUtilsTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/ldif/LdifUtilsTest.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            },
            {
                "patch": "@@ -3574,19 +3574,19 @@ public void testNormalizeAsciiComposite() throws Exception\n         // The second ATAV\n         for ( AVA ava : rdn )\n         {\n-            if ( \"example\".equals( atav.getNormValue().get() ) )\n+            if ( \"example\".equals( ava.getNormValue().get() ) )\n             {\n                 // Skip the first one\n                 continue;\n             }\n             \n-            assertEquals( \"2.5.4.11=test\", atav.getNormName() );\n-            assertEquals( \"2.5.4.11\", atav.getNormType() );\n-            assertEquals( \"test\", atav.getNormValue().get() );\n+            assertEquals( \"2.5.4.11=test\", ava.getNormName() );\n+            assertEquals( \"2.5.4.11\", ava.getNormType() );\n+            assertEquals( \"test\", ava.getNormValue().get() );\n             \n-            assertEquals( \"ou\", atav.getUpType() );\n-            assertEquals( \"TEST\", atav.getUpValue().get() );\n-            assertEquals( \"  ou =  TEST \", atav.getUpName() );\n+            assertEquals( \"ou\", ava.getUpType() );\n+            assertEquals( \"TEST\", ava.getUpValue().get() );\n+            assertEquals( \" ou = TEST \", ava.getUpName() );\n         }\n     }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/test/java/org/apache/directory/shared/ldap/name/LdapDNTest.java",
                "status": "modified",
                "changes": 14,
                "deletions": 7,
                "sha": "6e896dafb38574d61ac81b81a782e1af6f6b9bc2",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/8a23f170ac05b369721015cd4fdfbc0bf2a45e4c/ldap/src/test/java/org/apache/directory/shared/ldap/name/LdapDNTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/name/LdapDNTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/name/LdapDNTest.java?ref=8a23f170ac05b369721015cd4fdfbc0bf2a45e4c"
            }
        ],
        "bug_id": "directory-ldap-api_61",
        "parent": "https://github.com/apache/directory-ldap-api/commit/abc425b91abaefb306836b490b5c7030a6d642df",
        "message": "Many fixes :\no potential NPE\no unused imports removal\no useless @SuppressWarnings removal\no unused variable removal\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@896304 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/4e7f53723123ce03095495a53a5da70b9d5f0c23",
        "file": [
            {
                "patch": "@@ -822,6 +822,12 @@ public boolean loadWithDeps( String... schemas ) throws Exception\n      */\n     private final void loadDepsFirst( Registries registries, Schema schema ) throws Exception\n     {\n+        if ( schema == null )\n+        {\n+            LOG.info( \"The schema is null\" );\n+            return;\n+        }\n+\n         if ( schema.isDisabled() && !registries.isDisabledAccepted() )\n         {\n             LOG.info( \"The schema is disabled and the registries does not accepted disabled schema\" );",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/4e7f53723123ce03095495a53a5da70b9d5f0c23/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "status": "modified",
                "changes": 6,
                "deletions": 0,
                "sha": "0caf209a742daa2ab88159c8fe4fe0416b0b52bf",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/4e7f53723123ce03095495a53a5da70b9d5f0c23/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java?ref=4e7f53723123ce03095495a53a5da70b9d5f0c23"
            }
        ],
        "bug_id": "directory-ldap-api_62",
        "parent": "https://github.com/apache/directory-ldap-api/commit/e4394eebaa1a56baee28cef53329b100bb442db0",
        "message": "Fixed a NPE when trying to load a bad schema (schema that does not exist)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@887297 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b",
        "file": [
            {
                "patch": "@@ -396,6 +396,7 @@ private void loadComparators( Schema schema, Registries registries ) throws Exce\n             LdifEntry entry = reader.next();\n             LdapComparator<?> comparator = \n                 factory.getLdapComparator( entry.getEntry(), registries );\n+            comparator.setOid( entry.get( MetaSchemaConstants.M_OID_AT ).getString() );\n             registries.getComparatorRegistry().register( comparator );\n         }\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/LdifSchemaLoader.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "c2cbc3831e8590147931b724bcfe386ad87150e8",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/LdifSchemaLoader.java",
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/LdifSchemaLoader.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/LdifSchemaLoader.java?ref=4102a3fb2dcb8829927c3b99c4e6bca91fe6857b"
            },
            {
                "patch": "@@ -51,6 +51,8 @@\n import org.apache.directory.shared.ldap.schema.registries.Registries;\n import org.apache.directory.shared.ldap.schema.registries.DefaultSchema;\n import org.apache.directory.shared.ldap.util.Base64;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n \n /**\n@@ -61,6 +63,12 @@\n  */\n public class SchemaEntityFactory\n {\n+\t/** Slf4j logger */\n+\tprivate final static Logger LOG = LoggerFactory.getLogger( SchemaEntityFactory.class );\n+\n+\t/** for fast debug checks */\n+\tprivate static final boolean IS_DEBUG = LOG.isDebugEnabled();\n+\t\n     /** Used for looking up the setRegistries(Registries) method */\n     private final static Class<?>[] parameterTypes = new Class[] { Registries.class };\n     \n@@ -202,14 +210,22 @@ public SyntaxChecker getSyntaxChecker( SyntaxCheckerDescription syntaxCheckerDes\n         LdapComparator<?> comparator = null;\n         Class<?> clazz = null;\n          \n-        if ( bytecode == null ) \n+        try\n         {\n-            clazz = Class.forName( className );\n+\t        if ( bytecode == null ) \n+\t        {\n+\t            clazz = Class.forName( className );\n+\t        }\n+\t        else\n+\t        {\n+\t            classLoader.setAttribute( bytecode );\n+\t            clazz = classLoader.loadClass( className );\n+\t        }\n         }\n-        else\n+        catch ( Exception e )\n         {\n-            classLoader.setAttribute( bytecode );\n-            clazz = classLoader.loadClass( className );\n+        \tLOG.error( \"Failed to load class from LDIF bytecode from schemaObject {}\", oid, e );\n+        \tthrow e;\n         }\n         \n         comparator = ( LdapComparator<?> ) clazz.newInstance();\n@@ -258,7 +274,7 @@ public SyntaxChecker getSyntaxChecker( SyntaxCheckerDescription syntaxCheckerDes\n         }\n         \n         String className = entry.get( MetaSchemaConstants.M_FQCN_AT ).get().getString();\n-        return getLdapComparator( entry.get( MetaSchemaConstants.M_OID_AT ).toString(), \n+        return getLdapComparator( entry.get( MetaSchemaConstants.M_OID_AT ).getString(), \n             className, entry.get( MetaSchemaConstants.M_BYTECODE_AT ), targetRegistries );\n     }\n     \n@@ -339,7 +355,21 @@ public Normalizer getNormalizer( Entry entry, Registries targetRegistries )\n      */\n     private void injectRegistries( Object obj, Registries targetRegistries ) throws Exception\n     {\n-        Method method = obj.getClass().getMethod( \"setRegistries\", parameterTypes );\n+        Method method = null;\n+        \n+        try\n+        {\n+        \tmethod = obj.getClass().getMethod( \"setRegistries\", parameterTypes );\n+        }\n+        catch ( NoSuchMethodException e )\n+        {\n+        \tif ( IS_DEBUG )\n+        \t{\n+        \t\tLOG.debug( obj.getClass() + \" has no setRegistries() method.\" );\n+        \t}\n+        \t\n+        \treturn;\n+        }\n         \n         if ( method == null )\n         {",
                "additions": 37,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/SchemaEntityFactory.java",
                "status": "modified",
                "changes": 44,
                "deletions": 7,
                "sha": "2b04bb780d459455cb1de338089b3c71b9d0be5f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/SchemaEntityFactory.java",
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/SchemaEntityFactory.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/loader/ldif/SchemaEntityFactory.java?ref=4102a3fb2dcb8829927c3b99c4e6bca91fe6857b"
            },
            {
                "patch": "@@ -116,7 +116,11 @@ protected SchemaObject( SchemaObjectType objectType, String oid )\n         isReadOnly = false;\n         extensions = new HashMap<String, List<String>>();\n         names = new ArrayList<String>();\n-        names.add( oid );\n+        \n+        if ( oid != null )\n+        {\n+        \tnames.add( oid );\n+        }\n     }\n     \n     \n@@ -133,7 +137,6 @@ protected SchemaObject( SchemaObjectType objectType )\n         isReadOnly = false;\n         extensions = new HashMap<String, List<String>>();\n         names = new ArrayList<String>();\n-        names.add( oid );\n     }\n     \n     \n@@ -215,7 +218,10 @@ public void addName( String... names )\n         {\n             for ( String name : names )\n             {\n-                this.names.add( name );\n+            \tif ( name != null )\n+            \t{\n+            \t\tthis.names.add( name );\n+            \t}\n             }\n         }\n     }\n@@ -228,13 +234,21 @@ public void addName( String... names )\n      */\n     public void setNames( List<String> names )\n     {\n+    \tif ( names == null )\n+    \t{\n+    \t\treturn;\n+    \t}\n+    \t\n         if ( ! isReadOnly )\n         {\n             this.names = new ArrayList<String>( names.size() );\n             \n             for ( String name:names )\n             {\n-                this.names.add( name );\n+            \tif ( name != null )\n+            \t{\n+            \t\tthis.names.add( name );\n+            \t}\n             }\n         }\n     }",
                "additions": 18,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap/src/main/java/org/apache/directory/shared/ldap/schema/SchemaObject.java",
                "status": "modified",
                "changes": 22,
                "deletions": 4,
                "sha": "5c614147dba5a26418729b6d240a77f9c3da67e2",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap/src/main/java/org/apache/directory/shared/ldap/schema/SchemaObject.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/SchemaObject.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/SchemaObject.java?ref=4102a3fb2dcb8829927c3b99c4e6bca91fe6857b"
            },
            {
                "patch": "@@ -98,4 +98,19 @@ public int compare( String o1, String o2 )\n \n         return comparator.compare( n1, n2 );\n     }\n+    \n+    \n+    /**\n+     * Makes sure we update the oid property of the contained normalizer and \n+     * comparator.\n+     * \n+     * @param oid the object identifier\n+     */\n+    @Override\n+    public void setOid( String oid )\n+    {\n+    \tsuper.setOid( oid );\n+    \tnormalizer.setOid( oid );\n+    \tcomparator.setOid( oid );\n+    }    \n }",
                "additions": 15,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap/src/main/java/org/apache/directory/shared/ldap/schema/comparators/NormalizingComparator.java",
                "status": "modified",
                "changes": 15,
                "deletions": 0,
                "sha": "737b37b3b9c62b723585f07265dbc3eb3704aaae",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap/src/main/java/org/apache/directory/shared/ldap/schema/comparators/NormalizingComparator.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/comparators/NormalizingComparator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/comparators/NormalizingComparator.java?ref=4102a3fb2dcb8829927c3b99c4e6bca91fe6857b"
            },
            {
                "patch": "@@ -212,7 +212,7 @@ public void register( T schemaObject ) throws NamingException\n         \n         if ( LOG.isDebugEnabled() )\n         {\n-            LOG.debug( \"registered {} for OID {}\", schemaObject, oid );\n+            LOG.debug( \"registered \" + schemaObject.getName() + \" for OID {}\", oid );\n         }\n         \n         // And register the oid -> schemaObject relation",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/SchemaObjectRegistry.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "c876d83b5bae18b1fd11cc60340526dfe6643da2",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/4102a3fb2dcb8829927c3b99c4e6bca91fe6857b/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/SchemaObjectRegistry.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/SchemaObjectRegistry.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/SchemaObjectRegistry.java?ref=4102a3fb2dcb8829927c3b99c4e6bca91fe6857b"
            }
        ],
        "bug_id": "directory-ldap-api_63",
        "parent": "https://github.com/apache/directory-ldap-api/commit/cc15bddc73b6e02dc5409647b902ce0f9e17decd",
        "message": "fixed bug in hashCode() causing NPE due to inclusion of single null value in list of names (aliases)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@809205 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/21d0285d95296be034336d06bb5ea082b523f79c",
        "file": [
            {
                "patch": "@@ -117,7 +117,7 @@\n      */\n     public static boolean isLDIFSafe( String str )\n     {\n-        if ( str == null )\n+        if ( StringTools.isEmpty( str ) )\n         {\n             // A null string is LDIF safe\n             return true;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/21d0285d95296be034336d06bb5ea082b523f79c/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifUtils.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "7975be223f8b4e9e3332916e10b3a97f40bd4bf0",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/21d0285d95296be034336d06bb5ea082b523f79c/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifUtils.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifUtils.java?ref=21d0285d95296be034336d06bb5ea082b523f79c"
            },
            {
                "patch": "@@ -73,6 +73,26 @@ private Entry buildEntry()\n     }\n \n     \n+    /**\n+     * Tests the method IsLdifSafe with a null String\n+     */\n+    @Test\n+    public void testIsLdifNullString()\n+    {\n+        assertTrue( LdifUtils.isLDIFSafe( null ) );\n+    }\n+    \n+\n+    /**\n+     * Tests the method IsLdifSafe with an empty String\n+     */\n+    @Test\n+    public void testIsLdifEmptyString()\n+    {\n+        assertTrue( LdifUtils.isLDIFSafe( \"\" ) );\n+    }\n+    \n+\n     /**\n      * Tests the method IsLdifSafe with a String starting with the\n      * char NUL (ASCII code 0)\n@@ -85,6 +105,7 @@ public void testIsLdifSafeStartingWithNUL()\n         assertFalse( LdifUtils.isLDIFSafe( c + testString ) );\n     }\n     \n+\n     /**\n      * Tests the method IsLdifSafe with a String starting with the\n      * char LF (ASCII code 10)",
                "additions": 21,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/21d0285d95296be034336d06bb5ea082b523f79c/ldap/src/test/java/org/apache/directory/shared/ldap/ldif/LdifUtilsTest.java",
                "status": "modified",
                "changes": 21,
                "deletions": 0,
                "sha": "5f70e3cecf6f66738b5aff53cf7503a0d0dc689e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/21d0285d95296be034336d06bb5ea082b523f79c/ldap/src/test/java/org/apache/directory/shared/ldap/ldif/LdifUtilsTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/ldif/LdifUtilsTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/ldif/LdifUtilsTest.java?ref=21d0285d95296be034336d06bb5ea082b523f79c"
            }
        ],
        "bug_id": "directory-ldap-api_64",
        "parent": "https://github.com/apache/directory-ldap-api/commit/a88fcf17e4dc35073c8c0bafefa40176fc05d4d5",
        "message": "Added a fix to the isLDIFSafe method : when the string to check was empty, we got a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@707841 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/bac761a26957c150414d071aec341493b5301b5e",
        "file": [
            {
                "patch": "@@ -265,7 +265,7 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n         }\n \n         // The control type\n-        Value.encode( buffer, controlType.getBytes() );\n+        Value.encode( buffer, getControlType().getBytes() );\n \n         // The control criticality, if true\n         if ( criticality )",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/Control.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "584247de0eb8e4bf659d712faa5eea24f3e45ff1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/Control.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/Control.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/Control.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -111,7 +111,14 @@ public LdapMessage()\n      */\n     public Control getControls( int i )\n     {\n-        return controls.get( i );\n+        if ( controls != null )\n+        {\n+            return controls.get( i );\n+        }\n+        else\n+        {\n+            return null;\n+        }\n     }\n \n ",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessage.java",
                "status": "modified",
                "changes": 9,
                "deletions": 1,
                "sha": "58e90a38e610179792582d3d381ec729e841e33b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessage.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessage.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessage.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -21,7 +21,6 @@\n \n \n import org.apache.directory.shared.asn1.ber.AbstractContainer;\n-import org.apache.directory.shared.asn1.ber.IAsn1Container;\n import org.apache.directory.shared.ldap.message.spi.BinaryAttributeDetector;\n \n \n@@ -32,7 +31,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class LdapMessageContainer extends AbstractContainer implements IAsn1Container\n+public class LdapMessageContainer extends AbstractContainer\n {\n     // ~ Instance fields\n     // ----------------------------------------------------------------------------",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageContainer.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "eef15f0f9f06e2e68458c08a3c9b80ef6189b772",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageContainer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageContainer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageContainer.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -116,7 +116,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class LdapMessageGrammar extends AbstractGrammar implements IGrammar\n+public class LdapMessageGrammar extends AbstractGrammar\n {\n     // ~ Static fields/initializers\n     // -----------------------------------------------------------------\n@@ -592,12 +592,12 @@ public void action( IAsn1Container container ) throws DecoderException\n                     }\n                     else\n                     {\n-                        LdapDN dn = LdapDN.EMPTY_LDAPDN;\n                         byte[] dnBytes = tlv.getValue().getData();\n \n                         try\n                         {\n-                            dn = new LdapDN( dnBytes );\n+                            LdapDN dn = new LdapDN( dnBytes );\n+                            bindRequestMessage.setName( dn );\n                         }\n                         catch ( InvalidNameException ine )\n                         {\n@@ -610,8 +610,6 @@ public void action( IAsn1Container container ) throws DecoderException\n                         \n                             throw new ResponseCarryingException( msg, response, ResultCodeEnum.INVALID_DN_SYNTAX, LdapDN.EMPTY_LDAPDN, ine );\n                         }\n-\n-                        bindRequestMessage.setName( dn );\n                     }\n \n                     if ( IS_DEBUG )",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageGrammar.java",
                "status": "modified",
                "changes": 8,
                "deletions": 5,
                "sha": "da6adebe1d4961aac066d403de90d912700855c6",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessageGrammar.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -21,15 +21,14 @@\n \n \n import org.apache.directory.shared.asn1.ber.AbstractContainer;\n-import org.apache.directory.shared.asn1.ber.IAsn1Container;\n \n \n /**\n  * A container for the GracefulDisconnect codec.\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class GracefulDisconnectContainer extends AbstractContainer implements IAsn1Container\n+public class GracefulDisconnectContainer extends AbstractContainer\n {\n     /** GracefulShutdown */\n     private GracefulDisconnect gracefulDisconnect;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnectContainer.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "bc552b22a54bdcd37d3c0c958bcbe6195ac5193f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnectContainer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnectContainer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnectContainer.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -59,7 +59,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class GracefulDisconnectGrammar extends AbstractGrammar implements IGrammar\n+public class GracefulDisconnectGrammar extends AbstractGrammar\n {\n     /** The logger */\n     static final Logger log = LoggerFactory.getLogger( GracefulDisconnectGrammar.class );",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnectGrammar.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "3116c98dd694db3c1e40687f09b041f7e85df2fe",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnectGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnectGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnectGrammar.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -21,15 +21,14 @@\n \n \n import org.apache.directory.shared.asn1.ber.AbstractContainer;\n-import org.apache.directory.shared.asn1.ber.IAsn1Container;\n \n \n /**\n  * A container for the GracefulShutdown codec.\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class GracefulShutdownContainer extends AbstractContainer implements IAsn1Container\n+public class GracefulShutdownContainer extends AbstractContainer\n {\n     /** GracefulShutdown */\n     private GracefulShutdown gracefulShutdown;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdownContainer.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "bd931df74a0217c0e9703d585cee775a6967a721",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdownContainer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdownContainer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdownContainer.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -50,7 +50,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class GracefulShutdownGrammar extends AbstractGrammar implements IGrammar\n+public class GracefulShutdownGrammar extends AbstractGrammar\n {\n     /** The logger */\n     static final Logger log = LoggerFactory.getLogger( GracefulShutdownGrammar.class );",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdownGrammar.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "ac93ddcfccc7695e5ac171f8b1ab19b9c0c4c21b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdownGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdownGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdownGrammar.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -22,15 +22,14 @@\n \n \n import org.apache.directory.shared.asn1.ber.AbstractContainer;\n-import org.apache.directory.shared.asn1.ber.IAsn1Container;\n \n \n /**\n  * A container for the StoredProcedure codec\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class StoredProcedureContainer extends AbstractContainer implements IAsn1Container\n+public class StoredProcedureContainer extends AbstractContainer\n {\n     // ~ Instance fields\n     // ----------------------------------------------------------------------------",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/StoredProcedureContainer.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "598d8bd7e1c60f0212c224d25799171e11157c0d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/StoredProcedureContainer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/StoredProcedureContainer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/StoredProcedureContainer.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -40,7 +40,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class StoredProcedureGrammar extends AbstractGrammar implements IGrammar\n+public class StoredProcedureGrammar extends AbstractGrammar\n {\n     //~ Static fields/initializers -----------------------------------------------------------------\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/StoredProcedureGrammar.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "e8c67cd49ffdfb4abcf4adfee7d54ba7d90662c8",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/StoredProcedureGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/StoredProcedureGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/StoredProcedureGrammar.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -21,13 +21,12 @@\n \n \n import org.apache.directory.shared.asn1.ber.AbstractContainer;\n-import org.apache.directory.shared.asn1.ber.IAsn1Container;\n \n \n /**\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class EntryChangeControlContainer extends AbstractContainer implements IAsn1Container\n+public class EntryChangeControlContainer extends AbstractContainer\n {\n     /** EntryChangeControl */\n     private EntryChangeControlCodec control;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlContainer.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "4e85cec8b04ea57a22dedcd74973003d37e69a02",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlContainer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlContainer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlContainer.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -44,7 +44,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class EntryChangeControlGrammar extends AbstractGrammar implements IGrammar\n+public class EntryChangeControlGrammar extends AbstractGrammar\n {\n     /** The logger */\n     static final Logger log = LoggerFactory.getLogger( EntryChangeControlGrammar.class );",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlGrammar.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "a8c10063dceb9b4bb96c84dca062bfb2296fbcb3",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControlGrammar.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -21,13 +21,12 @@\n \n \n import org.apache.directory.shared.asn1.ber.AbstractContainer;\n-import org.apache.directory.shared.asn1.ber.IAsn1Container;\n \n \n /**\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class PSearchControlContainer extends AbstractContainer implements IAsn1Container\n+public class PSearchControlContainer extends AbstractContainer\n {\n     /** PSearchControl */\n     private PSearchControlCodec control;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/PSearchControlContainer.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "7e2c65f578c685a5db57fe5adfcafadbcaf6ed80",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/PSearchControlContainer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/PSearchControlContainer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/PSearchControlContainer.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -57,7 +57,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class PSearchControlGrammar extends AbstractGrammar implements IGrammar\n+public class PSearchControlGrammar extends AbstractGrammar\n {\n     /** The logger */\n     static final Logger log = LoggerFactory.getLogger( PSearchControlGrammar.class );",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/PSearchControlGrammar.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "87d95496de7a721d5e0312ddd1a05cb127e86aa4",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/PSearchControlGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/PSearchControlGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/PSearchControlGrammar.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -21,13 +21,12 @@\n \n \n import org.apache.directory.shared.asn1.ber.AbstractContainer;\n-import org.apache.directory.shared.asn1.ber.IAsn1Container;\n \n \n /**\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class SubEntryControlContainer extends AbstractContainer implements IAsn1Container\n+public class SubEntryControlContainer extends AbstractContainer\n {\n     /** PSearchControl */\n     private SubEntryControlCodec control;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/SubEntryControlContainer.java",
                "status": "modified",
                "changes": 3,
                "deletions": 2,
                "sha": "fc2502ab01b1253c7dfc31c947384bd32ded5c03",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/SubEntryControlContainer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/SubEntryControlContainer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/SubEntryControlContainer.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -42,7 +42,7 @@\n  * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class SubEntryControlGrammar extends AbstractGrammar implements IGrammar\n+public class SubEntryControlGrammar extends AbstractGrammar\n {\n     /** The logger */\n     static final Logger log = LoggerFactory.getLogger( SubEntryControlGrammar.class );",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/SubEntryControlGrammar.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "95044c66516b002eea99878fe69c24feb910953e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/SubEntryControlGrammar.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/SubEntryControlGrammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/SubEntryControlGrammar.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -330,13 +330,8 @@ public LdapURL(byte[] bytes) throws LdapURLEncodingException\n \n         string = StringTools.utf8ToString( bytes );\n \n-        if ( bytes != null )\n-        {\n-            this.bytes = new byte[ bytes.length ];\n-            System.arraycopy( bytes, 0, this.bytes, 0, bytes.length );\n-        } else {\n-            this.bytes = null;\n-        }\n+        this.bytes = new byte[ bytes.length ];\n+        System.arraycopy( bytes, 0, this.bytes, 0, bytes.length );\n \n         parse( string.toCharArray() );\n     }\n@@ -676,7 +671,7 @@ public static String getString( final byte[] data, String charset )\n     {\n         if ( bytes == null )\n         {\n-            return null;\n+            return StringTools.EMPTY_BYTES;\n         }\n \n         ByteArrayOutputStream buffer = new ByteArrayOutputStream();",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/util/LdapURL.java",
                "status": "modified",
                "changes": 11,
                "deletions": 8,
                "sha": "fffe1e9dcec2b36d55b5c0df1174528672b3e2be",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/codec/util/LdapURL.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/util/LdapURL.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/util/LdapURL.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -116,11 +116,7 @@ private void checkResultCode()\n         switch ( resultCode )\n         {\n             case INAPPROPRIATE_AUTHENTICATION :\n-                break;\n-                \n             case CONFIDENTIALITY_REQUIRED :\n-                break;\n-                \n             case AUTH_METHOD_NOT_SUPPORTED :\n                 break;\n                 ",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapAuthenticationNotSupportedException.java",
                "status": "modified",
                "changes": 4,
                "deletions": 4,
                "sha": "3f591e7c62a15cebb05174fff32e45711d652cae",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapAuthenticationNotSupportedException.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapAuthenticationNotSupportedException.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapAuthenticationNotSupportedException.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -60,8 +60,6 @@ public LdapInvalidAttributeValueException(ResultCodeEnum resultCode)\n         switch ( resultCode )\n         {\n             case CONSTRAINT_VIOLATION :\n-                break;\n-                \n             case INVALID_ATTRIBUTE_SYNTAX :\n                 break;\n                 ",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapInvalidAttributeValueException.java",
                "status": "modified",
                "changes": 2,
                "deletions": 2,
                "sha": "5d1b0cb22d36e5ad17b8e451cd9a88d4a62d8569",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapInvalidAttributeValueException.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapInvalidAttributeValueException.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapInvalidAttributeValueException.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -61,15 +61,8 @@ public LdapSchemaViolationException(ResultCodeEnum resultCode)\n         switch ( resultCode )\n         {\n             case OBJECT_CLASS_VIOLATION :\n-\n-                break;\n-\n             case NOT_ALLOWED_ON_RDN :\n-\n-                break;\n-\n             case OBJECT_CLASS_MODS_PROHIBITED :\n-\n                 break;\n \n             default:",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapSchemaViolationException.java",
                "status": "modified",
                "changes": 7,
                "deletions": 7,
                "sha": "529b2ec70b4e7af7d66fc3cf0d3a0c6b08b5106a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapSchemaViolationException.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapSchemaViolationException.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/exception/LdapSchemaViolationException.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -42,6 +42,27 @@ protected AbstractExprNode()\n     {\n     }\n \n+    \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        int h = 37;\n+        \n+        if ( annotations != null )\n+        {\n+            for ( String key:annotations.keySet() )\n+            {\n+                Object value = annotations.get( key );\n+                \n+                h = h*17 + key.hashCode();\n+                h = h*17 + ( value == null ? 0 : value.hashCode() );\n+            }\n+        }\n+        \n+        return h;\n+    }\n \n     /**\n      * @see org.apache.directory.shared.ldap.filter.ExprNode#get(java.lang.Object)\n@@ -71,7 +92,7 @@ public void set( String key, Object value )\n         annotations.put( key, value );\n     }\n \n-\n+    \n     /**\n      * Gets the annotations as a Map.\n      * ",
                "additions": 22,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AbstractExprNode.java",
                "status": "modified",
                "changes": 23,
                "deletions": 1,
                "sha": "7e42e637aadbfdb2a33513a10120f937d959a650",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AbstractExprNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/AbstractExprNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AbstractExprNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -151,9 +151,9 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        int hash = 7;\n-        hash = hash*31 + AssertionEnum.AND.hashCode();\n-        hash = hash*31 + ( annotations == null ? 0 : annotations.hashCode() );\n+        int hash = 37;\n+        hash = hash*17 + AssertionEnum.AND.hashCode();\n+        hash = hash*17 + ( annotations == null ? 0 : annotations.hashCode() );\n         return hash;\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AndNode.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "84d78f26d837889ca3b8852e00bf0f85ecebb78a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AndNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/AndNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AndNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -52,6 +52,15 @@ public ApproximateNode( String attribute, String value )\n     }\n \n \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        return super.hashCode();\n+    }\n+\n+    \n     /**\n      * @see Object#toString()\n      */",
                "additions": 9,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ApproximateNode.java",
                "status": "modified",
                "changes": 9,
                "deletions": 0,
                "sha": "63e1be9ad1a8bc937c4542323cd9fabedd36942f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ApproximateNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/ApproximateNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ApproximateNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -32,9 +32,6 @@\n  */\n public class AssertionNode extends AbstractExprNode\n {\n-    /** Setting scan count to max */\n-    private static final Long MAX = Long.MAX_VALUE;\n-\n     /** The assertion or predicate to apply */\n     private final Assertion assertion;\n \n@@ -75,7 +72,7 @@ public AssertionNode( Assertion assertion, String desc )\n          * candidate for use in an enumeration so we set the scan count to the\n          * maximum value.\n          */\n-        set( \"count\", MAX );\n+        set( \"count\", Long.MAX_VALUE );\n     }\n \n \n@@ -114,6 +111,21 @@ public StringBuilder printRefinementToBuffer( StringBuilder buf ) throws Unsuppo\n     }\n \n \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        int h = 37;\n+        \n+        h = h*17 + super.hashCode();\n+        h = h*17 + ( assertion != null ? assertion.hashCode() : 0 );\n+        h = h*17 + ( desc != null ? desc.hashCode() : 0 );\n+        \n+        return h;\n+    }\n+\n+\n     /**\n      * @see org.apache.directory.shared.ldap.filter.ExprNode#accept(\n      *      org.apache.directory.shared.ldap.filter.FilterVisitor)",
                "additions": 16,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AssertionNode.java",
                "status": "modified",
                "changes": 20,
                "deletions": 4,
                "sha": "473860c592e64f9acfe021408a4a520350cbe85f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AssertionNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/AssertionNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/AssertionNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -175,6 +175,29 @@ public final Object accept( FilterVisitor visitor )\n         }\n     }\n     \n+    \n+    /**\n+     * (non-Javadoc)\n+     * \n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        int h = 37;\n+        \n+        h = h*17 + super.hashCode();\n+        \n+        if ( children != null )\n+        {\n+            for ( ExprNode child:children )\n+            {\n+                h = h*17 + child.hashCode();\n+            }\n+        }\n+        \n+        return h;\n+    }\n+    \n     /*\n      * (non-Javadoc)\n      * ",
                "additions": 23,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/BranchNode.java",
                "status": "modified",
                "changes": 23,
                "deletions": 0,
                "sha": "0f3d037e813e5e28bdc83f1233339cda72e6df0d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/BranchNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/BranchNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/BranchNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -52,6 +52,15 @@ public EqualityNode( String attribute, String value )\n     }\n \n \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        return super.hashCode();\n+    }\n+\n+    \n     /**\n      * @see Object#toString()\n      */",
                "additions": 9,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/EqualityNode.java",
                "status": "modified",
                "changes": 9,
                "deletions": 0,
                "sha": "dce29087443dcc541560466c74863a713aa0d577",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/EqualityNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/EqualityNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/EqualityNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -20,6 +20,8 @@\n package org.apache.directory.shared.ldap.filter;\n \n \n+import java.util.Arrays;\n+\n import org.apache.directory.shared.ldap.util.StringTools;\n \n \n@@ -168,6 +170,22 @@ public StringBuilder printRefinementToBuffer( StringBuilder buf ) throws Unsuppo\n     }\n \n \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        int h = 37;\n+        \n+        h = h*17 + super.hashCode();\n+        h = h*17 + ( dnAttributes ? 1 : 0 );\n+        h = h*17 + matchingRuleId.hashCode();\n+        h = h*17 + Arrays.hashCode( value );\n+        \n+        return h;\n+    }\n+\n+\n     /**\n      * @see java.lang.Object#toString()\n      */",
                "additions": 18,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ExtensibleNode.java",
                "status": "modified",
                "changes": 18,
                "deletions": 0,
                "sha": "262d8dc186e7006cf1d0bdd59bc05553768a62ab",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ExtensibleNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/ExtensibleNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ExtensibleNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -52,6 +52,15 @@ public GreaterEqNode( String attribute, String value )\n     }\n \n \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        return super.hashCode();\n+    }\n+\n+    \n     /**\n      * @see Object#toString()\n      */",
                "additions": 9,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/GreaterEqNode.java",
                "status": "modified",
                "changes": 9,
                "deletions": 0,
                "sha": "b3ebce845072405e11616fad17694cae7e4a0fcf",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/GreaterEqNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/GreaterEqNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/GreaterEqNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -77,6 +77,20 @@ public void setAttribute( String attribute )\n         this.attribute = attribute;\n     }\n \n+    \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        int h = 37;\n+        \n+        h = h*17 + super.hashCode();\n+        h = h*17 + attribute.hashCode();\n+        \n+        return h;\n+    }\n+\n \n     /*\n      * (non-Javadoc)",
                "additions": 14,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/LeafNode.java",
                "status": "modified",
                "changes": 14,
                "deletions": 0,
                "sha": "f8eb66c2c99754b13e59fc8e914c9c7ea3d1139b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/LeafNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/LeafNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/LeafNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -51,7 +51,16 @@ public LessEqNode( String attribute, String value )\n         super( attribute, value );\n     }\n \n+    \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        return super.hashCode();\n+    }\n \n+    \n     /**\n      * @see Object#toString()\n      */",
                "additions": 9,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/LessEqNode.java",
                "status": "modified",
                "changes": 9,
                "deletions": 0,
                "sha": "fd2c3b6adfbc6e1310aea1c20bef853055831a87",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/LessEqNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/LessEqNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/LessEqNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -201,9 +201,9 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        int hash = 7;\n-        hash = hash*31 + AssertionEnum.NOT.hashCode();\n-        hash = hash*31 + ( annotations == null ? 0 : annotations.hashCode() );\n+        int hash = 37;\n+        hash = hash*17 + AssertionEnum.NOT.hashCode();\n+        hash = hash*17 + ( annotations == null ? 0 : annotations.hashCode() );\n         return hash;\n     }\n }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/NotNode.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "0cd21ae5693cbaadd08871c5e659fcc43e7a8009",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/NotNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/NotNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/NotNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -153,9 +153,9 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        int hash = 7;\n-        hash = hash*31 + AssertionEnum.OR.hashCode();\n-        hash = hash*31 + ( annotations == null ? 0 : annotations.hashCode() );\n+        int hash = 37;\n+        hash = hash*17 + AssertionEnum.OR.hashCode();\n+        hash = hash*17 + ( annotations == null ? 0 : annotations.hashCode() );\n         return hash;\n     }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/OrNode.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "6a65f77d436471126d5fd882ccbbdc2bf79c13a8",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/OrNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/OrNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/OrNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -132,6 +132,23 @@ public Object accept( FilterVisitor visitor )\n         }\n     }\n     \n+\n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        int h = 37;\n+        \n+        h = h*17 + super.hashCode();\n+        h = h*17 + ( aliasDerefAliases != null ? aliasDerefAliases.hashCode() : 0 );\n+        h = h*17 + ( baseDn != null ? baseDn.hashCode() : 0 );\n+        h = h*17 + scope;\n+        \n+        return h;\n+    }\n+\n+\n     /**\n      * @see Object#toString()\n      */",
                "additions": 17,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ScopeNode.java",
                "status": "modified",
                "changes": 17,
                "deletions": 0,
                "sha": "7eaf0c9ff013d9cb92003150bc07fa4457f09723",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ScopeNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/ScopeNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/ScopeNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -125,10 +125,10 @@ public StringBuilder printRefinementToBuffer( StringBuilder buf ) throws Unsuppo\n      */\n     public int hashCode()\n     {\n-    \tint h = 31;\n-    \th += value.hashCode()*13;\n-    \th += getAttribute().hashCode()*13;\n-    \th += this.getClass().hashCode()*13;\n+    \tint h = 37;\n+    \t\n+    \th = h*17 + super.hashCode();\n+    \th = h*17 + ( value == null ? 0 : value.hashCode() );\n     \t\n     \treturn h;\n     }",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SimpleNode.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "bac6a59e6d963152fc9241368b63a4ac43801241",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SimpleNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/SimpleNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SimpleNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -39,13 +39,13 @@\n  */\n public class SubstringNode extends LeafNode\n {\n-    /** The initial fragment before any wildcards */\n+    /** The initial fragment before any wildcard */\n     private String initialPattern;\n \n-    /** The end fragment after wildcards */\n+    /** The end fragment after wildcard */\n     private String finalPattern;\n \n-    /** List of fragments between wildcards */\n+    /** List of fragments between wildcard */\n     private List<String> anyPattern;\n \n     /**\n@@ -230,6 +230,30 @@ public final Pattern getRegex( Normalizer normalizer ) throws PatternSyntaxExcep\n     }\n \n \n+    /**\n+     * @see Object#hashCode()\n+     */\n+    public int hashCode()\n+    {\n+        int h = 37;\n+        \n+        h = h*17 + super.hashCode();\n+        h = h*17 + ( initialPattern != null ? initialPattern.hashCode() : 0 );\n+        \n+        if ( anyPattern != null )\n+        {\n+            for ( String pattern:anyPattern )\n+            {\n+                h = h*17 + pattern.hashCode();\n+            }\n+        }\n+        \n+        h = h*17 + ( finalPattern != null ? finalPattern.hashCode() : 0 );\n+        \n+        return h;\n+    }\n+\n+\n     /**\n      * @see java.lang.Object#toString()\n      */",
                "additions": 27,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SubstringNode.java",
                "status": "modified",
                "changes": 30,
                "deletions": 3,
                "sha": "75505eb4dfeb1160c35910cccfe483016226a48e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SubstringNode.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/filter/SubstringNode.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/filter/SubstringNode.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -110,9 +110,9 @@ public boolean equals( Object obj )\n      */\n     public int hashCode()\n     {\n-        int hash = 7;\n-        hash = hash*31 + abandonId;\n-        hash = hash*31 + super.hashCode();\n+        int hash = 37;\n+        hash = hash*17 + abandonId;\n+        hash = hash*17 + super.hashCode();\n         \n         return hash;\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbandonRequestImpl.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "f76418d9570bebd6b48e71526bd43fe9f128ba99",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbandonRequestImpl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/AbandonRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbandonRequestImpl.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -232,11 +232,11 @@ public boolean equals( Object obj )\n      */\n     public int hashCode()\n     {\n-        int hash = 7;\n-        hash = hash*31 + id;\n-        hash = hash*31 + ( type == null ? 0 : type.hashCode() );\n-        hash = hash*31 + ( parameters == null ? 0 : parameters.hashCode() );\n-        hash = hash*31 + ( controls == null ? 0 : controls.hashCode() );\n+        int hash = 37;\n+        hash = hash*17 + id;\n+        hash = hash*17 + ( type == null ? 0 : type.hashCode() );\n+        hash = hash*17 + ( parameters == null ? 0 : parameters.hashCode() );\n+        hash = hash*17 + ( controls == null ? 0 : controls.hashCode() );\n         \n         return hash;\n     }",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbstractMessage.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "84a5ef91be5be01c758c6e65df11a6cf1e594c59",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbstractMessage.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/AbstractMessage.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbstractMessage.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -68,9 +68,9 @@ public boolean hasResponse()\n      */\n     public int hashCode()\n     {\n-        int hash = 7;\n-        hash = hash*31 + (hasResponse ? 0 : 1 );\n-        hash = hash*31 + super.hashCode();\n+        int hash = 37;\n+        hash = hash*17 + (hasResponse ? 0 : 1 );\n+        hash = hash*17 + super.hashCode();\n         \n         return hash;\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbstractRequest.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "ee4ccd39f4197b4edef00b9610663d161925f4d0",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbstractRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/AbstractRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/AbstractRequest.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -221,11 +221,11 @@ else if ( !attributes.equals( req.getAttributes() ) )\n      */\n     public int hashCode()\n     {\n-        int hash = 7;\n-        hash = hash*31 + ( attributes == null ? 0 : attributes.hashCode() );\n-        hash = hash*31 + ( entry == null ? 0 : entry.hashCode() );\n-        hash = hash*31 + ( response == null ? 0 : response.hashCode() );\n-        hash = hash*31 + super.hashCode();\n+        int hash = 37;\n+        hash = hash*17 + ( attributes == null ? 0 : attributes.hashCode() );\n+        hash = hash*17 + ( entry == null ? 0 : entry.hashCode() );\n+        hash = hash*17 + ( response == null ? 0 : response.hashCode() );\n+        hash = hash*17 + super.hashCode();\n         \n         return hash;\n     }",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AddRequestImpl.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "69cc3b2450589c9638a170c70a2a5c14bd4ace92",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AddRequestImpl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/AddRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/AddRequestImpl.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -696,21 +696,21 @@ public Object set( int index, Object attrVal )\n      */\n     public int hashCode()\n     {\n-        int hash = 17;\n+        int hash = 37;\n         \n-        hash += hash*37 + StringTools.toLowerCase( getID() ).hashCode();\n+        hash += hash*17 + StringTools.toLowerCase( getID() ).hashCode();\n         \n         if ( ( list != null ) && ( list.size() != 0 ) )\n         {\n             for ( Object value:list )\n             {\n                 if ( value instanceof byte[] )\n                 {\n-                    hash += hash*37 + Arrays.hashCode( (byte[])value );\n+                    hash += hash*17 + Arrays.hashCode( (byte[])value );\n                 }\n                 else \n                 {\n-                    hash += hash*37 + value.hashCode();\n+                    hash += hash*17 + value.hashCode();\n                 }\n             }\n         }",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AttributeImpl.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "92bfbcb76b1ef3832ffe40df9548bccee5bdd998",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/AttributeImpl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/AttributeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/AttributeImpl.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -371,14 +371,14 @@ else if ( !dn1.equals( dn2 ) )\n      */\n     public int hashCode()\n     {\n-        int hash = 7;\n-        hash = hash*31 + ( credentials == null ? 0 : hCredentials );\n-        hash = hash*31 + ( isSimple ? 0 : 1 );\n-        hash = hash*31 + ( isVersion3 ? 0 : 1 );\n-        hash = hash*31 + ( mechanism == null ? 0 : mechanism.hashCode() );\n-        hash = hash*31 + ( name == null ? 0 : name.hashCode() );\n-        hash = hash*31 + ( response == null ? 0 : response.hashCode() );\n-        hash = hash*31 + super.hashCode();\n+        int hash = 37;\n+        hash = hash*17 + ( credentials == null ? 0 : hCredentials );\n+        hash = hash*17 + ( isSimple ? 0 : 1 );\n+        hash = hash*17 + ( isVersion3 ? 0 : 1 );\n+        hash = hash*17 + ( mechanism == null ? 0 : mechanism.hashCode() );\n+        hash = hash*17 + ( name == null ? 0 : name.hashCode() );\n+        hash = hash*17 + ( response == null ? 0 : response.hashCode() );\n+        hash = hash*17 + super.hashCode();\n         \n         return hash;\n     }",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/BindRequestImpl.java",
                "status": "modified",
                "changes": 16,
                "deletions": 8,
                "sha": "5a054397151e8def8a9f18b9cf5390286cf24032",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/message/BindRequestImpl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/message/BindRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/message/BindRequestImpl.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -619,10 +619,10 @@ else if ( c == '#' )\n      */\n     public int hashCode()\n     {\n-        int result = 17;\n+        int result = 37;\n \n-        result = result * 37 + ( normType != null ? normType.hashCode() : 0 );\n-        result = result * 37 + ( value != null ? value.hashCode() : 0 );\n+        result = result*17 + ( normType != null ? normType.hashCode() : 0 );\n+        result = result*17 + ( value != null ? value.hashCode() : 0 );\n \n         return result;\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/name/AttributeTypeAndValue.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "4ced5a97e1f253e69cb422a9c0f217957f6fa264",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/name/AttributeTypeAndValue.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/name/AttributeTypeAndValue.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/name/AttributeTypeAndValue.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -485,13 +485,13 @@ private String getUpNameSuffix( int posn )\n      */\n     public int hashCode()\n     {\n-        int result = 17;\n+        int result = 37;\n \n         if ( ( rdns != null ) && ( rdns.size() != 0 ) )\n         {\n             for ( Rdn rdn : rdns )\n             {\n-                result = result * 37 + rdn.hashCode();\n+                result = result * 17 + rdn.hashCode();\n             }\n         }\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "1479e9e54164eee2c043af543b149d3c2d11b386",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -1245,7 +1245,7 @@ public static String escapeValue( byte[] attrValue )\n     */\n    public int hashCode()\n    {\n-       int result = 17;\n+       int result = 37;\n \n        switch ( nbAtavs )\n        {\n@@ -1255,15 +1255,15 @@ public int hashCode()\n \n            case 1:\n                // We have a single AttributeTypeAndValue\n-               result = result * 37 + atav.hashCode();\n+               result = result * 17 + atav.hashCode();\n                break;\n \n            default:\n                // We have more than one AttributeTypeAndValue\n \n                for ( AttributeTypeAndValue ata:atavs )\n                {\n-                   result = result * 37 + ata.hashCode();\n+                   result = result * 17 + ata.hashCode();\n                }\n        }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "5a1db24fbc66924467cc746a9b8c1cb1c1344f08",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -69,10 +69,10 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = PRIME * result + ( ( name == null ) ? 0 : name.hashCode() );\n-        return result;\n+        int h = 37;\n+        h = h * 17 + ( ( name == null ) ? 0 : name.hashCode() );\n+        \n+        return h;\n     }\n \n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/ActionTime.java",
                "status": "modified",
                "changes": 8,
                "deletions": 4,
                "sha": "50ff89e5a5849411ff220ad0913befbc81b92b91",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/ActionTime.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/trigger/ActionTime.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/ActionTime.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -73,10 +73,11 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = PRIME * result + ( ( name == null ) ? 0 : name.hashCode() );\n-        return result;\n+        int h = 37;\n+\n+        h = h*17 + ( ( name == null ) ? 0 : name.hashCode() );\n+        \n+        return h;\n     }\n \n \n@@ -86,20 +87,31 @@ public int hashCode()\n     public boolean equals( Object obj )\n     {\n         if ( this == obj )\n+        {\n             return true;\n-        if ( obj == null )\n-            return false;\n-        if ( getClass() != obj.getClass() )\n+        }\n+        \n+        if ( ! ( obj  instanceof LdapOperation ) )\n+        {\n             return false;\n+        }\n+\n         final LdapOperation other = ( LdapOperation ) obj;\n+\n         if ( name == null )\n         {\n             if ( other.name != null )\n+            {\n                 return false;\n+            }\n+            else\n+            { \n+                return true;\n+            }\n+        }\n+        else \n+        {\n+            return name.equals( other.name );\n         }\n-        else if ( !name.equals( other.name ) )\n-            return false;\n-        return true;\n     }\n-    \n }",
                "additions": 23,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/LdapOperation.java",
                "status": "modified",
                "changes": 34,
                "deletions": 11,
                "sha": "88f431f1637820889bacd2874c7db4fda0775182",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/LdapOperation.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/trigger/LdapOperation.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/LdapOperation.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -64,10 +64,11 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = PRIME * result + ( ( name == null ) ? 0 : name.hashCode() );\n-        return result;\n+        int h = 37;\n+        \n+        h = h*17 + ( ( name == null ) ? 0 : name.hashCode() );\n+        \n+        return h;\n     }\n \n     /* (non-Javadoc)",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/SearchScope.java",
                "status": "modified",
                "changes": 9,
                "deletions": 4,
                "sha": "8b5f6b5768e5b2662e7f3bb93f0e627750274165",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/SearchScope.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/trigger/SearchScope.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/SearchScope.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -55,10 +55,11 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = PRIME * result + ( ( language == null ) ? 0 : language.hashCode() );\n-        return result;\n+        int h = 37;\n+        \n+        h = h*17 + ( ( language == null ) ? 0 : language.hashCode() );\n+        \n+        return h;\n     }\n \n     /* (non-Javadoc)",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureLanguageSchemeOption.java",
                "status": "modified",
                "changes": 9,
                "deletions": 4,
                "sha": "1240294f58ef5a3c42c79dcce983523f6bda2db9",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureLanguageSchemeOption.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureLanguageSchemeOption.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureLanguageSchemeOption.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -102,10 +102,11 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = PRIME * result + ( ( name == null ) ? 0 : name.hashCode() );\n-        return result;\n+        int h = 37;\n+        \n+        h = h*17 + ( ( name == null ) ? 0 : name.hashCode() );\n+        \n+        return h;\n     }\n \n ",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureParameter.java",
                "status": "modified",
                "changes": 9,
                "deletions": 4,
                "sha": "5ffe41c324b2ecd893c2a8fdbe2d85f0c092e0cd",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureParameter.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureParameter.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureParameter.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -67,11 +67,12 @@ public String toString()\n      */\n     public int hashCode()\n     {\n-        final int PRIME = 31;\n-        int result = 1;\n-        result = PRIME * result + ( ( baseObject == null ) ? 0 : baseObject.hashCode() );\n-        result = PRIME * result + ( ( searchScope == null ) ? 0 : searchScope.hashCode() );\n-        return result;\n+        int h = 37;\n+        \n+        h = h*17 + ( ( baseObject == null ) ? 0 : baseObject.hashCode() );\n+        h = h*17 + ( ( searchScope == null ) ? 0 : searchScope.hashCode() );\n+        \n+        return h;\n     }\n \n     /* (non-Javadoc)",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureSearchContextOption.java",
                "status": "modified",
                "changes": 11,
                "deletions": 5,
                "sha": "3807fd62c155957c5bbb697eb58d8e598be3b716",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureSearchContextOption.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureSearchContextOption.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/StoredProcedureSearchContextOption.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            },
            {
                "patch": "@@ -101,12 +101,12 @@ public String getName() {\n \n \t\t@Override\n \t\tpublic int hashCode() {\n-\t\t\tfinal int PRIME = 31;\n-\t\t\tint result = 1;\n-\t\t\tresult = PRIME * result + ((name == null) ? 0 : name.hashCode());\n-\t\t\tresult = PRIME * result + ((options == null) ? 0 : options.hashCode());\n-\t\t\tresult = PRIME * result + ((parameters == null) ? 0 : parameters.hashCode());\n-\t\t\treturn result;\n+\t\t\tint h = 37;\n+\t\t\t\n+\t\t\th = h*17 + ((name == null) ? 0 : name.hashCode());\n+\t\t\th = h*17 + ((options == null) ? 0 : options.hashCode());\n+\t\t\th = h*17 + ((parameters == null) ? 0 : parameters.hashCode());\n+\t\t\treturn h;\n \t\t}\n \n \t\t@Override",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/TriggerSpecification.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "2a4d89b5a063f1c25edcc4bf0138fd8bd78ee30d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bac761a26957c150414d071aec341493b5301b5e/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/TriggerSpecification.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/trigger/TriggerSpecification.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/trigger/TriggerSpecification.java?ref=bac761a26957c150414d071aec341493b5301b5e"
            }
        ],
        "bug_id": "directory-ldap-api_65",
        "parent": "https://github.com/apache/directory-ldap-api/commit/ffe0a9e429ee7388bbb8bd3c9acec5bc49589ce9",
        "message": "Fixed some potential problems and bad code detected by Felix :\n- bad hashCode() or equals() methods\n- useless interface implementation\n- potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@606816 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/cfb82e7ba26d5a56f657b7bc08f29eda76816b37",
        "file": [
            {
                "patch": "@@ -531,19 +531,19 @@ public AttributeTypeAndValue getAttributeTypeAndValue( String type )\n \n \n    /**\n-    * Retrieves the components of this name as an enumeration of strings. The\n-    * effect on the enumeration of updates to this name is undefined. If the\n-    * name has zero components, an empty (non-null) enumeration is returned.\n+    * Retrieves the components of this RDN as an iterator of AttributeTypeAndValue. \n+    * The effect on the iterator of updates to this RDN is undefined. If the\n+    * RDN has zero components, an empty (non-null) iterator is returned.\n     *\n-    * @return an enumeration of the components of this name, each a string\n+    * @return an iterator of the components of this RDN, each an AttributeTypeAndValue\n     */\n    public Iterator<AttributeTypeAndValue> iterator()\n    {\n-       if ( nbAtavs == 1 )\n+       if ( nbAtavs == 1 || nbAtavs == 0 )\n        {\n            return new Iterator<AttributeTypeAndValue>()\n            {\n-               private boolean hasMoreElement = true;\n+               private boolean hasMoreElement = nbAtavs == 1;\n \n \n                public boolean hasNext()",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/cfb82e7ba26d5a56f657b7bc08f29eda76816b37/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "9d482baf185d4a1dfeda6f872f1df73d1c8cb967",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/cfb82e7ba26d5a56f657b7bc08f29eda76816b37/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/name/Rdn.java?ref=cfb82e7ba26d5a56f657b7bc08f29eda76816b37"
            },
            {
                "patch": "@@ -20,6 +20,8 @@\n package org.apache.directory.shared.ldap.name;\n \n \n+import java.util.Iterator;\n+\n import javax.naming.InvalidNameException;\n import javax.naming.NamingException;\n import javax.naming.directory.Attribute;\n@@ -512,4 +514,38 @@ public void testDIRSERVER_703() throws InvalidNameException\n         Rdn rdn = new Rdn( \"cn=Kate Bush+sn=Bush\" );\n         assertEquals( \"cn=Kate Bush+sn=Bush\", rdn.getUpName() );\n     }\n+\n+\n+    public void testMultiValuedIterator() throws InvalidNameException\n+    {\n+        Rdn rdn = new Rdn( \"cn=Kate Bush+sn=Bush\" );\n+        Iterator<AttributeTypeAndValue> iterator = rdn.iterator();\n+        assertNotNull( iterator );\n+        assertTrue( iterator.hasNext() );\n+        assertNotNull( iterator.next() );\n+        assertTrue( iterator.hasNext() );\n+        assertNotNull( iterator.next() );\n+        assertFalse( iterator.hasNext() );\n+    }\n+\n+\n+    public void testSingleValuedIterator() throws InvalidNameException\n+    {\n+        Rdn rdn = new Rdn( \"cn=Kate Bush\" );\n+        Iterator<AttributeTypeAndValue> iterator = rdn.iterator();\n+        assertNotNull( iterator );\n+        assertTrue( iterator.hasNext() );\n+        assertNotNull( iterator.next() );\n+        assertFalse( iterator.hasNext() );\n+    }\n+\n+\n+    public void testEmptyIterator() throws InvalidNameException\n+    {\n+        Rdn rdn = new Rdn();\n+        Iterator<AttributeTypeAndValue> iterator = rdn.iterator();\n+        assertNotNull( iterator );\n+        assertFalse( iterator.hasNext() );\n+    }\n+\n }",
                "additions": 36,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/cfb82e7ba26d5a56f657b7bc08f29eda76816b37/ldap/src/test/java/org/apache/directory/shared/ldap/name/RdnTest.java",
                "status": "modified",
                "changes": 36,
                "deletions": 0,
                "sha": "15045e2f638671b9f1b7b401236f6f297f8744d5",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/cfb82e7ba26d5a56f657b7bc08f29eda76816b37/ldap/src/test/java/org/apache/directory/shared/ldap/name/RdnTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/name/RdnTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/name/RdnTest.java?ref=cfb82e7ba26d5a56f657b7bc08f29eda76816b37"
            }
        ],
        "bug_id": "directory-ldap-api_66",
        "parent": "https://github.com/apache/directory-ldap-api/commit/a2da760faa5cb40f380c692c1184ca84dc1a78dc",
        "message": "Fixed NPE when calling iterator() of an empty Rdn, added Tests and fixed Javadoc.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@591147 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/29f5524c632ddf43e7d03411c30f376cb105a630",
        "file": [
            {
                "patch": "@@ -31,7 +31,24 @@\n import org.apache.directory.shared.ldap.model.entry.ModificationOperation;\n import org.apache.directory.shared.ldap.model.entry.Value;\n import org.apache.directory.shared.ldap.model.exception.LdapException;\n-import org.apache.directory.shared.ldap.model.message.*;\n+import org.apache.directory.shared.ldap.model.message.AbandonRequest;\n+import org.apache.directory.shared.ldap.model.message.AddRequest;\n+import org.apache.directory.shared.ldap.model.message.AddResponse;\n+import org.apache.directory.shared.ldap.model.message.BindRequest;\n+import org.apache.directory.shared.ldap.model.message.BindResponse;\n+import org.apache.directory.shared.ldap.model.message.CompareRequest;\n+import org.apache.directory.shared.ldap.model.message.CompareResponse;\n+import org.apache.directory.shared.ldap.model.message.Control;\n+import org.apache.directory.shared.ldap.model.message.DeleteRequest;\n+import org.apache.directory.shared.ldap.model.message.DeleteResponse;\n+import org.apache.directory.shared.ldap.model.message.ExtendedRequest;\n+import org.apache.directory.shared.ldap.model.message.ExtendedResponse;\n+import org.apache.directory.shared.ldap.model.message.ModifyDnRequest;\n+import org.apache.directory.shared.ldap.model.message.ModifyDnResponse;\n+import org.apache.directory.shared.ldap.model.message.ModifyRequest;\n+import org.apache.directory.shared.ldap.model.message.ModifyResponse;\n+import org.apache.directory.shared.ldap.model.message.SearchRequest;\n+import org.apache.directory.shared.ldap.model.message.SearchScope;\n import org.apache.directory.shared.ldap.model.name.Dn;\n import org.apache.directory.shared.ldap.model.name.Rdn;\n import org.apache.directory.shared.ldap.model.schema.SchemaManager;\n@@ -134,6 +151,18 @@\n     BindResponse bind() throws LdapException, IOException;\n \n \n+    /**\n+     * Unauthenticated authentication bind\n+     *\n+     * @param name The name we use to authenticate the user. It must be a\n+     * valid Dn\n+     * @return The BindResponse LdapResponse\n+     * @throws LdapException if some error occurred\n+     * @throws IOException if an I/O exception occurred\n+     */\n+    BindResponse bind( String name ) throws LdapException, IOException;\n+\n+\n     /**\n      * Simple Bind on a server.\n      *\n@@ -147,6 +176,18 @@\n     BindResponse bind( String name, String credentials ) throws LdapException, IOException;\n \n \n+    /**\n+     * Unauthenticated authentication Bind on a server.\n+     *\n+     * @param name The name we use to authenticate the user. It must be a\n+     * valid Dn\n+     * @return The BindResponse LdapResponse\n+     * @throws LdapException if some error occurred\n+     * @throws IOException if an I/O exception occurred\n+     */\n+    BindResponse bind( Dn name ) throws LdapException, IOException;\n+\n+\n     /**\n      * Simple Bind on a server.\n      *",
                "additions": 42,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapConnection.java",
                "status": "modified",
                "changes": 43,
                "deletions": 1,
                "sha": "a0e4db3bb18de984906f7165de2dbe4eabec7a1b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapConnection.java",
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapConnection.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630"
            },
            {
                "patch": "@@ -74,6 +74,7 @@\n import org.apache.directory.shared.ldap.model.entry.Modification;\n import org.apache.directory.shared.ldap.model.entry.ModificationOperation;\n import org.apache.directory.shared.ldap.model.entry.Value;\n+import org.apache.directory.shared.ldap.model.exception.LdapAuthenticationException;\n import org.apache.directory.shared.ldap.model.exception.LdapException;\n import org.apache.directory.shared.ldap.model.exception.LdapInvalidDnException;\n import org.apache.directory.shared.ldap.model.exception.LdapNoPermissionException;\n@@ -912,55 +913,151 @@ public BindFuture bindAsync() throws LdapException, IOException\n     }\n \n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public BindResponse bind( String name ) throws LdapException, IOException\n+    {\n+        LOG.debug( \"Bind request : {}\", name );\n+\n+        // Create the BindRequest\n+        BindRequest bindRequest = createBindRequest( name, StringConstants.EMPTY_BYTES );\n+\n+        return bind( bindRequest );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n     public BindResponse bind( String name, String credentials ) throws LdapException, IOException\n     {\n         LOG.debug( \"Bind request : {}\", name );\n \n+        // The password must not be empty or null\n+        if ( Strings.isEmpty( credentials ) && Strings.isNotEmpty( name ) )\n+        {\n+            LOG.debug( \"The password is missing\" );\n+            throw new LdapAuthenticationException( \"The password is missing\" );\n+        }\n+        \n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, Strings.getBytesUtf8( credentials ) );\n \n         return bind( bindRequest );\n     }\n \n \n+    /**\n+     * Asynchronous unauthenticated authentication bind\n+     *\n+     * @param name The name we use to authenticate the user. It must be a\n+     * valid Dn\n+     * @return The BindResponse LdapResponse\n+     * @throws LdapException if some error occurred\n+     * @throws IOException if an I/O exception occurred\n+     */\n+    public BindFuture bindAsync( String name ) throws LdapException, IOException\n+    {\n+        LOG.debug( \"Bind request : {}\", name );\n+\n+        // Create the BindRequest\n+        BindRequest bindRequest = createBindRequest( name, StringConstants.EMPTY_BYTES );\n+\n+        return bindAsync( bindRequest );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n     public BindFuture bindAsync( String name, String credentials ) throws LdapException, IOException\n     {\n         LOG.debug( \"Bind request : {}\", name );\n \n+        // The password must not be empty or null\n+        if ( Strings.isEmpty( credentials ) && Strings.isNotEmpty( name ) )\n+        {\n+            LOG.debug( \"The password is missing\" );\n+            throw new LdapAuthenticationException( \"The password is missing\" );\n+        }\n+\n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, Strings.getBytesUtf8( credentials ) );\n \n         return bindAsync( bindRequest );\n     }\n \n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public BindResponse bind( Dn name ) throws LdapException, IOException\n+    {\n+        LOG.debug( \"Unauthenticated authentication Bind request : {}\", name );\n+\n+        // Create the BindRequest\n+        BindRequest bindRequest = createBindRequest( name, StringConstants.EMPTY_BYTES, null );\n+\n+        return bind( bindRequest );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n     public BindResponse bind( Dn name, String credentials ) throws LdapException, IOException\n     {\n         LOG.debug( \"Bind request : {}\", name );\n \n+        // The password must not be empty or null\n+        if ( Strings.isEmpty( credentials ) && ( !Dn.EMPTY_DN.equals( name ) ) )\n+        {\n+            LOG.debug( \"The password is missing\" );\n+            throw new LdapAuthenticationException( \"The password is missing\" );\n+        }\n+\n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, Strings.getBytesUtf8( credentials ), null );\n \n         return bind( bindRequest );\n     }\n \n \n+    /**\n+     * Asynchronous unauthenticated authentication Bind on a server.\n+     *\n+     * @param name The name we use to authenticate the user. It must be a\n+     * valid Dn\n+     * @return The BindResponse LdapResponse\n+     * @throws LdapException if some error occurred\n+     * @throws IOException if an I/O exception occurred\n+     */\n+    public BindFuture bindAsync( Dn name ) throws LdapException, IOException\n+    {\n+        LOG.debug( \"Bind request : {}\", name );\n+\n+        // Create the BindRequest\n+        BindRequest bindRequest = createBindRequest( name, StringConstants.EMPTY_BYTES );\n+\n+        return bindAsync( bindRequest );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n     public BindFuture bindAsync( Dn name, String credentials ) throws LdapException, IOException\n     {\n         LOG.debug( \"Bind request : {}\", name );\n \n+        // The password must not be empty or null\n+        if ( Strings.isEmpty( credentials ) && (! Dn.EMPTY_DN.equals( name ) ) )\n+        {\n+            LOG.debug( \"The password is missing\" );\n+            throw new LdapAuthenticationException( \"The password is missing\" );\n+        }\n+\n         // Create the BindRequest\n         BindRequest bindRequest = createBindRequest( name, Strings.getBytesUtf8( credentials ) );\n ",
                "additions": 97,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 97,
                "deletions": 0,
                "sha": "8754ffde32261bd962c40066cdabfbfa9521606d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/client/api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630"
            },
            {
                "patch": "@@ -266,10 +266,17 @@ public void setSaslMechanism( String saslMechanism )\n     public int computeLength()\n     {\n         int bindRequestLength = 1 + 1 + 1; // Initialized with version\n-\n+        \n+        Dn name = getName();\n+        \n         // The name\n-        bindRequestLength += 1 + TLV.getNbBytes( Dn.getNbBytes( getName() ) )\n-            + Dn.getNbBytes( getName() );\n+        if ( name == null )\n+        { \n+            name = Dn.EMPTY_DN;\n+        }\n+\n+        bindRequestLength += 1 + TLV.getNbBytes( Dn.getNbBytes( name ) )\n+            + Dn.getNbBytes( name );\n \n         byte[] credentials = getCredentials();\n \n@@ -347,7 +354,15 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n         Value.encode( buffer, 3 );\n \n         // The name\n-        Value.encode( buffer, Dn.getBytes( getName() ) );\n+        Dn name = getName();\n+        \n+        // The name\n+        if ( name == null )\n+        { \n+            name = Dn.EMPTY_DN;\n+        }\n+\n+        Value.encode( buffer, Dn.getBytes( name ) );\n \n         byte[] credentials = getCredentials();\n ",
                "additions": 19,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/codec/core/src/main/java/org/apache/directory/shared/ldap/codec/decorators/BindRequestDecorator.java",
                "status": "modified",
                "changes": 23,
                "deletions": 4,
                "sha": "5b8794ce98e763bf83617fc729bd89d75731001e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/codec/core/src/main/java/org/apache/directory/shared/ldap/codec/decorators/BindRequestDecorator.java",
                "filename": "ldap/codec/core/src/main/java/org/apache/directory/shared/ldap/codec/decorators/BindRequestDecorator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/core/src/main/java/org/apache/directory/shared/ldap/codec/decorators/BindRequestDecorator.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630"
            },
            {
                "patch": "@@ -33,8 +33,8 @@\n import org.apache.directory.shared.asn1.ber.Asn1Decoder;\n import org.apache.directory.shared.asn1.ber.tlv.TLVStateEnum;\n import org.apache.directory.shared.ldap.codec.api.LdapDecoder;\n-import org.apache.directory.shared.ldap.codec.api.MessageDecorator;\n import org.apache.directory.shared.ldap.codec.api.LdapMessageContainer;\n+import org.apache.directory.shared.ldap.codec.api.MessageDecorator;\n import org.apache.directory.shared.ldap.codec.decorators.BindRequestDecorator;\n import org.apache.directory.shared.ldap.codec.osgi.AbstractCodecServiceTest;\n import org.apache.directory.shared.ldap.model.message.BindRequest;",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/codec/standalone/src/test/java/org/apache/directory/shared/ldap/codec/LdapDecoderTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "d612d5ed0966c193b8b08c50173867193447ed08",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/codec/standalone/src/test/java/org/apache/directory/shared/ldap/codec/LdapDecoderTest.java",
                "filename": "ldap/codec/standalone/src/test/java/org/apache/directory/shared/ldap/codec/LdapDecoderTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/codec/standalone/src/test/java/org/apache/directory/shared/ldap/codec/LdapDecoderTest.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630"
            },
            {
                "patch": "@@ -272,7 +272,7 @@ public String toString()\n     {\n         StringBuilder sb = new StringBuilder();\n \n-        sb.append( \"    Add Request[\" ).append( getMessageId() ).append( \"] :\\n\" );\n+        sb.append( \"    Add Request :\\n\" );\n \n         if ( entry == null )\n         {",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/AddRequestImpl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "abb8bfd4851b8095d6ea17b4a4faf3f49bc69a80",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/AddRequestImpl.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/AddRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/AddRequestImpl.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630"
            },
            {
                "patch": "@@ -60,8 +60,7 @@\n      * Sets the authentication mechanism to simple or to SASL based\n      * authentication.\n      * \n-     * @param isSimple\n-     *            true if authentication is simple, false otherwise.\n+     * @param isSimple true if authentication is simple, false otherwise.\n      */\n     void setSimple( boolean isSimple );\n \n@@ -70,25 +69,25 @@\n      * Gets the simple credentials associated with a simple authentication\n      * attempt or null if this request uses SASL authentication mechanisms.\n      * \n-     * @return null if the mechanism is SASL or the credentials if it is simple.\n+     * @return null if the mechanism is SASL, or the credentials if it is simple.\n      */\n     byte[] getCredentials();\n \n \n     /**\n      * Sets the simple credentials associated with a simple authentication\n-     * attempt ignored if this request uses SASL authentication mechanisms.\n+     * attempt. Ignored if this request uses SASL authentication mechanisms.\n      * \n-     * @param credentials the credentials if authentication is simple, null otherwise\n+     * @param credentials the credentials if authentication is simple\n      */\n     void setCredentials( String credentials );\n \n \n     /**\n      * Sets the simple credentials associated with a simple authentication\n-     * attempt ignored if this request uses SASL authentication mechanisms.\n+     * attempt. Ignored if this request uses SASL authentication mechanisms.\n      * \n-     * @param credentials the credentials if authentication is simple, null otherwise\n+     * @param credentials the credentials if authentication is simple\n      */\n     void setCredentials( byte[] credentials );\n \n@@ -112,9 +111,7 @@\n      * performed at a lower layer, or when using SASL credentials with a\n      * mechanism that includes the Dn in the credentials.\n      * \n-     * @param name\n-     *            the Dn of the authenticating user - leave null for annonymous\n-     *            user.\n+     * @param name the Dn of the authenticating user - leave null for annonymous user.\n      */\n     void setName( Dn name );\n \n@@ -156,9 +153,8 @@\n      * an type-safe enumeration type for a binary value. If an LDAPv4 comes out\n      * then we shall convert the return type to a type safe enumeration.\n      * \n-     * @param isVersion3\n-     *            if true the client will be exhibiting version 3 bind behavoir,\n-     *            if false is used version 2 behavoir will be exhibited.\n+     * @param isVersion3 if true the client will be exhibiting version 3 bind behavior,\n+     *  If false is used version 2 behavior will be exhibited.\n      */\n     void setVersion3( boolean isVersion3 );\n \n@@ -167,7 +163,7 @@\n      * Gets the SASL mechanism String associated with this BindRequest if the\n      * bind operation is using SASL.\n      * \n-     * @return the SASL mechanism or null if the bind op is simple\n+     * @return the SASL mechanism or null if the bind operation is simple\n      */\n     String getSaslMechanism();\n \n@@ -176,8 +172,7 @@\n      * Sets the SASL mechanism String associated with this BindRequest if the\n      * bind operation is using SASL.\n      * \n-     * @param saslMechanism\n-     *            the SASL mechanism\n+     * @param saslMechanism the SASL mechanism\n      */\n     void setSaslMechanism( String saslMechanism );\n }",
                "additions": 11,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequest.java",
                "status": "modified",
                "changes": 27,
                "deletions": 16,
                "sha": "4dc9c243be5487f3e0106f9385687f1bb10a46fb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequest.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequest.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630"
            },
            {
                "patch": "@@ -35,8 +35,6 @@\n  */\n public class BindRequestImpl extends AbstractAbandonableRequest implements BindRequest\n {\n-    static final long serialVersionUID = 7945504184130380071L;\n-\n     /**\n      * Distinguished name identifying the name of the authenticating subject -\n      * defaults to the empty string\n@@ -80,10 +78,7 @@ public BindRequestImpl()\n     // -----------------------------------------------------------------------\n \n     /**\n-     * Checks to see if the authentication mechanism is simple and not SASL\n-     * based.\n-     * \n-     * @return true if the mechanism is simple false if it is SASL based.\n+     * {@inheritDoc}\n      */\n     public boolean isSimple()\n     {\n@@ -92,10 +87,7 @@ public boolean isSimple()\n \n \n     /**\n-     * Checks to see if the authentication mechanism is simple and not SASL\n-     * based.\n-     * \n-     * @return true if the mechanism is simple false if it is SASL based.\n+     * {@inheritDoc}\n      */\n     public boolean getSimple()\n     {\n@@ -104,11 +96,7 @@ public boolean getSimple()\n \n \n     /**\n-     * Sets the authentication mechanism to simple or to SASL based\n-     * authentication.\n-     * \n-     * @param simple\n-     *            true if authentication is simple, false otherwise.\n+     * {@inheritDoc}\n      */\n     public void setSimple( boolean simple )\n     {\n@@ -117,10 +105,7 @@ public void setSimple( boolean simple )\n \n \n     /**\n-     * Gets the simple credentials associated with a simple authentication\n-     * attempt or null if this request uses SASL authentication mechanisms.\n-     * \n-     * @return null if the mechanism is SASL or the credentials if it is simple.\n+     * {@inheritDoc}\n      */\n     public byte[] getCredentials()\n     {\n@@ -170,9 +155,7 @@ public void setCredentials( byte[] credentials )\n \n \n     /**\n-     * Gets the mechanism if this request uses SASL authentication mechanisms.\n-     * \n-     * @return The mechanism if SASL.\n+     * {@inheritDoc}\n      */\n     public String getSaslMechanism()\n     {\n@@ -181,25 +164,17 @@ public String getSaslMechanism()\n \n \n     /**\n-     * Sets the mechanism associated with a SASL authentication\n-     * \n-     * @param saslMechanism\n-     *            the SASL mechanism\n+     * {@inheritDoc}\n      */\n     public void setSaslMechanism( String saslMechanism )\n     {\n+        this.isSimple = false;\n         this.mechanism = saslMechanism;\n     }\n \n \n     /**\n-     * Gets the distinguished name of the subject in this authentication\n-     * request. This field may take on a null value (a zero length string) for\n-     * the purposes of anonymous binds, when authentication has been performed\n-     * at a lower layer, or when using SASL credentials with a mechanism that\n-     * includes the Dn in the credentials.\n-     * \n-     * @return the Dn of the authenticating user.\n+     * {@inheritDoc}\n      */\n     public Dn getName()\n     {\n@@ -208,15 +183,7 @@ public Dn getName()\n \n \n     /**\n-     * Sets the distinguished name of the subject in this authentication\n-     * request. This field may take on a null value (or a zero length string)\n-     * for the purposes of anonymous binds, when authentication has been\n-     * performed at a lower layer, or when using SASL credentials with a\n-     * mechanism that includes the Dn in the credentials.\n-     * \n-     * @param name\n-     *            the Dn of the authenticating user - leave null for annonymous\n-     *            user.\n+     * {@inheritDoc}\n      */\n     public void setName( Dn name )\n     {\n@@ -225,15 +192,7 @@ public void setName( Dn name )\n \n \n     /**\n-     * Checks to see if the Ldap v3 protocol is used. Normally this would\n-     * extract a version number from the bind request sent by the client\n-     * indicating the version of the protocol to be used in this protocol\n-     * session. The integer is either a 2 or a 3 at the moment. We thought it\n-     * was better to just check if the protocol used is 3 or not rather than use\n-     * an type-safe enumeration type for a binary value. If an LDAPv4 comes out\n-     * then we shall convert the return type to a type safe enumeration.\n-     * \n-     * @return true if client using version 3 false if it is version 2.\n+     * {@inheritDoc}\n      */\n     public boolean isVersion3()\n     {\n@@ -242,15 +201,7 @@ public boolean isVersion3()\n \n \n     /**\n-     * Gets whether or not the Ldap v3 protocol is used. Normally this would\n-     * extract a version number from the bind request sent by the client\n-     * indicating the version of the protocol to be used in this protocol\n-     * session. The integer is either a 2 or a 3 at the moment. We thought it\n-     * was better to just check if the protocol used is 3 or not rather than use\n-     * an type-safe enumeration type for a binary value. If an LDAPv4 comes out\n-     * then we shall convert the return type to a type safe enumeration.\n-     * \n-     * @return true if client using version 3 false if it is version 2.\n+     * {@inheritDoc}\n      */\n     public boolean getVersion3()\n     {\n@@ -259,17 +210,7 @@ public boolean getVersion3()\n \n \n     /**\n-     * Sets whether or not the LDAP v3 or v2 protocol is used. Normally this\n-     * would extract a version number from the bind request sent by the client\n-     * indicating the version of the protocol to be used in this protocol\n-     * session. The integer is either a 2 or a 3 at the moment. We thought it\n-     * was better to just check if the protocol used is 3 or not rather than use\n-     * an type-safe enumeration type for a binary value. If an LDAPv4 comes out\n-     * then we shall convert the return type to a type safe enumeration.\n-     * \n-     * @param version3\n-     *            if true the client will be exhibiting version 3 bind behavoir,\n-     *            if false is used version 2 behavoir will be exhibited.\n+     * {@inheritDoc}\n      */\n     public void setVersion3( boolean version3 )\n     {\n@@ -354,24 +295,23 @@ public boolean equals( Object obj )\n         Dn dn1 = req.getName();\n         Dn dn2 = getName();\n \n-        if ( dn1 == null )\n+        if ( Dn.isNullOrEmpty( dn1) )\n         {\n-            if ( dn2 != null )\n+            if ( !Dn.isNullOrEmpty( dn2 ) )\n             {\n                 return false;\n             }\n         }\n         else\n         {\n-            if ( dn2 == null )\n+            if ( Dn.isNullOrEmpty( dn2 ) )\n             {\n                 return false;\n             }\n             else if ( !dn1.equals( dn2 ) )\n             {\n                 return false;\n             }\n-\n         }\n \n         return Arrays.equals( req.getCredentials(), getCredentials() );\n@@ -409,7 +349,7 @@ public String toString()\n         sb.append( \"    BindRequest\\n\" );\n         sb.append( \"        Version : '\" ).append( isVersion3 ? \"3\" : \"2\" ).append( \"'\\n\" );\n \n-        if ( Strings.isEmpty(name.getNormName()) && isSimple )\n+        if ( ( (name == null ) || Strings.isEmpty(name.getNormName() ) ) && isSimple )\n         {\n             sb.append( \"        Name : anonymous\\n\" );\n         }",
                "additions": 16,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequestImpl.java",
                "status": "modified",
                "changes": 92,
                "deletions": 76,
                "sha": "df04906cf21efe2be7830cbf7f1b0fd0a7e35abe",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/29f5524c632ddf43e7d03411c30f376cb105a630/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequestImpl.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequestImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/message/BindRequestImpl.java?ref=29f5524c632ddf43e7d03411c30f376cb105a630"
            }
        ],
        "bug_id": "directory-ldap-api_67",
        "parent": "https://github.com/apache/directory-ldap-api/commit/803d13eed97bd56fad042efa635cf655632f70d5",
        "message": "o Added the bind( Dn ) and bind( String ) method in the LdapConnection interface\no Ignored the SASL PLAIN bind test, it's not working in the LdapNeworkConnection\no The testAnonymousBindReques is not anymore ignored, the NPE ha sbeen fixed\no Added a check in the LdapNetworkConnection.bind( username, password ) methods to forbid a call when the password is null but the username is not\no Fixed a NPE in the BindRequestDecorator class\no Updated the BindRequest Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1092743 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/7d0fa503a8681ed3bb7e0d7ae57b953f848c0bf8",
        "file": [
            {
                "patch": "@@ -67,6 +67,10 @@\n      */\n     public ListCursor( Comparator<E> comparator, int start, List<E> list, int end )\n     {\n+    \tif ( list == null )\n+    \t{\n+    \t\tlist = Collections.emptyList();\n+    \t}\n         if ( ( start < 0  )|| ( start > list.size() ) )\n         {\n             throw new IllegalArgumentException( I18n.err( I18n.ERR_02005, start ) );\n@@ -85,16 +89,7 @@ public ListCursor( Comparator<E> comparator, int start, List<E> list, int end )\n         }\n \n         this.comparator = comparator;\n-\n-        if ( list != null )\n-        {\n-            this.list = list;\n-        }\n-        else\n-        {\n-            this.list = Collections.emptyList();\n-        }\n-\n+        this.list = list;\n         this.start = start;\n         this.end = end;\n     }",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7d0fa503a8681ed3bb7e0d7ae57b953f848c0bf8/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/ListCursor.java",
                "status": "modified",
                "changes": 15,
                "deletions": 10,
                "sha": "6f7452c1ea4d249f509c07e0b9564ab83a75e4d0",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7d0fa503a8681ed3bb7e0d7ae57b953f848c0bf8/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/ListCursor.java",
                "filename": "cursor/src/main/java/org/apache/directory/shared/ldap/cursor/ListCursor.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/cursor/src/main/java/org/apache/directory/shared/ldap/cursor/ListCursor.java?ref=7d0fa503a8681ed3bb7e0d7ae57b953f848c0bf8"
            }
        ],
        "bug_id": "directory-ldap-api_68",
        "parent": "https://github.com/apache/directory-ldap-api/commit/a6368dbb8e7d52446f8aa674824601c3888880d7",
        "message": "Avoid NPE\n\nFrom FireBug report\nRCN: Nullcheck of value previously dereferenced (RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE)\nA value is checked here to see whether it is null, but this value can't be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference. Essentially, this code and the previous dereference disagree as to whether this value is allowed to be null. Either the check is redundant or the previous dereference is erroneous.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@944577 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/ffa67e0d055935e0bb86e44355cd1a1083be2c6d",
        "file": [
            {
                "patch": "@@ -125,6 +125,7 @@\n               org.apache.directory.api.asn1.ber.tlv;version=${project.version},\n               org.apache.directory.api.i18n;version=${project.version},\n               org.apache.directory.api.ldap.codec.api;version=${project.version},\n+              org.apache.directory.api.ldap.codec.osgi;version=${project.version},\n               org.apache.directory.api.ldap.extras.controls;version=${project.version},\n               org.apache.directory.api.ldap.extras.controls.ad;version=${project.version},\n               org.apache.directory.api.ldap.extras.controls.ppolicy;version=${project.version},\n@@ -144,7 +145,9 @@\n               org.apache.directory.api.ldap.model.name;version=${project.version},\n               org.apache.directory.api.ldap.model.url;version=${project.version},\n               org.apache.directory.api.util;version=${project.version},\n-              org.slf4j;version=${slf4j.api.version}\n+              org.slf4j;version=${slf4j.api.version},\n+              org.osgi.framework;version=\"[1.0.0,2.0.0)\",\n+              org.osgi.util.tracker;version=\"[1.0.0,2.0.0)\",\n             </Import-Package>\n             <Bundle-Activator>\n               org.apache.directory.api.ldap.extras.ExtrasBundleActivator",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ffa67e0d055935e0bb86e44355cd1a1083be2c6d/ldap/extras/codec/pom.xml",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "e0c28724b134a6a8e04adf0f63b7b3724c64adc1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ffa67e0d055935e0bb86e44355cd1a1083be2c6d/ldap/extras/codec/pom.xml",
                "filename": "ldap/extras/codec/pom.xml",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec/pom.xml?ref=ffa67e0d055935e0bb86e44355cd1a1083be2c6d"
            },
            {
                "patch": "@@ -53,6 +53,8 @@\n import org.osgi.framework.BundleActivator;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.ServiceReference;\n+import org.osgi.util.tracker.ServiceTracker;\n+import org.osgi.util.tracker.ServiceTrackerCustomizer;\n \n \n /**\n@@ -63,21 +65,58 @@\n  */\n public class ExtrasBundleActivator implements BundleActivator\n {\n-    private ServiceReference<?> codecServiceRef;\n+\n+    private ServiceTracker<LdapApiService, LdapApiService> serviceTracker;\n+\n+    class LdapApiServiceTracker implements ServiceTrackerCustomizer<LdapApiService, LdapApiService>\n+    {\n+\n+        private BundleContext context;\n+\n+\n+        public LdapApiServiceTracker( BundleContext context )\n+        {\n+            this.context = context;\n+        }\n+\n+\n+        @Override\n+        public LdapApiService addingService( ServiceReference<LdapApiService> reference )\n+        {\n+            LdapApiService ldapApiService = context.getService( reference );\n+            registerExtrasControls( ldapApiService );\n+            registerExtrasExtendedOps( ldapApiService );\n+            return ldapApiService;\n+        }\n+\n+\n+        @Override\n+        public void modifiedService( ServiceReference<LdapApiService> reference, LdapApiService ldapApiService )\n+        {\n+        }\n+\n+\n+        @Override\n+        public void removedService( ServiceReference<LdapApiService> reference, LdapApiService ldapApiService )\n+        {\n+            unregisterExtrasControls( ldapApiService );\n+            unregisterExtrasExtendedOps( ldapApiService );\n+        }\n+\n+    }\n \n \n     /**\n      * {@inheritDoc}\n      */\n     public void start( BundleContext context ) throws Exception\n     {\n-        codecServiceRef = context.getServiceReference( LdapApiService.class.getName() );\n-        LdapApiService codec = ( LdapApiService ) context.getService( codecServiceRef );\n-        registerExtrasControls( codec );\n-        registerExtrasExtendedOps( codec );\n+        LdapApiServiceTracker ldapApiServiceTracker = new LdapApiServiceTracker(context);\n+        serviceTracker = new ServiceTracker<LdapApiService, LdapApiService>(\n+            context, LdapApiService.class, ldapApiServiceTracker );\n+        serviceTracker.open();\n     }\n-\n-\n+    \n     /**\n      * Registers all the extras controls present in this control pack.\n      *\n@@ -99,7 +138,7 @@ private void registerExtrasControls( LdapApiService codec )\n \n         ControlFactory<PasswordPolicy> passwordPolicyFactory = new PasswordPolicyFactory( codec );\n         codec.registerControl( passwordPolicyFactory );\n-        \n+\n         ControlFactory<AdDirSync> adDirSyncFactory = new AdDirSyncFactory( codec );\n         codec.registerControl( adDirSyncFactory );\n     }\n@@ -147,14 +186,23 @@ private void registerExtrasExtendedOps( LdapApiService codec )\n      */\n     public void stop( BundleContext context ) throws Exception\n     {\n-        LdapApiService codec = ( LdapApiService ) context.getService( codecServiceRef );\n+        serviceTracker.close();\n+    }\n \n+\n+    private void unregisterExtrasControls( LdapApiService codec )\n+    {\n         codec.unregisterControl( SyncDoneValue.OID );\n         codec.unregisterControl( SyncInfoValue.OID );\n         codec.unregisterControl( SyncRequestValue.OID );\n         codec.unregisterControl( SyncStateValue.OID );\n         codec.unregisterControl( PasswordPolicy.OID );\n+        codec.unregisterControl( AdDirSync.OID );\n+    }\n \n+\n+    private void unregisterExtrasExtendedOps( LdapApiService codec )\n+    {\n         codec.unregisterExtendedRequest( CancelRequest.EXTENSION_OID );\n         codec.unregisterExtendedRequest( CertGenerationRequest.EXTENSION_OID );\n         codec.unregisterExtendedRequest( GracefulShutdownRequest.EXTENSION_OID );",
                "additions": 57,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ffa67e0d055935e0bb86e44355cd1a1083be2c6d/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "status": "modified",
                "changes": 66,
                "deletions": 9,
                "sha": "b3a88447ef15fcc915ad54b39af3f92845a2f09a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ffa67e0d055935e0bb86e44355cd1a1083be2c6d/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "filename": "ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/extras/codec/src/main/java/org/apache/directory/api/ldap/extras/ExtrasBundleActivator.java?ref=ffa67e0d055935e0bb86e44355cd1a1083be2c6d"
            }
        ],
        "bug_id": "directory-ldap-api_69",
        "parent": "https://github.com/apache/directory-ldap-api/commit/439b7feb00ec3c068982ee422b3e86f03bf2724c",
        "message": "Fix NPE in case when o.a.d.a.l.extras.codec is started before o.a.d.a.l.code.core and no LdapApiService is yet registered. Use ServiceTracker to decouple bundle start from service lookup and codec registration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1645870 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/e31736bcf0215f82b1bea32014e99837400d5d79",
        "file": [
            {
                "patch": "@@ -236,7 +236,7 @@ public boolean equals( Object obj )\n         }\n \n         BinaryValue other = ( BinaryValue ) obj;\n-        \n+\n         // First check if we have an attrbuteType.\n         if ( attributeType != null )\n         {\n@@ -260,11 +260,11 @@ public boolean equals( Object obj )\n                     {\n                         return true;\n                     }\n-                    \n+\n                     // We have an AttributeType, we use the associated comparator\n                     try\n                     {\n-                        Comparator<byte[]> comparator = ( Comparator<byte[]> ) getLdapComparator();\n+                        Comparator<byte[]> comparator = getLdapComparator();\n \n                         // Compare normalized values\n                         if ( comparator == null )\n@@ -300,22 +300,22 @@ public boolean equals( Object obj )\n                 // We have an AttributeType on the base value, we need to use its comparator\n                 try\n                 {\n-                    Comparator<byte[]> comparator = ( Comparator<byte[]> ) getLdapComparator();\n+                    Comparator<byte[]> comparator = getLdapComparator();\n \n                     // Compare normalized values. We have to normalized the other value,\n                     // as it has no AT\n                     MatchingRule equality = getAttributeType().getEquality();\n-                    \n+\n                     if ( equality == null )\n                     {\n                         // No matching rule : compare the raw values\n                         return Arrays.equals( getNormReference(), other.getNormReference() );\n                     }\n-                    \n+\n                     Normalizer normalizer = equality.getNormalizer();\n-                    \n-                    BinaryValue otherValue = (BinaryValue)normalizer.normalize( other );\n-                    \n+\n+                    BinaryValue otherValue = ( BinaryValue ) normalizer.normalize( other );\n+\n                     if ( comparator == null )\n                     {\n                         return Arrays.equals( getNormReference(), otherValue.getNormReference() );\n@@ -343,25 +343,25 @@ public boolean equals( Object obj )\n                 {\n                     return other.isNull();\n                 }\n-                \n+\n                 try\n                 {\n-                    Comparator<byte[]> comparator = ( Comparator<byte[]> ) other.getLdapComparator();\n+                    Comparator<byte[]> comparator = other.getLdapComparator();\n \n                     // Compare normalized values. We have to normalized the other value,\n                     // as it has no AT\n                     MatchingRule equality = other.getAttributeType().getEquality();\n-                    \n+\n                     if ( equality == null )\n                     {\n                         // No matching rule : compare the raw values\n                         return Arrays.equals( getNormReference(), other.getNormReference() );\n                     }\n-                    \n+\n                     Normalizer normalizer = equality.getNormalizer();\n-                    \n-                    BinaryValue thisValue = (BinaryValue)normalizer.normalize( this );\n-                    \n+\n+                    BinaryValue thisValue = ( BinaryValue ) normalizer.normalize( this );\n+\n                     if ( comparator == null )\n                     {\n                         return Arrays.equals( thisValue.getNormReference(), other.getNormReference() );\n@@ -383,7 +383,7 @@ public boolean equals( Object obj )\n                 {\n                     return other.isNull();\n                 }\n-                \n+\n                 // Now check the normalized values\n                 return Arrays.equals( getNormReference(), other.getNormReference() );\n             }\n@@ -558,6 +558,35 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n                 try\n                 {\n                     normalizedValue = attributeType.getEquality().getNormalizer().normalize( this ).getBytes();\n+                    MatchingRule equality = attributeType.getEquality();\n+\n+                    if ( equality == null )\n+                    {\n+                        if ( wrappedLength >= 0 )\n+                        {\n+                            normalizedValue = new byte[wrappedLength];\n+\n+                            System.arraycopy( wrappedValue, 0, normalizedValue, 0, wrappedLength );\n+                        }\n+                    }\n+                    else\n+                    {\n+                        Normalizer normalizer = equality.getNormalizer();\n+\n+                        if ( normalizer != null )\n+                        {\n+                            normalizedValue = normalizer.normalize( this ).getBytes();\n+                        }\n+                        else\n+                        {\n+                            if ( wrappedLength >= 0 )\n+                            {\n+                                normalizedValue = new byte[wrappedLength];\n+\n+                                System.arraycopy( wrappedValue, 0, normalizedValue, 0, wrappedLength );\n+                            }\n+                        }\n+                    }\n                 }\n                 catch ( LdapException le )\n                 {",
                "additions": 46,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e31736bcf0215f82b1bea32014e99837400d5d79/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/BinaryValue.java",
                "status": "modified",
                "changes": 63,
                "deletions": 17,
                "sha": "eb9c1b0979495a6f8dddd0295b8ef01ce3b75b8b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e31736bcf0215f82b1bea32014e99837400d5d79/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/BinaryValue.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/BinaryValue.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/BinaryValue.java?ref=e31736bcf0215f82b1bea32014e99837400d5d79"
            },
            {
                "patch": "@@ -535,7 +535,25 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n             {\n                 try\n                 {\n-                    normalizedValue = attributeType.getEquality().getNormalizer().normalize( wrappedValue );\n+                    MatchingRule equality = attributeType.getEquality();\n+\n+                    if ( equality == null )\n+                    {\n+                        normalizedValue = wrappedValue;\n+                    }\n+                    else\n+                    {\n+                        Normalizer normalizer = equality.getNormalizer();\n+\n+                        if ( normalizer != null )\n+                        {\n+                            normalizedValue = normalizer.normalize( wrappedValue );\n+                        }\n+                        else\n+                        {\n+                            normalizedValue = wrappedValue;\n+                        }\n+                    }\n                 }\n                 catch ( LdapException le )\n                 {",
                "additions": 19,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e31736bcf0215f82b1bea32014e99837400d5d79/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/StringValue.java",
                "status": "modified",
                "changes": 20,
                "deletions": 1,
                "sha": "04a3ed86a291d2864b4ce1d31eb2a52be8db0cd6",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e31736bcf0215f82b1bea32014e99837400d5d79/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/StringValue.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/StringValue.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/api/ldap/model/entry/StringValue.java?ref=e31736bcf0215f82b1bea32014e99837400d5d79"
            }
        ],
        "bug_id": "directory-ldap-api_70",
        "parent": "https://github.com/apache/directory-ldap-api/commit/ad378e468f3301ae97289f76ea68e7f1ab2f0914",
        "message": "Fixed the readExternal method : if the value has an AttributeType with no Equality atchingRule, we were having NPE because we weren't testing this case.\nThis will fix DIRSERVER-1834\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1471294 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/803845945f641008680715745c7c5d5744e9bac6",
        "file": [
            {
                "patch": "@@ -24,7 +24,10 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n+import java.util.Arrays;\n+\n import org.apache.directory.shared.ldap.model.exception.LdapException;\n+import org.apache.directory.shared.ldap.model.exception.LdapInvalidDnException;\n import org.apache.directory.shared.ldap.model.schema.SchemaManager;\n import org.apache.directory.shared.ldap.schemamanager.impl.DefaultSchemaManager;\n import org.junit.BeforeClass;\n@@ -179,7 +182,7 @@ public void testAvaSimpleNorm() throws LdapException\n      * Compares two equals atavs\n      */\n     @Test\n-    public void testCompareToEquals() throws LdapException\n+    public void testEqualsSameAva() throws LdapException\n     {\n         Ava atav1 = new Ava( schemaManager, \"cn\", \"b\" );\n         Ava atav2 = new Ava( schemaManager, \"cn\", \"b\" );\n@@ -192,13 +195,26 @@ public void testCompareToEquals() throws LdapException\n      * Compares two equals atavs but with a type in different case\n      */\n     @Test\n-    public void testCompareToEqualsCase() throws LdapException\n+    public void testEqualsUpperCaseAT() throws LdapException\n     {\n         Ava atav1 = new Ava( schemaManager, \"cn\", \"b\" );\n         Ava atav2 = new Ava( schemaManager, \"CN\", \"b\" );\n \n         assertTrue( atav1.equals( atav2 ) );\n     }\n+\n+\n+    /**\n+     * Compares two equals atavs but with a type in different case\n+     */\n+    @Test\n+    public void testEqualsSameValues() throws LdapException\n+    {\n+        Ava atav1 = new Ava( schemaManager, \"cn\", \"  B  a\" );\n+        Ava atav2 = new Ava( schemaManager, \"CN\", \"b a\" );\n+\n+        assertTrue( atav1.equals( atav2 ) );\n+    }\n     \n     \n     /**\n@@ -309,4 +325,81 @@ public void testAvaValuesSchemaAware() throws LdapException\n         \n         assertEquals( null, errors );\n     }\n+    \n+    \n+    @Test\n+    public void testCompareToSameAva() throws LdapInvalidDnException\n+    {\n+        Ava atav1 = new Ava( schemaManager, \"cn\", \"b\" );\n+        Ava atav2 = new Ava( schemaManager, \"cn\", \"b\" );\n+        Ava atav3 = new Ava( schemaManager, \"commonName\", \"b\" );\n+        Ava atav4 = new Ava( schemaManager, \"2.5.4.3\", \"  B  \" );\n+\n+        // 1 with others\n+        assertEquals( 0, atav1.compareTo( atav1 ) );\n+        assertEquals( 0, atav1.compareTo( atav2 ) );\n+        assertEquals( 0, atav1.compareTo( atav3 ) );\n+        assertEquals( 0, atav1.compareTo( atav4 ) );\n+        \n+        // 2 with others\n+        assertEquals( 0, atav2.compareTo( atav1 ) );\n+        assertEquals( 0, atav2.compareTo( atav2 ) );\n+        assertEquals( 0, atav2.compareTo( atav3 ) );\n+        assertEquals( 0, atav2.compareTo( atav4 ) );\n+        \n+        // 3 with others\n+        assertEquals( 0, atav3.compareTo( atav1 ) );\n+        assertEquals( 0, atav3.compareTo( atav2 ) );\n+        assertEquals( 0, atav3.compareTo( atav3 ) );\n+        assertEquals( 0, atav3.compareTo( atav4 ) );\n+        \n+        // 4 with others\n+        assertEquals( 0, atav4.compareTo( atav1 ) );\n+        assertEquals( 0, atav4.compareTo( atav2 ) );\n+        assertEquals( 0, atav4.compareTo( atav3 ) );\n+        assertEquals( 0, atav4.compareTo( atav4 ) );\n+    }\n+    \n+    \n+    @Test\n+    public void testCompareAvaOrder() throws LdapInvalidDnException\n+    {\n+        Ava atav1 = new Ava( schemaManager, \"cn\", \"  B  \" );\n+        Ava atav2 = new Ava( schemaManager, \"sn\", \"  c\" );\n+        \n+        // atav1 should be before atav2\n+        assertEquals( -1, atav1.compareTo( atav2 ) );\n+        assertEquals( 1, atav2.compareTo( atav1 ) );\n+\n+        Ava atav3 = new Ava( schemaManager, \"2.5.4.3\", \"A \" );\n+        \n+        // Atav1 shoud be after atav3\n+        assertEquals( 1, atav1.compareTo( atav3 ) );\n+        assertEquals( -1, atav3.compareTo( atav1 ) );\n+    }\n+    \n+    \n+    @Test\n+    public void testSortAva() throws LdapInvalidDnException\n+    {\n+        Ava atav1 = new Ava( schemaManager, \"cn\", \"  B  \" );\n+        Ava atav2 = new Ava( schemaManager, \"sn\", \"  c\" );\n+        Ava atav3 = new Ava( schemaManager, \"2.5.4.3\", \"A \" );\n+        Ava atav4 = new Ava( schemaManager, \"2.5.4.11\", \" C  \" );\n+        Ava atav5 = new Ava( schemaManager, \"ou\", \"B \" );\n+        Ava atav6 = new Ava( schemaManager, \"ou\", \"D \" );\n+        Ava atav7 = new Ava( schemaManager, \"CN\", \" \" );\n+\n+        Ava[] avas = new Ava[] { atav1, atav2, atav3, atav4, atav5, atav6, atav7 };\n+        \n+        Arrays.sort( avas );\n+        \n+        assertEquals( atav5, avas[0] );\n+        assertEquals( atav4, avas[1] );\n+        assertEquals( atav6, avas[2] );\n+        assertEquals( atav7, avas[3] );\n+        assertEquals( atav3, avas[4] );\n+        assertEquals( atav1, avas[5] );\n+        assertEquals( atav2, avas[6] );\n+    }\n }",
                "additions": 95,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/803845945f641008680715745c7c5d5744e9bac6/integ/src/test/java/org/apache/directory/shared/ldap/model/name/AvaTest.java",
                "status": "modified",
                "changes": 97,
                "deletions": 2,
                "sha": "f147c62e6ffd352f7a6ba7e5d0f4505abf5c20d9",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/803845945f641008680715745c7c5d5744e9bac6/integ/src/test/java/org/apache/directory/shared/ldap/model/name/AvaTest.java",
                "filename": "integ/src/test/java/org/apache/directory/shared/ldap/model/name/AvaTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/integ/src/test/java/org/apache/directory/shared/ldap/model/name/AvaTest.java?ref=803845945f641008680715745c7c5d5744e9bac6"
            },
            {
                "patch": "@@ -24,6 +24,7 @@\n import java.io.IOException;\n import java.io.ObjectInput;\n import java.io.ObjectOutput;\n+import java.util.Arrays;\n \n import org.apache.directory.shared.i18n.I18n;\n import org.apache.directory.shared.ldap.model.entry.BinaryValue;\n@@ -34,6 +35,7 @@\n import org.apache.directory.shared.ldap.model.exception.LdapInvalidDnException;\n import org.apache.directory.shared.ldap.model.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.model.schema.AttributeType;\n+import org.apache.directory.shared.ldap.model.schema.LdapComparator;\n import org.apache.directory.shared.ldap.model.schema.MatchingRule;\n import org.apache.directory.shared.ldap.model.schema.SchemaManager;\n import org.apache.directory.shared.util.Strings;\n@@ -54,7 +56,7 @@\n  *\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  */\n-public class Ava implements Externalizable, Cloneable\n+public class Ava implements Externalizable, Cloneable, Comparable<Ava>\n {\n     /**\n      * Declares the Serial Version Uid.\n@@ -153,6 +155,8 @@ public Ava( SchemaManager schemaManager, String upType, byte[] upValue ) throws\n     {\n         if ( schemaManager != null )\n         {\n+            this.schemaManager = schemaManager;\n+            \n             try\n             {\n                 attributeType = schemaManager.lookupAttributeTypeRegistry( upType );\n@@ -215,6 +219,8 @@ public Ava( SchemaManager schemaManager, String upType, String upValue ) throws\n     {\n         if ( schemaManager != null )\n         {\n+            this.schemaManager = schemaManager;\n+\n             try\n             {\n                 attributeType = schemaManager.lookupAttributeTypeRegistry( upType );\n@@ -904,8 +910,18 @@ public boolean equals( Object obj )\n                     return equalityMatchingRule.getLdapComparator().compare( normValue.getValue(),\n                         instance.normValue.getValue() ) == 0;\n                 }\n-\n-                return false;\n+                else\n+                {\n+                    // No Equality MR, use a direct comparison\n+                    if ( normValue instanceof BinaryValue )\n+                    {\n+                        return Arrays.equals( normValue.getBytes(), instance.normValue.getBytes() );\n+                    }\n+                    else\n+                    {\n+                        return normValue.getString().equals( instance.normValue.getString() );\n+                    }\n+                }\n             }\n             else\n             {\n@@ -1134,6 +1150,152 @@ public AttributeType getAttributeType()\n     {\n         return attributeType;\n     }\n+    \n+    \n+    private int compareValues( Ava that )\n+    {\n+        int comp = 0;\n+        \n+        if ( normValue.getNormValue() instanceof String )\n+        {\n+            comp = ((String)normValue.getNormValue()).compareTo( ((String)that.normValue.getNormValue()) );\n+            \n+            return comp;\n+        }\n+        else\n+        {\n+            byte[] bytes1 = (byte[])normValue.getNormValue();\n+            byte[] bytes2 = (byte[])that.normValue.getNormValue();\n+            \n+            for ( int pos = 0; pos < bytes1.length; pos++ )\n+            {\n+                int v1 = ( bytes1[pos] & 0x00FF );\n+                int v2 = ( bytes2[pos] & 0x00FF );\n+                \n+                if ( v1 > v2 )\n+                {\n+                    return 1;\n+                }\n+                else if ( v2 > v1 )\n+                {\n+                    return -1;\n+                }\n+            }\n+            \n+            return 0;\n+        }\n+        \n+    }\n+\n+\n+    /**\n+     * @see Comparable#compareTo(Object)\n+     */\n+    public int compareTo( Ava that )\n+    {\n+        if ( that == null )\n+        {\n+            return 1;\n+        }\n+        \n+        int comp = 0;\n+        \n+        if ( schemaManager == null )\n+        {\n+            // Compare the ATs\n+            comp = normType.compareTo( that.normType );\n+            \n+            if ( comp != 0 )\n+            {\n+                return comp;\n+            }\n+            \n+            // and compare the values\n+            if ( normValue == null )\n+            {\n+                if ( that.normValue == null )\n+                {\n+                    return 0;\n+                }\n+                else\n+                {\n+                    return -1;\n+                }\n+            }\n+            else\n+            {\n+                if ( that.normValue == null )\n+                {\n+                    return 1;\n+                }\n+                else\n+                {\n+                    if ( normValue instanceof StringValue )\n+                    {\n+                        comp = ((StringValue)normValue).compareTo( (StringValue)that.normValue );\n+                        \n+                        return comp;\n+                    }\n+                    else\n+                    {\n+                        comp = ((BinaryValue)normValue).compareTo( (BinaryValue)that.normValue );\n+                        \n+                        return comp;\n+                    }\n+                }\n+            }\n+        }\n+        else\n+        {\n+            if ( that.schemaManager == null )\n+            {\n+                // Problem : we will apply the current Ava SchemaManager to the given Ava\n+                try\n+                {\n+                    that.apply( schemaManager );\n+                }\n+                catch ( LdapInvalidDnException lide )\n+                {\n+                    return 1;\n+                }\n+            }\n+            \n+            // First compare the AT OID\n+            comp = attributeType.getOid().compareTo( that.attributeType.getOid() );\n+            \n+            if ( comp != 0 )\n+            {\n+                return comp;\n+            }\n+            \n+            // Now, compare the two values using the ordering matchingRule comparator, if any\n+            MatchingRule orderingMR = attributeType.getOrdering();\n+            \n+            if ( orderingMR != null )\n+            {\n+                LdapComparator<Object> comparator = (LdapComparator<Object>)orderingMR.getLdapComparator();\n+                \n+                if ( comparator != null )\n+                {\n+                    comp = comparator.compare( normValue.getNormValue(), that.normValue.getNormValue() );\n+                    \n+                    return comp;\n+                }\n+                else\n+                {\n+                    comp = compareValues( that );\n+                    \n+                    return comp;\n+                }\n+            }\n+            else\n+            {\n+                comp = compareValues( that );\n+                \n+                return comp;\n+            }\n+        }\n+    }\n \n \n     /**",
                "additions": 165,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/803845945f641008680715745c7c5d5744e9bac6/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Ava.java",
                "status": "modified",
                "changes": 168,
                "deletions": 3,
                "sha": "634c766f3443729babf0c954b3deb73c3d1022ad",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/803845945f641008680715745c7c5d5744e9bac6/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Ava.java",
                "filename": "ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Ava.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/main/java/org/apache/directory/shared/ldap/model/name/Ava.java?ref=803845945f641008680715745c7c5d5744e9bac6"
            },
            {
                "patch": "@@ -159,7 +159,7 @@ public void testLdapRDNSimple() throws LdapException\n      * Compares two equals atavs\n      */\n     @Test\n-    public void testCompareToEquals() throws LdapException\n+    public void testEqualsAttributeEquals() throws LdapException\n     {\n         Ava atav1 = new Ava( schemaManager, \"a\", \"b\" );\n         Ava atav2 = new Ava( schemaManager, \"a\", \"b\" );\n@@ -172,7 +172,7 @@ public void testCompareToEquals() throws LdapException\n      * Compares two equals atavs but with a type in different case\n      */\n     @Test\n-    public void testCompareToEqualsCase() throws LdapException\n+    public void testEqualsAttributeIdSameCase() throws LdapException\n     {\n         Ava atav1 = new Ava( schemaManager, \"a\", \"b\" );\n         Ava atav2 = new Ava( schemaManager, \"A\", \"b\" );\n@@ -186,7 +186,7 @@ public void testCompareToEqualsCase() throws LdapException\n      * superior\n      */\n     @Test\n-    public void testCompareAtav1TypeSuperior() throws LdapException\n+    public void testEqualsAtav1TypeSuperior() throws LdapException\n     {\n         Ava atav1 = new Ava( schemaManager, \"b\", \"b\" );\n \n@@ -201,7 +201,7 @@ public void testCompareAtav1TypeSuperior() throws LdapException\n      * superior\n      */\n     @Test\n-    public void testCompareAtav2TypeSuperior() throws LdapException\n+    public void testEqualsAtav2TypeSuperior() throws LdapException\n     {\n         Ava atav1 = new Ava( schemaManager, \"a\", \"b\" );\n         Ava atav2 = new Ava( schemaManager, \"b\", \"b\" );\n@@ -215,7 +215,7 @@ public void testCompareAtav2TypeSuperior() throws LdapException\n      * superior\n      */\n     @Test\n-    public void testCompareAtav1ValueSuperior() throws LdapException\n+    public void testEqualsAtav1ValueSuperior() throws LdapException\n     {\n         Ava atav1 = new Ava( schemaManager, \"a\", \"b\" );\n         Ava atav2 = new Ava( schemaManager, \"a\", \"a\" );\n@@ -229,7 +229,7 @@ public void testCompareAtav1ValueSuperior() throws LdapException\n      * superior\n      */\n     @Test\n-    public void testCompareAtav2ValueSuperior() throws LdapException\n+    public void testEqualsAtav2ValueSuperior() throws LdapException\n     {\n         Ava atav1 = new Ava( schemaManager, \"a\", \"a\" );\n         Ava atav2 = new Ava( schemaManager, \"a\", \"b\" );",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/803845945f641008680715745c7c5d5744e9bac6/ldap/model/src/test/java/org/apache/directory/shared/ldap/model/name/AvaTest.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "07c51e573553397139be72c4b5a96f2c8a44eb64",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/803845945f641008680715745c7c5d5744e9bac6/ldap/model/src/test/java/org/apache/directory/shared/ldap/model/name/AvaTest.java",
                "filename": "ldap/model/src/test/java/org/apache/directory/shared/ldap/model/name/AvaTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/model/src/test/java/org/apache/directory/shared/ldap/model/name/AvaTest.java?ref=803845945f641008680715745c7c5d5744e9bac6"
            }
        ],
        "bug_id": "directory-ldap-api_71",
        "parent": "https://github.com/apache/directory-ldap-api/commit/8f9228e46aaebe8716f5b51645225021654f2c0d",
        "message": "o The Ava class now implements the Comparable interface\no Added tests for the compareTo method\no Fixed some potential NPE with Schema aware operations\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1294174 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/d3264c017fbc1fd7a4d910f71874e58bccba6fc2",
        "file": [
            {
                "patch": "@@ -87,7 +87,6 @@\n import org.apache.directory.shared.ldap.message.BindRequest;\n import org.apache.directory.shared.ldap.message.BindRequestImpl;\n import org.apache.directory.shared.ldap.message.BindResponse;\n-import org.apache.directory.shared.ldap.message.BindResponseImpl;\n import org.apache.directory.shared.ldap.message.CompareRequest;\n import org.apache.directory.shared.ldap.message.CompareRequestImpl;\n import org.apache.directory.shared.ldap.message.CompareResponse;\n@@ -1022,6 +1021,7 @@ private BindRequest createBindRequest( String name, byte[] credentials, String s\n         try\n         {\n             DN dn = new DN( name );\n+\n             return createBindRequest( dn, credentials, saslMechanism, controls );\n         }\n         catch ( LdapInvalidDnException ine )\n@@ -1042,9 +1042,6 @@ private BindRequest createBindRequest( String name, byte[] credentials, String s\n     private BindRequest createBindRequest( DN name, byte[] credentials, String saslMechanism, Control... controls )\n         throws LdapException\n     {\n-        // clear the mappings if any (in case of a second call to bind() without calling unBind())\n-        //clearMaps();\n-\n         // Set the new messageId\n         BindRequest bindRequest = new BindRequestImpl();\n \n@@ -1266,26 +1263,29 @@ public BindResponse bindGssApi( String name, String credentials, String realmNam\n     public BindResponse bindGssApi( String name, byte[] credentials, String realmName, String kdcHost, int kdcPort, Control... ctrls )\n         throws LdapException, IOException\n     {\n-        BindRequest bindReq = createBindRequest( name, credentials, SupportedSaslMechanisms.GSSAPI, ctrls );\n+        BindRequest bindRequest = createBindRequest( name, credentials, SupportedSaslMechanisms.GSSAPI, ctrls );\n         \n         String krbConfPath = createKrbConfFile( realmName, kdcHost, kdcPort );\n         System.setProperty( \"java.security.krb5.conf\", krbConfPath );\n \n         Configuration.setConfiguration( new Krb5LoginConfiguration() );\n         System.setProperty( \"javax.security.auth.useSubjectCredsOnly\", \"true\" );\n \n-        final SaslRequest saslReq = new SaslRequest( bindReq );\n+        final SaslRequest saslRequest = new SaslRequest( bindRequest );\n \n         try\n         {\n-            LoginContext lc = new LoginContext( \"ldapnetworkconnection\", new SaslCallbackHandler( saslReq ) );\n-            lc.login();\n+            LoginContext loginContext = new LoginContext( \"ldapnetworkconnection\",\n+                new SaslCallbackHandler( saslRequest ) );\n+            loginContext.login();\n \n-            BindFuture future = ( BindFuture ) Subject.doAs( lc.getSubject(), new PrivilegedExceptionAction<Object>()\n+            // Now, bind by calling the internal bindSasl method\n+            BindFuture future = ( BindFuture ) Subject.doAs( loginContext.getSubject(),\n+                new PrivilegedExceptionAction<Object>()\n             {\n                 public Object run() throws Exception\n                 {\n-                    return bindSasl( saslReq );\n+                    return bindSasl( saslRequest );\n                 }\n             } );\n \n@@ -3438,7 +3438,12 @@ private BindFuture bindSasl( String name, byte[] credentials, String saslMech, S\n     }\n \n \n-    private BindFuture bindSasl( SaslRequest saslReq ) throws LdapException, IOException\n+    /**\n+     * Process the SASL Bind. It's a dialog with the server, we will send a first BindRequest, receive\n+     * a response and the, if this response is a challenge, continue by sending a new BindRequest with\n+     * the requested informations.\n+     */\n+    private BindFuture bindSasl( SaslRequest saslRequest ) throws LdapException, IOException\n     {\n         // First switch to anonymous state\n         authenticated.set( false );\n@@ -3449,7 +3454,7 @@ private BindFuture bindSasl( SaslRequest saslReq ) throws LdapException, IOExcep\n         // If the session has not been establish, or is closed, we get out immediately\n         checkSession();\n \n-        BindRequest bindRequest = saslReq.getBindReq();\n+        BindRequest bindRequest = saslRequest.getBindRequest();\n \n         // Update the messageId\n         int newId = messageId.incrementAndGet();\n@@ -3461,6 +3466,7 @@ private BindFuture bindSasl( SaslRequest saslReq ) throws LdapException, IOExcep\n         // Create a future for this Bind operation\n         BindFuture bindFuture = new BindFuture( this, newId );\n \n+        // Store it in the future Map\n         addToFutureMap( newId, bindFuture );\n \n         try\n@@ -3469,49 +3475,72 @@ private BindFuture bindSasl( SaslRequest saslReq ) throws LdapException, IOExcep\n             byte[] response = null;\n             ResultCodeEnum result = null;\n \n-            SaslClient sc = Sasl.createSaslClient( new String[]\n-            { bindRequest.getSaslMechanism() }, saslReq.getAuthorizationId(), \"ldap\", config.getLdapHost(),\n-                saslReq.getSaslMechProps(), new SaslCallbackHandler( saslReq ) );\n-\n-            // handcode bindresponse and return\n+            SaslClient sc = Sasl.createSaslClient(\n+                new String[]\n+                    { bindRequest.getSaslMechanism() },\n+                saslRequest.getAuthorizationId(),\n+                \"ldap\",\n+                config.getLdapHost(),\n+                saslRequest.getSaslMechProps(),\n+                new SaslCallbackHandler( saslRequest ) );\n+\n+            // If the SaslClient wasn't created, that means we can't create the SASL client\n+            // for the requested mechanism. We then produce an Exception\n             if ( sc == null )\n             {\n-                removeFromFutureMaps( newId );\n-                bindResponse = new BindResponseImpl( newId );\n-                bindResponse.getLdapResult().setResultCode( ResultCodeEnum.AUTH_METHOD_NOT_SUPPORTED );\n-                bindFuture.set( bindResponse );\n-\n-                return bindFuture;\n+                String message = \"Cannot find a SASL factory for the \" + bindRequest.getSaslMechanism() + \" mechanism\";\n+                LOG.error( message );\n+                throw new LdapException( message );\n             }\n \n+            // Corner case : the SASL mech might send an initial challenge, and we have to \n+            // deal with it immediately.\n             if ( sc.hasInitialResponse() )\n             {\n-                response = sc.evaluateChallenge( new byte[0] );\n+                byte[] challengeResponse = sc.evaluateChallenge( new byte[0] );\n \n-                bindRequest.setCredentials( response );\n+                // Stores the challenge's response, and send it to the server \n+                bindRequest.setCredentials( challengeResponse );\n                 writeBindRequest( bindRequest );\n \n+                // Get the server's response, blocking\n                 bindResponse = bindFuture.get( timeout, TimeUnit.MILLISECONDS );\n+\n+                if ( bindResponse == null )\n+                {\n+                    // We didn't received anything : this is an error\n+                    LOG.error( \"bind failed : timeout occured\" );\n+                    throw new LdapException( TIME_OUT_ERROR );\n+                }\n+\n                 result = bindResponse.getLdapResult().getResultCode();\n             }\n             else\n             {\n-                // clone the bindRequest without setting the credentials\n-                BindRequest clonedReq = new BindRequestImpl( newId );\n-                clonedReq.setName( bindRequest.getName() );\n-                clonedReq.setSaslMechanism( bindRequest.getSaslMechanism() );\n-                clonedReq.setSimple( bindRequest.isSimple() );\n-                clonedReq.setVersion3( bindRequest.getVersion3() );\n-                clonedReq.addAllControls( bindRequest.getControls().values().toArray( new Control[0] ) );\n+                // Copy the bindRequest without setting the credentials\n+                BindRequest bindRequestCopy = new BindRequestImpl( newId );\n+                bindRequestCopy.setName( bindRequest.getName() );\n+                bindRequestCopy.setSaslMechanism( bindRequest.getSaslMechanism() );\n+                bindRequestCopy.setSimple( bindRequest.isSimple() );\n+                bindRequestCopy.setVersion3( bindRequest.getVersion3() );\n+                bindRequestCopy.addAllControls( bindRequest.getControls().values().toArray( new Control[0] ) );\n \n-                writeBindRequest( clonedReq );\n+                writeBindRequest( bindRequestCopy );\n \n                 bindResponse = bindFuture.get( timeout, TimeUnit.MILLISECONDS );\n+\n+                if ( bindResponse == null )\n+                {\n+                    // We didn't received anything : this is an error\n+                    LOG.error( \"bind failed : timeout occured\" );\n+                    throw new LdapException( TIME_OUT_ERROR );\n+                }\n+\n                 result = bindResponse.getLdapResult().getResultCode();\n             }\n \n             while ( !sc.isComplete()\n-                && ( result == ResultCodeEnum.SASL_BIND_IN_PROGRESS || result == ResultCodeEnum.SUCCESS ) )\n+                && ( ( result == ResultCodeEnum.SASL_BIND_IN_PROGRESS ) || ( result == ResultCodeEnum.SUCCESS ) ) )\n             {\n                 response = sc.evaluateChallenge( bindResponse.getServerSaslCreds() );\n \n@@ -3524,19 +3553,29 @@ private BindFuture bindSasl( SaslRequest saslReq ) throws LdapException, IOExcep\n                 }\n                 else\n                 {\n+                    newId = messageId.incrementAndGet();\n+                    bindRequest.setMessageId( newId );\n                     bindRequest.setCredentials( response );\n \n                     addToFutureMap( newId, bindFuture );\n \n                     writeBindRequest( bindRequest );\n \n                     bindResponse = bindFuture.get( timeout, TimeUnit.MILLISECONDS );\n+\n+                    if ( bindResponse == null )\n+                    {\n+                        // We didn't received anything : this is an error\n+                        LOG.error( \"bind failed : timeout occured\" );\n+                        throw new LdapException( TIME_OUT_ERROR );\n+                    }\n+\n                     result = bindResponse.getLdapResult().getResultCode();\n                 }\n-\n             }\n \n             bindFuture.set( bindResponse );\n+\n             return bindFuture;\n         }\n         catch ( LdapException e )\n@@ -3569,24 +3608,26 @@ private void writeBindRequest( BindRequest bindRequest ) throws LdapException\n         }\n     }\n \n-    \n+\n     /**\n      * method to write the kerberos config in the standard MIT kerberos format\n      * \n      * This is required cause the JGSS api is not able to recognize the port value set \n      * in the system property java.security.krb5.kdc this issue makes it impossible\n-     * to set a kdc running non standard port(other than 88)\n+     * to set a kdc running non standard ports (other than 88)\n      *  \n      * e.g localhost:6088\n      * \n+     * <pre>\n      * [libdefaults]\n      *     default_realm = EXAMPLE.COM\n      *\n      * [realms]\n      *     EXAMPLE.COM = {\n      *         kdc = localhost:6088\n      *     }\n-     *     \n+     * </pre>\n+     * \n      * @return the full path of the config file\n      */\n     private String createKrbConfFile( String realmName, String kdcHost, int kdcPort ) throws IOException",
                "additions": 79,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/d3264c017fbc1fd7a4d910f71874e58bccba6fc2/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "status": "modified",
                "changes": 117,
                "deletions": 38,
                "sha": "216e28ac0f3f5f81e11afccdd8bbd7db16f5e279",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/d3264c017fbc1fd7a4d910f71874e58bccba6fc2/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "filename": "ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/LdapNetworkConnection.java?ref=d3264c017fbc1fd7a4d910f71874e58bccba6fc2"
            },
            {
                "patch": "@@ -25,6 +25,7 @@\n import java.util.Map;\n \n import org.apache.directory.shared.ldap.message.BindRequest;\n+import org.apache.directory.shared.ldap.util.StringTools;\n \n \n /**\n@@ -35,7 +36,7 @@\n public class SaslRequest\n {\n     /** the bind request */\n-    private BindRequest bindReq;\n+    private BindRequest bindRequest;\n \n     /** the sasl mechaism's properties */\n     private Map<String, String> saslMechProps = new HashMap<String, String>();\n@@ -47,57 +48,110 @@\n     private String authorizationId;\n \n \n-    protected SaslRequest( BindRequest bindReq )\n+    /**\n+     * Creates a new instance of SaslRequest.\n+     *\n+     * @param bindReq The included BindRequest\n+     */\n+    protected SaslRequest( BindRequest bindRequest )\n     {\n-        this.bindReq = bindReq;\n+        this.bindRequest = bindRequest;\n     }\n \n \n-    public BindRequest getBindReq()\n+    /**\n+     * @return The interned BindRequest\n+     */\n+    public BindRequest getBindRequest()\n     {\n-        return bindReq;\n+        return bindRequest;\n     }\n \n \n+    /**\n+     * @return The supported SASL mechanisms\n+     */\n     public Map<String, String> getSaslMechProps()\n     {\n         return saslMechProps;\n     }\n \n \n+    /**\n+     * Set the supported SASL mechanisms\n+     *\n+     * @param saslMechProps The list of supported mechanisms\n+     */\n     public void setSaslMechProps( Map<String, String> saslMechProps )\n     {\n         this.saslMechProps = saslMechProps;\n     }\n \n \n+    /**\n+     * @return The realm name\n+     */\n     public String getRealmName()\n     {\n         return realmName;\n     }\n \n \n+    /**\n+     * Set the realm Name\n+     * @param realmName The realm name\n+     */\n     public void setRealmName( String realmName )\n     {\n         this.realmName = realmName;\n     }\n \n \n+    /**\n+     * @return The authorization Id\n+     */\n     public String getAuthorizationId()\n     {\n         return authorizationId;\n     }\n \n \n+    /**\n+     * Sets the Authorization ID\n+     *\n+     * @param authorizationId The authorization ID\n+     */\n     public void setAuthorizationId( String authorizationId )\n     {\n         this.authorizationId = authorizationId;\n     }\n \n \n-    public void setBindReq( BindRequest bindReq )\n+    /**\n+     * Sets the interned BindRequest\n+     *\n+     * @param bindRequest The interned BindRequest\n+     */\n+    public void setBindRequest( BindRequest bindRequest )\n     {\n-        this.bindReq = bindReq;\n+        this.bindRequest = bindRequest;\n     }\n \n+\n+    /**\n+     * @return the credentials\n+     */\n+    public byte[] getCredentials()\n+    {\n+        byte[] credentials = bindRequest.getCredentials();\n+\n+        if ( credentials != null )\n+        {\n+            return credentials;\n+        }\n+        else\n+        {\n+            return StringTools.EMPTY_BYTES;\n+        }\n+    }\n }",
                "additions": 61,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/d3264c017fbc1fd7a4d910f71874e58bccba6fc2/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/SaslRequest.java",
                "status": "modified",
                "changes": 68,
                "deletions": 7,
                "sha": "641ef2afe38e71a80a883f0cf572402ec06d135f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/d3264c017fbc1fd7a4d910f71874e58bccba6fc2/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/SaslRequest.java",
                "filename": "ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/SaslRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/SaslRequest.java?ref=d3264c017fbc1fd7a4d910f71874e58bccba6fc2"
            },
            {
                "patch": "@@ -62,7 +62,7 @@ public void handle( Callback[] callbacks ) throws IOException, UnsupportedCallba\n             {\n                 NameCallback ncb = ( NameCallback ) cb;\n                 \n-                String name = saslReq.getBindReq().getName().getRdn().getUpValue().getString();\n+                String name = saslReq.getBindRequest().getName().getRdn().getUpValue().getString();\n                 LOG.debug( \"sending name {} in the NameCallback\", name );\n                 \n                 ncb.setName( name );\n@@ -72,7 +72,7 @@ else if ( cb instanceof PasswordCallback )\n             {\n                 PasswordCallback pcb = ( PasswordCallback ) cb;\n                 LOG.debug( \"sending credentials in the PasswordCallback\" );\n-                pcb.setPassword( StringTools.utf8ToString( saslReq.getBindReq().getCredentials() ).toCharArray() );\n+                pcb.setPassword( StringTools.utf8ToString( saslReq.getCredentials() ).toCharArray() );\n             }\n             \n             else if( cb instanceof RealmCallback )\n@@ -82,7 +82,7 @@ else if( cb instanceof RealmCallback )\n                 if( saslReq.getRealmName() != null )\n                 {\n                     LOG.debug( \"sending the user specified realm value {} in the RealmCallback\", saslReq.getRealmName() );\n-                    rcb.setText( saslReq.getRealmName() );                    \n+                    rcb.setText( saslReq.getRealmName() );\n                 }\n                 else\n                 {",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/d3264c017fbc1fd7a4d910f71874e58bccba6fc2/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/callback/SaslCallbackHandler.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "a687fcba3a79a9ff222ce8b47777bfa0b7d565a8",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/d3264c017fbc1fd7a4d910f71874e58bccba6fc2/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/callback/SaslCallbackHandler.java",
                "filename": "ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/callback/SaslCallbackHandler.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-client-api/src/main/java/org/apache/directory/ldap/client/api/callback/SaslCallbackHandler.java?ref=d3264c017fbc1fd7a4d910f71874e58bccba6fc2"
            }
        ],
        "bug_id": "directory-ldap-api_72",
        "parent": "https://github.com/apache/directory-ldap-api/commit/2399ba4b87fd2939bc88b0bda705373f23fff4a2",
        "message": "o When we can't find a SaslFactory for a mechanism, throw an exception instead of forging a BindResponse object\no Added some comments\no Included Kiran's patch for DIRAPI-30\no Fixed some potential NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@999888 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/486eae3ec6644c2239d83c6a00ec9405324c0de1",
        "file": [
            {
                "patch": "@@ -198,17 +198,30 @@ public void testGeneralizedTimeStringMatch() throws Exception\n     {\n         MatchingRule mr1 = schemaManager.lookupMatchingRuleRegistry( \"generalizedTimeMatch\" );\n         assertEquals( GeneralizedTimeNormalizer.class.getName(), mr1.getNormalizer().getClass().getName() );\n-        assertEquals( \"20100314150000.000Z\", mr1.getNormalizer().normalize( \"2010031415Z\" ) );\n+        \n+        String normalized = mr1.getNormalizer().normalize( \"2010031415Z\" );\n+        assertTrue( \"20100314150000.000Z\".equals( normalized ) || \"20100314153000.000Z\".equals( normalized ) || \"20100314154500.000Z\".equals( normalized ) );\n         assertEquals( \"20100314133102.003Z\", mr1.getNormalizer().normalize( \"20100314150102.003+0130\" ) );\n         assertEquals( GeneralizedTimeComparator.class.getName(), mr1.getLdapComparator().getClass().getName() );\n-        assertEquals( 0, mr1.getLdapComparator().compare( \"2010031415Z\", \"20100314150000.000+0000\" ) );\n+\n+        // Deal with +HH:30 and +HH:45 TZ\n+        int compare1 = mr1.getLdapComparator().compare( \"2010031415Z\", \"20100314150000.000+0000\" );\n+        int compare2 = mr1.getLdapComparator().compare( \"2010031415Z\", \"20100314153000.000+0000\" );\n+        int compare3 = mr1.getLdapComparator().compare( \"2010031415Z\", \"20100314154500.000+0000\" );\n+        assertTrue( ( compare1 == 0 ) || ( compare2 == 0 ) || ( compare3 == 0 ) );\n \n         MatchingRule mr2 = schemaManager.lookupMatchingRuleRegistry( \"generalizedTimeOrderingMatch\" );\n         assertEquals( GeneralizedTimeNormalizer.class.getName(), mr2.getNormalizer().getClass().getName() );\n-        assertEquals( \"20100314150000.000Z\", mr2.getNormalizer().normalize( \"2010031415Z\" ) );\n+        normalized = mr2.getNormalizer().normalize( \"2010031415Z\" );\n+        assertTrue( \"20100314150000.000Z\".equals( normalized ) || \"20100314153000.000Z\".equals( normalized ) || \"20100314154500.000Z\".equals( normalized ) );\n         assertEquals( \"20100314133102.003Z\", mr2.getNormalizer().normalize( \"20100314150102.003+0130\" ) );\n         assertEquals( GeneralizedTimeComparator.class.getName(), mr2.getLdapComparator().getClass().getName() );\n-        assertEquals( 0, mr2.getLdapComparator().compare( \"2010031415Z\", \"20100314150000.000+0000\" ) );\n+\n+        // Deal with +HH:30 and +HH:45 TZ\n+        compare1 = mr2.getLdapComparator().compare( \"2010031415Z\", \"20100314150000.000+0000\" );\n+        compare2 = mr2.getLdapComparator().compare( \"2010031415Z\", \"20100314153000.000+0000\" );\n+        compare3 = mr2.getLdapComparator().compare( \"2010031415Z\", \"20100314154500.000+0000\" );\n+        assertTrue( ( compare1 == 0 ) || ( compare2 == 0 ) || ( compare3 == 0 ) );\n         assertTrue( mr2.getLdapComparator().compare( \"2010031415Z\", \"2010031414Z\" ) > 0 );\n         assertTrue( mr2.getLdapComparator().compare( \"2010031415Z\", \"2010031416Z\" ) < 0 );\n     }",
                "additions": 17,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/486eae3ec6644c2239d83c6a00ec9405324c0de1/ldap-schema-manager/src/test/java/org/apache/directory/shared/ldap/schema/loader/ldif/MatchingRuleTest.java",
                "status": "modified",
                "changes": 21,
                "deletions": 4,
                "sha": "90628f5e036a07d1faea46c0971926e141590073",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/486eae3ec6644c2239d83c6a00ec9405324c0de1/ldap-schema-manager/src/test/java/org/apache/directory/shared/ldap/schema/loader/ldif/MatchingRuleTest.java",
                "filename": "ldap-schema-manager/src/test/java/org/apache/directory/shared/ldap/schema/loader/ldif/MatchingRuleTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-manager/src/test/java/org/apache/directory/shared/ldap/schema/loader/ldif/MatchingRuleTest.java?ref=486eae3ec6644c2239d83c6a00ec9405324c0de1"
            }
        ],
        "bug_id": "directory-ldap-api_73",
        "parent": "https://github.com/apache/directory-ldap-api/commit/7e2290b8fddbec559cdf93c0f5dd187b30f1170a",
        "message": "Fixed the test to make it work on all the TZ (including IST which is +5:30 and NPE which is +5:45)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@956333 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256",
        "file": [
            {
                "patch": "@@ -22,6 +22,10 @@\n import org.apache.directory.shared.ldap.exception.LdapException;\n \n import org.apache.directory.shared.i18n.I18n;\n+import org.apache.directory.shared.ldap.schema.AttributeType;\n+import org.apache.directory.shared.ldap.schema.LdapComparator;\n+import org.apache.directory.shared.ldap.schema.MatchingRule;\n+import org.apache.directory.shared.ldap.schema.Normalizer;\n import org.apache.directory.shared.ldap.schema.SyntaxChecker;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -38,9 +42,11 @@\n     /** logger for reporting errors that might not be handled properly upstream */\n     private static final Logger LOG = LoggerFactory.getLogger( AbstractValue.class );\n \n-    \n+    /** reference to the attributeType zssociated with the value */\n+    protected transient AttributeType attributeType;\n+\n     /** the wrapped binary value */\n-    protected T wrapped;\n+    protected T wrappedValue;\n     \n     /** the canonical representation of the wrapped value */\n     protected T normalizedValue;\n@@ -54,18 +60,6 @@\n     /** A flag set if the normalized data is different from the wrapped data */\n     protected transient boolean same;\n     \n-    /**\n-     * Reset the value\n-     */\n-    public void clear()\n-    {\n-        wrapped = null;\n-        normalized = false;\n-        normalizedValue = null;\n-        valid = null;\n-    }\n-\n-    \n     /**\n      * {@inheritDoc}\n      */\n@@ -92,10 +86,164 @@ public void clear()\n      */\n     public T getReference()\n     {\n-        return wrapped;\n+        return wrappedValue;\n+    }\n+\n+    \n+    /**\n+     * Get the associated AttributeType\n+     * @return The AttributeType\n+     */\n+    public AttributeType getAttributeType()\n+    {\n+        return attributeType;\n+    }\n+\n+    \n+    public void apply( AttributeType attributeType )\n+    {\n+        if ( this.attributeType != null ) \n+        {\n+            if ( !attributeType.equals( this.attributeType ) )\n+            {\n+                throw new IllegalArgumentException( I18n.err( I18n.ERR_04476, attributeType.getName(), this.attributeType.getName() ) );\n+            }\n+            else\n+            {\n+                return;\n+            }\n+        }\n+        \n+        this.attributeType = attributeType;\n+        \n+        try\n+        {\n+            normalize();\n+        }\n+        catch ( LdapException ne )\n+        {\n+            String message = I18n.err( I18n.ERR_04447, ne.getLocalizedMessage() );\n+            LOG.info( message );\n+            normalized = false;\n+        }\n     }\n \n+\n+    /**\n+     * Gets a comparator using getMatchingRule() to resolve the matching\n+     * that the comparator is extracted from.\n+     *\n+     * @return a comparator associated with the attributeType or null if one cannot be found\n+     * @throws LdapException if resolution of schema entities fail\n+     */\n+    protected LdapComparator<T> getLdapComparator() throws LdapException\n+    {\n+        if ( attributeType != null )\n+        {\n+            MatchingRule mr = getMatchingRule();\n+    \n+            if ( mr == null )\n+            {\n+                return null;\n+            }\n+    \n+            return (LdapComparator<T>)mr.getLdapComparator();\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n+    \n     \n+    /**\n+     * Find a matchingRule to use for normalization and comparison.  If an equality\n+     * matchingRule cannot be found it checks to see if other matchingRules are\n+     * available: SUBSTR, and ORDERING.  If a matchingRule cannot be found null is\n+     * returned.\n+     *\n+     * @return a matchingRule or null if one cannot be found for the attributeType\n+     * @throws LdapException if resolution of schema entities fail\n+     */\n+    protected MatchingRule getMatchingRule() throws LdapException\n+    {\n+        if ( attributeType != null )\n+        {\n+            MatchingRule mr = attributeType.getEquality();\n+    \n+            if ( mr == null )\n+            {\n+                mr = attributeType.getOrdering();\n+            }\n+    \n+            if ( mr == null )\n+            {\n+                mr = attributeType.getSubstring();\n+            }\n+    \n+            return mr;\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n+\n+\n+    /**\n+     * Gets a normalizer using getMatchingRule() to resolve the matchingRule\n+     * that the normalizer is extracted from.\n+     *\n+     * @return a normalizer associated with the attributeType or null if one cannot be found\n+     * @throws LdapException if resolution of schema entities fail\n+     */\n+    protected Normalizer getNormalizer() throws LdapException\n+    {\n+        if ( attributeType != null )\n+        {\n+            MatchingRule mr = getMatchingRule();\n+    \n+            if ( mr == null )\n+            {\n+                return null;\n+            }\n+    \n+            return mr.getNormalizer();\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n+\n+    \n+    /**\n+     * Check if the value is stored into an instance of the given \n+     * AttributeType, or one of its ascendant.\n+     * \n+     * For instance, if the Value is associated with a CommonName,\n+     * checking for Name will match.\n+     * \n+     * @param attributeType The AttributeType we are looking at\n+     * @return <code>true</code> if the value is associated with the given\n+     * attributeType or one of its ascendant\n+     */\n+    public boolean instanceOf( AttributeType attributeType ) throws LdapException\n+    {\n+        if ( ( attributeType != null ) && this.attributeType.equals( attributeType ) )\n+        {\n+            if ( this.attributeType.equals( attributeType ) )\n+            {\n+                return true;\n+            }\n+            \n+            return this.attributeType.isDescendantOf( attributeType );\n+        }\n+\n+        return false;\n+    }\n+\n+\n     /**\n      * Gets a copy of the wrapped binary value.\n      * \n@@ -147,7 +295,7 @@ public T getNormalizedValueReference()\n \n         if ( normalizedValue == null )\n         {\n-            return wrapped;\n+            return wrappedValue;\n         }\n \n         return normalizedValue;\n@@ -162,7 +310,7 @@ public T getNormalizedValueReference()\n      */\n     public final boolean isNull()\n     {\n-        return wrapped == null; \n+        return wrappedValue == null; \n     }\n     \n     \n@@ -175,26 +323,35 @@ public final boolean isSame()\n     }\n \n     \n-    /**\n-     * Check if the Valid flag is set or not. This flag is set by a call\n-     * to the isValid( SyntaxChecker ) method for client values. It is overridden\n-     * for server values.\n-     * \n-     * if the flag is not set, returns <code>false</code>\n+    /** \n+     * Uses the syntaxChecker associated with the attributeType to check if the\n+     * value is valid.  Repeated calls to this method do not attempt to re-check\n+     * the syntax of the wrapped value every time if the wrapped value does not\n+     * change. Syntax checks only result on the first check, and when the wrapped\n+     * value changes.\n      *\n-     * @see ServerValue#isValid()\n+     * @see Value#isValid()\n      */\n-    public boolean isValid()\n+    public final boolean isValid()\n     {\n         if ( valid != null )\n         {\n             return valid;\n         }\n \n-        return false;\n+        if ( attributeType != null )\n+        {\n+            valid = attributeType.getSyntax().getSyntaxChecker().isValidSyntax( get() );\n+        }\n+        else\n+        {\n+            valid = false;\n+        }\n+        \n+        return valid;\n     }\n-\n-\n+    \n+    \n     /**\n      * Uses the syntaxChecker associated with the attributeType to check if the\n      * value is valid.  Repeated calls to this method do not attempt to re-check\n@@ -206,11 +363,6 @@ public boolean isValid()\n      */\n     public final boolean isValid( SyntaxChecker syntaxChecker ) throws LdapException\n     {\n-        if ( valid != null )\n-        {\n-            return valid;\n-        }\n-        \n         if ( syntaxChecker == null )\n         {\n             String message = I18n.err( I18n.ERR_04139, toString() );\n@@ -219,6 +371,7 @@ public final boolean isValid( SyntaxChecker syntaxChecker ) throws LdapException\n         }\n         \n         valid = syntaxChecker.isValidSyntax( getReference() );\n+        \n         return valid;\n     }\n \n@@ -232,7 +385,7 @@ public final boolean isValid( SyntaxChecker syntaxChecker ) throws LdapException\n     public void normalize() throws LdapException\n     {\n         normalized = true;\n-        normalizedValue = wrapped;\n+        normalizedValue = wrappedValue;\n     }\n \n ",
                "additions": 187,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/main/java/org/apache/directory/shared/ldap/entry/AbstractValue.java",
                "status": "modified",
                "changes": 221,
                "deletions": 34,
                "sha": "d89e2f6568fb8a568f6142ac446d166793411603",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/main/java/org/apache/directory/shared/ldap/entry/AbstractValue.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/entry/AbstractValue.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/entry/AbstractValue.java?ref=ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256"
            },
            {
                "patch": "@@ -31,7 +31,6 @@\n import org.apache.directory.shared.i18n.I18n;\r\n import org.apache.directory.shared.ldap.schema.AttributeType;\r\n import org.apache.directory.shared.ldap.schema.LdapComparator;\r\n-import org.apache.directory.shared.ldap.schema.MatchingRule;\r\n import org.apache.directory.shared.ldap.schema.Normalizer;\r\n import org.apache.directory.shared.ldap.schema.comparators.ByteArrayComparator;\r\n import org.apache.directory.shared.ldap.util.StringTools;\r\n@@ -56,17 +55,14 @@\n     /** logger for reporting errors that might not be handled properly upstream */\r\n     protected static final Logger LOG = LoggerFactory.getLogger( BinaryValue.class );\r\n     \r\n-    /** reference to the attributeType which is not serialized */\r\n-    protected transient AttributeType attributeType;\r\n-\r\n     /**\r\n      * Creates a BinaryValue without an initial wrapped value.\r\n      *\r\n      * @param attributeType the schema type associated with this BinaryValue\r\n      */\r\n     public BinaryValue()\r\n     {\r\n-        wrapped = null;\r\n+        wrappedValue = null;\r\n         normalized = false;\r\n         valid = null;\r\n         normalizedValue = null;\r\n@@ -103,18 +99,18 @@ public BinaryValue( AttributeType attributeType )\n      * Creates a BinaryValue with an initial wrapped binary value.\r\n      *\r\n      * @param attributeType the schema type associated with this BinaryValue\r\n-     * @param wrapped the binary value to wrap which may be null, or a zero length byte array\r\n+     * @param value the binary value to wrap which may be null, or a zero length byte array\r\n      */\r\n-    public BinaryValue( byte[] wrapped )\r\n+    public BinaryValue( byte[] value )\r\n     {\r\n-        if ( wrapped != null )\r\n+        if ( value != null )\r\n         {\r\n-            this.wrapped = new byte[ wrapped.length ];\r\n-            System.arraycopy( wrapped, 0, this.wrapped, 0, wrapped.length );\r\n+            this.wrappedValue = new byte[ value.length ];\r\n+            System.arraycopy( value, 0, this.wrappedValue, 0, value.length );\r\n         }\r\n         else\r\n         {\r\n-            this.wrapped = null;\r\n+            this.wrappedValue = null;\r\n         }\r\n         \r\n         normalized = false;\r\n@@ -127,32 +123,18 @@ public BinaryValue( byte[] wrapped )\n      * Creates a BinaryValue with an initial wrapped binary value.\r\n      *\r\n      * @param attributeType the schema type associated with this BinaryValue\r\n-     * @param wrapped the binary value to wrap which may be null, or a zero length byte array\r\n+     * @param value the binary value to wrap which may be null, or a zero length byte array\r\n      */\r\n-    public BinaryValue( AttributeType attributeType, byte[] wrapped )\r\n+    public BinaryValue( AttributeType attributeType, byte[] value )\r\n     {\r\n         this( attributeType );\r\n-        this.wrapped = wrapped;\r\n+        this.wrappedValue = value;\r\n     }\r\n \r\n \r\n     // -----------------------------------------------------------------------\r\n     // Value<String> Methods\r\n     // -----------------------------------------------------------------------\r\n-    /**\r\n-     * Reset the value\r\n-     */\r\n-    public void clear()\r\n-    {\r\n-        wrapped = null;\r\n-        normalized = false;\r\n-        normalizedValue = null;\r\n-        valid = null;\r\n-    }\r\n-\r\n-\r\n-\r\n-\r\n     /*\r\n      * Sets the wrapped binary value.  Has the side effect of setting the\r\n      * normalizedValue and the valid flags to null if the wrapped value is\r\n@@ -161,15 +143,13 @@ public void clear()\n      *\r\n      * @see ServerValue#set(Object)\r\n      */\r\n-    public final void set( byte[] wrapped )\r\n+    public final void set( byte[] value )\r\n     {\r\n         // Why should we invalidate the normalized value if it's we're setting the\r\n         // wrapper to it's current value?\r\n-        byte[] value = getReference();\r\n-        \r\n-        if ( value != null )\r\n+        if ( wrappedValue != null )\r\n         {\r\n-            if ( Arrays.equals( wrapped, value ) )\r\n+            if ( Arrays.equals( value, wrappedValue ) )\r\n             {\r\n                 return;\r\n             }\r\n@@ -179,50 +159,18 @@ public final void set( byte[] wrapped )\n         normalized = false;\r\n         valid = null;\r\n         \r\n-        if ( wrapped == null )\r\n+        if ( value == null )\r\n         {\r\n-            this.wrapped = null;\r\n+            this.wrappedValue = null;\r\n         }\r\n         else\r\n         {\r\n-            this.wrapped = new byte[ wrapped.length ];\r\n-            System.arraycopy( wrapped, 0, this.wrapped, 0, wrapped.length );\r\n+            this.wrappedValue = new byte[ value.length ];\r\n+            System.arraycopy( value, 0, this.wrappedValue, 0, value.length );\r\n         }\r\n     }\r\n \r\n \r\n-    /**\r\n-     * Get the associated AttributeType\r\n-     * @return The AttributeType\r\n-     */\r\n-    public AttributeType getAttributeType()\r\n-    {\r\n-        return attributeType;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Check if the value is stored into an instance of the given \r\n-     * AttributeType, or one of its ascendant.\r\n-     * \r\n-     * For instance, if the Value is associated with a CommonName,\r\n-     * checking for Name will match.\r\n-     * \r\n-     * @param attributeType The AttributeType we are looking at\r\n-     * @return <code>true</code> if the value is associated with the given\r\n-     * attributeType or one of its ascendant\r\n-     */\r\n-    public boolean instanceOf( AttributeType attributeType ) throws LdapException\r\n-    {\r\n-        if ( this.attributeType.equals( attributeType ) )\r\n-        {\r\n-            return true;\r\n-        }\r\n-\r\n-        return this.attributeType.isDescendantOf( attributeType );\r\n-    }\r\n-\r\n-\r\n     // -----------------------------------------------------------------------\r\n     // ServerValue<String> Methods\r\n     // -----------------------------------------------------------------------\r\n@@ -306,7 +254,7 @@ public boolean instanceOf( AttributeType attributeType ) throws LdapException\n         }\r\n         else\r\n         {\r\n-            return wrapped;\r\n+            return wrappedValue;\r\n         }\r\n     }\r\n \r\n@@ -340,22 +288,22 @@ public final void normalize( Normalizer normalizer ) throws LdapException\n     {\r\n         if ( normalizer != null )\r\n         {\r\n-            if ( wrapped == null )\r\n+            if ( wrappedValue == null )\r\n             {\r\n-                normalizedValue = wrapped;\r\n+                normalizedValue = wrappedValue;\r\n                 normalized = true;\r\n                 same = true;\r\n             }\r\n             else\r\n             {\r\n                 normalizedValue = normalizer.normalize( this ).getBytes();\r\n                 normalized = true;\r\n-                same = Arrays.equals( wrapped, normalizedValue );\r\n+                same = Arrays.equals( wrappedValue, normalizedValue );\r\n             }\r\n         }\r\n         else\r\n         {\r\n-            normalizedValue = wrapped;\r\n+            normalizedValue = wrappedValue;\r\n             normalized = false;\r\n             same = true;\r\n         }\r\n@@ -380,7 +328,7 @@ public void normalize() throws LdapException\n         }\r\n         else\r\n         {\r\n-            normalizedValue = wrapped;\r\n+            normalizedValue = wrappedValue;\r\n             normalized = true;\r\n             same = true;\r\n         }\r\n@@ -420,7 +368,7 @@ public int compareTo( Value<byte[]> value )\n         {\r\n             try\r\n             {\r\n-                Comparator<byte[]> comparator = (Comparator<byte[]>)getLdapComparator();\r\n+                LdapComparator<byte[]> comparator = getLdapComparator();\r\n \r\n                 if ( comparator != null )\r\n                 {\r\n@@ -472,73 +420,6 @@ public int hashCode()\n     }\r\n \r\n \r\n-    /**\r\n-     * Find a matchingRule to use for normalization and comparison.  If an equality\r\n-     * matchingRule cannot be found it checks to see if other matchingRules are\r\n-     * available: SUBSTR, and ORDERING.  If a matchingRule cannot be found null is\r\n-     * returned.\r\n-     *\r\n-     * @return a matchingRule or null if one cannot be found for the attributeType\r\n-     * @throws LdapException if resolution of schema entities fail\r\n-     */\r\n-    private MatchingRule getMatchingRule() throws LdapException\r\n-    {\r\n-        MatchingRule mr = attributeType.getEquality();\r\n-\r\n-        if ( mr == null )\r\n-        {\r\n-            mr = attributeType.getOrdering();\r\n-        }\r\n-\r\n-        if ( mr == null )\r\n-        {\r\n-            mr = attributeType.getSubstring();\r\n-        }\r\n-\r\n-        return mr;\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * Gets a comparator using getMatchingRule() to resolve the matching\r\n-     * that the comparator is extracted from.\r\n-     *\r\n-     * @return a comparator associated with the attributeType or null if one cannot be found\r\n-     * @throws LdapException if resolution of schema entities fail\r\n-     */\r\n-    private LdapComparator<?> getLdapComparator() throws LdapException\r\n-    {\r\n-        MatchingRule mr = getMatchingRule();\r\n-\r\n-        if ( mr == null )\r\n-        {\r\n-            return null;\r\n-        }\r\n-\r\n-        return mr.getLdapComparator();\r\n-    }\r\n-    \r\n-    \r\n-    /**\r\n-     * Gets a normalizer using getMatchingRule() to resolve the matchingRule\r\n-     * that the normalizer is extracted from.\r\n-     *\r\n-     * @return a normalizer associated with the attributeType or null if one cannot be found\r\n-     * @throws LdapException if resolution of schema entities fail\r\n-     */\r\n-    private Normalizer getNormalizer() throws LdapException\r\n-    {\r\n-        MatchingRule mr = getMatchingRule();\r\n-\r\n-        if ( mr == null )\r\n-        {\r\n-            return null;\r\n-        }\r\n-\r\n-        return mr.getNormalizer();\r\n-    }\r\n-\r\n-\r\n     /**\r\n      * Checks to see if this BinaryValue equals the supplied object.\r\n      *\r\n@@ -589,7 +470,7 @@ else if ( other.attributeType != null )\n \r\n         // Shortcut : if the values are equals, no need to compare\r\n         // the normalized values\r\n-        if ( Arrays.equals( wrapped, other.get() ) )\r\n+        if ( Arrays.equals( wrappedValue, other.wrappedValue ) )\r\n         {\r\n             return true;\r\n         }\r\n@@ -641,10 +522,10 @@ public BinaryValue clone()\n             System.arraycopy( normalizedValue, 0, clone.normalizedValue, 0, normalizedValue.length );\r\n         }\r\n         \r\n-        if ( wrapped != null )\r\n+        if ( wrappedValue != null )\r\n         {\r\n-            clone.wrapped = new byte[ wrapped.length ];\r\n-            System.arraycopy( wrapped, 0, clone.wrapped, 0, wrapped.length );\r\n+            clone.wrappedValue = new byte[ wrappedValue.length ];\r\n+            System.arraycopy( wrappedValue, 0, clone.wrappedValue, 0, wrappedValue.length );\r\n         }\r\n         \r\n         return clone;\r\n@@ -658,14 +539,14 @@ public BinaryValue clone()\n      */\r\n     public byte[] getCopy()\r\n     {\r\n-        if ( wrapped == null )\r\n+        if ( wrappedValue == null )\r\n         {\r\n             return null;\r\n         }\r\n \r\n         \r\n-        final byte[] copy = new byte[ wrapped.length ];\r\n-        System.arraycopy( wrapped, 0, copy, 0, wrapped.length );\r\n+        final byte[] copy = new byte[ wrappedValue.length ];\r\n+        System.arraycopy( wrappedValue, 0, copy, 0, wrappedValue.length );\r\n         return copy;\r\n     }\r\n     \r\n@@ -681,41 +562,12 @@ public boolean isBinary()\n     }\r\n     \r\n     \r\n-    /**\r\n-     * Uses the syntaxChecker associated with the attributeType to check if the\r\n-     * value is valid.  Repeated calls to this method do not attempt to re-check\r\n-     * the syntax of the wrapped value every time if the wrapped value does not\r\n-     * change. Syntax checks only result on the first check, and when the wrapped\r\n-     * value changes.\r\n-     *\r\n-     * @see Value#isValid()\r\n-     */\r\n-    public final boolean isValid()\r\n-    {\r\n-        if ( valid != null )\r\n-        {\r\n-            return valid;\r\n-        }\r\n-\r\n-        if ( attributeType != null )\r\n-        {\r\n-            valid = attributeType.getSyntax().getSyntaxChecker().isValidSyntax( getReference() );\r\n-            return valid;\r\n-        }\r\n-        else\r\n-        {\r\n-            // Always false if we don't have an AttributeType\r\n-            return false;\r\n-        }\r\n-    }\r\n-\r\n-\r\n     /**\r\n      * @return The length of the interned value\r\n      */\r\n     public int length()\r\n     {\r\n-        return wrapped != null ? wrapped.length : 0;\r\n+        return wrappedValue != null ? wrappedValue.length : 0;\r\n     }\r\n \r\n \r\n@@ -738,7 +590,7 @@ public int length()\n      */\r\n     public String getString()\r\n     {\r\n-        return StringTools.utf8ToString( wrapped );\r\n+        return StringTools.utf8ToString( wrappedValue );\r\n     }\r\n     \r\n     \r\n@@ -752,11 +604,11 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n         \r\n         if ( wrappedLength >= 0 )\r\n         {\r\n-            wrapped = new byte[wrappedLength];\r\n+            wrappedValue = new byte[wrappedLength];\r\n             \r\n             if ( wrappedLength > 0 )\r\n             {\r\n-                in.read( wrapped );\r\n+                in.read( wrappedValue );\r\n             }\r\n         }\r\n         \r\n@@ -786,13 +638,13 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n     public void writeExternal( ObjectOutput out ) throws IOException\r\n     {\r\n         // Write the wrapped value, if it's not null\r\n-        if ( wrapped != null )\r\n+        if ( wrappedValue != null )\r\n         {\r\n-            out.writeInt( wrapped.length );\r\n+            out.writeInt( wrappedValue.length );\r\n             \r\n-            if ( wrapped.length > 0 )\r\n+            if ( wrappedValue.length > 0 )\r\n             {\r\n-                out.write( wrapped, 0, wrapped.length );\r\n+                out.write( wrappedValue, 0, wrappedValue.length );\r\n             }\r\n         }\r\n         else\r\n@@ -847,16 +699,16 @@ public void writeExternal( ObjectOutput out ) throws IOException\n      */\r\n     public void serialize( ObjectOutput out ) throws IOException\r\n     {\r\n-        if ( wrapped != null )\r\n+        if ( wrappedValue != null )\r\n         {\r\n             // write a the wrapped length\r\n-            out.writeInt( wrapped.length );\r\n+            out.writeInt( wrappedValue.length );\r\n \r\n             // Write the data if not empty\r\n-            if ( wrapped.length > 0 )\r\n+            if ( wrappedValue.length > 0 )\r\n             {\r\n                 // The data\r\n-                out.write( wrapped );\r\n+                out.write( wrappedValue );\r\n \r\n                 // Normalize the data\r\n                 try\r\n@@ -929,21 +781,21 @@ public void deserialize( ObjectInput in ) throws IOException, ClassNotFoundExcep\n         {\r\n             // If the value is null, the length will be set to -1\r\n             same = true;\r\n-            wrapped = null;\r\n+            wrappedValue = null;\r\n         }\r\n         else if ( wrappedLength == 0 )\r\n         {\r\n-            wrapped = StringTools.EMPTY_BYTES;\r\n+            wrappedValue = StringTools.EMPTY_BYTES;\r\n             same = true;\r\n             normalized = true;\r\n-            normalizedValue = wrapped;\r\n+            normalizedValue = wrappedValue;\r\n         }\r\n         else\r\n         {\r\n-            wrapped = new byte[wrappedLength];\r\n+            wrappedValue = new byte[wrappedLength];\r\n \r\n             // Read the data\r\n-            in.readFully( wrapped );\r\n+            in.readFully( wrappedValue );\r\n \r\n             // Check if we have a normalized value\r\n             normalized = in.readBoolean();\r\n@@ -973,7 +825,7 @@ else if ( wrappedLength == 0 )\n                 else\r\n                 {\r\n                     normalizedValue = new byte[wrappedLength];\r\n-                    System.arraycopy( wrapped, 0, normalizedValue, 0, wrappedLength );\r\n+                    System.arraycopy( wrappedValue, 0, normalizedValue, 0, wrappedLength );\r\n                 }\r\n             }\r\n         }\r\n@@ -987,22 +839,22 @@ else if ( wrappedLength == 0 )\n      */\r\n     public String toString()\r\n     {\r\n-        if ( wrapped == null )\r\n+        if ( wrappedValue == null )\r\n         {\r\n             return \"null\";\r\n         }\r\n-        else if ( wrapped.length > 16 )\r\n+        else if ( wrappedValue.length > 16 )\r\n         {\r\n             // Just dump the first 16 bytes...\r\n             byte[] copy = new byte[16];\r\n             \r\n-            System.arraycopy( wrapped, 0, copy, 0, 16 );\r\n+            System.arraycopy( wrappedValue, 0, copy, 0, 16 );\r\n             \r\n             return \"'\" + StringTools.dumpBytes( copy ) + \"...'\";\r\n         }\r\n         else\r\n         {\r\n-            return \"'\" + StringTools.dumpBytes( wrapped ) + \"'\";\r\n+            return \"'\" + StringTools.dumpBytes( wrappedValue ) + \"'\";\r\n         }\r\n     }\r\n }\n\\ No newline at end of file",
                "additions": 53,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/main/java/org/apache/directory/shared/ldap/entry/BinaryValue.java",
                "status": "modified",
                "changes": 254,
                "deletions": 201,
                "sha": "8dd3a64cb2921a7a431c3dd14fa3c1f54eb146fc",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/main/java/org/apache/directory/shared/ldap/entry/BinaryValue.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/entry/BinaryValue.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/entry/BinaryValue.java?ref=ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256"
            },
            {
                "patch": "@@ -30,7 +30,6 @@\n import org.apache.directory.shared.ldap.NotImplementedException;\n import org.apache.directory.shared.ldap.schema.AttributeType;\n import org.apache.directory.shared.ldap.schema.LdapComparator;\n-import org.apache.directory.shared.ldap.schema.MatchingRule;\n import org.apache.directory.shared.ldap.schema.Normalizer;\n import org.apache.directory.shared.ldap.util.StringTools;\n import org.slf4j.Logger;\n@@ -54,9 +53,6 @@\n     /** logger for reporting errors that might not be handled properly upstream */\n     protected static final Logger LOG = LoggerFactory.getLogger( StringValue.class );\n \n-    /** reference to the attributeType which is not serialized */\n-    protected transient AttributeType attributeType;\n-\n \n     // -----------------------------------------------------------------------\n     // Constructors\n@@ -101,11 +97,11 @@ public StringValue( AttributeType attributeType )\n     /**\n      * Creates a StringValue with an initial wrapped String value.\n      *\n-     * @param wrapped the value to wrap which can be null\n+     * @param value the value to wrap which can be null\n      */\n-    public StringValue( String wrapped )\n+    public StringValue( String value )\n     {\n-        this.wrapped = wrapped;\n+        this.wrappedValue = value;\n         normalized = false;\n         valid = null;\n     }\n@@ -117,28 +113,10 @@ public StringValue( String wrapped )\n      * @param attributeType the schema type associated with this StringValue\n      * @param wrapped the value to wrap which can be null\n      */\n-    public StringValue( AttributeType attributeType, String wrapped )\n+    public StringValue( AttributeType attributeType, String value )\n     {\n         this( attributeType );\n-        this.wrapped = wrapped;\n-    }\n-\n-\n-    /**\n-     * Creates a StringValue with an initial wrapped String value and\n-     * a normalized value.\n-     *\n-     * @param attributeType the schema type associated with this StringValue\n-     * @param wrapped the value to wrap which can be null\n-     * @param normalizedValue the normalized value\n-     */\n-    StringValue( AttributeType attributeType, String wrapped, String normalizedValue, boolean valid )\n-    {\n-        this( wrapped );\n-        this.normalized = true;\n-        this.attributeType = attributeType;\n-        this.normalizedValue = normalizedValue;\n-        this.valid = valid;\n+        this.wrappedValue = value;\n     }\n \n \n@@ -154,7 +132,7 @@ public String getCopy()\n     {\n         // The String is immutable, we can safely return the internal\n         // object without copying it.\n-        return wrapped;\n+        return wrappedValue;\n     }\n     \n     \n@@ -166,19 +144,19 @@ public String getCopy()\n      *\n      * @see ServerValue#set(Object)\n      */\n-    public final void set( String wrapped )\n+    public final void set( String value )\n     {\n         // Why should we invalidate the normalized value if it's we're setting the\n         // wrapper to it's current value?\n-        if ( !StringTools.isEmpty( wrapped ) && wrapped.equals( getString() ) )\n+        if ( !StringTools.isEmpty( value ) && value.equals( getString() ) )\n         {\n             return;\n         }\n \n         normalizedValue = null;\n         normalized = false;\n         valid = null;\n-        this.wrapped = wrapped;\n+        this.wrappedValue = value;\n     }\n \n \n@@ -216,42 +194,13 @@ public String getNormalizedValue()\n         \n         if ( normalizedValue == null )\n         {\n-            return wrapped;\n+            return wrappedValue;\n         }\n \n         return normalizedValue;\n     }\n     \n     \n-    public void apply( AttributeType attributeType )\n-    {\n-        if ( this.attributeType != null ) \n-        {\n-            if ( !attributeType.equals( this.attributeType ) )\n-            {\n-                throw new IllegalArgumentException( I18n.err( I18n.ERR_04476, attributeType.getName(), this.attributeType.getName() ) );\n-            }\n-            else\n-            {\n-                return;\n-            }\n-        }\n-        \n-        this.attributeType = attributeType;\n-        \n-        try\n-        {\n-            normalize();\n-        }\n-        catch ( LdapException ne )\n-        {\n-            String message = I18n.err( I18n.ERR_04447, ne.getLocalizedMessage() );\n-            LOG.info( message );\n-            normalized = false;\n-        }\n-    }\n-\n-\n     /**\n      * Gets a copy of the the normalized (canonical) representation \n      * for the wrapped value.\n@@ -284,11 +233,11 @@ public void normalize() throws LdapException\n     \n             if ( normalizer == null )\n             {\n-                normalizedValue = wrapped;\n+                normalizedValue = wrappedValue;\n             }\n             else\n             {\n-                normalizedValue = ( String ) normalizer.normalize( wrapped );\n+                normalizedValue = ( String ) normalizer.normalize( wrappedValue );\n             }\n     \n             normalized = true;\n@@ -309,7 +258,7 @@ public final void normalize( Normalizer normalizer ) throws LdapException\n     {\n         if ( normalizer != null )\n         {\n-            normalizedValue = (String)normalizer.normalize( wrapped );\n+            normalizedValue = (String)normalizer.normalize( wrappedValue );\n             normalized = true;\n         }\n     }\n@@ -505,7 +454,7 @@ else if ( other.attributeType != null )\n         {\n             try\n             {\n-                LdapComparator<? super Object> comparator = getLdapComparator();\n+                LdapComparator<String> comparator = getLdapComparator();\n \n                 // Compare normalized values\n                 if ( comparator == null )\n@@ -548,41 +497,12 @@ public boolean isBinary()\n     }\n \n     \n-    /**\n-     * Uses the syntaxChecker associated with the attributeType to check if the\n-     * value is valid.  Repeated calls to this method do not attempt to re-check\n-     * the syntax of the wrapped value every time if the wrapped value does not\n-     * change. Syntax checks only result on the first check, and when the wrapped\n-     * value changes.\n-     *\n-     * @see Value#isValid()\n-     */\n-    public final boolean isValid()\n-    {\n-        if ( valid != null )\n-        {\n-            return valid;\n-        }\n-\n-        if ( attributeType != null )\n-        {\n-            valid = attributeType.getSyntax().getSyntaxChecker().isValidSyntax( get() );\n-        }\n-        else\n-        {\n-            valid = false;\n-        }\n-        \n-        return valid;\n-    }\n-    \n-    \n     /**\n      * @return The length of the interned value\n      */\n     public int length()\n     {\n-        return wrapped != null ? wrapped.length() : 0;\n+        return wrappedValue != null ? wrappedValue.length() : 0;\n     }\n     \n     \n@@ -592,7 +512,7 @@ public int length()\n      */\n     public byte[] getBytes()\n     {\n-        return StringTools.getBytesUtf8( wrapped );\n+        return StringTools.getBytesUtf8( wrappedValue );\n     }\n     \n     \n@@ -603,7 +523,7 @@ public int length()\n      */\n     public String getString()\n     {\n-        return wrapped != null ? wrapped : \"\";\n+        return wrappedValue != null ? wrappedValue : \"\";\n     }\n     \n     \n@@ -615,7 +535,7 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n         // Read the wrapped value, if it's not null\n         if ( in.readBoolean() )\n         {\n-            wrapped = in.readUTF();\n+            wrappedValue = in.readUTF();\n         }\n         \n         // Read the isNormalized flag\n@@ -638,10 +558,10 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n     public void writeExternal( ObjectOutput out ) throws IOException\n     {\n         // Write the wrapped value, if it's not null\n-        if ( wrapped != null )\n+        if ( wrappedValue != null )\n         {\n             out.writeBoolean( true );\n-            out.writeUTF( wrapped );\n+            out.writeUTF( wrappedValue );\n         }\n         else\n         {\n@@ -674,151 +594,6 @@ public void writeExternal( ObjectOutput out ) throws IOException\n     }\n \n     \n-    /**\n-     * Get the associated AttributeType\n-     * @return The AttributeType\n-     */\n-    public AttributeType getAttributeType()\n-    {\n-        return attributeType;\n-    }\n-\n-    \n-    /**\n-     * Check if the value is stored into an instance of the given \n-     * AttributeType, or one of its ascendant.\n-     * \n-     * For instance, if the Value is associated with a CommonName,\n-     * checking for Name will match.\n-     * \n-     * @param attributeType The AttributeType we are looking at\n-     * @return <code>true</code> if the value is associated with the given\n-     * attributeType or one of its ascendant\n-     */\n-    public boolean instanceOf( AttributeType attributeType ) throws LdapException\n-    {\n-        if ( attributeType != null )\n-        {\n-            if ( this.attributeType.equals( attributeType ) )\n-            {\n-                return true;\n-            }\n-    \n-            return this.attributeType.isDescendantOf( attributeType );\n-        }\n-        \n-        return false;\n-    }\n-\n-\n-    /**\n-     *  Check the attributeType member. It should not be null, \n-     *  and it should contains a syntax.\n-     */\n-    protected String checkAttributeType( AttributeType attributeType )\n-    {\n-        if ( attributeType == null )\n-        {\n-            return \"The AttributeType parameter should not be null\";\n-        }\n-        \n-        if ( attributeType.getSyntax() == null )\n-        {\n-            return \"There is no Syntax associated with this attributeType\";\n-        }\n-\n-        return null;\n-    }\n-\n-    \n-    /**\n-     * Gets a comparator using getMatchingRule() to resolve the matching\n-     * that the comparator is extracted from.\n-     *\n-     * @return a comparator associated with the attributeType or null if one cannot be found\n-     * @throws LdapException if resolution of schema entities fail\n-     */\n-    protected LdapComparator<? super Object> getLdapComparator() throws LdapException\n-    {\n-        if ( attributeType != null )\n-        {\n-            MatchingRule mr = getMatchingRule();\n-    \n-            if ( mr == null )\n-            {\n-                return null;\n-            }\n-    \n-            return mr.getLdapComparator();\n-        }\n-        else\n-        {\n-            return null;\n-        }\n-    }\n-    \n-    \n-    /**\n-     * Find a matchingRule to use for normalization and comparison.  If an equality\n-     * matchingRule cannot be found it checks to see if other matchingRules are\n-     * available: SUBSTR, and ORDERING.  If a matchingRule cannot be found null is\n-     * returned.\n-     *\n-     * @return a matchingRule or null if one cannot be found for the attributeType\n-     * @throws LdapException if resolution of schema entities fail\n-     */\n-    protected MatchingRule getMatchingRule() throws LdapException\n-    {\n-        if ( attributeType != null )\n-        {\n-            MatchingRule mr = attributeType.getEquality();\n-    \n-            if ( mr == null )\n-            {\n-                mr = attributeType.getOrdering();\n-            }\n-    \n-            if ( mr == null )\n-            {\n-                mr = attributeType.getSubstring();\n-            }\n-    \n-            return mr;\n-        }\n-        else\n-        {\n-            return null;\n-        }\n-    }\n-\n-\n-    /**\n-     * Gets a normalizer using getMatchingRule() to resolve the matchingRule\n-     * that the normalizer is extracted from.\n-     *\n-     * @return a normalizer associated with the attributeType or null if one cannot be found\n-     * @throws LdapException if resolution of schema entities fail\n-     */\n-    protected Normalizer getNormalizer() throws LdapException\n-    {\n-        if ( attributeType != null )\n-        {\n-            MatchingRule mr = getMatchingRule();\n-    \n-            if ( mr == null )\n-            {\n-                return null;\n-            }\n-    \n-            return mr.getNormalizer();\n-        }\n-        else\n-        {\n-            return null;\n-        }\n-    }\n-\n-    \n     /**\n      * We will write the value and the normalized value, only\n      * if the normalized value is different.\n@@ -838,21 +613,21 @@ protected Normalizer getNormalizer() throws LdapException\n      */\n     public void serialize( ObjectOutput out ) throws IOException\n     {\n-        if ( wrapped != null )\n+        if ( wrappedValue != null )\n         {\n             // write a flag indicating that the value is not null\n             out.writeBoolean( true );\n             \n             // Write the data\n-            out.writeUTF( wrapped );\n+            out.writeUTF( wrappedValue );\n             \n             // Normalize the data\n             try\n             {\n                 normalize();\n                 out.writeBoolean( true );\n                 \n-                if ( wrapped.equals( normalizedValue ) )\n+                if ( wrappedValue.equals( normalizedValue ) )\n                 {\n                     out.writeBoolean( true );\n                 }\n@@ -928,6 +703,6 @@ public void deserialize( ObjectInput in ) throws IOException, ClassNotFoundExcep\n      */\n     public String toString()\n     {\n-        return wrapped == null ? \"null\": wrapped;\n+        return wrappedValue == null ? \"null\": wrappedValue;\n     }\n }",
                "additions": 24,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/main/java/org/apache/directory/shared/ldap/entry/StringValue.java",
                "status": "modified",
                "changes": 273,
                "deletions": 249,
                "sha": "6d1d735aecc75f4fda4c4db9b717bb2b7dd3bc3b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/main/java/org/apache/directory/shared/ldap/entry/StringValue.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/entry/StringValue.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/entry/StringValue.java?ref=ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256"
            },
            {
                "patch": "@@ -106,12 +106,6 @@\n     T getCopy();\n     \n     \n-    /**\n-     * Reset the value\n-     */\n-    void clear();\n-    \n-    \n     /**\n      * Tells if the value has already be normalized or not.\n      *",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/main/java/org/apache/directory/shared/ldap/entry/Value.java",
                "status": "modified",
                "changes": 6,
                "deletions": 6,
                "sha": "03d4f7815b1668ad70f87e94aa48828342e789b7",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/main/java/org/apache/directory/shared/ldap/entry/Value.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/entry/Value.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/entry/Value.java?ref=ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256"
            },
            {
                "patch": "@@ -213,26 +213,6 @@ public void testHashCode()\n     }\n \n \n-    @Test\n-    public void testClear() throws LdapException\n-    {\n-        BinaryValue cbv = new BinaryValue( BYTES2 );\n-        cbv.normalize( BINARY_NORMALIZER );\n-        cbv.isValid( BINARY_CHECKER );\n-        \n-        cbv.clear();\n-        assertTrue( cbv.isNull() );\n-        assertFalse( cbv.isNormalized() );\n-        assertFalse( cbv.isValid() );\n-        assertNull( cbv.get() );\n-        assertNull( cbv.getCopy() );\n-        assertNull( cbv.getReference() );\n-        assertNull( cbv.getNormalizedValue() );\n-        assertNull( cbv.getNormalizedValueCopy() );\n-        assertNull( cbv.getNormalizedValueReference() );\n-    }\n-\n-\n     @Test\n     public void testBinaryValueNull() throws LdapException\n     {\n@@ -478,9 +458,6 @@ public void testToString()\n \n         cbv.set( BYTES1 );\n         assertEquals( \"'0x01 0x02 0x03 0x04 '\", cbv.toString() );\n-        \n-        cbv.clear();\n-        assertEquals( \"null\", cbv.toString() );\n     }\n \n \n@@ -582,9 +559,6 @@ public void testIsNull()\n         \n         cbv.set( BYTES1 );\n         assertFalse( cbv.isNull() );\n-        \n-        cbv.clear();\n-        assertTrue( cbv.isNull() );\n     }\n \n \n@@ -726,8 +700,6 @@ public void testSetNormalized() throws LdapException\n         assertTrue( cbv.isNormalized() );\n \n         cbv.normalize( BINARY_NORMALIZER );\n-        cbv.clear();\n-        assertFalse( cbv.isNormalized() );\n     }\n     \n     ",
                "additions": 0,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/test/java/org/apache/directory/shared/ldap/entry/BinaryValueTest.java",
                "status": "modified",
                "changes": 28,
                "deletions": 28,
                "sha": "64185f18836f47c25ac37aa2bd7ed216abd6346c",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/test/java/org/apache/directory/shared/ldap/entry/BinaryValueTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/entry/BinaryValueTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/entry/BinaryValueTest.java?ref=ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256"
            },
            {
                "patch": "@@ -410,25 +410,25 @@ public void testCompareTo()\n     public void testClone() throws LdapException\n     {\n         AttributeType at1 = EntryUtils.getCaseIgnoringAttributeNoNumbersType();\n-        StringValue ssv = new StringValue( at1, \"Test\" );\n+        StringValue sv = new StringValue( at1, \"Test\" );\n         \n-        StringValue ssv1 = ssv.clone();\n+        StringValue sv1 = sv.clone();\n         \n-        assertEquals( ssv, ssv1 );\n+        assertEquals( sv, sv1 );\n         \n-        ssv.set( \"\" );\n+        sv.set( \"\" );\n         \n-        assertNotSame( ssv, ssv1 );\n-        assertEquals( \"\", ssv.getString() );\n+        assertNotSame( sv, sv1 );\n+        assertEquals( \"\", sv.getString() );\n         \n-        ssv.set(  \"  This is    a   TEST  \" );\n-        ssv1 = ssv.clone();\n+        sv.set(  \"  This is    a   TEST  \" );\n+        sv1 = sv.clone();\n         \n-        assertEquals( ssv, ssv1 );\n+        assertEquals( sv, sv1 );\n         \n-        ssv.normalize();\n+        sv.normalize();\n         \n-        assertEquals( ssv, ssv1 );\n+        assertEquals( sv, sv1 );\n     }\n     \n ",
                "additions": 11,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/test/java/org/apache/directory/shared/ldap/entry/StringValueAttributeTypeTest.java",
                "status": "modified",
                "changes": 22,
                "deletions": 11,
                "sha": "5f59d551aac650dbda306f3d2aee3e624ce02273",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/test/java/org/apache/directory/shared/ldap/entry/StringValueAttributeTypeTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/entry/StringValueAttributeTypeTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/entry/StringValueAttributeTypeTest.java?ref=ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256"
            },
            {
                "patch": "@@ -32,8 +32,11 @@\n import java.io.ObjectOutputStream;\n \n import org.apache.directory.shared.ldap.exception.LdapException;\n+import org.apache.directory.shared.ldap.schema.comparators.StringComparator;\n import org.apache.directory.shared.ldap.schema.normalizers.DeepTrimToLowerNormalizer;\n import org.apache.directory.shared.ldap.schema.syntaxCheckers.Ia5StringSyntaxChecker;\n+import org.apache.directory.shared.ldap.schema.syntaxCheckers.OctetStringSyntaxChecker;\n+import org.junit.Before;\n import org.junit.Test;\n \n /**\n@@ -45,6 +48,9 @@\n  */\n public class StringValueTest\n {\n+    //----------------------------------------------------------------------------------\n+    // Helper method\n+    //----------------------------------------------------------------------------------\n     /**\n      * Serialize a StringValue\n      */\n@@ -117,8 +123,56 @@ private StringValue deserializeValue( ByteArrayOutputStream out ) throws IOExcep\n             }\n         }\n     }\n-    \n-    \n+\n+\n+    //----------------------------------------------------------------------------------\n+    // Test the clone() method\n+    //----------------------------------------------------------------------------------\n+    /**\n+     * Test cloning an empty value\n+     */\n+    @Test\n+    public void testCloneEmptyValue() throws LdapException\n+    {\n+        StringValue sv = new StringValue();\n+        \n+        StringValue sv1 = (StringValue)sv.clone();\n+        \n+        assertEquals( sv, sv1 );\n+        \n+        sv.set( \"\" );\n+        \n+        assertNotSame( sv, sv1 );\n+        assertNull( sv1.get() );\n+        assertEquals( \"\", sv.getString() );\n+    }\n+\n+\n+    /**\n+     * Test cloning a value\n+     */\n+    @Test\n+    public void testCloneValue() throws LdapException\n+    {\n+        StringValue sv = new StringValue( \"  This is    a   TEST  \" );\n+        \n+        StringValue sv1 = (StringValue)sv.clone();\n+        \n+        sv1 = sv.clone();\n+        \n+        assertEquals( sv, sv1 );\n+        assertEquals( \"  This is    a   TEST  \", sv.getString() );\n+\n+        sv.normalize( new DeepTrimToLowerNormalizer( \"1.1.1\" ) );\n+        \n+        assertNotSame( sv, sv1 );\n+        assertEquals( \"  This is    a   TEST  \", sv1.getString() );\n+        assertEquals( \"  This is    a   TEST  \", sv1.getNormalizedValue() );\n+        assertEquals( \"  This is    a   TEST  \", sv.getString() );\n+        assertEquals( \"this is a test\", sv.getNormalizedValue() );\n+    }\n+\n+\n     /**\n      * Test method for {@link org.apache.directory.shared.ldap.entry.StringValue#hashCode()}.\n      */\n@@ -199,9 +253,6 @@ public void testGet()\n         \n         csv.set( \"\" );\n         assertEquals( \"\", csv.get() );\n-        \n-        csv.clear();\n-        assertNull( csv.get() );\n     }\n \n \n@@ -217,9 +268,6 @@ public void testGetCopy()\n         \n         csv.set( \"\" );\n         assertEquals( \"\", csv.getCopy() );\n-        \n-        csv.clear();\n-        assertNull( csv.getCopy() );\n     }\n \n \n@@ -266,32 +314,9 @@ public void testIsNull()\n         \n         csv.set( \"test\" );\n         assertFalse( csv.isNull() );\n-        \n-        csv.clear();\n-        assertTrue( csv.isNull() );\n     }\n \n-\n-    /**\n-     * Test method for {@link org.apache.directory.shared.ldap.entry.StringValue#clear()}.\n-     */\n-    @Test\n-    public void testClear() throws LdapException\n-    {\n-        StringValue csv = new StringValue();\n-        \n-        csv.clear();\n-        assertTrue( csv.isNull() );\n-        \n-        csv.set( \"test\" );\n-        assertTrue( csv.isValid( new Ia5StringSyntaxChecker() ) );\n-        csv.clear();\n-        assertTrue( csv.isNull() );\n-        assertTrue( csv.isValid( new Ia5StringSyntaxChecker() ) );\n-        assertFalse( csv.isNormalized() );\n-    }\n-\n-\n+    \n     /**\n      * Test method for {@link org.apache.directory.shared.ldap.entry.StringValue#isNormalized()}.\n      */\n@@ -341,8 +366,6 @@ public void testSetNormalized() throws LdapException\n         assertFalse( csv.isNormalized() );\n \n         csv.normalize( new DeepTrimToLowerNormalizer( \"1.1.1\" ) );\n-        csv.clear();\n-        assertFalse( csv.isNormalized() );\n     }\n \n \n@@ -362,10 +385,6 @@ public void testGetNormalizedValue() throws LdapException\n         csv.normalize( new DeepTrimToLowerNormalizer( \"1.1.1\" ) );\n         \n         assertEquals( \"this is a test\", csv.getNormalizedValue() );\n-\n-        csv.clear();\n-        assertFalse( csv.isNormalized() );\n-        assertEquals( null, csv.getNormalizedValue() );\n     }\n \n \n@@ -385,10 +404,6 @@ public void getNormalizedValueCopy() throws LdapException\n         csv.normalize( new DeepTrimToLowerNormalizer( \"1.1.1\" ) );\n         \n         assertEquals( \"this is a test\", csv.getNormalizedValueCopy() );\n-\n-        csv.clear();\n-        assertFalse( csv.isNormalized() );\n-        assertEquals( null, csv.getNormalizedValueCopy() );\n     }\n \n     \n@@ -465,35 +480,6 @@ public void testCompareTo() throws LdapException\n     }\n \n \n-    /**\n-     * Test method for {@link org.apache.directory.shared.ldap.entry.StringValue#clone()}.\n-     */\n-    @Test\n-    public void testClone() throws LdapException\n-    {\n-        StringValue csv = new StringValue();\n-        \n-        StringValue csv1 = (StringValue)csv.clone();\n-        \n-        assertEquals( csv, csv1 );\n-        \n-        csv.set( \"\" );\n-        \n-        assertNotSame( csv, csv1 );\n-        assertNull( csv1.get() );\n-        assertEquals( \"\", csv.getString() );\n-        \n-        csv.set(  \"  This is    a   TEST  \" );\n-        csv1 = csv.clone();\n-        \n-        assertEquals( csv, csv1 );\n-        \n-        csv.normalize( new DeepTrimToLowerNormalizer( \"1.1.1\" ) );\n-        \n-        assertNotSame( csv, csv1 );\n-    }\n-\n-\n     /**\n      * Test method for {@link org.apache.directory.shared.ldap.entry.StringValue#equals(java.lang.Object)}.\n      */\n@@ -534,9 +520,6 @@ public void testToString()\n \n         csv.set( \"Test\" );\n         assertEquals( \"Test\", csv.toString() );\n-        \n-        csv.clear();\n-        assertEquals( \"null\", csv.toString() );\n     }\n     \n     ",
                "additions": 57,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/test/java/org/apache/directory/shared/ldap/entry/StringValueTest.java",
                "status": "modified",
                "changes": 131,
                "deletions": 74,
                "sha": "a6f5231f2951def47c07dfc75f3d4602b7b34f39",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256/ldap/src/test/java/org/apache/directory/shared/ldap/entry/StringValueTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/entry/StringValueTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/entry/StringValueTest.java?ref=ee9f3cd5855c9e9f835f8c1a2799d1adc4acb256"
            }
        ],
        "bug_id": "directory-ldap-api_74",
        "parent": "https://github.com/apache/directory-ldap-api/commit/2efec663333bf2b227e35df4732ea28c11299cc3",
        "message": "o Moved some methods from String/BinaryValue to AbstractValue\no Removed the clear() methods\no Renamed a field\no AttributeType is also moved to AbstractValue\no Fixed some potential NPE\no Some more minor refactoring\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@929756 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/cc9992a5e9fc25d913c26e6ff9a3abe7bdf94ea4",
        "file": [
            {
                "patch": "@@ -1821,28 +1821,31 @@ public void dissociateFromSchema( SchemaObject schemaObject ) throws NamingExcep\n         // And unregister the schemaObject within its schema\n         Set<SchemaObjectWrapper> content = schemaObjects.get( StringTools.toLowerCase( schemaObject.getSchemaName() ) );\n \n-        SchemaObjectWrapper schemaObjectWrapper = new SchemaObjectWrapper( schemaObject );\n-\n-        if ( content.contains( schemaObjectWrapper ) )\n+        if ( content != null )\n         {\n-            // remove the schemaObject\n-            content.remove( schemaObjectWrapper );\n-\n-            // Update the global OidRegistry if the SchemaObject is not\n-            // an instance of LoadableSchemaObject\n-            if ( !( schemaObject instanceof LoadableSchemaObject ) )\n+            SchemaObjectWrapper schemaObjectWrapper = new SchemaObjectWrapper( schemaObject );\n+    \n+            if ( content.contains( schemaObjectWrapper ) )\n+            {\n+                // remove the schemaObject\n+                content.remove( schemaObjectWrapper );\n+    \n+                // Update the global OidRegistry if the SchemaObject is not\n+                // an instance of LoadableSchemaObject\n+                if ( !( schemaObject instanceof LoadableSchemaObject ) )\n+                {\n+                    globalOidRegistry.unregister( schemaObject.getOid() );\n+                }\n+    \n+                LOG.debug( \"Unregistered {}:{}\", schemaObject.getObjectType(), schemaObject.getOid() );\n+            }\n+            else\n             {\n-                globalOidRegistry.unregister( schemaObject.getOid() );\n+                // Not present !!\n+                // What should we do ?\n+                LOG.debug( \"Unregistering of {}:{} failed, not found in Registries\", schemaObject.getObjectType(),\n+                    schemaObject.getOid() );\n             }\n-\n-            LOG.debug( \"Unregistered {}:{}\", schemaObject.getObjectType(), schemaObject.getOid() );\n-        }\n-        else\n-        {\n-            // Not present !!\n-            // What should we do ?\n-            LOG.debug( \"Unregistering of {}:{} failed, not found in Registries\", schemaObject.getObjectType(),\n-                schemaObject.getOid() );\n         }\n     }\n ",
                "additions": 22,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/cc9992a5e9fc25d913c26e6ff9a3abe7bdf94ea4/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "status": "modified",
                "changes": 41,
                "deletions": 19,
                "sha": "74ae2c235407c7b2de5a662e47acbd27bd5bd993",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/cc9992a5e9fc25d913c26e6ff9a3abe7bdf94ea4/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/Registries.java?ref=cc9992a5e9fc25d913c26e6ff9a3abe7bdf94ea4"
            }
        ],
        "bug_id": "directory-ldap-api_75",
        "parent": "https://github.com/apache/directory-ldap-api/commit/5b117e8b1cd7aa14d0ac2774284b792c6ec8f2a5",
        "message": "When the schema is disabled, the Registries.SchemaObjects foes not contain a reference to thi schema. Fixed that to avoid a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@891372 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/7a2745f9b3206549efa0903e3e24468bb422792d",
        "file": [
            {
                "patch": "@@ -38,6 +38,7 @@\n import org.apache.directory.shared.ldap.schema.EntityFactory;\n import org.apache.directory.shared.ldap.schema.LdapComparator;\n import org.apache.directory.shared.ldap.schema.LdapSyntax;\n+import org.apache.directory.shared.ldap.schema.LoadableSchemaObject;\n import org.apache.directory.shared.ldap.schema.MatchingRule;\n import org.apache.directory.shared.ldap.schema.Normalizer;\n import org.apache.directory.shared.ldap.schema.ObjectClass;\n@@ -1377,8 +1378,17 @@ public boolean add( SchemaObject schemaObject ) throws Exception\n         // First, clear the errors\n         errors.clear();\n \n+        SchemaObject copy = null;\n+\n         // Clone the schemaObject\n-        SchemaObject copy = schemaObject.copy();\n+        if ( !( schemaObject instanceof LoadableSchemaObject ) )\n+        {\n+            copy = schemaObject.copy();\n+        }\n+        else\n+        {\n+            copy = schemaObject;\n+        }\n \n         if ( registries.isRelaxed() )\n         {",
                "additions": 11,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7a2745f9b3206549efa0903e3e24468bb422792d/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "status": "modified",
                "changes": 12,
                "deletions": 1,
                "sha": "cf48f0b7ea1b2f653e7463d19f4546486a54f293",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7a2745f9b3206549efa0903e3e24468bb422792d/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java?ref=7a2745f9b3206549efa0903e3e24468bb422792d"
            },
            {
                "patch": "@@ -22,7 +22,9 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.File;\n import java.io.IOException;\n@@ -34,8 +36,10 @@\n import org.apache.commons.io.FileUtils;\n import org.apache.directory.shared.ldap.exception.LdapSchemaViolationException;\n import org.apache.directory.shared.ldap.schema.AttributeType;\n+import org.apache.directory.shared.ldap.schema.LdapComparator;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n import org.apache.directory.shared.ldap.schema.UsageEnum;\n+import org.apache.directory.shared.ldap.schema.comparators.BooleanComparator;\n import org.apache.directory.shared.ldap.schema.ldif.extractor.SchemaLdifExtractor;\n import org.apache.directory.shared.schema.DefaultSchemaManager;\n import org.apache.directory.shared.schema.loader.ldif.LdifSchemaLoader;\n@@ -56,7 +60,7 @@\n     private static String workingDirectory;\n \n     // The schema repository\n-    private static File schemaRepository;\n+    private static File   schemaRepository;\n \n \n     @BeforeClass\n@@ -566,10 +570,38 @@ public void testAddAttributeTypeSupBadSup() throws Exception\n         assertEquals( goidSize, schemaManager.getOidRegistry().size() );\n     }\n \n+\n     //=========================================================================\n     // Comparator addition tests\n     //-------------------------------------------------------------------------\n-    // TODO\n+    @Test\n+    public void testAddNewComparator() throws Exception\n+    {\n+        SchemaManager schemaManager = loadSystem();\n+        int ctrSize = schemaManager.getComparatorRegistry().size();\n+        int goidSize = schemaManager.getOidRegistry().size();\n+\n+        LdapComparator<?> lc = new BooleanComparator( \"0.0.0\" );\n+\n+        assertTrue( schemaManager.add( lc ) );\n+\n+        List<Throwable> errors = schemaManager.getErrors();\n+        assertEquals( 0, errors.size() );\n+\n+        assertEquals( ctrSize + 1, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( goidSize, schemaManager.getOidRegistry().size() );\n+\n+        try\n+        {\n+            LdapComparator<?> added = schemaManager.lookupComparatorRegistry( \"0.0.0\" );\n+\n+            assertNotNull( added );\n+        }\n+        catch ( NamingException ne )\n+        {\n+            fail();\n+        }\n+    }\n \n     //=========================================================================\n     // DITContentRule addition tests",
                "additions": 34,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7a2745f9b3206549efa0903e3e24468bb422792d/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerAddTest.java",
                "status": "modified",
                "changes": 36,
                "deletions": 2,
                "sha": "874625860f6af411c2659f9f2a8cea54228f0a41",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7a2745f9b3206549efa0903e3e24468bb422792d/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerAddTest.java",
                "filename": "ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerAddTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerAddTest.java?ref=7a2745f9b3206549efa0903e3e24468bb422792d"
            }
        ],
        "bug_id": "directory-ldap-api_76",
        "parent": "https://github.com/apache/directory-ldap-api/commit/bd03c66120e3c27e2bdd559a9c6f4bc703d63a08",
        "message": "o Injected Kiran's first test for comparator\no Fixed a NPE in the add method when we are adding some LoadableSchemaObjects\no Added some more check in the test\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@888472 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/41e75f7daf23cc2c1a9bf8363a96390b9e402752",
        "file": [
            {
                "patch": "@@ -388,6 +388,12 @@ public boolean load( Schema... schemas ) throws Exception\n     {\n         boolean loaded = false;\n \n+        // Reset the errors if not null\n+        if ( errors != null )\n+        {\n+            errors.clear();\n+        }\n+\n         // Work on a cloned and relaxed registries\n         Registries clonedRegistries = cloneRegistries();\n         clonedRegistries.setRelaxed();\n@@ -399,7 +405,7 @@ public boolean load( Schema... schemas ) throws Exception\n         }\n \n         // Build the cross references\n-        List<Throwable> errors = clonedRegistries.buildReferences();\n+        errors = clonedRegistries.buildReferences();\n \n         if ( errors.isEmpty() )\n         {\n@@ -409,6 +415,7 @@ public boolean load( Schema... schemas ) throws Exception\n             if ( errors.isEmpty() )\n             {\n                 // We are golden : let's apply the schema in the real registries\n+                registries.setRelaxed();\n \n                 // Load the schemas\n                 for ( Schema schema : schemas )\n@@ -417,7 +424,8 @@ public boolean load( Schema... schemas ) throws Exception\n                 }\n \n                 // Build the cross references\n-                registries.buildReferences();\n+                errors = registries.buildReferences();\n+                registries.setStrict();\n \n                 loaded = true;\n             }\n@@ -451,6 +459,12 @@ public boolean load( String... schemas ) throws Exception\n      */\n     private boolean load( Registries registries, Schema schema ) throws Exception\n     {\n+        if ( schema == null )\n+        {\n+            LOG.info( \"The schema is null\" );\n+            return false;\n+        }\n+\n         // First avoid loading twice the same schema\n         if ( registries.isSchemaLoaded( schema.getSchemaName() ) )\n         {",
                "additions": 16,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/41e75f7daf23cc2c1a9bf8363a96390b9e402752/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "status": "modified",
                "changes": 18,
                "deletions": 2,
                "sha": "b56ab8be336370edf90668ddd0037c6eefcb3f5b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/41e75f7daf23cc2c1a9bf8363a96390b9e402752/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java?ref=41e75f7daf23cc2c1a9bf8363a96390b9e402752"
            },
            {
                "patch": "@@ -21,6 +21,7 @@\n \n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n@@ -31,6 +32,8 @@\n import org.apache.commons.io.FileUtils;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n import org.apache.directory.shared.ldap.schema.ldif.extractor.SchemaLdifExtractor;\n+import org.apache.directory.shared.ldap.schema.registries.DefaultSchema;\n+import org.apache.directory.shared.ldap.schema.registries.Schema;\n import org.apache.directory.shared.schema.DefaultSchemaManager;\n import org.apache.directory.shared.schema.loader.ldif.LdifSchemaLoader;\n import org.junit.AfterClass;\n@@ -44,19 +47,119 @@\n  *  Server API\n  *     boolean load( Schema... schemas ) throws Exception\n  *     boolean load( String... schemas ) throws Exception\n- *     boolean loadWithDeps( Schema... schemas ) throws Exception\n- *     boolean loadWithDeps( String... schemas ) throws Exception\n  *     boolean loadDisabled( Schema... schemas ) throws Exception\n  *     boolean loadDisabled( String... schemas ) throws Exception\n  *     boolean loadAllEnabled() throws Exception\n  *\n  *  Studio API :\n  *     boolean loadRelaxed( Schema... schemas ) throws Exception\n  *     boolean loadRelaxed( String... schemas ) throws Exception\n- *     boolean loadWithDepsRelaxed( Schema... schemas ) throws Exception\n- *     boolean loadWithDepsRelaxed( String... schemas ) throws Exception\n  *     boolean loadAllEnabledRelaxed() throws Exception \n- *\n+ *     \n+ * We check the resulting number of SchemaObjects in the registries. Those number are :\n+ * \n+ * Apache :\n+ *   AT :  53\n+ *   C  :   8\n+ *   MR :   8\n+ *   N  :   8\n+ *   OC :  17\n+ *   SC :   3\n+ *   S  :   7\n+ *   OID:  85\n+ *   \n+ * ApacheDns :\n+ *   AT :  16\n+ *   OC :  11\n+ *   OID:  27\n+ *   \n+ * ApacheMeta :\n+ *   AT :  31\n+ *   C  :   5\n+ *   MR :   5\n+ *   N  :   7\n+ *   OC :  13\n+ *   SC :   4\n+ *   S  :   5\n+ *   OID:  54\n+ * \n+ * AutoFs :\n+ *   AT :   1\n+ *   OC :   2\n+ *   OID:   3\n+ * \n+ * Collective :\n+ *   AT :  13\n+ *   OID:  13\n+ * \n+ * Corba :\n+ *   AT :   2\n+ *   OC :   3\n+ *   OID:   5\n+ * \n+ * Core :\n+ *   AT :  54\n+ *   OC :  27\n+ *   OID:  81\n+ * \n+ * Cosine :\n+ *   AT :  41\n+ *   OC :  13\n+ *   OID:  54\n+ * \n+ * Dhcp :\n+ *   AT :  39\n+ *   OC :  12\n+ *   OID:  51\n+ * \n+ * InetOrgPerson :\n+ *   AT :   9\n+ *   OC :   1\n+ *   OID:  10\n+ * \n+ * Java :\n+ *   AT :   7\n+ *   OC :   5\n+ *   OID:  12\n+ * \n+ * Krb5Kdc :\n+ *   AT :  15\n+ *   OC :   3\n+ *   OID:  18\n+ * \n+ * Mozilla :\n+ *   AT :  17\n+ *   OC :   1\n+ *   OID:  18\n+ * \n+ * Nis :\n+ *   AT :  27\n+ *   C  :   1\n+ *   MR :   1\n+ *   N  :   1\n+ *   OC :  13\n+ *   SC :   2\n+ *   S  :   2\n+ *   OID:  43\n+ * \n+ * Other :\n+ *   OID:   0\n+ * \n+ * Samba :\n+ *   AT :  37\n+ *   OC :  11\n+ *   OID:  48\n+ * \n+ * System :\n+ *   AT :  38\n+ *   C  :  35\n+ *   MR :  35\n+ *   N  :  35\n+ *   OC :   9\n+ *   SC :  59\n+ *   S  :  59\n+ *   OID: 141\n+ * \n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  * @version $Rev$, $Date$\n  */\n@@ -111,7 +214,7 @@ public void testLoadSystem() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"system\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 38, schemaManager.getAttributeTypeRegistry().size() );\n@@ -137,7 +240,11 @@ public void testLoadCore() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"core\" );\n+        // Check that we can't load a schema without its dependencies\n+        assertFalse( schemaManager.load( \"core\" ) );\n+\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 92, schemaManager.getAttributeTypeRegistry().size() );\n@@ -164,7 +271,9 @@ public void testLoadApache() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"apache\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n+        assertTrue( schemaManager.load( \"apache\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 145, schemaManager.getAttributeTypeRegistry().size() );\n@@ -192,7 +301,8 @@ public void testLoadApacheMeta() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"apacheMeta\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"apacheMeta\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 69, schemaManager.getAttributeTypeRegistry().size() );\n@@ -219,7 +329,9 @@ public void testLoadJava() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"Java\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n+        assertTrue( schemaManager.load( \"Java\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 99, schemaManager.getAttributeTypeRegistry().size() );\n@@ -240,31 +352,32 @@ public void testLoadJava() throws Exception\n \n     /**\n      * test loading the \"other\" schema, which depends on \"system\", \"core\",\n-     * \"apache\" and \"apacheMeta\"\n+     * \"apache\" and \"apacheMeta\". As we don't have any cross dependencies\n+     * with any of this other schemas, we can only load core and system\n      */\n     @Test\n     public void testLoadOther() throws Exception\n     {\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"other\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n+        assertTrue( schemaManager.load( \"other\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n-        assertEquals( 176, schemaManager.getAttributeTypeRegistry().size() );\n-        assertEquals( 48, schemaManager.getComparatorRegistry().size() );\n-        assertEquals( 48, schemaManager.getMatchingRuleRegistry().size() );\n-        assertEquals( 50, schemaManager.getNormalizerRegistry().size() );\n-        assertEquals( 66, schemaManager.getObjectClassRegistry().size() );\n-        assertEquals( 66, schemaManager.getSyntaxCheckerRegistry().size() );\n-        assertEquals( 71, schemaManager.getLdapSyntaxRegistry().size() );\n-        assertEquals( 361, schemaManager.getOidRegistry().size() );\n+        assertEquals( 92, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 36, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 222, schemaManager.getOidRegistry().size() );\n \n-        assertEquals( 5, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertEquals( 3, schemaManager.getRegistries().getLoadedSchemas().size() );\n         assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n         assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"apache\" ) );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"apacheMeta\" ) );\n         assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"other\" ) );\n     }\n \n@@ -278,7 +391,9 @@ public void testLoadCosine() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"cosine\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n+        assertTrue( schemaManager.load( \"cosine\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 133, schemaManager.getAttributeTypeRegistry().size() );\n@@ -307,7 +422,10 @@ public void testLoadInetOrgPerson() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"InetOrgPerson\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n+        assertTrue( schemaManager.load( \"cosine\" ) );\n+        assertTrue( schemaManager.load( \"InetOrgPerson\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n@@ -336,7 +454,9 @@ public void testLoadCollective() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"Collective\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n+        assertTrue( schemaManager.load( \"Collective\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 105, schemaManager.getAttributeTypeRegistry().size() );\n@@ -364,7 +484,9 @@ public void testLoadKrb5Kdc() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"Krb5Kdc\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n+        assertTrue( schemaManager.load( \"Krb5Kdc\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 107, schemaManager.getAttributeTypeRegistry().size() );\n@@ -393,22 +515,26 @@ public void testLoadNis() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"nis\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\" ) );\n+        assertTrue( schemaManager.load( \"cosine\" ) );\n+        assertTrue( schemaManager.load( \"nis\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n-        assertEquals( 0, schemaManager.getAttributeTypeRegistry().size() );\n-        assertEquals( 0, schemaManager.getComparatorRegistry().size() );\n-        assertEquals( 0, schemaManager.getMatchingRuleRegistry().size() );\n-        assertEquals( 0, schemaManager.getNormalizerRegistry().size() );\n-        assertEquals( 0, schemaManager.getObjectClassRegistry().size() );\n-        assertEquals( 0, schemaManager.getSyntaxCheckerRegistry().size() );\n-        assertEquals( 0, schemaManager.getLdapSyntaxRegistry().size() );\n-        assertEquals( 0, schemaManager.getOidRegistry().size() );\n-\n-        assertEquals( 0, schemaManager.getRegistries().getLoadedSchemas().size() );\n-        assertNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n-        assertNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n-        assertNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertEquals( 133, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 49, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 276, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 3, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"nis\" ) );\n     }\n \n \n@@ -421,19 +547,22 @@ public void testLoadWrongSchema() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"bad\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"bad\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n-        assertEquals( 0, schemaManager.getAttributeTypeRegistry().size() );\n-        assertEquals( 0, schemaManager.getComparatorRegistry().size() );\n-        assertEquals( 0, schemaManager.getMatchingRuleRegistry().size() );\n-        assertEquals( 0, schemaManager.getNormalizerRegistry().size() );\n-        assertEquals( 0, schemaManager.getObjectClassRegistry().size() );\n-        assertEquals( 0, schemaManager.getSyntaxCheckerRegistry().size() );\n-        assertEquals( 0, schemaManager.getLdapSyntaxRegistry().size() );\n-        assertEquals( 0, schemaManager.getOidRegistry().size() );\n-\n-        assertEquals( 0, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertEquals( 38, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 9, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 141, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 1, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"bad\" ) );\n     }\n \n \n@@ -446,7 +575,8 @@ public void testLoadCoreAndInetOrgPerson() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"core\", \"InetOrgPerson\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\", \"cosine\", \"InetOrgPerson\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n@@ -475,7 +605,8 @@ public void testLoadCoreInetOrgPersonAndBad() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"core\", \"bad\", \"InetOrgPerson\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\", \"bad\", \"cosine\", \"InetOrgPerson\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n@@ -504,7 +635,8 @@ public void testLoadCoreInetOrgPersonAndNis() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"core\", \"nis\", \"InetOrgPerson\" );\n+        assertTrue( schemaManager.load( \"system\" ) );\n+        assertTrue( schemaManager.load( \"core\", \"nis\", \"cosine\", \"InetOrgPerson\" ) );\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n@@ -522,4 +654,44 @@ public void testLoadCoreInetOrgPersonAndNis() throws Exception\n         assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n         assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n     }\n+\n+\n+    //---------------------------------------------------------------------------\n+    // Test the load( Schema... ) method\n+    //---------------------------------------------------------------------------\n+    /**\n+     * test loading the \"InetOrgPerson\", \"core\" and an empty schema. The empty schema\n+     * should be present in the registries, as it's a vaid schema\n+     */\n+    @Test\n+    public void testLoadSchemasWithDepsCoreInetOrgPersonAndBad() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        Schema system = loader.getSchema( \"system\" );\n+        Schema core = loader.getSchema( \"core\" );\n+        Schema empty = new DefaultSchema( \"empty\" );\n+        Schema cosine = loader.getSchema( \"cosine\" );\n+        Schema inetOrgPerson = loader.getSchema( \"InetOrgPerson\" );\n+\n+        assertTrue( schemaManager.load( system, core, empty, cosine, inetOrgPerson ) );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 50, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 286, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 5, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"empty\" ) );\n+    }\n }",
                "additions": 227,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/41e75f7daf23cc2c1a9bf8363a96390b9e402752/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadTest.java",
                "status": "modified",
                "changes": 282,
                "deletions": 55,
                "sha": "ba267b259ae89c03a517f2be2beb7c3635fb3001",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/41e75f7daf23cc2c1a9bf8363a96390b9e402752/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadTest.java",
                "filename": "ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadTest.java?ref=41e75f7daf23cc2c1a9bf8363a96390b9e402752"
            },
            {
                "patch": "@@ -0,0 +1,517 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *  \n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License. \n+ *  \n+ */\n+package org.apache.directory.server.schema;\n+\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.directory.shared.ldap.schema.SchemaManager;\n+import org.apache.directory.shared.ldap.schema.ldif.extractor.SchemaLdifExtractor;\n+import org.apache.directory.shared.schema.DefaultSchemaManager;\n+import org.apache.directory.shared.schema.loader.ldif.LdifSchemaLoader;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+\n+/**\n+ * A test class for SchemaManager loadWithDeps() method. We test those methods here :\n+ * \n+ *  Server API\n+ *     boolean loadWithDeps( Schema... schemas ) throws Exception\n+ *     boolean loadWithDeps( String... schemas ) throws Exception\n+ *\n+ *  Studio API :\n+ *     boolean loadWithDepsRelaxed( Schema... schemas ) throws Exception\n+ *     boolean loadWithDepsRelaxed( String... schemas ) throws Exception\n+ *\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ * @version $Rev$, $Date$\n+ */\n+public class SchemaManagerLoadWithDepsTest\n+{\n+    // A directory in which the ldif files will be stored\n+    private static String workingDirectory;\n+\n+    // The schema repository\n+    private static File schemaRepository;\n+\n+\n+    @BeforeClass\n+    public static void setup() throws Exception\n+    {\n+        workingDirectory = System.getProperty( \"workingDirectory\" );\n+\n+        if ( workingDirectory == null )\n+        {\n+            String path = SchemaManagerLoadWithDepsTest.class.getResource( \"\" ).getPath();\n+            int targetPos = path.indexOf( \"target\" );\n+            workingDirectory = path.substring( 0, targetPos + 6 );\n+        }\n+\n+        schemaRepository = new File( workingDirectory, \"schema\" );\n+\n+        // Cleanup the target directory\n+        FileUtils.deleteDirectory( schemaRepository );\n+\n+        SchemaLdifExtractor extractor = new SchemaLdifExtractor( new File( workingDirectory ) );\n+        extractor.extractOrCopy();\n+    }\n+\n+\n+    @AfterClass\n+    public static void cleanup() throws IOException\n+    {\n+        // Cleanup the target directory\n+        FileUtils.deleteDirectory( schemaRepository );\n+    }\n+\n+\n+    //-------------------------------------------------------------------------\n+    // Test the load( String... schemaName) method\n+    //-------------------------------------------------------------------------\n+    /**\n+     * test loading the \"system\" schema \n+     */\n+    @Test\n+    public void testLoadSystem() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"system\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 38, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 9, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 141, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 1, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"core\" schema, which depends on \"system\"\n+     */\n+    @Test\n+    public void testLoadCore() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"core\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 92, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 36, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 222, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 2, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"apache\" schema, which depends on \"system\" and \"core\"\n+     */\n+    @Test\n+    public void testLoadApache() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"apache\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 145, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 43, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 43, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 43, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 53, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 62, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 66, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 307, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 3, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"apache\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"apacheMeta\" schema, which depends on \"system\"\n+     */\n+    @Test\n+    public void testLoadApacheMeta() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"apacheMeta\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 69, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 40, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 40, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 42, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 22, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 63, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 64, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 195, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 2, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"apachemeta\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"java\" schema, which depends on \"system\" and \"core\"\n+     */\n+    @Test\n+    public void testLoadJava() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"Java\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 99, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 41, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 234, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 3, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"Java\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"other\" schema, which depends on \"system\", \"core\",\n+     * \"apache\" and \"apacheMeta\"\n+     */\n+    @Test\n+    public void testLoadOther() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"other\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 176, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 48, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 48, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 50, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 66, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 66, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 71, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 361, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 5, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"apache\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"apacheMeta\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"other\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"cosine\" schema, which depends on \"system\" and \"core\"\n+     */\n+    @Test\n+    public void testLoadCosine() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"cosine\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 133, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 49, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 276, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 3, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"InetOrgPerson\" schema, which depends on \"system\", \"core\"\n+     * and \"cosine\"\n+     */\n+    @Test\n+    public void testLoadInetOrgPerson() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"InetOrgPerson\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 50, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 286, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 4, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"Collective\" schema, which depends on \"system\" and \"core\"\n+     */\n+    @Test\n+    public void testLoadCollective() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"Collective\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 105, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 36, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 235, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 3, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"collective\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"Krb5Kdc\" schema, which depends on \"system\" and \"core\"\n+     */\n+    @Test\n+    public void testLoadKrb5Kdc() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"Krb5Kdc\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 107, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 39, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 240, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 3, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"Krb5Kdc\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"nis\" schema, which depends on \"system\", \"core\" and \"cosine\",\n+     * but is disabled\n+     */\n+    @Test\n+    public void testLoadNis() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"nis\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 0, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 0, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 0, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 0, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 0, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 0, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 0, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 0, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 0, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+    }\n+\n+\n+    /**\n+     * Test loading a wrong schema\n+     */\n+    @Test\n+    public void testLoadWrongSchema() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"bad\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 0, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 0, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 0, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 0, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 0, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 0, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 0, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 0, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 0, schemaManager.getRegistries().getLoadedSchemas().size() );\n+    }\n+\n+\n+    /**\n+     * test loading the \"InetOrgPerson\" and \"core\" schema, which depends on \"system\" and \"cosine\"\n+     */\n+    @Test\n+    public void testLoadCoreAndInetOrgPerson() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"core\", \"InetOrgPerson\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 50, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 286, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 4, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"InetOrgPerson\", \"core\" and a bad schema\n+     */\n+    @Test\n+    public void testLoadCoreInetOrgPersonAndBad() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"core\", \"bad\", \"InetOrgPerson\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 50, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 286, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 4, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n+    }\n+\n+\n+    /**\n+     * test loading the \"InetOrgPerson\", \"core\" and a disabled schema\n+     */\n+    @Test\n+    public void testLoadCoreInetOrgPersonAndNis() throws Exception\n+    {\n+        LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n+        SchemaManager schemaManager = new DefaultSchemaManager( loader );\n+\n+        schemaManager.loadWithDeps( \"core\", \"nis\", \"InetOrgPerson\" );\n+\n+        assertTrue( schemaManager.getErrors().isEmpty() );\n+        assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 50, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 286, schemaManager.getOidRegistry().size() );\n+\n+        assertEquals( 4, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n+    }\n+}",
                "additions": 517,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/41e75f7daf23cc2c1a9bf8363a96390b9e402752/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadWithDepsTest.java",
                "status": "added",
                "changes": 517,
                "deletions": 0,
                "sha": "1056b8c93378be12647266904bd00512ae816e5d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/41e75f7daf23cc2c1a9bf8363a96390b9e402752/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadWithDepsTest.java",
                "filename": "ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadWithDepsTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadWithDepsTest.java?ref=41e75f7daf23cc2c1a9bf8363a96390b9e402752"
            }
        ],
        "bug_id": "directory-ldap-api_77",
        "parent": "https://github.com/apache/directory-ldap-api/commit/cc761603ad6c834d3bfd2c2494af4e0b0034d672",
        "message": "o Fixed the load( schema...) method which was throwing a NPE\no Split the load tests class in two and added some more tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@887566 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/5ee0bab39fdf1edabb55bb11c8cc626958399546",
        "file": [
            {
                "patch": "@@ -345,7 +345,7 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n                 LdapURL referral = referralIterator.next();\n \n                 // Ecode the current referral\n-                Value.encode( buffer, referral.getBytes() );\n+                Value.encode( buffer, referral.getBytesReference() );\n             }\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "320580c910e8ee93b5f450b3715ed15fec18271c",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java?ref=5ee0bab39fdf1edabb55bb11c8cc626958399546"
            },
            {
                "patch": "@@ -187,7 +187,7 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n             while ( replicatedContextIterator.hasNext() )\n             {\n                 LdapURL url = replicatedContextIterator.next();\n-                Value.encode( bb, url.getBytes() );\n+                Value.encode( bb, url.getBytesReference() );\n             }\n         }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnect.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "86cdb6056f1c13c1b0a0eb99e63ef37643adb079",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnect.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnect.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnect.java?ref=5ee0bab39fdf1edabb55bb11c8cc626958399546"
            },
            {
                "patch": "@@ -1410,13 +1410,30 @@ public int getNbBytes()\n     }\n     \n     /**\n-     * @return the bytes representing this LdapURL\n+     * @return a reference on the interned bytes representing this LdapURL\n      */\n-    public byte[] getBytes()\n+    public byte[] getBytesReference()\n     {\n         return bytes;\n     }\n     \n+    /**\n+     * @return a copy of the bytes representing this LdapURL\n+     */\n+    public byte[] getBytesCopy()\n+    {\n+        if ( bytes != null )\n+        {\n+            byte[] copy = new byte[bytes.length];\n+            System.arraycopy( bytes, 0, copy, 0, bytes.length );\n+            return copy;\n+        }\n+        else\n+        {\n+            return null;\n+        }\n+    }\n+    \n     /**\n      * @return the LdapURL as a String\n      */",
                "additions": 19,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/codec/util/LdapURL.java",
                "status": "modified",
                "changes": 21,
                "deletions": 2,
                "sha": "22a0a7ce2630b26a7fbdff740aac7580fe8323a3",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/codec/util/LdapURL.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/util/LdapURL.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/util/LdapURL.java?ref=5ee0bab39fdf1edabb55bb11c8cc626958399546"
            },
            {
                "patch": "@@ -19,8 +19,6 @@\n  */\n package org.apache.directory.shared.ldap.entry;\n \n-import java.io.Serializable;\n-\n \n /**\n  * An internal interface for a ModificationItem. The name has been\n@@ -29,7 +27,7 @@\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  * @version $Rev$, $Date$\n  */\n-public interface Modification extends Cloneable, Serializable\n+public interface Modification extends Cloneable\n {\n     /**\n      *  @return the operation",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/entry/Modification.java",
                "status": "modified",
                "changes": 4,
                "deletions": 3,
                "sha": "d4c1e5008414ba9b844f7699e8a7836cfd136992",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/entry/Modification.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/entry/Modification.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/entry/Modification.java?ref=5ee0bab39fdf1edabb55bb11c8cc626958399546"
            },
            {
                "patch": "@@ -79,7 +79,7 @@ public ClientBinaryValue( byte[] wrapped )\n         }\r\n         else\r\n         {\r\n-            wrapped = null;\r\n+            this.wrapped = null;\r\n         }\r\n         \r\n         normalized = false;\r\n@@ -228,8 +228,10 @@ public int compareTo( Value<byte[]> value )\n             return ByteArrayComparator.INSTANCE.compare( getNormalizedValue(), binaryValue.getNormalizedValue() );\r\n         }\r\n         \r\n-        throw new NotImplementedException( \"I don't really know how to compare anything other \" +\r\n-                \"than ServerBinaryValues at this point in time.\" );\r\n+        String message = \"I don't really know how to compare anything other \" +\r\n+            \"than ServerBinaryValues at this point in time.\"; \r\n+        LOG.error( message );\r\n+        throw new NotImplementedException( message );\r\n     }\r\n \r\n \r",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/entry/client/ClientBinaryValue.java",
                "status": "modified",
                "changes": 8,
                "deletions": 3,
                "sha": "b5f64fe0cf27a88ac17a99fc2be9d3b05ce1e23e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/entry/client/ClientBinaryValue.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/entry/client/ClientBinaryValue.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/entry/client/ClientBinaryValue.java?ref=5ee0bab39fdf1edabb55bb11c8cc626958399546"
            },
            {
                "patch": "@@ -47,20 +47,24 @@\n      * @param regexes\n      *            the set of regular expressions used to transform values\n      */\n-    public RegexNormalizer(Pattern[] regexes)\n+    public RegexNormalizer( Pattern[] regexes )\n     {\n         if ( regexes != null )\n         {\n             this.regexes = new Pattern[ regexes.length ];\n             System.arraycopy( regexes, 0, this.regexes, 0, regexes.length );\n-        } else {\n-            this.regexes = null;\n-        }\n-        matchers = new Matcher[regexes.length];\n \n-        for ( int i = 0; i < regexes.length; i++ )\n+            matchers = new Matcher[regexes.length];\n+\n+            for ( int i = 0; i < regexes.length; i++ )\n+            {\n+                matchers[i] = regexes[i].matcher( \"\" );\n+            }\n+        } \n+        else \n         {\n-            matchers[i] = regexes[i].matcher( \"\" );\n+            this.regexes = null;\n+            matchers = new Matcher[0];\n         }\n     }\n ",
                "additions": 11,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/schema/RegexNormalizer.java",
                "status": "modified",
                "changes": 18,
                "deletions": 7,
                "sha": "4a45956356ec437581951d8e478393aeba3bb89b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/schema/RegexNormalizer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/RegexNormalizer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/RegexNormalizer.java?ref=5ee0bab39fdf1edabb55bb11c8cc626958399546"
            },
            {
                "patch": "@@ -2004,7 +2004,7 @@ public static final boolean isAlphaASCII( byte[] bytes, int index )\n         }\n         else\n         {\n-            byte c = bytes[index++];\n+            byte c = bytes[index];\n \n             if ( ( ( c | 0x7F ) != 0x7F ) || ( ALPHA[c] == false ) )\n             {\n@@ -2035,7 +2035,7 @@ public static final boolean isAlphaASCII( char[] chars, int index )\n         }\n         else\n         {\n-            char c = chars[index++];\n+            char c = chars[index];\n \n             if ( ( c > 127 ) || ( ALPHA[c] == false ) )\n             {\n@@ -2073,7 +2073,7 @@ public static final boolean isAlphaASCII( String string, int index )\n         }\n         else\n         {\n-            char c = string.charAt( index++ );\n+            char c = string.charAt( index );\n \n             if ( ( c > 127 ) || ( ALPHA[c] == false ) )\n             {\n@@ -2111,7 +2111,7 @@ public static final boolean isAlphaLowercaseASCII( String string, int index )\n         }\n         else\n         {\n-            char c = string.charAt( index++ );\n+            char c = string.charAt( index );\n \n             if ( ( c > 127 ) || ( ALPHA_LOWER_CASE[c] == false ) )\n             {\n@@ -2149,7 +2149,7 @@ public static final boolean isAlphaUppercaseASCII( String string, int index )\n         }\n         else\n         {\n-            char c = string.charAt( index++ );\n+            char c = string.charAt( index );\n \n             if ( ( c > 127 ) || ( ALPHA_UPPER_CASE[c] == false ) )\n             {\n@@ -2278,7 +2278,7 @@ public static final boolean isAlphaDigit( String string, int index )\n         }\n         else\n         {\n-            char c = string.charAt( index++ );\n+            char c = string.charAt( index );\n \n             if ( ( c > 127 ) || ( ALPHA_DIGIT[c] == false ) )\n             {\n@@ -2308,7 +2308,7 @@ public static final boolean isAlphaDigitMinus( byte[] bytes, int index )\n         }\n         else\n         {\n-            byte c = bytes[index++];\n+            byte c = bytes[index];\n \n             if ( ( ( c | 0x7F ) != 0x7F ) || ( CHAR[c] == false ) )\n             {\n@@ -2338,7 +2338,7 @@ public static final boolean isAlphaDigitMinus( char[] chars, int index )\n         }\n         else\n         {\n-            char c = chars[index++];\n+            char c = chars[index];\n \n             if ( ( c > 127 ) || ( CHAR[c] == false ) )\n             {\n@@ -2375,7 +2375,7 @@ public static final boolean isAlphaDigitMinus( String string, int index )\n         }\n         else\n         {\n-            char c = string.charAt( index++ );\n+            char c = string.charAt( index );\n \n             if ( ( c > 127 ) || ( CHAR[c] == false ) )\n             {\n@@ -3246,9 +3246,7 @@ public static final String mapToString( Map<?,?> map )\n         StringBuffer sb = new StringBuffer();\n         boolean isFirst = true;\n \n-        Iterator<?> iter = map.keySet().iterator();\n-\n-        while ( iter.hasNext() )\n+        for ( Map.Entry<?, ?> entry:map.entrySet() )\n         {\n             if ( isFirst )\n             {\n@@ -3259,9 +3257,8 @@ public static final String mapToString( Map<?,?> map )\n                 sb.append( \", \" );\n             }\n \n-            Object key = iter.next();\n-            sb.append( key );\n-            sb.append( \" = '\" ).append( map.get( key ) ).append( \"'\" );\n+            sb.append( entry.getKey() );\n+            sb.append( \" = '\" ).append( entry.getValue() ).append( \"'\" );\n         }\n \n         return sb.toString();\n@@ -3285,16 +3282,12 @@ public static final String mapToString( Map<?,?> map, String tabs )\n \n         StringBuffer sb = new StringBuffer();\n \n-        Iterator<?> iter = map.keySet().iterator();\n-\n-        while ( iter.hasNext() )\n+        for ( Map.Entry<?, ?> entry:map.entrySet() )\n         {\n-            Object key = iter.next();\n             sb.append( tabs );\n-            sb.append( key );\n-            Object value = map.get( key );\n+            sb.append( entry.getKey() );\n \n-            sb.append( \" = '\" ).append( value.toString() ).append( \"'\\n\" );\n+            sb.append( \" = '\" ).append( entry.getValue().toString() ).append( \"'\\n\" );\n         }\n \n         return sb.toString();",
                "additions": 15,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "status": "modified",
                "changes": 37,
                "deletions": 22,
                "sha": "e40b0b2b113e174143ceef3cc8bf7f3bc26f9696",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5ee0bab39fdf1edabb55bb11c8cc626958399546/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java?ref=5ee0bab39fdf1edabb55bb11c8cc626958399546"
            }
        ],
        "bug_id": "directory-ldap-api_78",
        "parent": "https://github.com/apache/directory-ldap-api/commit/fb481b547053dd327b7dabd53d698e216386db1c",
        "message": "Using FindBugs, and fixed :\no Potential NPE\no Removed useless incrementations\no Added a method in LdapURL to return a copy of the bytes\no Improved the use of Map iterators\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@637403 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/71b1fb81bada4c855ba35bd142f303a38854144c",
        "file": [
            {
                "patch": "@@ -700,7 +700,7 @@ public static Entry reverseModify( LdapDN dn, List<ModificationItemImpl> forward\n                                        Attributes modifiedEntry ) throws NamingException\n     {\n         // First, protect the original entry by cloning it : we will modify it\n-        Attributes clonedEntry = (Attributes)modifiedEntry.clone();\n+        Attributes clonedEntry = ( Attributes ) modifiedEntry.clone();\n \n         Entry entry = new Entry();\n         entry.setChangeType( ChangeType.Modify );\n@@ -786,7 +786,8 @@ public static Entry reverseModify( LdapDN dn, List<ModificationItemImpl> forward\n         // Special case if we don't have any reverse modifications\n         if ( reverseModifications.size() == 0 )\n         {\n-            return null;\n+            throw new IllegalArgumentException( \"Could not deduce reverse modifications from provided modifications: \"\n+                    + forwardModifications );\n         }\n \n         // Now, push the reversed list into the entry",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/71b1fb81bada4c855ba35bd142f303a38854144c/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifUtils.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "5a6221ba803caf45b2a5d0781ac8250d0b2e33e9",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/71b1fb81bada4c855ba35bd142f303a38854144c/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifUtils.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/ldif/LdifUtils.java?ref=71b1fb81bada4c855ba35bd142f303a38854144c"
            },
            {
                "patch": "@@ -1606,16 +1606,16 @@ public static LdapDN normalize( LdapDN dn, Map<String, OidNormalizer> oidsMap )\n      * @throws InvalidNameException If the DN is invalid.\n      * @throws NamingException If something went wrong.\n      */\n-    public void normalize( Map<String, OidNormalizer> oidsMap ) throws InvalidNameException, NamingException\n+    public LdapDN normalize( Map<String, OidNormalizer> oidsMap ) throws InvalidNameException, NamingException\n     {\n         if ( ( oidsMap == null ) || ( oidsMap.size() == 0 ) )\n         {\n-            return;\n+            return this;\n         }\n \n         if ( size() == 0 )\n         {\n-            return;\n+            return this;\n         }\n \n         Enumeration<Rdn> localRdns = getAllRdn();\n@@ -1632,6 +1632,7 @@ public void normalize( Map<String, OidNormalizer> oidsMap ) throws InvalidNameEx\n \n         normalizeInternal();\n         normalized = true;\n+        return this;\n     }\n \n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/71b1fb81bada4c855ba35bd142f303a38854144c/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "status": "modified",
                "changes": 7,
                "deletions": 3,
                "sha": "26dcac7c02e5a5bb4728598b4f1414b098f90ad1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/71b1fb81bada4c855ba35bd142f303a38854144c/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/name/LdapDN.java?ref=71b1fb81bada4c855ba35bd142f303a38854144c"
            },
            {
                "patch": "@@ -0,0 +1,140 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.directory.shared.ldap.util;\r\n+\r\n+\r\n+import javax.naming.directory.Attribute;\r\n+import javax.naming.directory.DirContext;\r\n+import javax.naming.NamingEnumeration;\r\n+import javax.naming.NamingException;\r\n+\r\n+\r\n+/**\r\n+ * A read only wrapper around an Attributes object.\r\n+ *\r\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\r\n+ * @version $Rev$, $Date$\r\n+ */\r\n+public class ImmutableAttributeWrapper implements Attribute\r\n+{\r\n+    private final Attribute wrapped;\r\n+\r\n+\r\n+    public ImmutableAttributeWrapper( Attribute wrapped )\r\n+    {\r\n+        this.wrapped = wrapped;\r\n+    }\r\n+\r\n+\r\n+    public NamingEnumeration<?> getAll() throws NamingException\r\n+    {\r\n+        return wrapped.getAll();\r\n+    }\r\n+\r\n+\r\n+    public Object get() throws NamingException\r\n+    {\r\n+        return wrapped.get();\r\n+    }\r\n+\r\n+\r\n+    public int size()\r\n+    {\r\n+        return wrapped.size();\r\n+    }\r\n+\r\n+\r\n+    public String getID()\r\n+    {\r\n+        return wrapped.getID();\r\n+    }\r\n+\r\n+\r\n+    public boolean contains( Object attrVal )\r\n+    {\r\n+        return wrapped.contains( attrVal );\r\n+    }\r\n+\r\n+\r\n+    public boolean add( Object attrVal )\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Value addition not supported for immutable attribute\" );\r\n+    }\r\n+\r\n+\r\n+    public boolean remove( Object attrval )\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Value removal not supported for immutable attribute\" );\r\n+    }\r\n+\r\n+\r\n+    public void clear()\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Clearing all values not supported for immutable attribute\" );\r\n+    }\r\n+\r\n+\r\n+    public DirContext getAttributeSyntaxDefinition() throws NamingException\r\n+    {\r\n+        return wrapped.getAttributeSyntaxDefinition();\r\n+    }\r\n+\r\n+\r\n+    public DirContext getAttributeDefinition() throws NamingException\r\n+    {\r\n+        return wrapped.getAttributeDefinition();\r\n+    }\r\n+\r\n+\r\n+    @SuppressWarnings ( { \"CloneDoesntCallSuperClone\" } )\r\n+    public Object clone()\r\n+    {\r\n+        throw new IllegalStateException( \"Now why would you ever want to clone an immutable object?\" );\r\n+    }\r\n+\r\n+\r\n+    public boolean isOrdered()\r\n+    {\r\n+        return wrapped.isOrdered();\r\n+    }\r\n+\r\n+\r\n+    public Object get( int ix ) throws NamingException\r\n+    {\r\n+        return wrapped.get( ix );\r\n+    }\r\n+\r\n+\r\n+    public Object remove( int ix )\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Value removal not supported for immutable attribute\" );\r\n+    }\r\n+\r\n+\r\n+    public void add( int ix, Object attrVal )\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Value addition not supported for immutable attribute\" );\r\n+    }\r\n+\r\n+\r\n+    public Object set( int ix, Object attrVal )\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Value alteration is not supported for immutable attribute\" );\r\n+    }\r\n+}\r",
                "additions": 140,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/71b1fb81bada4c855ba35bd142f303a38854144c/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributeWrapper.java",
                "status": "added",
                "changes": 140,
                "deletions": 0,
                "sha": "a8b82a077eee4e400bae083f70ca5c18df961ad1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/71b1fb81bada4c855ba35bd142f303a38854144c/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributeWrapper.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributeWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributeWrapper.java?ref=71b1fb81bada4c855ba35bd142f303a38854144c"
            },
            {
                "patch": "@@ -0,0 +1,140 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *  http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.directory.shared.ldap.util;\r\n+\r\n+\r\n+import javax.naming.NamingEnumeration;\r\n+import javax.naming.NamingException;\r\n+import javax.naming.directory.Attribute;\r\n+import javax.naming.directory.Attributes;\r\n+\r\n+\r\n+/**\r\n+ * Document me!\r\n+ *\r\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\r\n+ * @version $Rev$, $Date$\r\n+ */\r\n+public class ImmutableAttributesWrapper implements Attributes\r\n+{\r\n+    private final Attributes wrapped;\r\n+\r\n+\r\n+    public ImmutableAttributesWrapper( Attributes wrapped )\r\n+    {\r\n+        this.wrapped = wrapped;\r\n+    }\r\n+\r\n+\r\n+    public boolean isCaseIgnored()\r\n+    {\r\n+        return wrapped.isCaseIgnored();\r\n+    }\r\n+\r\n+\r\n+    public int size()\r\n+    {\r\n+        return wrapped.size();\r\n+    }\r\n+\r\n+\r\n+    public Attribute get( String attrID )\r\n+    {\r\n+        return new ImmutableAttributeWrapper( wrapped.get( attrID ) );\r\n+    }\r\n+\r\n+\r\n+    public NamingEnumeration<? extends Attribute> getAll()\r\n+    {\r\n+        return new ImmutableEnumeration( wrapped.getAll() );\r\n+    }\r\n+\r\n+\r\n+    public NamingEnumeration<String> getIDs()\r\n+    {\r\n+        return wrapped.getIDs();\r\n+    }\r\n+\r\n+\r\n+    public Attribute put( String attrID, Object val )\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Putting attributes not supported by immutable attributes\" );\r\n+    }\r\n+\r\n+\r\n+    public Attribute put( Attribute attr )\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Putting attributes not supported by immutable attributes\" );\r\n+    }\r\n+\r\n+\r\n+    public Attribute remove( String attrID )\r\n+    {\r\n+        throw new UnsupportedOperationException( \"Removing attributes not supported by immutable attributes\" );\r\n+    }\r\n+\r\n+\r\n+    @SuppressWarnings ( { \"CloneDoesntCallSuperClone\" } )\r\n+    public Object clone()\r\n+    {\r\n+        throw new IllegalStateException( \"Now why would you want to clone() an immutable object in the first place.\" );\r\n+    }\r\n+\r\n+\r\n+    class ImmutableEnumeration implements NamingEnumeration\r\n+    {\r\n+        private NamingEnumeration wrappedEnum;\r\n+\r\n+\r\n+        public ImmutableEnumeration( NamingEnumeration<? extends Attribute> all )\r\n+        {\r\n+            wrappedEnum = all;\r\n+        }\r\n+\r\n+\r\n+        public Attribute next() throws NamingException\r\n+        {\r\n+            return new ImmutableAttributeWrapper( ( Attribute ) wrappedEnum.next() );\r\n+        }\r\n+\r\n+\r\n+        public boolean hasMore() throws NamingException\r\n+        {\r\n+            return wrappedEnum.hasMore();\r\n+        }\r\n+\r\n+\r\n+        public void close() throws NamingException\r\n+        {\r\n+            wrappedEnum.close();\r\n+        }\r\n+\r\n+\r\n+        public boolean hasMoreElements()\r\n+        {\r\n+            return wrappedEnum.hasMoreElements();\r\n+        }\r\n+\r\n+\r\n+        public Attribute nextElement()\r\n+        {\r\n+            return new ImmutableAttributeWrapper( ( Attribute ) wrappedEnum.nextElement() );\r\n+        }\r\n+    }\r\n+}\r",
                "additions": 140,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/71b1fb81bada4c855ba35bd142f303a38854144c/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributesWrapper.java",
                "status": "added",
                "changes": 140,
                "deletions": 0,
                "sha": "a723158ffed233950119ca01130899616db8dc06",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/71b1fb81bada4c855ba35bd142f303a38854144c/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributesWrapper.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributesWrapper.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/ImmutableAttributesWrapper.java?ref=71b1fb81bada4c855ba35bd142f303a38854144c"
            }
        ],
        "bug_id": "directory-ldap-api_79",
        "parent": "https://github.com/apache/directory-ldap-api/commit/88dcf854fc046bf41947579cabb54143061ee65a",
        "message": "changes ...\n\n o fixed problem which hid NPE in LdifUtils\n o added a couple wrappers around an Attributes object for immutibility\n o made normalize() method return 'this' so I can chain ops\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@601651 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/739133be9b2acc64ad2ccacd9fd208dc267f62cd",
        "file": [
            {
                "patch": "@@ -1229,6 +1229,11 @@ public static void applyModification( Attributes entry, ModificationItem modific\n                     // We just have to remove the values from the original\n                     // entry, if they exist.\n                     modifiedAttr = entry.get( modificationId ) ;\n+                    \n+                    if ( modifiedAttr == null )\n+                    {\n+                        break;\n+                    }\n \n                     NamingEnumeration<?> values = modAttr.getAll();\n                     \n@@ -1239,6 +1244,12 @@ public static void applyModification( Attributes entry, ModificationItem modific\n                         // normalized before.\n                         modifiedAttr.remove( values.nextElement() );\n                     }\n+                    \n+                    if ( modifiedAttr.size() == 0 )\n+                    {\n+                        // If this was the last value, remove the attribute\n+                        entry.remove( modifiedAttr.getID() );\n+                    }\n                 }\n \n                 break;",
                "additions": 11,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/739133be9b2acc64ad2ccacd9fd208dc267f62cd/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "status": "modified",
                "changes": 11,
                "deletions": 0,
                "sha": "eb6d7f79becd99bf3a18e5cdf2fe48dcf59c0042",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/739133be9b2acc64ad2ccacd9fd208dc267f62cd/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java?ref=739133be9b2acc64ad2ccacd9fd208dc267f62cd"
            },
            {
                "patch": "@@ -0,0 +1,288 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *  \n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License. \n+ *  \n+ */\n+package org.apache.directory.shared.ldap.util;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import javax.naming.NamingEnumeration;\n+import javax.naming.NamingException;\n+import javax.naming.directory.Attribute;\n+import javax.naming.directory.Attributes;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.ModificationItem;\n+\n+import org.apache.directory.shared.ldap.message.AttributeImpl;\n+import org.apache.directory.shared.ldap.message.AttributesImpl;\n+import org.apache.directory.shared.ldap.message.ModificationItemImpl;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ * A test case for the AttributeUtils methods \n+ *\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ * @version $Rev$\n+ */\n+public class AttributeUtilsTest\n+{\n+    /**\n+     * Test a addModification applied to an empty entry\n+     */\n+    @Test\n+    public void testApplyAddModificationToEmptyEntry() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        ModificationItem modification = new ModificationItemImpl(DirContext.ADD_ATTRIBUTE, attr );\n+        AttributeUtils.applyModification( entry, modification );\n+        assertNotNull( entry.get(  \"cn\" ) );\n+        assertEquals( 1, entry.size() );\n+        assertEquals( attr, entry.get( \"cn\" ) );\n+    }\n+\n+\n+    /**\n+     * Test a addModification applied to an entry \n+     */\n+    @Test\n+    public void testApplyAddModificationToEntry() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        entry.put( \"dc\", \"apache\" );\n+        assertEquals( 1, entry.size() );\n+\n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        ModificationItem modification = new ModificationItemImpl(DirContext.ADD_ATTRIBUTE, attr );\n+        AttributeUtils.applyModification( entry, modification );\n+        assertNotNull( entry.get(  \"cn\" ) );\n+        assertEquals( 2, entry.size() );\n+        assertEquals( attr, entry.get( \"cn\" ) );\n+    }\n+\n+\n+    /**\n+     * Test a addModification applied to an entry with the same attribute\n+     * but with another value \n+     */\n+    @Test\n+    public void testApplyAddModificationToEntryWithValues() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        entry.put( \"cn\", \"apache\" );\n+        assertEquals( 1, entry.size() );\n+\n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        ModificationItem modification = new ModificationItemImpl(DirContext.ADD_ATTRIBUTE, attr );\n+        AttributeUtils.applyModification( entry, modification );\n+        assertNotNull( entry.get(  \"cn\" ) );\n+        assertEquals( 1, entry.size() );\n+        \n+        NamingEnumeration<?> values = entry.get( \"cn\" ).getAll();\n+        \n+        assertTrue( values.hasMoreElements() );\n+        \n+        Set<String> expectedValues = new HashSet<String>();\n+        expectedValues.add( \"apache\" );\n+        expectedValues.add( \"test\" );\n+        \n+        while ( values.hasMoreElements() )\n+        {\n+            String value = (String)values.nextElement();\n+            \n+            assertTrue( expectedValues.contains( value ) );\n+            \n+            expectedValues.remove( value );\n+        }\n+        \n+        assertEquals( 0, expectedValues.size() );\n+    }\n+\n+\n+    /**\n+     * Test a addModification applied to an entry with the same attribute\n+     * and the same value \n+     */\n+    @Test\n+    public void testApplyAddModificationToEntryWithSameValue() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        Attribute cn = new AttributeImpl( \"cn\" );\n+        cn.add( \"test\" );\n+        cn.add( \"apache\" );\n+        entry.put( cn );\n+        \n+        assertEquals( 1, entry.size() );\n+\n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        ModificationItem modification = new ModificationItemImpl(DirContext.ADD_ATTRIBUTE, attr );\n+        AttributeUtils.applyModification( entry, modification );\n+        assertNotNull( entry.get(  \"cn\" ) );\n+        assertEquals( 1, entry.size() );\n+        \n+        NamingEnumeration<?> values = entry.get( \"cn\" ).getAll();\n+        \n+        assertTrue( values.hasMoreElements() );\n+        \n+        Set<String> expectedValues = new HashSet<String>();\n+        expectedValues.add( \"apache\" );\n+        expectedValues.add( \"test\" );\n+        \n+        while ( values.hasMoreElements() )\n+        {\n+            String value = (String)values.nextElement();\n+            \n+            assertTrue( expectedValues.contains( value ) );\n+            \n+            expectedValues.remove( value );\n+        }\n+        \n+        assertEquals( 0, expectedValues.size() );\n+    }\n+\n+    \n+    /**\n+     * Test the deletion of an attribute into an empty entry\n+     */\n+    @Test\n+    public void testApplyRemoveModificationFromEmptyEntry() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        ModificationItem modification = new ModificationItemImpl(DirContext.REMOVE_ATTRIBUTE, attr );\n+        AttributeUtils.applyModification( entry, modification );\n+        assertNull( entry.get( \"cn\" ) );\n+        assertEquals( 0, entry.size() );\n+    }\n+\n+\n+    /**\n+     * Test the deletion of an attribute into an entry which does not contain the attribute\n+     */\n+    @Test\n+    public void testApplyRemoveModificationFromEntryAttributeNotPresent() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        Attribute dc = new AttributeImpl( \"dc\", \"apache\" );\n+        entry.put( dc );\n+        \n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        \n+        ModificationItem modification = new ModificationItemImpl(DirContext.REMOVE_ATTRIBUTE, attr );\n+        \n+        AttributeUtils.applyModification( entry, modification );\n+        \n+        assertNull( entry.get( \"cn\" ) );\n+        assertNotNull( entry.get( \"dc\" ) );\n+        assertEquals( 1, entry.size() );\n+        assertEquals( dc, entry.get( \"dc\" ) );\n+    }\n+\n+\n+    /**\n+     * Test the deletion of an attribute into an entry which contains the attribute\n+     * but without the value to be deleted\n+     */\n+    @Test\n+    public void testApplyRemoveModificationFromEntryAttributeNotSameValue() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        Attribute cn = new AttributeImpl( \"cn\", \"apache\" );\n+        entry.put( cn );\n+        \n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        \n+        ModificationItem modification = new ModificationItemImpl(DirContext.REMOVE_ATTRIBUTE, attr );\n+        \n+        AttributeUtils.applyModification( entry, modification );\n+        \n+        assertNotNull( entry.get( \"cn\" ) );\n+        assertEquals( 1, entry.size() );\n+        assertEquals( cn, entry.get( \"cn\" ) );\n+    }\n+\n+\n+    /**\n+     * Test the deletion of an attribute into an entry which contains the attribute.\n+     * \n+     * The entry should not contain the attribute after the operation\n+     */\n+    @Test\n+    public void testApplyRemoveModificationFromEntrySameAttributeSameValue() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        Attribute cn = new AttributeImpl( \"cn\", \"test\" );\n+        entry.put( cn );\n+        \n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        \n+        ModificationItem modification = new ModificationItemImpl(DirContext.REMOVE_ATTRIBUTE, attr );\n+        \n+        AttributeUtils.applyModification( entry, modification );\n+        \n+        assertNull( entry.get( \"cn\" ) );\n+        assertEquals( 0, entry.size() );\n+    }\n+\n+\n+    /**\n+     * Test the deletion of an attribute into an entry which contains the attribute\n+     * with more than one value\n+     * \n+     * The entry should contain the attribute after the operation, but with one less value\n+     */\n+    @Test\n+    public void testApplyRemoveModificationFromEntrySameAttributeValues() throws NamingException\n+    {\n+        Attributes entry = new AttributesImpl();\n+        Attribute cn = new AttributeImpl( \"cn\", \"test\" );\n+        cn.add( \"apache\" );\n+        entry.put( cn );\n+        \n+        Attribute attr = new AttributeImpl( \"cn\", \"test\" );\n+        \n+        ModificationItem modification = new ModificationItemImpl(DirContext.REMOVE_ATTRIBUTE, attr );\n+        \n+        AttributeUtils.applyModification( entry, modification );\n+        \n+        assertNotNull( entry.get( \"cn\" ) );\n+        assertEquals( 1, entry.size() );\n+        \n+        Attribute modifiedAttr = entry.get( \"cn\" );\n+        \n+        NamingEnumeration<?> values = modifiedAttr.getAll();\n+        \n+        assertTrue( values.hasMoreElements() );\n+        \n+        boolean isFirst = true;\n+        \n+        while ( values.hasMoreElements() )\n+        {\n+            assertTrue( isFirst );\n+            \n+            isFirst = false;\n+            assertEquals( \"apache\", values.nextElement() );\n+        }\n+    }\n+}",
                "additions": 288,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/739133be9b2acc64ad2ccacd9fd208dc267f62cd/ldap/src/test/java/org/apache/directory/shared/ldap/util/AttributeUtilsTest.java",
                "status": "added",
                "changes": 288,
                "deletions": 0,
                "sha": "a2853991498303f97b3a3fa8828acbb16f918f4a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/739133be9b2acc64ad2ccacd9fd208dc267f62cd/ldap/src/test/java/org/apache/directory/shared/ldap/util/AttributeUtilsTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/util/AttributeUtilsTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/util/AttributeUtilsTest.java?ref=739133be9b2acc64ad2ccacd9fd208dc267f62cd"
            }
        ],
        "bug_id": "directory-ldap-api_80",
        "parent": "https://github.com/apache/directory-ldap-api/commit/32709d019bd6ae2b1db0e3ac7691e2264fbc051e",
        "message": "Fixed a NPE\nFixed a bug when we romve the last value of an attribute : the attribute must be deleted\nAdded some tests for the applyModification() method\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@593967 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c",
        "file": [
            {
                "patch": "@@ -31,8 +31,7 @@\n     /**\n      * Creates a SyntaxChecker which accepts all values.\n      * \n-     * @param oid\n-     *            the oid of the Syntax this checker is associated with\n+     * @param oid the oid of the Syntax this checker is associated with\n      */\n     public AcceptAllSyntaxChecker(String oid)\n     {\n@@ -45,7 +44,7 @@ public AcceptAllSyntaxChecker(String oid)\n      * \n      * @see SyntaxChecker#isValidSyntax(Object)\n      */\n-    public boolean isValidSyntax( Object a_value )\n+    public boolean isValidSyntax( Object value )\n     {\n         return true;\n     }",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AcceptAllSyntaxChecker.java",
                "status": "modified",
                "changes": 5,
                "deletions": 3,
                "sha": "2e3af113dcc7edb0db11c4f243ad0bf33fe109b6",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AcceptAllSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AcceptAllSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AcceptAllSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -86,6 +86,18 @@ public AttributeTypeDescriptionSyntaxChecker()\n     {\n         super( SC_OID );\n     }\n+    \n+    /**\n+     * \n+     * Creates a new instance of AttributeTypeDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected AttributeTypeDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeDescriptionSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "320b96f4eb9d03bec334ac9b42017195f7807c09",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeDescriptionSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeDescriptionSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -38,11 +38,28 @@\n {\n     /** The Apache OID for meta syntax checker */\n     private static final String SC_OID = \"1.3.6.1.4.1.18060.0.4.0.0.3\";\n-    \n+\n+    /**\n+     * \n+     * Creates a new instance of AttributeTypeUsageSyntaxChecker.\n+     *\n+     */\n     public AttributeTypeUsageSyntaxChecker()\n     {\n         super( SC_OID );\n     }\n+\n+    /**\n+     * \n+     * Creates a new instance of AttributeTypeUsageSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected AttributeTypeUsageSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n     \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)",
                "additions": 18,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeUsageSyntaxChecker.java",
                "status": "modified",
                "changes": 19,
                "deletions": 1,
                "sha": "3348ccd25e637c21ecdcf2786e837817ffdf0bb0",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeUsageSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeUsageSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/AttributeTypeUsageSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -40,6 +40,18 @@ public BinarySyntaxChecker()\n         super( SC_OID );\n     }\n \n+    /**\n+     * \n+     * Creates a new instance of BinarySyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected BinarySyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /**\n      * @see org.apache.directory.shared.ldap.schema.syntax.SyntaxChecker#isValidSyntax(Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BinarySyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "6187a16e4a4057c22bc4de1c36e187f6b19c110b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BinarySyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BinarySyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BinarySyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -51,6 +51,18 @@ public BitStringSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of BitStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected BitStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /**\n      * A shared and static method used to check that the string is a BitString.\n      * A BitString is a string of bits, between quots and followed by a 'B' :",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BitStringSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "042ba5bec24749f0be5da2c8ff487cc419c242e7",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BitStringSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BitStringSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BitStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -49,6 +49,18 @@ public BooleanSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of BooleanSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected BooleanSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BooleanSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "93ddd27f8a9ae727c0c403feb95df60ee17617bb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BooleanSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BooleanSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/BooleanSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -96,6 +96,18 @@ public CountrySyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of CountrySyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected CountrySyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/CountrySyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "b28419663e647147a495b74a48d6d4b5ad0bc30d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/CountrySyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/CountrySyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/CountrySyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -67,6 +67,18 @@ public DITContentRuleDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of DITContentRuleDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DITContentRuleDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITContentRuleDescriptionSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "9f89d760bd42cf768a99e16ea4b5b791b9257709",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITContentRuleDescriptionSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITContentRuleDescriptionSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITContentRuleDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -68,6 +68,18 @@ public DITStructureRuleDescriptionSyntaxChecker()\n         super( SC_OID );\n     }\n \n+    /**\n+     * \n+     * Creates a new instance of DITStructureRuleDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DITStructureRuleDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITStructureRuleDescriptionSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "a1a6799ddc46ef5a5b14360603cdb9970ea312a9",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITStructureRuleDescriptionSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITStructureRuleDescriptionSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DITStructureRuleDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -46,6 +46,18 @@ public DNSyntaxChecker()\n         super( SC_OID );\n     }\n \n+    /**\n+     * \n+     * Creates a new instance of DNSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DNSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DNSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "7437b884c4f3c102c7225507cdd2d968f215c4ca",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DNSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DNSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DNSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -79,6 +79,18 @@ public DeliveryMethodSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of DeliveryMethodSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DeliveryMethodSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /**\n      * \n      * Check if the string contains a delivery method which has ",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DeliveryMethodSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "85b74e5da371538893f811228dfe23a09e2e531b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DeliveryMethodSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DeliveryMethodSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DeliveryMethodSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -49,6 +49,18 @@ public DirectoryStringSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of DirectoryStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected DirectoryStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DirectoryStringSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "21411284a957a1a4bfbaa2ebabaf07e23c84067e",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DirectoryStringSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DirectoryStringSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/DirectoryStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -86,6 +86,18 @@ public FacsimileTelephoneNumberSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of FacsimileTelephoneNumberSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected FacsimileTelephoneNumberSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/FacsimileTelephoneNumberSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "5e7764f5fc9670a369c6a1f0c18de4e3b827c5df",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/FacsimileTelephoneNumberSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/FacsimileTelephoneNumberSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/FacsimileTelephoneNumberSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -95,6 +95,18 @@ public GeneralizedTimeSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of GeneralizedTimeSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected GeneralizedTimeSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/GeneralizedTimeSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "1f13c4ed82766245464c2fd94fad0c53c1834598",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/GeneralizedTimeSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/GeneralizedTimeSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/GeneralizedTimeSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -48,6 +48,18 @@ public Ia5StringSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of Ia5StringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected Ia5StringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/Ia5StringSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "0962d262f36c210642eb60cad5c4d0fe449db84c",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/Ia5StringSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/Ia5StringSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/Ia5StringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -56,6 +56,18 @@ public IntegerSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of IntegerSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected IntegerSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/IntegerSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "aeb78e08046f6b72b7a9b62ded1dc5bcb93786fa",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/IntegerSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/IntegerSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/IntegerSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -52,6 +52,18 @@ public JpegSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of JpegSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected JpegSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/JpegSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "e84b65a4db0633d5b54f18f6b6a79e4b27ca1bed",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/JpegSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/JpegSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/JpegSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -60,6 +60,18 @@ public LdapSyntaxDescriptionSyntaxChecker()\n         super( SC_OID );\n     }\n \n+    /**\n+     * \n+     * Creates a new instance of LdapSyntaxDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected LdapSyntaxDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/LdapSyntaxDescriptionSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "a1108142c9dbbf1996feabfd010add7efb8b7fa9",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/LdapSyntaxDescriptionSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/LdapSyntaxDescriptionSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/LdapSyntaxDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -68,6 +68,18 @@ public MatchingRuleDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of MatchingRuleDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected MatchingRuleDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleDescriptionSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "3f4f4dea6e1c40341d9ba2156daf1df779503ae4",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleDescriptionSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleDescriptionSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -65,6 +65,18 @@ public MatchingRuleUseDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of MatchingRuleUseDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected MatchingRuleUseDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleUseDescriptionSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "ff1c99fb274f5f76d922d45a31d3b29d602e19af",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleUseDescriptionSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleUseDescriptionSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/MatchingRuleUseDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -55,6 +55,18 @@ public NameAndOptionalUIDSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of NameAndOptionalUIDSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NameAndOptionalUIDSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameAndOptionalUIDSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "77892cc0da1ecd9c45227dcb0e565e19cd8d9c99",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameAndOptionalUIDSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameAndOptionalUIDSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameAndOptionalUIDSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -66,6 +66,18 @@ public NameFormDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of NameFormDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NameFormDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameFormDescriptionSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "fd972c5beb4ce22aa5d68dd368d85a32d76a7458",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameFormDescriptionSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameFormDescriptionSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NameFormDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -51,6 +51,18 @@ public NumberSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of NumberSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NumberSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumberSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "b00be917666fa4e6cc480b8c708230ad1fe22aa4",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumberSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumberSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumberSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -57,6 +57,18 @@ public NumericOidSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of NumericOidSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NumericOidSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericOidSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "aa655216424131f09928294dad755353b36339a9",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericOidSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericOidSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericOidSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -55,6 +55,18 @@ public NumericStringSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of NumericStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected NumericStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericStringSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "f2a339e16abd7594fbab431136cacc8fd104224b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericStringSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericStringSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/NumericStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -72,6 +72,18 @@ public ObjectClassDescriptionSyntaxChecker()\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of ObjectClassDescriptionSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected ObjectClassDescriptionSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassDescriptionSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "ffe087b821a8753c234fb98e4a16ab5c21cde8b4",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassDescriptionSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassDescriptionSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassDescriptionSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -46,6 +46,18 @@ public ObjectClassTypeSyntaxChecker()\n     }\n \n     \n+    /**\n+     * \n+     * Creates a new instance of ObjectClassTypeSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected ObjectClassTypeSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassTypeSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "3e2e56b8aa0c95784d8cf6fc1730d84a732cbd15",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassTypeSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassTypeSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/ObjectClassTypeSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -48,6 +48,18 @@ public OctetStringSyntaxChecker()\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of OctetStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected OctetStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OctetStringSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "7b8b4e8dee7d83226d503875e143e4ad70a70100",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OctetStringSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OctetStringSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OctetStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -49,11 +49,28 @@\n     /** The Syntax OID */\n     private static final String SC_OID = \"1.3.6.1.4.1.18060.0.4.0.0.5\";\n     \n+    /**\n+     * \n+     * Creates a new instance of OidLenSyntaxChecker.\n+     *\n+     */\n     public OidLenSyntaxChecker()\n     {\n         super( SC_OID );\n     }\n     \n+    /**\n+     * \n+     * Creates a new instance of OidLenSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected OidLenSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 17,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidLenSyntaxChecker.java",
                "status": "modified",
                "changes": 17,
                "deletions": 0,
                "sha": "2981531344a4772cd226e560e4b1c3defd389fdb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidLenSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidLenSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidLenSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -62,6 +62,18 @@ public OidSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of OidSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected OidSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "7c23f545e4457d0210c9150f780e0f8ee400ede0",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/OidSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -91,6 +91,18 @@ public PrintableStringSyntaxChecker()\n     }\n     \n     \n+    /**\n+     * \n+     * Creates a new instance of PrintableStringSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected PrintableStringSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+    }\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/PrintableStringSyntaxChecker.java",
                "status": "modified",
                "changes": 12,
                "deletions": 0,
                "sha": "188ccf80da5010496ad55b332e0b9f3acd154eb4",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/PrintableStringSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/PrintableStringSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/PrintableStringSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -19,6 +19,9 @@\n  */\n package org.apache.directory.shared.ldap.schema.syntax;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n \n /**\n  * A SyntaxChecker implemented using Perl5 regular expressions to constrain\n@@ -30,7 +33,7 @@\n public class RegexSyntaxChecker extends AbstractSyntaxChecker\n {\n     /** the set of regular expressions */\n-    private final String[] expressions;\n+    private List<String> expressions;\n \n \n     /**\n@@ -45,10 +48,36 @@\n     public RegexSyntaxChecker( String oid, String[] matchExprArray )\n     {\n         super( oid );\n-        expressions = matchExprArray;\n+        \n+        if ( ( matchExprArray != null ) && ( matchExprArray.length != 0 ) )\n+        {\n+            expressions = new ArrayList<String>( matchExprArray.length );\n+            \n+            for ( String regexp:matchExprArray )\n+            {\n+                expressions.add( regexp );\n+            }\n+        }\n+        else\n+        {\n+            expressions = new ArrayList<String>();\n+        }\n     }\n \n \n+    /**\n+     * \n+     * Creates a new instance of RegexSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n+     */\n+    protected RegexSyntaxChecker( String oid )\n+    {\n+        super( oid );\n+        expressions = new ArrayList<String>();\n+    }\n+    \n     /**\n      * @see org.apache.directory.shared.ldap.schema.syntax.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */\n@@ -61,9 +90,9 @@ public boolean isValidSyntax( Object value )\n         {\n             str = ( String ) value;\n \n-            for ( int i = 0; i < expressions.length; i++ )\n+            for ( String regexp:expressions )\n             {\n-                match = match && str.matches( expressions[i] );\n+                match = match && str.matches( regexp );\n \n                 if ( !match )\n                 {\n@@ -74,4 +103,28 @@ public boolean isValidSyntax( Object value )\n \n         return match;\n     }\n+\n+    /**\n+     * Get the list of regexp stored into this SyntaxChecker\n+     * \n+     * @return AN array containing all the stored regexp\n+     */\n+    public String[] getExpressions()\n+    {\n+        return (String[])expressions.toArray();\n+    }\n+\n+    /**\n+     * Add a list of regexp to be applied by this SyntaxChecker\n+     * \n+     * @param expressions The regexp list to add\n+     */\n+    public void setExpressions( String[] expressions )\n+    {\n+        for ( String regexp:expressions )\n+        {\n+            this.expressions.add( regexp );\n+        }\n+\n+    }\n }",
                "additions": 57,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/RegexSyntaxChecker.java",
                "status": "modified",
                "changes": 61,
                "deletions": 4,
                "sha": "124ad41b957fd60267fefeb7a6206afdc0b820b2",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/RegexSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/RegexSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/RegexSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -37,7 +37,7 @@\n      * \n      * @return the object identifier of the Syntax this SyntaxChecker validates\n      */\n-    abstract String getSyntaxOid();\n+    String getSyntaxOid();\n \n \n     /**",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/SyntaxChecker.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "cdac1d38eeee89f08fbbe1291a40a691970d8d11",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/SyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/SyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/SyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -45,7 +45,7 @@\n public class TelephoneNumberSyntaxChecker extends AbstractSyntaxChecker\n {\n     /** The Syntax OID, according to RFC 4517, par. 3.3.31 */\n-    private static final String OID = \"1.3.6.1.4.1.1466.115.121.1.50\";\n+    private static final String SC_OID = \"1.3.6.1.4.1.1466.115.121.1.50\";\n     \n     /** Other regexps to extend the initial one */\n     private List<String> regexps;\n@@ -67,11 +67,13 @@\n      */\n     public TelephoneNumberSyntaxChecker()\n     {\n-        super( OID );\n+        super( SC_OID );\n     }\n \n     /**\n      * Creates a new instance of TelephoneNumberSyntaxChecker.\n+     * \n+     * @param The OID to associate with this SyntaxChecker\n      */\n     protected TelephoneNumberSyntaxChecker( String oid )\n     {",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "b871076af23ec20b6977b1aa3e92d1239f734bec",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/TelephoneNumberSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            },
            {
                "patch": "@@ -22,11 +22,6 @@\n \n import java.util.regex.Pattern;\n \n-import javax.naming.NamingException;\n-\n-\n-import org.apache.directory.shared.ldap.exception.LdapInvalidAttributeValueException;\n-import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.util.StringTools;\n \n \n@@ -63,10 +58,10 @@\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  * @version $Rev$\n  */\n-public class UtcTimeSyntaxChecker implements SyntaxChecker\n+public class UtcTimeSyntaxChecker extends AbstractSyntaxChecker\n {\n     /** The Syntax OID, according to RFC 4517, par. 3.3.34 */\n-    public static final String OID = \"1.3.6.1.4.1.1466.115.121.1.53\";\n+    private static final String SC_OID = \"1.3.6.1.4.1.1466.115.121.1.53\";\n     \n     /** The GeneralizedDate pattern matching */\n     private static final String UTC_TIME_PATTERN = \n@@ -90,30 +85,22 @@\n      */\n     public UtcTimeSyntaxChecker()\n     {\n+        super( SC_OID );\n     }\n     \n     \n-    /* (non-Javadoc)\n-     * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#assertSyntax(java.lang.Object)\n-     */\n-    public void assertSyntax( Object value ) throws NamingException\n-    {\n-        if ( ! isValidSyntax( value ) )\n-        {\n-            throw new LdapInvalidAttributeValueException( ResultCodeEnum.INVALID_ATTRIBUTE_SYNTAX );\n-        }\n-    }\n-\n-\n-    /* (non-Javadoc)\n-     * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#getSyntaxOid()\n+    /**\n+     * \n+     * Creates a new instance of UtcTimeSyntaxChecker.\n+     * \n+     * @param the oid to associate with this new SyntaxChecker\n+     *\n      */\n-    public String getSyntaxOid()\n+    protected UtcTimeSyntaxChecker( String oid )\n     {\n-        return OID;\n+        super( oid );\n     }\n-\n-\n+    \n     /* (non-Javadoc)\n      * @see org.apache.directory.shared.ldap.schema.SyntaxChecker#isValidSyntax(java.lang.Object)\n      */",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/UtcTimeSyntaxChecker.java",
                "status": "modified",
                "changes": 37,
                "deletions": 25,
                "sha": "162ba53727255a9e994718c1b95707e4702d36ff",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/a3a63d887c7a9b8319728af8f8e8d0598e96bb0c/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/UtcTimeSyntaxChecker.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/UtcTimeSyntaxChecker.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/syntax/UtcTimeSyntaxChecker.java?ref=a3a63d887c7a9b8319728af8f8e8d0598e96bb0c"
            }
        ],
        "bug_id": "directory-ldap-api_81",
        "parent": "https://github.com/apache/directory-ldap-api/commit/92e86250cf4efb90441a41c1ade7cbcadcd32466",
        "message": "- Added a protected constructor which takes a String (oid) parameter. This is needed if one want to \ncreate a subclass of a SyntaxChecker\n- Added some protection againsta potential NPE in RegexpSC\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@488616 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee",
        "file": [
            {
                "patch": "@@ -19,6 +19,8 @@\n  */\n package org.apache.directory.shared.ldap.codec;\n \n+import org.apache.directory.shared.ldap.util.StringTools;\n+\n \n /**\n  * A class to store an attribute value assertion. \n@@ -101,12 +103,13 @@ public void setAttributeDesc( String attributeDesc )\n      */\n     public String toString( String tabs )\n     {\n-\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( tabs ).append( \"AttributeValueAssertion\\n\" );\n-        sb.append( tabs ).append( \"    Assertion description : '\" ).append( attributeDesc.toString() ).append( \"'\\n\" );\n-        sb.append( tabs ).append( \"    Assertion value : '\" ).append( assertionValue.toString() ).append( \"'\\n\" );\n+        sb.append( tabs ).append( \"    Assertion description : '\" );\n+        sb.append( attributeDesc != null ? attributeDesc : \"null\" );\n+        sb.append( \"'\\n\" );\n+        sb.append( tabs ).append( \"    Assertion value : '\" ).append( StringTools.dumpObject( assertionValue ) ).append( \"'\\n\" );\n \n         return sb.toString();\n     }\n@@ -121,10 +124,9 @@ public String toString( String tabs )\n      */\n     public String toStringRFC2254( int filterType )\n     {\n-\n         StringBuffer sb = new StringBuffer();\n \n-        sb.append( attributeDesc.toString() );\n+        sb.append( attributeDesc );\n \n         switch ( filterType )\n         {\n@@ -145,7 +147,7 @@ public String toStringRFC2254( int filterType )\n                 break;\n         }\n \n-        sb.append( assertionValue.toString() );\n+        sb.append( StringTools.dumpObject( assertionValue ) );\n \n         return sb.toString();\n     }",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/AttributeValueAssertion.java",
                "status": "modified",
                "changes": 14,
                "deletions": 6,
                "sha": "ff3ed1816efffe2b87c51e7c207aea0d124c8c06",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/AttributeValueAssertion.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/AttributeValueAssertion.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/AttributeValueAssertion.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -296,7 +296,7 @@ public String toString()\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( \"    Control\\n\" );\n-        sb.append( \"        Control type : '\" ).append( controlType != null ? controlType.toString() : \"null\" ).append(\n+        sb.append( \"        Control type : '\" ).append( controlType ).append(\n             \"'\\n\" );\n         sb.append( \"        Criticality : '\" ).append( criticality ).append( \"'\\n\" );\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/Control.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "258224cf912beb5957f5ff1385e46acacae26ca2",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/Control.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/Control.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/Control.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -50,7 +50,7 @@\n import java.nio.ByteBuffer;\n \n import java.util.ArrayList;\n-import java.util.Iterator;\n+import java.util.List;\n \n \n /**\n@@ -71,7 +71,7 @@\n     private Asn1Object protocolOp;\n \n     /** The controls */\n-    private ArrayList<Control> controls;\n+    private List<Control> controls;\n \n     /** The current control */\n     private transient Control currentControl;\n@@ -118,7 +118,7 @@ public Control getControls( int i )\n      * \n      * @return The Control Objects\n      */\n-    public ArrayList getControls()\n+    public List<Control> getControls()\n     {\n         return controls;\n     }\n@@ -562,12 +562,10 @@ public int computeLength()\n             // + Length(L3) + L3\n             controlsSequenceLength = 0;\n \n-            Iterator controlIterator = controls.iterator();\n-\n             // We may have more than one control. ControlsLength is L4.\n-            while ( controlIterator.hasNext() )\n+            for ( Control control:controls )\n             {\n-                controlsSequenceLength += ( ( Control ) controlIterator.next() ).computeLength();\n+                controlsSequenceLength += control.computeLength();\n             }\n \n             // Computes the controls length\n@@ -640,11 +638,9 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n             bb.put( TLV.getBytes( controlsLength ) );\n \n             // Encode each control\n-            Iterator controlIterator = controls.iterator();\n-\n-            while ( controlIterator.hasNext() )\n+            for ( Control control:controls )\n             {\n-                ( ( Control ) controlIterator.next() ).encode( bb );\n+                control.encode( bb );\n             }\n         }\n \n@@ -663,13 +659,13 @@ public String toString()\n \n         sb.append( \"LdapMessage\\n\" );\n         sb.append( \"    message Id : \" ).append( messageId ).append( '\\n' );\n-        sb.append( protocolOp.toString() );\n+        sb.append( protocolOp );\n \n         if ( controls != null )\n         {\n-            for ( int i = 0; i < controls.size(); i++ )\n+            for ( Control control:controls )\n             {\n-                sb.append( ( ( Control ) controls.get( i ) ).toString() );\n+                sb.append( control );\n             }\n         }\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessage.java",
                "status": "modified",
                "changes": 24,
                "deletions": 14,
                "sha": "9b4a79e5e8b28c75369922b10c2d47ebf22cfbcb",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessage.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessage.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapMessage.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -127,6 +127,6 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n      */\n     public String toString()\n     {\n-        return ldapResult.toString();\n+        return ( ldapResult != null ? ldapResult.toString() : \"\" );\n     }\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResponse.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "343defb20a1859fc39d65bfcc027053cc620b384",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResponse.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResponse.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResponse.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -615,14 +615,16 @@ public String toString()\n         if ( ( referrals != null ) && ( referrals.size() != 0 ) )\n         {\n             sb.append( \"            Referrals :\\n\" );\n+            int i = 0;\n \n-            for ( int i = 0; i < referrals.size(); i++ )\n+            for ( LdapURL referral:referrals )\n             {\n \n-                LdapURL referral = ( LdapURL ) referrals.get( i );\n-\n-                sb.append( \"                Referral[\" ).append( i ).append( \"] :\" ).append( referral == null ? \"\" : referral.toString() )\n-                    .append( '\\n' );\n+                sb.append( \"                Referral[\" ).\n+                    append( i++ ).\n+                    append( \"] :\" ).\n+                    append( referral ).\n+                    append( '\\n' );\n             }\n         }\n ",
                "additions": 7,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "status": "modified",
                "changes": 12,
                "deletions": 5,
                "sha": "52e9fd916bf0bc7dada6b6faa38b41db294f31b6",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/LdapResult.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -29,7 +29,6 @@\n import javax.naming.directory.Attribute;\n import javax.naming.directory.BasicAttribute;\n import javax.naming.directory.ModificationItem;\n-import javax.naming.ldap.Control;\n \n import org.apache.directory.shared.asn1.Asn1Object;\n import org.apache.directory.shared.asn1.codec.DecoderException;\n@@ -751,7 +750,7 @@ public Message transform( Object obj )\n         }\n \n         // Transform the controls, too\n-        ArrayList twixControls = twixMessage.getControls();\n+        List twixControls = twixMessage.getControls();\n \n         if ( twixControls != null )\n         {\n@@ -1237,9 +1236,10 @@ public Object transform( Message msg )\n     private void transformControls( LdapMessage twixMessage, Message msg )\n     {\n         Iterator list = msg.getControls().values().iterator();\n+        \n         while ( list.hasNext() )\n         {\n-            Control control = ( Control ) list.next();\n+            javax.naming.ldap.Control control = ( javax.naming.ldap.Control ) list.next();\n             org.apache.directory.shared.ldap.codec.Control twixControl = new org.apache.directory.shared.ldap.codec.Control();\n             twixMessage.addControl( twixControl );\n             twixControl.setCriticality( control.isCritical() );",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/TwixTransformer.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "615e50da7cd92356903d7ad6b4edb7be3545d236",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/TwixTransformer.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/TwixTransformer.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/TwixTransformer.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -441,7 +441,7 @@ public String toString()\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( \"    Add Request\\n\" );\n-        sb.append( \"        Entry : '\" ).append( entry.toString() ).append( \"'\\n\" );\n+        sb.append( \"        Entry : '\" ).append( entry ).append( \"'\\n\" );\n         sb.append( \"        Attributes\\n\" );\n \n         if ( ( attributes == null ) || ( attributes.size() == 0 ) )",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/add/AddRequest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "d49ef45272aea62a3669a1a93affcf073688477b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/add/AddRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/add/AddRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/add/AddRequest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -262,22 +262,21 @@ public String toString()\n         sb.append( \"    BindRequest\\n\" );\n         sb.append( \"        Version : '\" ).append( version ).append( \"'\\n\" );\n \n-        if ( StringTools.isEmpty( name.toString() ) )\n+        if ( ( null == name ) || StringTools.isEmpty( name.toString() ) )\n         {\n             sb.append( \"        Name : anonymous\\n\" );\n         }\n         else\n         {\n-            sb.append( \"        Name : '\" ).append( name.toString() ).append( \"'\\n\" );\n+            sb.append( \"        Name : '\" ).append( name ).append( \"'\\n\" );\n \n             if ( authentication instanceof SimpleAuthentication )\n             {\n-                sb.append( \"        Simple authentication : '\" ).append(\n-                    ( ( SimpleAuthentication ) authentication ).toString() ).append( \"'\\n\" );\n+                sb.append( \"        Simple authentication : '\" ).append( authentication ).append( \"'\\n\" );\n             }\n             else\n             {\n-                sb.append( ( ( SaslCredentials ) authentication ).toString() );\n+                sb.append( authentication );\n             }\n         }\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/BindRequest.java",
                "status": "modified",
                "changes": 9,
                "deletions": 5,
                "sha": "4988403288b3947bfb5e56c518f9134328c2f7de",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/BindRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/BindRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/BindRequest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.directory.shared.asn1.codec.EncoderException;\n import org.apache.directory.shared.ldap.codec.LdapConstants;\n import org.apache.directory.shared.ldap.codec.LdapResponse;\n+import org.apache.directory.shared.ldap.util.StringTools;\n \n \n /**\n@@ -186,7 +187,9 @@ public String toString()\n \n         if ( serverSaslCreds != null )\n         {\n-            sb.append( \"        Server sasl credentials : '\" ).append( serverSaslCreds.toString() ).append( \"'\\n\" );\n+            sb.append( \"        Server sasl credentials : '\" ).\n+                append( StringTools.dumpBytes( serverSaslCreds ) ).\n+                append( \"'\\n\" );\n         }\n \n         return sb.toString();",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/BindResponse.java",
                "status": "modified",
                "changes": 5,
                "deletions": 1,
                "sha": "d39907b383563c1113b59b3765a85e6c17b30844",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/BindResponse.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/BindResponse.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/BindResponse.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -208,11 +208,13 @@ public String toString()\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( \"        Sasl credentials\\n\" );\n-        sb.append( \"            Mechanism :'\" ).append( mechanism.toString() ).append( \"'\\n\" );\n+        sb.append( \"            Mechanism :'\" ).append( mechanism ).append( \"'\\n\" );\n \n         if ( credentials != null )\n         {\n-            sb.append( \"            Credentials :'\" ).append( credentials.toString() ).append( \"'\\n\" );\n+            sb.append( \"            Credentials :'\" ).\n+                append( StringTools.dumpBytes(  credentials ) ).\n+                append( \"'\\n\" );\n         }\n \n         return sb.toString();",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/SaslCredentials.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "e43d870b51a8c70fd4a9d07e6f33358c6726c71a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/SaslCredentials.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/SaslCredentials.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/bind/SaslCredentials.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -274,9 +274,9 @@ public String toString()\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( \"    Compare request\\n\" );\n-        sb.append( \"        Entry : '\" ).append( entry.toString() ).append( \"'\\n\" );\n-        sb.append( \"        Attribute description : '\" ).append( attributeDesc.toString() ).append( \"'\\n\" );\n-        sb.append( \"        Attribute value : '\" ).append( assertionValue.toString() ).append( \"'\\n\" );\n+        sb.append( \"        Entry : '\" ).append( entry ).append( \"'\\n\" );\n+        sb.append( \"        Attribute description : '\" ).append( attributeDesc ).append( \"'\\n\" );\n+        sb.append( \"        Attribute value : '\" ).append( StringTools.dumpObject( assertionValue )  ).append( \"'\\n\" );\n \n         return sb.toString();\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/compare/CompareRequest.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "630c808de96e1595ad720ba788f140d48c8c31d1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/compare/CompareRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/compare/CompareRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/compare/CompareRequest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -157,7 +157,7 @@ public String toString()\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( \"    Del request\\n\" );\n-        sb.append( \"        Entry : '\" ).append( entry.toString() ).append( \"'\\n\" );\n+        sb.append( \"        Entry : '\" ).append( entry ).append( \"'\\n\" );\n \n         return sb.toString();\n     }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/del/DelRequest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "20e1c3a501bb1378a07f8315883054ed6c39efad",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/del/DelRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/del/DelRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/del/DelRequest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -227,11 +227,13 @@ public String toString()\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( \"    Extended request\\n\" );\n-        sb.append( \"        Request name : '\" ).append( requestName.toString() ).append( \"'\\n\" );\n+        sb.append( \"        Request name : '\" ).append( requestName ).append( \"'\\n\" );\n \n         if ( requestValue != null )\n         {\n-            sb.append( \"        Request value : '\" ).append( requestValue.toString() ).append( \"'\\n\" );\n+            sb.append( \"        Request value : '\" ).\n+                append( StringTools.dumpBytes( requestValue ) ).\n+                append( \"'\\n\" );\n         }\n \n         return sb.toString();",
                "additions": 4,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/ExtendedRequest.java",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "5f6f454018f7cfddfa9a6670014389dd5e205bb1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/ExtendedRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/ExtendedRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/ExtendedRequest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -264,12 +264,12 @@ public String toString()\n \n         if ( responseName != null )\n         {\n-            sb.append( \"        Response name :'\" ).append( responseName.toString() ).append( \"'\\n\" );\n+            sb.append( \"        Response name :'\" ).append( responseName ).append( \"'\\n\" );\n         }\n \n         if ( response != null )\n         {\n-            sb.append( \"        Response :'\" ).append( response.toString() ).append( \"'\\n\" );\n+            sb.append( \"        Response :'\" ).append( response ).append( \"'\\n\" );\n         }\n \n         return sb.toString();",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/ExtendedResponse.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "ecd67b2be9849e21a3e7daca033d16251e1bbb80",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/ExtendedResponse.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/ExtendedResponse.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/ExtendedResponse.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -211,16 +211,14 @@ public String toString()\n         sb.append( \"    TimeOffline : \" ).append( timeOffline ).append( '\\n' );\n         sb.append( \"    Delay : \" ).append( delay ).append( '\\n' );\n \n-        if ( replicatedContexts.size() != 0 )\n+        if ( ( replicatedContexts != null) && ( replicatedContexts.size() != 0 ) )\n         {\n-            Iterator replicatedContextIterator = replicatedContexts.iterator();\n             sb.append( \"    Replicated contexts :\" );\n \n             // We may have more than one reference.\n-            while ( replicatedContextIterator.hasNext() )\n+            for ( LdapURL url:replicatedContexts )\n             {\n-                LdapURL url = ( LdapURL ) replicatedContextIterator.next();\n-                sb.append( \"\\n        \" ).append( url.toString() );\n+                sb.append( \"\\n        \" ).append( url );\n             }\n         }\n ",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnect.java",
                "status": "modified",
                "changes": 8,
                "deletions": 5,
                "sha": "89022c0f37b47361db460df685f0220104e4bde9",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnect.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnect.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulDisconnect.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -113,7 +113,7 @@ public String toString()\n     {\n         StringBuffer sb = new StringBuffer();\n \n-        sb.append( \"Graceful Shiutdown extended operation\" );\n+        sb.append( \"Graceful Shutdown extended operation\" );\n         sb.append( \"    TimeOffline : \" ).append( timeOffline ).append( '\\n' );\n         sb.append( \"    Delay : \" ).append( delay ).append( '\\n' );\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdown.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "20eb6f9421889cb77d2f74243baf3d17f56b2bc6",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdown.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdown.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/extended/operations/GracefulShutdown.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -539,68 +539,83 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n      */\n     public String toString()\n     {\n-\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( \"    Modify Request\\n\" );\n         sb.append( \"        Object : '\" ).append( object ).append( \"'\\n\" );\n \n         if ( modifications != null )\n         {\n-\n-            for ( int i = 0; i < modifications.size(); i++ )\n+            int i = 0;\n+            \n+            for ( ModificationItem modification:modifications )\n             {\n-\n-                ModificationItem modification = ( ModificationItem ) modifications.get( i );\n-\n                 sb.append( \"            Modification[\" ).append( i ).append( \"]\\n\" );\n                 sb.append( \"                Operation : \" );\n \n-                switch ( modification.getModificationOp() )\n+                if ( modification != null )\n                 {\n-\n-                    case DirContext.ADD_ATTRIBUTE:\n-                        sb.append( \" add\\n\" );\n-                        break;\n-\n-                    case DirContext.REPLACE_ATTRIBUTE:\n-                        sb.append( \" replace\\n\" );\n-                        break;\n-\n-                    case DirContext.REMOVE_ATTRIBUTE:\n-                        sb.append( \" delete\\n\" );\n-                        break;\n-                }\n-\n-                sb.append( \"                Modification\\n\" );\n-\n-                Attribute attribute = modification.getAttribute();\n-\n-                try\n-                {\n-                    sb.append( \"                    Type : '\" ).append( attribute.getID() ).append( \"'\\n\" );\n-                    sb.append( \"                    Vals\\n\" );\n-\n-                    for ( int j = 0; j < attribute.size(); j++ )\n+                    switch ( modification.getModificationOp() )\n                     {\n+    \n+                        case DirContext.ADD_ATTRIBUTE:\n+                            sb.append( \" add\\n\" );\n+                            break;\n+    \n+                        case DirContext.REPLACE_ATTRIBUTE:\n+                            sb.append( \" replace\\n\" );\n+                            break;\n+    \n+                        case DirContext.REMOVE_ATTRIBUTE:\n+                            sb.append( \" delete\\n\" );\n+                            break;\n+                    }\n \n-                        Object attributeValue = attribute.get( j );\n-                        sb.append( \"                        Val[\" ).append( j ).append( \"] : '\" );\n-\n-                        if ( attributeValue instanceof String )\n+                    sb.append( \"                Modification\\n\" );\n+    \n+                    Attribute attribute = modification.getAttribute();\n+    \n+                    if ( attribute != null )\n+                    {\n+                        try\n                         {\n-                            sb.append( attributeValue ).append( \"' \\n\" );\n+                            sb.append( \"                    Type : '\" ).append( attribute.getID() ).append( \"'\\n\" );\n+                            sb.append( \"                    Vals\\n\" );\n+        \n+                            for ( int j = 0; j < attribute.size(); j++ )\n+                            {\n+        \n+                                Object attributeValue = attribute.get( j );\n+                                sb.append( \"                        Val[\" ).append( j ).append( \"] : '\" );\n+        \n+                                if ( attributeValue != null )\n+                                {\n+                                    if ( attributeValue instanceof String )\n+                                    {\n+                                        sb.append( attributeValue ).append( \"' \\n\" );\n+                                    }\n+                                    else\n+                                    {\n+                                        sb.append( StringTools.utf8ToString( ( byte[] ) attributeValue ) ).append( \"' \\n\" );\n+                                    }\n+                                }\n+                                else\n+                                {\n+                                    sb.append( \"<null>'\\n\" );\n+                                }\n+                            }\n                         }\n-                        else\n+                        catch ( NamingException ne )\n                         {\n-                            sb.append( StringTools.utf8ToString( ( byte[] ) attributeValue ) ).append( \"' \\n\" );\n+                            log.error( \"Naming exception while printing the '{}'\", attribute.getID() );\n                         }\n                     }\n                 }\n-                catch ( NamingException ne )\n+                else\n                 {\n-                    log.error( \"Naming exception while printing the '{}'\", attribute.getID() );\n+                    sb.append( \" unknown modification operation\\n\" );\n                 }\n+\n             }\n         }\n ",
                "additions": 55,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modify/ModifyRequest.java",
                "status": "modified",
                "changes": 95,
                "deletions": 40,
                "sha": "4121b9b87b223b2d252084dc886cc2f9b231b0b0",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modify/ModifyRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/modify/ModifyRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modify/ModifyRequest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -289,12 +289,12 @@ public String toString()\n \n         sb.append( \"    ModifyDN Response\\n\" );\n         sb.append( \"        Entry : '\" ).append( entry ).append( \"'\\n\" );\n-        sb.append( \"        New RDN : '\" ).append( newRDN.toString() ).append( \"'\\n\" );\n+        sb.append( \"        New RDN : '\" ).append( newRDN ).append( \"'\\n\" );\n         sb.append( \"        Delete old RDN : \" ).append( deleteOldRDN ).append( \"\\n\" );\n \n         if ( newSuperior != null )\n         {\n-            sb.append( \"        New superior : '\" ).append( newSuperior.toString() ).append( \"'\\n\" );\n+            sb.append( \"        New superior : '\" ).append( newSuperior ).append( \"'\\n\" );\n         }\n \n         return sb.toString();",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modifyDn/ModifyDNRequest.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "10a9d81fc7850a94ca8090e770e7f4743147fd42",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modifyDn/ModifyDNRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/modifyDn/ModifyDNRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/modifyDn/ModifyDNRequest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -235,6 +235,6 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n      */\n     public String toString()\n     {\n-        return assertion.toStringRFC2254( filterType );\n+        return assertion != null ? assertion.toStringRFC2254( filterType ) : \"\";\n     }\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/AttributeValueAssertionFilter.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "5245696526a1704235d774b979f48ab920e776f2",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/AttributeValueAssertionFilter.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/AttributeValueAssertionFilter.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/AttributeValueAssertionFilter.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -154,20 +154,13 @@ public ByteBuffer encode( ByteBuffer buffer ) throws EncoderException\n      */\n     public String toString()\n     {\n-\n         StringBuffer sb = new StringBuffer();\n \n         if ( ( filterSet != null ) && ( filterSet.size() != 0 ) )\n         {\n-\n-            Iterator filterIterator = filterSet.iterator();\n-\n-            while ( filterIterator.hasNext() )\n+            for ( Filter filter:filterSet )\n             {\n-\n-                Filter filter = ( Filter ) filterIterator.next();\n-\n-                sb.append( '(' ).append( filter.toString() ).append( ')' );\n+                sb.append( '(' ).append( filter ).append( ')' );\n             }\n         }\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/ConnectorFilter.java",
                "status": "modified",
                "changes": 11,
                "deletions": 9,
                "sha": "22bb9ce4b834a06adf35442d675a75483e5449ed",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/ConnectorFilter.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/ConnectorFilter.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/ConnectorFilter.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -344,7 +344,7 @@ public String toString()\n \n         if ( type != null )\n         {\n-            sb.append( type.toString() );\n+            sb.append( type );\n         }\n \n         if ( dnAttributes )\n@@ -362,10 +362,10 @@ public String toString()\n         }\n         else\n         {\n-            sb.append( ':' ).append( matchingRule.toString() );\n+            sb.append( ':' ).append( matchingRule );\n         }\n \n-        sb.append( \":=\" ).append( matchValue.toString() );\n+        sb.append( \":=\" ).append( matchValue );\n \n         return sb.toString();\n     }",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/ExtensibleMatchFilter.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "fff07ec89cfb83ac776b96d06afbee83fcc6bc86",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/ExtensibleMatchFilter.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/ExtensibleMatchFilter.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/ExtensibleMatchFilter.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -610,11 +610,7 @@ private String buildFilter()\n \n         StringBuffer sb = new StringBuffer();\n \n-        sb.append( \"(\" );\n-\n-        sb.append( filter.toString() );\n-\n-        sb.append( \")\" );\n+        sb.append( \"(\" ).append( filter ).append( \")\" );\n \n         return sb.toString();\n     }\n@@ -627,23 +623,29 @@ private String buildAttributes()\n     {\n         StringBuffer sb = new StringBuffer();\n \n-        NamingEnumeration attrs = attributes.getAll();\n-        boolean isFirst = true;\n-\n-        while ( attrs.hasMoreElements() )\n+        if ( attributes != null )\n         {\n-            Attribute attr = ( BasicAttribute ) attrs.nextElement();\n-\n-            if ( isFirst )\n-            {\n-                isFirst = false;\n-            }\n-            else\n+            NamingEnumeration attrs = attributes.getAll();\n+            boolean isFirst = true;\n+    \n+            if ( attrs != null )\n             {\n-                sb.append( \", \" );\n+                while ( attrs.hasMoreElements() )\n+                {\n+                    Attribute attr = ( BasicAttribute ) attrs.nextElement();\n+        \n+                    if ( isFirst )\n+                    {\n+                        isFirst = false;\n+                    }\n+                    else\n+                    {\n+                        sb.append( \", \" );\n+                    }\n+        \n+                    sb.append( attr != null ? attr.getID() : \"<no ID>\" );\n+                }\n             }\n-\n-            sb.append( attr.getID() );\n         }\n \n         return sb.toString();",
                "additions": 21,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchRequest.java",
                "status": "modified",
                "changes": 40,
                "deletions": 19,
                "sha": "4876936a8b5ed652ee4bf737baa682ac34df4403",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchRequest.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchRequest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchRequest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -448,7 +448,7 @@ public String toString()\n         StringBuffer sb = new StringBuffer();\n \n         sb.append( \"    Search Result Entry\\n\" );\n-        sb.append( \"        Object Name : '\" ).append( objectName.toString() ).append( \"'\\n\" );\n+        sb.append( \"        Object Name : '\" ).append( objectName ).append( \"'\\n\" );\n         sb.append( \"        Attributes\\n\" );\n \n         if ( ( partialAttributeList == null ) || ( partialAttributeList.size() == 0 ) )",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultEntry.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "6dcd227417eb0c2ea7b1239842b9d68f79cd8c76",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultEntry.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultEntry.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultEntry.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -31,6 +31,7 @@\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Iterator;\n+import java.util.List;\n \n \n /**\n@@ -46,7 +47,7 @@\n     // ----------------------------------------------------------------------------\n \n     /** The set of LdapURLs */\n-    private ArrayList searchResultReferences;\n+    private List<LdapURL> searchResultReferences;\n \n     /** The search result reference length */\n     private transient int searchResultReferenceLength;\n@@ -61,7 +62,7 @@\n     public SearchResultReference()\n     {\n         super();\n-        searchResultReferences = new ArrayList();\n+        searchResultReferences = new ArrayList<LdapURL>();\n     }\n \n \n@@ -95,7 +96,7 @@ public void addSearchResultReference( LdapURL searchResultReference )\n      * \n      * @return An ArrayList of SearchResultReferences\n      */\n-    public ArrayList getSearchResultReferences()\n+    public List<LdapURL> getSearchResultReferences()\n     {\n         return searchResultReferences;\n     }\n@@ -202,11 +203,9 @@ public String toString()\n         {\n             sb.append( \"        References\\n\" );\n \n-            Iterator referencesIterator = searchResultReferences.iterator();\n-\n-            while ( referencesIterator.hasNext() )\n+            for ( LdapURL url:searchResultReferences )\n             {\n-                sb.append( \"            '\" ).append( ( ( LdapURL ) referencesIterator.next() ).toString() ).append(\n+                sb.append( \"            '\" ).append( url ).append(\n                     \"'\\n\" );\n             }\n         }",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultReference.java",
                "status": "modified",
                "changes": 13,
                "deletions": 7,
                "sha": "10a284f4fe516359d2f6173c9018f620c9b766fa",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultReference.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultReference.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SearchResultReference.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -24,6 +24,7 @@\n import java.nio.ByteBuffer;\n import java.util.ArrayList;\n import java.util.Iterator;\n+import java.util.List;\n \n import org.apache.directory.shared.asn1.ber.tlv.TLV;\n import org.apache.directory.shared.asn1.ber.tlv.UniversalTag;\n@@ -70,7 +71,7 @@\n     private String initialSubstrings;\n \n     /** The any filter. It's a list of LdapString */\n-    private ArrayList anySubstrings;\n+    private List<String> anySubstrings;\n \n     /** The final filter */\n     private String finalSubstrings;\n@@ -91,7 +92,7 @@\n      */\n     public SubstringFilter()\n     {\n-        anySubstrings = new ArrayList( 1 );\n+        anySubstrings = new ArrayList<String>( 1 );\n     }\n \n \n@@ -100,7 +101,7 @@ public SubstringFilter()\n      * \n      * @return Returns the anySubstrings.\n      */\n-    public ArrayList getAnySubstrings()\n+    public List<String> getAnySubstrings()\n     {\n         return anySubstrings;\n     }\n@@ -360,24 +361,22 @@ public String toString()\n \n         if ( initialSubstrings != null )\n         {\n-            sb.append( initialSubstrings.toString() );\n+            sb.append( initialSubstrings );\n         }\n \n         sb.append( '*' );\n \n         if ( anySubstrings != null )\n         {\n-            Iterator anyIterator = anySubstrings.iterator();\n-\n-            while ( anyIterator.hasNext() )\n+            for ( String any:anySubstrings )\n             {\n-                sb.append( ( String ) anyIterator.next() ).append( '*' );\n+                sb.append( any ).append( '*' );\n             }\n         }\n \n         if ( finalSubstrings != null )\n         {\n-            sb.append( finalSubstrings.toString() );\n+            sb.append( finalSubstrings );\n         }\n \n         return sb.toString();",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SubstringFilter.java",
                "status": "modified",
                "changes": 17,
                "deletions": 9,
                "sha": "7b07d1092741c53897f05adc889b635fb31c8b88",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SubstringFilter.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SubstringFilter.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/SubstringFilter.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -169,6 +169,7 @@ public String toString()\n         sb.append( \"    Entry Change Control\\n\" );\n         sb.append( \"        changeType   : '\" ).append( changeType ).append( \"'\\n\" );\n         sb.append( \"        previousDN   : '\" ).append( previousDn ).append( \"'\\n\" );\n+        \n         if ( changeNumber == UNDEFINED_CHANGE_NUMBER )\n         {\n             sb.append( \"        changeNumber : '\" ).append( \"UNDEFINED\" ).append( \"'\\n\" );\n@@ -177,6 +178,7 @@ public String toString()\n         {\n             sb.append( \"        changeNumber : '\" ).append( changeNumber ).append( \"'\\n\" );\n         }\n+        \n         return sb.toString();\n     }\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControl.java",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "401e62430e2a5d09a5fc6301868b2d010c4401e5",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/search/controls/EntryChangeControl.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -347,48 +347,57 @@ public static String toString( String tabs, Attributes attributes )\n \n         sb.append( tabs ).append( \"Attributes\\n\" );\n \n-        NamingEnumeration attributesIterator = attributes.getAll();\n-\n-        while ( attributesIterator.hasMoreElements() )\n+        if ( attributes != null )\n         {\n-            Attribute attribute = ( Attribute ) attributesIterator.nextElement();\n-\n-            sb.append( tabs ).append( \"    Type : '\" ).append( attribute.getID() ).append( \"'\\n\" );\n-\n-            for ( int j = 0; j < attribute.size(); j++ )\n+            NamingEnumeration attributesIterator = attributes.getAll();\n+    \n+            while ( attributesIterator.hasMoreElements() )\n             {\n-\n-                try\n+                Attribute attribute = ( Attribute ) attributesIterator.nextElement();\n+    \n+                if ( attribute != null )\n                 {\n-                    Object attr = attribute.get( j );\n-\n-                    if ( attr instanceof String )\n-                    {\n-                        sb.append( tabs ).append( \"        Val[\" ).append( j ).append( \"] : \" ).append( attr ).append(\n-                            \" \\n\" );\n-                    }\n-                    else if ( attr instanceof byte[] )\n-                    {\n-                        String string = StringTools.utf8ToString( ( byte[] ) attr );\n-\n-                        sb.append( tabs ).append( \"        Val[\" ).append( j ).append( \"] : \" );\n-                        sb.append( string ).append( '/' );\n-                        sb.append( StringTools.dumpBytes( ( byte[] ) attr ) );\n-                        sb.append( \" \\n\" );\n-                    }\n-                    else\n+                    sb.append( tabs ).append( \"    Type : '\" ).append( attribute.getID() ).append( \"'\\n\" );\n+        \n+                    for ( int j = 0; j < attribute.size(); j++ )\n                     {\n-                        sb.append( tabs ).append( \"        Val[\" ).append( j ).append( \"] : \" ).append( attr ).append(\n-                            \" \\n\" );\n+        \n+                        try\n+                        {\n+                            Object attr = attribute.get( j );\n+        \n+                            if ( attr != null )\n+                            {\n+                                if ( attr instanceof String )\n+                                {\n+                                    sb.append( tabs ).append( \"        Val[\" ).append( j ).append( \"] : \" ).append( attr ).append(\n+                                        \" \\n\" );\n+                                }\n+                                else if ( attr instanceof byte[] )\n+                                {\n+                                    String string = StringTools.utf8ToString( ( byte[] ) attr );\n+            \n+                                    sb.append( tabs ).append( \"        Val[\" ).append( j ).append( \"] : \" );\n+                                    sb.append( string ).append( '/' );\n+                                    sb.append( StringTools.dumpBytes( ( byte[] ) attr ) );\n+                                    sb.append( \" \\n\" );\n+                                }\n+                                else\n+                                {\n+                                    sb.append( tabs ).append( \"        Val[\" ).append( j ).append( \"] : \" ).append( attr ).append(\n+                                        \" \\n\" );\n+                                }\n+                            }\n+                        }\n+                        catch ( NamingException ne )\n+                        {\n+                            sb.append( \"Bad attribute : \" ).append( ne.getMessage() );\n+                        }\n                     }\n                 }\n-                catch ( NamingException ne )\n-                {\n-                    sb.append( \"Bad attribute : \" ).append( ne.getMessage() );\n-                }\n             }\n         }\n-\n+        \n         return sb.toString();\n     }\n ",
                "additions": 43,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "status": "modified",
                "changes": 77,
                "deletions": 34,
                "sha": "56b2a6df6d7ffd65c1dbaa40341d96afb0ca1a48",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/AttributeUtils.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -833,6 +833,35 @@ public static final String dumpBytes( byte[] buffer )\n         return sb.toString();\n     }\n \n+    /**\n+     * \n+     * Helper method to render an object which can be a String or a byte[]\n+     *\n+     * @return A string representing the object\n+     */\n+    public static String dumpObject( Object object )\n+    {\n+        if ( object != null )\n+        {\n+            if ( object instanceof String )\n+            {\n+                return (String)object;\n+            }\n+            else if ( object instanceof byte[] )\n+            {\n+                return dumpBytes( (byte[])object );\n+            }\n+            else\n+            {\n+                return \"<unknown type>\";\n+            }\n+        }\n+        else\n+        {\n+            return \"\";\n+        }\n+    }\n+\n     /**\n      * Helper function that dump an array of bytes in hex pair form, \n      * without '0x' and space chars",
                "additions": 29,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "status": "modified",
                "changes": 29,
                "deletions": 0,
                "sha": "8a25584d6c0ff443f817c35271f3faf4ebc62662",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/StringTools.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            },
            {
                "patch": "@@ -4223,4 +4223,69 @@ public void testDecodeSearchRequestAnd_OrPrPr_NotGEq()\n             fail( ee.getMessage() );\n         }\n     }\n+    \n+    /**\n+     * Test the decoding of a SearchRequest\n+     * for rootDSE\n+     */\n+    public void testDecodeSearchRequestRootDSE()\n+    {\n+        Asn1Decoder ldapDecoder = new LdapDecoder();\n+\n+        ByteBuffer stream = ByteBuffer.allocate( 0x33 );\n+        stream.put( new byte[]\n+            { \n+                0x30, (byte)0x84, 0x00, 0x00, 0x00, 0x2D, \n+                  0x02, 0x01, 0x01, \n+                  0x63, (byte)0x84, 0x00, 0x00, 0x00, 0x24, \n+                    0x04, 0x00, \n+                    0x0A, 0x01, 0x00, \n+                    0x0A, 0x01, 0x00, \n+                    0x02, 0x01, 0x00, \n+                    0x02, 0x01, 0x00, \n+                    0x01, 0x01, 0x00, \n+                    (byte)0x87, 0x0B, \n+                      0x6F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x43, 0x6C, 0x61, 0x73, 0x73, \n+                    0x30, (byte)0x84, 0x00, 0x00, 0x00, 0x00\n+            } );\n+\n+        String decodedPdu = StringTools.dumpBytes( stream.array() );\n+        stream.flip();\n+\n+        // Allocate a BindRequest Container\n+        IAsn1Container ldapMessageContainer = new LdapMessageContainer();\n+\n+        try\n+        {\n+            ldapDecoder.decode( stream, ldapMessageContainer );\n+        }\n+        catch ( DecoderException de )\n+        {\n+            de.printStackTrace();\n+            fail( de.getMessage() );\n+        }\n+        catch ( NamingException ne )\n+        {\n+            ne.printStackTrace();\n+            fail( ne.getMessage() );\n+        }\n+\n+        LdapMessage message = ( ( LdapMessageContainer ) ldapMessageContainer ).getLdapMessage();\n+        SearchRequest sr = message.getSearchRequest();\n+\n+        assertEquals( 1, message.getMessageId() );\n+        assertEquals( \"\", sr.getBaseObject().toString() );\n+        assertEquals( ScopeEnum.BASE_OBJECT, sr.getScope() );\n+        assertEquals( LdapConstants.SCOPE_BASE_OBJECT, sr.getDerefAliases() );\n+        assertEquals( 0, sr.getSizeLimit() );\n+        assertEquals( 0, sr.getTimeLimit() );\n+        assertEquals( false, sr.isTypesOnly() );\n+        \n+        PresentFilter presentFilter = ( PresentFilter ) sr.getFilter();\n+        assertNotNull( presentFilter );\n+        assertEquals( \"objectClass\", presentFilter.getAttributeDescription().toString() );\n+        \n+        Attributes attributes = sr.getAttributes();\n+        assertEquals( 0, attributes.size() );\n+    }\n }",
                "additions": 65,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/test/java/org/apache/directory/shared/ldap/codec/search/SearchRequestTest.java",
                "status": "modified",
                "changes": 65,
                "deletions": 0,
                "sha": "9681946a947189d0301d76201503176147c4d776",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee/ldap/src/test/java/org/apache/directory/shared/ldap/codec/search/SearchRequestTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/codec/search/SearchRequestTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/codec/search/SearchRequestTest.java?ref=c6c5f27ec2a2361ac8d97d4ac764f404795dc8ee"
            }
        ],
        "bug_id": "directory-ldap-api_82",
        "parent": "https://github.com/apache/directory-ldap-api/commit/bd4f504f992aaa49564b543a08b4d60549d6e483",
        "message": "Ported modifications made this moring in 1.0 to 1.5 : added some defensive test in the toString methods\nto avoid a NPE. Also added a test for rootDSE searching.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/trunks/shared@479688 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/e1b9a85f61077104159a1fe4dbe44962ce4967d7",
        "file": [
            {
                "patch": "@@ -319,6 +319,8 @@ protected void processDSML( OutputStream outStream ) throws IOException\n         }\n         catch ( Exception e )\n         {\n+            LOG.warn( \"Failed to bind\", e );\n+            \n             // Unable to connect to server\n             // We create a new ErrorResponse and return the XML response.\n             ErrorResponse errorResponse = new ErrorResponse( 0, ErrorResponseType.COULD_NOT_CONNECT, e\n@@ -376,8 +378,16 @@ protected void processDSML( OutputStream outStream ) throws IOException\n         }\n         catch ( XmlPullParserException e )\n         {\n+            LOG.warn( \"Failed while getting next request\", e );\n+            \n+            int reqId = 0;\n+            if ( request != null )\n+            {\n+                reqId = request.getDecorated().getMessageId();\n+            }\n+            \n             // We create a new ErrorResponse and return the XML response.\n-            ErrorResponse errorResponse = new ErrorResponse( 0, ErrorResponseType.MALFORMED_REQUEST, I18n.err(\n+            ErrorResponse errorResponse = new ErrorResponse( reqId, ErrorResponseType.MALFORMED_REQUEST, I18n.err(\n                 I18n.ERR_03001, e.getLocalizedMessage(), e.getLineNumber(), e.getColumnNumber() ) );\n             if ( respWriter != null )\n             {\n@@ -421,8 +431,10 @@ protected void processDSML( OutputStream outStream ) throws IOException\n             }\n             catch ( Exception e )\n             {\n+                LOG.warn( \"Failed to process request\", e );\n+                \n                 // We create a new ErrorResponse and return the XML response.\n-                ErrorResponse errorResponse = new ErrorResponse( 0, ErrorResponseType.GATEWAY_INTERNAL_ERROR, I18n.err(\n+                ErrorResponse errorResponse = new ErrorResponse( request.getDecorated().getMessageId(), ErrorResponseType.GATEWAY_INTERNAL_ERROR, I18n.err(\n                     I18n.ERR_03003, e.getMessage() ) );\n                 if ( respWriter != null )\n                 {\n@@ -607,7 +619,6 @@ protected void processRequest( DsmlDecorator<? extends Request> request, Buffere\n                 SearchCursor searchResponses = connection.search( ( SearchRequest ) request );\n                 \n                 SearchResponseDsml searchResponseDsml = new SearchResponseDsml( connection.getCodecService() );\n-                searchResponseDsml.setMessageId( request.getDecorated().getMessageId() );\n                 \n                 boolean first = true;\n                 ",
                "additions": 14,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e1b9a85f61077104159a1fe4dbe44962ce4967d7/dsml/engine/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "status": "modified",
                "changes": 17,
                "deletions": 3,
                "sha": "c1e465e8b7dbcd77881f6b87abf9ea311b9ea25b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e1b9a85f61077104159a1fe4dbe44962ce4967d7/dsml/engine/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "filename": "dsml/engine/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/engine/src/main/java/org/apache/directory/shared/dsmlv2/engine/Dsmlv2Engine.java?ref=e1b9a85f61077104159a1fe4dbe44962ce4967d7"
            },
            {
                "patch": "@@ -22,15 +22,16 @@\n \n import org.apache.directory.shared.dsmlv2.ParserUtils;\n import org.apache.directory.shared.ldap.codec.api.LdapCodecService;\n+import org.apache.directory.shared.ldap.model.entry.Attribute;\n import org.apache.directory.shared.ldap.model.entry.DefaultAttribute;\n import org.apache.directory.shared.ldap.model.entry.Entry;\n-import org.apache.directory.shared.ldap.model.entry.Attribute;\n import org.apache.directory.shared.ldap.model.entry.Value;\n import org.apache.directory.shared.ldap.model.exception.LdapException;\n import org.apache.directory.shared.ldap.model.message.MessageTypeEnum;\n import org.apache.directory.shared.ldap.model.message.SearchResultEntry;\n import org.apache.directory.shared.ldap.model.message.SearchResultEntryImpl;\n import org.apache.directory.shared.ldap.model.name.Dn;\n+import org.dom4j.Document;\n import org.dom4j.Element;\n import org.dom4j.Namespace;\n import org.dom4j.QName;\n@@ -154,8 +155,14 @@ public Element toDsml( Element root )\n                 {\n                     Namespace xsdNamespace = new Namespace( ParserUtils.XSD, ParserUtils.XML_SCHEMA_URI );\n                     Namespace xsiNamespace = new Namespace( ParserUtils.XSI, ParserUtils.XML_SCHEMA_INSTANCE_URI );\n-                    attributeElement.getDocument().getRootElement().add( xsdNamespace );\n-                    attributeElement.getDocument().getRootElement().add( xsiNamespace );\n+                    Document doc = attributeElement.getDocument();\n+                    \n+                    if ( doc !=null )\n+                    {\n+                        Element docRoot = doc.getRootElement();\n+                        docRoot.add( xsdNamespace );\n+                        docRoot.add( xsiNamespace );\n+                    }\n \n                     Element valueElement = attributeElement.addElement( \"value\" ).addText(\n                         ParserUtils.base64Encode( value.getValue() ) );",
                "additions": 10,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e1b9a85f61077104159a1fe4dbe44962ce4967d7/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResultEntryDsml.java",
                "status": "modified",
                "changes": 13,
                "deletions": 3,
                "sha": "559ab6d8c5ac500645418213830249d48f62e386",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e1b9a85f61077104159a1fe4dbe44962ce4967d7/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResultEntryDsml.java",
                "filename": "dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResultEntryDsml.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/reponse/SearchResultEntryDsml.java?ref=e1b9a85f61077104159a1fe4dbe44962ce4967d7"
            },
            {
                "patch": "@@ -706,6 +706,11 @@ public Dsmlv2Grammar()\n         super.transitions[Dsmlv2StatesEnum.SEARCH_REQUEST_CONTROL_END_TAG.ordinal()].put( new Tag( \"control\", Tag.START ),\n             new GrammarTransition( Dsmlv2StatesEnum.SEARCH_REQUEST_CONTROL_END_TAG,\n                 Dsmlv2StatesEnum.SEARCH_REQUEST_CONTROL_START_TAG, controlCreation ) );\n+        \n+        // State: [SEARCH_REQUEST_FILTER_END_TAG] - Tag: </searchRequest>\n+        super.transitions[Dsmlv2StatesEnum.SEARCH_REQUEST_CONTROL_END_TAG.ordinal()].put( new Tag( \"searchRequest\", Tag.END ),\n+            new GrammarTransition( Dsmlv2StatesEnum.SEARCH_REQUEST_CONTROL_END_TAG, Dsmlv2StatesEnum.BATCHREQUEST_LOOP,\n+                storeFilter ) );\n \n         // State: [SEARCH_REQUEST_ATTRIBUTES_START_TAG] - Tag: </attributes>\n         super.transitions[Dsmlv2StatesEnum.SEARCH_REQUEST_ATTRIBUTES_START_TAG.ordinal()].put( new Tag( \"attributes\", Tag.END ),\n@@ -735,7 +740,7 @@ public Dsmlv2Grammar()\n         // State: [SEARCH_REQUEST_ATTRIBUTES_END_TAG] - Tag: </searchRequest>\n         super.transitions[Dsmlv2StatesEnum.SEARCH_REQUEST_ATTRIBUTES_END_TAG.ordinal()].put( new Tag( \"searchRequest\", Tag.END ),\n             new GrammarTransition( Dsmlv2StatesEnum.SEARCH_REQUEST_ATTRIBUTES_END_TAG,\n-                Dsmlv2StatesEnum.BATCHREQUEST_LOOP, null ) );\n+                Dsmlv2StatesEnum.BATCHREQUEST_LOOP, storeFilter ) );\n \n         //====================================================\n         //  Transitions concerning : FILTER\n@@ -2693,6 +2698,11 @@ public void action( Dsmlv2Container container ) throws XmlPullParserException\n                 container.getBatchRequest().getCurrentRequest();\n             SearchRequest searchRequest = searchRequestDecorator.getDecorated();\n \n+            if ( searchRequestDecorator.getFilterNode() == null )\n+            {\n+                throw new IllegalStateException( \"No filter element present in the DSML search request\" );\n+            }\n+            \n             searchRequest.setFilter( searchRequestDecorator.getFilterNode() );\n         }\n     };",
                "additions": 11,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e1b9a85f61077104159a1fe4dbe44962ce4967d7/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/request/Dsmlv2Grammar.java",
                "status": "modified",
                "changes": 12,
                "deletions": 1,
                "sha": "2fb603f2e1d08c0b3e13fe86931add25017caa8b",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e1b9a85f61077104159a1fe4dbe44962ce4967d7/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/request/Dsmlv2Grammar.java",
                "filename": "dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/request/Dsmlv2Grammar.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/parser/src/main/java/org/apache/directory/shared/dsmlv2/request/Dsmlv2Grammar.java?ref=e1b9a85f61077104159a1fe4dbe44962ce4967d7"
            },
            {
                "patch": "@@ -80,6 +80,11 @@ public void testParsingFail( Class<?> testClass, String filename )\n             assertTrue( e.getMessage(), true );\n             return;\n         }\n+        catch ( IllegalStateException e )\n+        {\n+            assertTrue( e.getMessage(), true );\n+            return;\n+        }\n         catch ( Exception e )\n         {\n             fail( e.getMessage() );",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/e1b9a85f61077104159a1fe4dbe44962ce4967d7/dsml/parser/src/test/java/org/apache/directory/shared/dsmlv2/AbstractTest.java",
                "status": "modified",
                "changes": 5,
                "deletions": 0,
                "sha": "d1b881c61eaa3ac8db332eb1dc6cb225e36e891f",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/e1b9a85f61077104159a1fe4dbe44962ce4967d7/dsml/parser/src/test/java/org/apache/directory/shared/dsmlv2/AbstractTest.java",
                "filename": "dsml/parser/src/test/java/org/apache/directory/shared/dsmlv2/AbstractTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/dsml/parser/src/test/java/org/apache/directory/shared/dsmlv2/AbstractTest.java?ref=e1b9a85f61077104159a1fe4dbe44962ce4967d7"
            }
        ],
        "bug_id": "directory-ldap-api_83",
        "parent": "https://github.com/apache/directory-ldap-api/commit/8fc69678b5c07823ac9bd0e56cbba5900e3f3794",
        "message": "o fixed the grammar to store the filter properly by handling the attributes and control tags present in searchrequest\no added some warn level log statements\no throw IllegalStateException when a searchrequest doesn't contain a filter, changed the test case accordingly\no fixed a NPE in SearchResultEntryDsml while adding namespace to the doc root (in streaming mode there won't be a doc)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1091840 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/1532b727b99248fecdc702ee926d45b3588d42d4",
        "file": [
            {
                "patch": "@@ -10,3 +10,5 @@ objectclass: top\n m-name: metaSyntax\n m-typeobjectclass: STRUCTURAL\n creatorsname: uid=admin,ou=system\n+m-may: x-humanReadable\n+m-may: m-obsolete",
                "additions": 2,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/1532b727b99248fecdc702ee926d45b3588d42d4/ldap-schema/src/main/resources/schema/ou=schema/cn=apachemeta/ou=objectclasses/m-oid=1.3.6.1.4.1.18060.0.4.0.3.4.ldif",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "137240af7ba0417f0ab231fc75f71d02a58dbe20",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/1532b727b99248fecdc702ee926d45b3588d42d4/ldap-schema/src/main/resources/schema/ou=schema/cn=apachemeta/ou=objectclasses/m-oid=1.3.6.1.4.1.18060.0.4.0.3.4.ldif",
                "filename": "ldap-schema/src/main/resources/schema/ou=schema/cn=apachemeta/ou=objectclasses/m-oid=1.3.6.1.4.1.18060.0.4.0.3.4.ldif",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema/src/main/resources/schema/ou=schema/cn=apachemeta/ou=objectclasses/m-oid=1.3.6.1.4.1.18060.0.4.0.3.4.ldif?ref=1532b727b99248fecdc702ee926d45b3588d42d4"
            }
        ],
        "bug_id": "directory-ldap-api_84",
        "parent": "https://github.com/apache/directory-ldap-api/commit/02cf86c6a798a5116a4adf5658f45cba1bb6b735",
        "message": "o Added some missing At in the metaSyntax ObjectClass : m-obsolete and x-humanReadable\no Fixed a potential NPE when a schema object is injected without name\no Moved the ChangeLog interceptor at the end of the iChain\no Removed the isFirstOperation() check in the ChangeLong operations, it's not used anymore\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@1059073 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/7ec58541dc847a81dc6179d626eb9212b1cd30a2",
        "file": [
            {
                "patch": "@@ -21,6 +21,8 @@\n \n \n import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -109,6 +111,9 @@\n \n     /** the normalized name for the schema modification attributes */\n     private LdapDN schemaModificationAttributesDN;\n+    \n+    /** A Map containing all the schema being dependent from a schema */\n+    private Map<String, Set<String>> schemaDependences = new HashMap<String, Set<String>>();\n \n     /** A flag indicating that the SchemaManager is relaxed or not */\n     private boolean isRelaxed = STRICT;\n@@ -128,7 +133,7 @@ public DefaultSchemaManager( SchemaLoader loader ) throws Exception\n         // Default to the the root (one schemaManager for all the entries\n         namingContext = LdapDN.EMPTY_LDAPDN;\n         this.schemaLoader = loader;\n-        errors = null;\n+        errors = new ArrayList<Throwable>();\n         registries = new Registries( this );\n         factory = new SchemaEntityFactory();\n         isRelaxed = STRICT;\n@@ -145,7 +150,7 @@ public DefaultSchemaManager( SchemaLoader loader, LdapDN namingContext ) throws\n     {\n         this.namingContext = namingContext;\n         this.schemaLoader = loader;\n-        errors = null;\n+        errors = new ArrayList<Throwable>();\n         registries = new Registries( this );\n         factory = new SchemaEntityFactory();\n         isRelaxed = STRICT;\n@@ -188,7 +193,16 @@ private Registries cloneRegistries() throws Exception\n \n         for ( String schemaName : schemas )\n         {\n-            schemaArray[n++] = schemaLoader.getSchema( schemaName );\n+            Schema schema = schemaLoader.getSchema( schemaName );\n+            \n+            if ( schema != null )\n+            {\n+                schemaArray[n++] = schema;\n+            }\n+            else\n+            {\n+                throw new LdapOperationNotSupportedException( \"Cannot load the unknown schema \" + schemaName, ResultCodeEnum.UNWILLING_TO_PERFORM );\n+            }\n         }\n \n         return schemaArray;\n@@ -234,9 +248,25 @@ private void deleteSchemaObjects( Schema schema, Registries registries ) throws\n         {\n             registries.delete( errors, schemaObject );\n         }\n+    }\n \n-        // TODO Add some listener handling at this point\n-        //notifyListenerOrRegistries( schema, registries );\n+    \n+    /**\n+     * Tells if there are schemaObjects for a given schema from the registries\n+     */\n+    private boolean hasSchemaObjects( Schema schema, Registries registries ) throws Exception\n+    {\n+        Map<String, Set<SchemaObjectWrapper>> schemaObjects = registries.getObjectBySchemaName();\n+        Set<SchemaObjectWrapper> content = schemaObjects.get( StringTools.toLowerCase( schema.getSchemaName() ) );\n+\n+        if ( ( content == null ) || content.isEmpty() )\n+        {\n+            return false;\n+        }\n+        else\n+        {\n+            return true;\n+        }\n     }\n \n \n@@ -490,6 +520,11 @@ public boolean isDisabledAccepted()\n      */\n     public boolean load( Schema... schemas ) throws Exception\n     {\n+        if ( schemas.length == 0 )\n+        {\n+            return true;\n+        }\n+        \n         boolean loaded = false;\n \n         // Reset the errors if not null\n@@ -525,6 +560,28 @@ public boolean load( Schema... schemas ) throws Exception\n                 for ( Schema schema : schemas )\n                 {\n                     load( registries, schema );\n+                    \n+                    // Update the schema dependences if needed\n+                    \n+                    if ( schema.getDependencies() != null )\n+                    {\n+                        for ( String dep : schema.getDependencies() )\n+                        {\n+                            Set<String> deps = schemaDependences.get( dep );\n+                            \n+                            if ( deps == null )\n+                            {\n+                                deps = new HashSet<String>();\n+                                deps.add( schema.getSchemaName() );\n+                            }\n+                            \n+                            // Replace the dependences\n+                            schemaDependences.put( dep, deps );\n+                        }\n+                    }\n+                    \n+                    // add the schema to the schemaLoader\n+                    schemaLoader.addSchema( schema );\n                 }\n \n                 // Build the cross references\n@@ -547,6 +604,11 @@ public boolean load( Schema... schemas ) throws Exception\n      */\n     public boolean load( String... schemaNames ) throws Exception\n     {\n+        if ( schemaNames.length == 0 )\n+        {\n+            return true;\n+        }\n+        \n         Schema[] schemas = toArray( schemaNames );\n \n         return load( schemas );\n@@ -581,10 +643,9 @@ private boolean load( Registries registries, Schema schema ) throws Exception\n         {\n             if ( registries.isDisabledAccepted() )\n             {\n-                LOG.info( \"Loading {} schema: \\n{}\", schema.getSchemaName(), schema );\n+                LOG.info( \"Loading {} disbaled schema: \\n{}\", schema.getSchemaName(), schema );\n \n                 registries.schemaLoaded( schema );\n-\n                 addSchemaObjects( schema, registries );\n             }\n             else\n@@ -594,7 +655,7 @@ private boolean load( Registries registries, Schema schema ) throws Exception\n         }\n         else\n         {\n-            LOG.info( \"Loading {} schema: \\n{}\", schema.getSchemaName(), schema );\n+            LOG.info( \"Loading {} enabled schema: \\n{}\", schema.getSchemaName(), schema );\n \n             registries.schemaLoaded( schema );\n             addSchemaObjects( schema, registries );\n@@ -1087,20 +1148,81 @@ public void setRegistries( Registries registries )\n     /**\n      * {@inheritDoc}\n      */\n-    public boolean unload( Schema... schemas )\n+    public boolean unload( Schema... schemas ) throws Exception\n     {\n-        // TODO Auto-generated method stub\n-        return false;\n+        boolean unloaded = false;\n+\n+        // Reset the errors if not null\n+        if ( errors != null )\n+        {\n+            errors.clear();\n+        }\n+        \n+        // Work on a cloned and relaxed registries\n+        Registries clonedRegistries = cloneRegistries();\n+        clonedRegistries.setRelaxed();\n+\n+        // Load the schemas\n+        for ( Schema schema : schemas )\n+        {\n+            unload( clonedRegistries, schema );\n+        }\n+\n+        // Build the cross references\n+        errors = clonedRegistries.buildReferences();\n+\n+        if ( errors.isEmpty() )\n+        {\n+            // Ok no errors. Check the registries now\n+            errors = clonedRegistries.checkRefInteg();\n+\n+            if ( errors.isEmpty() )\n+            {\n+                // We are golden : let's apply the schema in the real registries\n+                registries.setRelaxed();\n+\n+                // Load the schemas\n+                for ( Schema schema : schemas )\n+                {\n+                    unload( registries, schema );\n+                    \n+                    // Update the schema dependences\n+                    for ( String dep : schema.getDependencies() )\n+                    {\n+                        Set<String> deps = schemaDependences.get( dep );\n+                        \n+                        if ( deps != null )\n+                        {\n+                            deps.remove( schema.getSchemaName() );\n+                        }\n+                    }\n+                    \n+                    schemaLoader.removeSchema( schema );\n+                }\n+\n+                // Build the cross references\n+                errors = registries.buildReferences();\n+                registries.setStrict();\n+\n+                unloaded = true;\n+            }\n+        }\n+\n+        // clear the cloned registries\n+        clonedRegistries.clear();\n+\n+        return unloaded;\n     }\n \n \n     /**\n      * {@inheritDoc}\n      */\n-    public boolean unload( String... schemas )\n+    public boolean unload( String... schemaNames ) throws Exception\n     {\n-        // TODO Auto-generated method stub\n-        return false;\n+        Schema[] schemas = toArray( schemaNames );\n+\n+        return unload( schemas );\n     }\n \n \n@@ -1855,6 +1977,15 @@ public boolean isStrict()\n         return !isRelaxed;\n     }\n \n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public Set<String> listDependentSchemaNames( String schemaName )\n+    {\n+        return schemaDependences.get( schemaName );\n+    }\n+\n \n     /**\n      * Change the SchemaManager to a relaxed mode, where invalid SchemaObjects",
                "additions": 145,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "status": "modified",
                "changes": 159,
                "deletions": 14,
                "sha": "778b4e80d9641c1141921eff8aaac1fa29f617ec",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "filename": "ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/main/java/org/apache/directory/shared/schema/DefaultSchemaManager.java?ref=7ec58541dc847a81dc6179d626eb9212b1cd30a2"
            },
            {
                "patch": "@@ -25,11 +25,13 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.File;\n import java.io.IOException;\n \n import org.apache.commons.io.FileUtils;\n+import org.apache.directory.shared.ldap.exception.LdapOperationNotSupportedException;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n import org.apache.directory.shared.ldap.schema.ldif.extractor.SchemaLdifExtractor;\n import org.apache.directory.shared.ldap.schema.registries.DefaultSchema;\n@@ -548,7 +550,15 @@ public void testLoadWrongSchema() throws Exception\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n         assertTrue( schemaManager.load( \"system\" ) );\n-        assertTrue( schemaManager.load( \"bad\" ) );\n+        try\n+        {\n+            schemaManager.loadWithDeps( \"bad\" );\n+            fail();\n+        }\n+        catch ( LdapOperationNotSupportedException lonse )\n+        {\n+            // expected\n+        }\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 38, schemaManager.getAttributeTypeRegistry().size() );\n@@ -606,23 +616,32 @@ public void testLoadCoreInetOrgPersonAndBad() throws Exception\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n         assertTrue( schemaManager.load( \"system\" ) );\n-        assertTrue( schemaManager.load( \"core\", \"bad\", \"cosine\", \"InetOrgPerson\" ) );\n+\n+        try\n+        {\n+            assertFalse( schemaManager.load( \"core\", \"bad\", \"cosine\", \"InetOrgPerson\" ) );\n+            fail();\n+        }\n+        catch ( LdapOperationNotSupportedException lonse )\n+        {\n+            // expected\n+        }\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n-        assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 38, schemaManager.getAttributeTypeRegistry().size() );\n         assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n         assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n         assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n-        assertEquals( 50, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 9, schemaManager.getObjectClassRegistry().size() );\n         assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n         assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n-        assertEquals( 286, schemaManager.getGlobalOidRegistry().size() );\n+        assertEquals( 141, schemaManager.getGlobalOidRegistry().size() );\n \n-        assertEquals( 4, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertEquals( 1, schemaManager.getRegistries().getLoadedSchemas().size() );\n         assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n     }\n \n ",
                "additions": 28,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadTest.java",
                "status": "modified",
                "changes": 37,
                "deletions": 9,
                "sha": "e61fb03c9931b4a11f4f87901118d608048d74b5",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadTest.java",
                "filename": "ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadTest.java?ref=7ec58541dc847a81dc6179d626eb9212b1cd30a2"
            },
            {
                "patch": "@@ -24,11 +24,13 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.File;\n import java.io.IOException;\n \n import org.apache.commons.io.FileUtils;\n+import org.apache.directory.shared.ldap.exception.LdapOperationNotSupportedException;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n import org.apache.directory.shared.ldap.schema.ldif.extractor.SchemaLdifExtractor;\n import org.apache.directory.shared.ldap.schema.registries.DefaultSchema;\n@@ -415,7 +417,15 @@ public void testLoadWrongSchema() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"bad\" );\n+        try\n+        {\n+            schemaManager.loadWithDeps( \"bad\" );\n+            fail();\n+        }\n+        catch ( LdapOperationNotSupportedException lonse )\n+        {\n+            // expected\n+        }\n \n         assertTrue( schemaManager.getErrors().isEmpty() );\n         assertEquals( 0, schemaManager.getAttributeTypeRegistry().size() );\n@@ -469,23 +479,32 @@ public void testLoadCoreInetOrgPersonAndBad() throws Exception\n         LdifSchemaLoader loader = new LdifSchemaLoader( schemaRepository );\n         SchemaManager schemaManager = new DefaultSchemaManager( loader );\n \n-        schemaManager.loadWithDeps( \"core\", \"bad\", \"InetOrgPerson\" );\n+        try\n+        {\n+            schemaManager.loadWithDeps( \"core\", \"bad\", \"InetOrgPerson\" );\n+            fail();\n+        }\n+        catch ( LdapOperationNotSupportedException lonse )\n+        {\n+            // expected\n+        }\n \n+        // No SchemaObject should be loaded as we had an error\n         assertTrue( schemaManager.getErrors().isEmpty() );\n-        assertEquals( 142, schemaManager.getAttributeTypeRegistry().size() );\n-        assertEquals( 35, schemaManager.getComparatorRegistry().size() );\n-        assertEquals( 35, schemaManager.getMatchingRuleRegistry().size() );\n-        assertEquals( 35, schemaManager.getNormalizerRegistry().size() );\n-        assertEquals( 50, schemaManager.getObjectClassRegistry().size() );\n-        assertEquals( 59, schemaManager.getSyntaxCheckerRegistry().size() );\n-        assertEquals( 59, schemaManager.getLdapSyntaxRegistry().size() );\n-        assertEquals( 286, schemaManager.getGlobalOidRegistry().size() );\n+        assertEquals( 0, schemaManager.getAttributeTypeRegistry().size() );\n+        assertEquals( 0, schemaManager.getComparatorRegistry().size() );\n+        assertEquals( 0, schemaManager.getMatchingRuleRegistry().size() );\n+        assertEquals( 0, schemaManager.getNormalizerRegistry().size() );\n+        assertEquals( 0, schemaManager.getObjectClassRegistry().size() );\n+        assertEquals( 0, schemaManager.getSyntaxCheckerRegistry().size() );\n+        assertEquals( 0, schemaManager.getLdapSyntaxRegistry().size() );\n+        assertEquals( 0, schemaManager.getGlobalOidRegistry().size() );\n \n-        assertEquals( 4, schemaManager.getRegistries().getLoadedSchemas().size() );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n-        assertNotNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n+        assertEquals( 0, schemaManager.getRegistries().getLoadedSchemas().size() );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"system\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"core\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"cosine\" ) );\n+        assertNull( schemaManager.getRegistries().getLoadedSchema( \"InetOrgPerson\" ) );\n     }\n \n ",
                "additions": 34,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadWithDepsTest.java",
                "status": "modified",
                "changes": 49,
                "deletions": 15,
                "sha": "0cdc1fc7d8faf12b5a9c3f020b24587119ea2f19",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadWithDepsTest.java",
                "filename": "ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadWithDepsTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap-schema-loader/src/test/java/org/apache/directory/server/schema/SchemaManagerLoadWithDepsTest.java?ref=7ec58541dc847a81dc6179d626eb9212b1cd30a2"
            },
            {
                "patch": "@@ -22,6 +22,7 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import javax.naming.NamingException;\n \n@@ -240,7 +241,7 @@\n      * @param schemas The list of Schema to unload\n      * @return True if all the schemas have been unloaded\n      */\n-    boolean unload( Schema... schemas );\n+    boolean unload( Schema... schemas ) throws Exception;\n \n \n     /**\n@@ -249,7 +250,7 @@\n      * @param schemas The list of Schema to unload\n      * @return True if all the schemas have been unloaded\n      */\n-    boolean unload( String... schemas );\n+    boolean unload( String... schemas ) throws Exception;\n \n \n     //---------------------------------------------------------------------------------\n@@ -792,4 +793,13 @@\n      * @return true if the schema is laoded\n      */\n     boolean isSchemaLoaded( String schemaName );\n+    \n+    \n+    /**\n+     * Get the list of Schema names which has the given schema name as a dependence\n+     *\n+     * @param schemaName The Schema name for which we want to get the list of dependent schemas\n+     * @return The list of dependent schemas\n+     */\n+    Set<String> listDependentSchemaNames( String schemaName );\n }",
                "additions": 12,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/SchemaManager.java",
                "status": "modified",
                "changes": 14,
                "deletions": 2,
                "sha": "84196ebd815deed9a966cad7943110516717cf96",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/SchemaManager.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/SchemaManager.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/SchemaManager.java?ref=7ec58541dc847a81dc6179d626eb9212b1cd30a2"
            },
            {
                "patch": "@@ -87,6 +87,25 @@ protected final void notifyListenerOrRegistries( Schema schema, Registries regis\n      * {@inheritDoc}\n      */\n     public final Collection<Schema> getAllEnabled() throws Exception\n+    {\n+        Collection<Schema> enabledSchemas = new ArrayList<Schema>();\n+        \n+        for ( Schema schema : schemaMap.values() )\n+        {\n+            if ( schema.isEnabled() )\n+            {\n+                enabledSchemas.add( schema );\n+            }\n+        }\n+        \n+        return enabledSchemas;\n+    }\n+\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    public final Collection<Schema> getAllSchemas() throws Exception\n     {\n         return schemaMap.values();\n     }\n@@ -97,7 +116,25 @@ protected final void notifyListenerOrRegistries( Schema schema, Registries regis\n      */\n     public Schema getSchema( String schemaName )\n     {\n-        return this.schemaMap.get( StringTools.toLowerCase( schemaName ) );\n+        return schemaMap.get( StringTools.toLowerCase( schemaName ) );\n+    }\n+    \n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public void addSchema( Schema schema )\n+    {\n+        schemaMap.put( schema.getSchemaName(), schema );\n+    }\n+    \n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public void removeSchema( Schema schema )\n+    {\n+        schemaMap.remove( schema.getSchemaName() );\n     }\n \n ",
                "additions": 38,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "status": "modified",
                "changes": 39,
                "deletions": 1,
                "sha": "0b1497fc0f8b1740942e7fcd7ae2f0deab3b10e4",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java?ref=7ec58541dc847a81dc6179d626eb9212b1cd30a2"
            },
            {
                "patch": "@@ -312,7 +312,26 @@\n      */\n     Collection<Schema> getAllEnabled() throws Exception;\n \n+    \n+    /**\n+     * @return the list of all schemas\n+     * @throws Exception TODO\n+     */\n+    Collection<Schema> getAllSchemas() throws Exception;\n \n+    \n+    /**\n+     * Add a new schema to the schema's list\n+     */\n+    public void addSchema( Schema schema );\n+\n+    \n+    /**\n+     * Remove a schema from the schema's list\n+     */\n+    public void removeSchema( Schema schema );\n+\n+    \n     /**\n      * TODO : get rid of this here !\n      * @dao the DAO",
                "additions": 19,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/SchemaLoader.java",
                "status": "modified",
                "changes": 19,
                "deletions": 0,
                "sha": "367c4430d0838877530218a1a67de0549ff72bf5",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/7ec58541dc847a81dc6179d626eb9212b1cd30a2/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/SchemaLoader.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/SchemaLoader.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/SchemaLoader.java?ref=7ec58541dc847a81dc6179d626eb9212b1cd30a2"
            }
        ],
        "bug_id": "directory-ldap-api_85",
        "parent": "https://github.com/apache/directory-ldap-api/commit/3622ff360f22d22313a4f32898ddae9f32accd23",
        "message": "o Implemented the unload() methods in SchemaManager\no Update the dependencies hen a schema is added or removed\no Fixed some potential NPE\no If a schema does not exist while trying to load/unload it, trhow an exception now\no Added a removeSchema() method in SchemaLoader\no Fix the schemaLoader tests\no Return only the enabled schema in getAllEnabled() method\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/shared-schema@892548 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/5a64dde478ba475fa1b41f8bf6ae88d0640540dd",
        "file": [
            {
                "patch": "@@ -68,7 +68,7 @@\n      * \n      * @param provider The associated Provider\n      */\n-    public TwixEncoder(Provider provider)\n+    public TwixEncoder( Provider provider )\n     {\n         this.provider = provider;\n         encodeCallback = new OutputCallback();\n@@ -92,6 +92,7 @@ public void encodeBlocking( Object lock, OutputStream out, Object obj ) throws P\n                 log.debug( \"Encoding this LdapMessage : \" + obj );\n             }\n \n+            ( ( OutputCallback ) encodeCallback ).attach( out );\n             encodeCallback.encodeOccurred( null, ( ( LdapMessage ) obj ).encode( null ) );\n         }\n         catch ( EncoderException e )\n@@ -255,6 +256,7 @@ public void encodeOccurred( StatefulEncoder encoder, Object encoded )\n         {\n             try\n             {\n+                ( ( ByteBuffer ) encoded ).flip();\n                 channel.write( ( ByteBuffer ) encoded );\n             }\n             catch ( IOException e )",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/5a64dde478ba475fa1b41f8bf6ae88d0640540dd/ldap/src/main/java/org/apache/directory/shared/ldap/codec/TwixEncoder.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "ac539fd9505fb4df53204681a752653b28eac778",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/5a64dde478ba475fa1b41f8bf6ae88d0640540dd/ldap/src/main/java/org/apache/directory/shared/ldap/codec/TwixEncoder.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/codec/TwixEncoder.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/codec/TwixEncoder.java?ref=5a64dde478ba475fa1b41f8bf6ae88d0640540dd"
            }
        ],
        "bug_id": "directory-ldap-api_86",
        "parent": "https://github.com/apache/directory-ldap-api/commit/5b0c64b06d6cb2e01103febd20aa5577669c2a11",
        "message": "fixing couple bugs in encoder to implement ldap client:\n\n o the blockingEncode method did not attach the output stream to the channel\n   and caused NPE to be thrown\n o the buffer on decode callbacks was not being flipped before writing it to \n   the channel causing messages to be lost\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@654363 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/563ff71ce683b7b9c45f7e49e05a6f449c83b29f",
        "file": [
            {
                "patch": "@@ -111,20 +111,20 @@ public final boolean isNormalized()\n     /**\n      * Normalize the value\n      */\n+    @SuppressWarnings(value = \"unchecked\")\n     public void normalize( Normalizer normalizer ) throws NamingException\n     {\n-        //noinspection unchecked\n         normValue = ( T ) normalizer.normalize( value );\n     }\n     \n     \n     /**\n      * Clone the value.\n      */\n-    public Value clone() throws CloneNotSupportedException\n+    public Value<?> clone() throws CloneNotSupportedException\n     {\n         // Simply clone the object\n-        return ( Value ) super.clone();\n+        return (Value<?>)super.clone();\n     }\n     \n     ",
                "additions": 3,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/AbstractValue.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "d56fa589c58ef3f34e72081ac6a18639b724c2ad",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/AbstractValue.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/common/AbstractValue.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/common/AbstractValue.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -77,7 +77,7 @@\n      * @param val a new value to be added which may be null\n      * @return true if a value was added, otherwise false\n      */\n-    boolean add( Value val );\n+    boolean add( Value<?> val );\n     \n     \n     /**\n@@ -124,7 +124,7 @@\n      * \n      * @return a deep clone of this attribute\n      */\n-    Object clone();\n+    ServerAttribute clone();\n \n    \n     /**\n@@ -133,7 +133,7 @@\n      * @param val the value which may be null\n      * @return true if this attribute contains the value, otherwise false\n      */\n-    boolean contains( Value val );\n+    boolean contains( Value<?> val );\n     \n \n     /**\n@@ -166,7 +166,7 @@\n      * @return a value of this attribute\n      * @throws NamingException If the attribute has no value.\n      */\n-    Value get() throws NamingException;\n+    Value<?> get() throws NamingException;\n \n \n     /**\n@@ -182,7 +182,7 @@\n      * @return an enumeration of all values of the attribute\n      * @throws NamingException If any <code>NamingException</code> occurs.\n      */\n-    Iterator<Value> getAll() throws NamingException;\n+    Iterator<Value<?>> getAll() throws NamingException;\n \n \n     /**\n@@ -222,7 +222,7 @@\n      * @param val the value to be removed\n      * @return true if the value is removed, otherwise false\n      */\n-    boolean remove( Value val );\n+    boolean remove( Value<?> val );\n     \n \n     /**",
                "additions": 6,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerAttribute.java",
                "status": "modified",
                "changes": 12,
                "deletions": 6,
                "sha": "2653d3a423bcbf29d7910e4c90f8274f201e462a",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerAttribute.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerAttribute.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerAttribute.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -58,10 +58,10 @@\n     private OID oid;\n \n     /** In case we have only one value, just use this container */\n-    private Value value;\n+    private Value<?> value;\n     \n     /** the list of attribute values, if unordered */\n-    private List<Value> values;\n+    private List<Value<?>> values;\n     \n     /** A size to handle the number of values, as one of them can be null */\n     private int size;\n@@ -123,7 +123,7 @@ public ServerAttributeImpl( OID oid ) throws NamingException\n      * @param val the attribute's value\n      * @throws NamingException if the id is invalid\n      */\n-    public ServerAttributeImpl( String id, Value val ) throws NamingException\n+    public ServerAttributeImpl( String id, Value<?> val ) throws NamingException\n     {\n         if ( StringTools.isEmpty( id ) )\n         {\n@@ -146,7 +146,7 @@ public ServerAttributeImpl( String id, Value val ) throws NamingException\n      * @param val the attribute's value\n      * @throws NamingException if the oid is invalid\n      */\n-    public ServerAttributeImpl( OID oid, Value val ) throws NamingException\n+    public ServerAttributeImpl( OID oid, Value<?> val ) throws NamingException\n     {\n         if ( oid == null )\n         {\n@@ -292,13 +292,13 @@ else if ( attribute instanceof ServerAttributeImpl )\n                     \n                 default :\n                     value = null;\n-                    values = new ArrayList<Value>( copy.size() );\n+                    values = new ArrayList<Value<?>>( copy.size() );\n                     \n-                    Iterator<Value> vals = copy.getAll();\n+                    Iterator<Value<?>> vals = copy.getAll();\n                     \n                     while ( vals.hasNext() )\n                     {\n-                        Value val = vals.next();\n+                        Value<?> val = vals.next();\n                         values.add( val );\n                     }\n                     \n@@ -345,7 +345,7 @@ else if ( val instanceof byte[] )\n                     break;\n                     \n                 default :   \n-                    NamingEnumeration vals = attribute.getAll();\n+                    NamingEnumeration<?> vals = attribute.getAll();\n                     \n                     while ( vals.hasMoreElements() )\n                     {\n@@ -386,15 +386,19 @@ else if ( val instanceof byte[] )\n      * @param value the value to clone\n      * @return the value that was cloned\n      */\n-    private Value getClonedValue( Value value )\n+    private Value<?> getClonedValue( Value<?> value )\n     {\n+        if ( value == null )\n+        {\n+            return new StringValue( null );\n+        }\n         try\n         {\n-            return (Value)value.clone();\n+            return value.clone();\n         }\n         catch ( CloneNotSupportedException csne )\n         {\n-            return null;\n+            return new StringValue( null );\n         }\n     }\n     \n@@ -407,11 +411,11 @@ private Value getClonedValue( Value value )\n      * \n      * @return the Iterator wrapped as a NamingEnumberation.\n      */\n-    public Iterator<Value> getAll()\n+    public Iterator<Value<?>> getAll()\n     {\n         if ( size < 2 )\n         {\n-            return new Iterator<Value>()\n+            return new Iterator<Value<?>>()\n             {\n                 private boolean more = (value != null);\n                     \n@@ -420,7 +424,7 @@ public boolean hasNext()\n                     return more;\n                 }\n                 \n-                public Value next() \n+                public Value<?> next() \n                 {\n                     more = false;\n                     return value;\n@@ -445,7 +449,7 @@ public void remove()\n      * \n      * @return the first value or null.\n      */\n-    public Value get()\n+    public Value<?> get()\n     {\n         switch ( size )\n         {\n@@ -500,7 +504,7 @@ public OID getOid()\n      * @param val the value to test for\n      * @return true if val is in the list backing store, false otherwise\n      */\n-    public boolean contains( Value val )\n+    public boolean contains( Value<?> val )\n     {\n         switch ( size )\n         {\n@@ -511,7 +515,7 @@ public boolean contains( Value val )\n                 return AttributeUtils.equals( value, val );\n                 \n             default :\n-                for ( Value value:values )\n+                for ( Value<?> value:values )\n                 {\n                     if ( AttributeUtils.equals( value, val ) )\n                     {\n@@ -556,7 +560,7 @@ public boolean contains( byte[] val )\n      * @return true if val is added to the list backing store, false if it\n      *         already existed there.\n      */\n-    public boolean add( Value val )\n+    public boolean add( Value<?> val )\n     {\n         if ( contains( val ) )\n         {\n@@ -576,21 +580,23 @@ public boolean add( Value val )\n                 \n             case 1 :\n                 // We can't store different kind of Values in the attribute\n-                // The null value is an exception\n-                if ( ( value != null) && ( val != null ) && \n+                // The null value is an exception, as it is not associated\n+                // with a StringValue or a BinaryValue\n+                if ( ( value.getValue() != null) && ( val.getValue() != null ) && \n                      ( value.getClass() != val.getClass() ) )\n                 {\n                     return false;\n                 }\n \n-                if ( value != null && value.equals( val ) )\n+                // value is never null.\n+                if ( value.equals( val ) )\n                 {\n                     // Don't add two times the same value\n                     return true;\n                 }\n                 else\n                 {\n-                    values = new ArrayList<Value>();\n+                    values = new ArrayList<Value<?>>();\n                     values.add( value );\n                     values.add( val );\n                     value = null;\n@@ -599,16 +605,15 @@ public boolean add( Value val )\n                 }\n                 \n             default :\n-                Value firstValue = values.get( 0 );\n+                Value<?> firstValue = values.get( 0 );\n             \n                 if ( firstValue.getValue() == null )\n                 {\n                     firstValue = values.get( 1 );\n                 }\n                 \n                 // We can't store different kind of Values in the attribute\n-                // The null value is an exception\n-                if ( ( val != null ) && ( val.getValue() != null ) &&\n+                if ( ( val.getValue() != null ) &&\n                      ( firstValue.getValue().getClass() != val.getClass() ) )\n                 {\n                     return false;\n@@ -664,7 +669,7 @@ public boolean add( byte[] val )\n      * @return true if val is remove from the list backing store, false if\n      *         never existed there.\n      */\n-    public boolean remove( Value val )\n+    public boolean remove( Value<?> val )\n     {\n         if ( contains( val) )\n         {\n@@ -752,7 +757,7 @@ public void clear()\n      * @return a copy of this attribute using the same parent lock and id\n      *         containing references to all the values of the original.\n      */\n-    public Object clone()\n+    public ServerAttribute clone()\n     {\n         try\n         {\n@@ -763,15 +768,15 @@ public Object clone()\n             \n             if ( size < 2 )\n             {\n-                clone.value = (Value)value.clone();\n+                clone.value = value.clone();\n             }\n             else\n             {\n-                clone.values = new ArrayList<Value>( values.size() );\n+                clone.values = new ArrayList<Value<?>>( values.size() );\n                 \n-                for ( Value value:values )\n+                for ( Value<?> value:values )\n                 {\n-                    Value newValue = (Value)value.clone();\n+                    Value<?> newValue = value.clone();\n                     clone.values.add( newValue );\n                 }\n             }\n@@ -833,11 +838,11 @@ public boolean equals( Object obj )\n                 return ( value.equals( attr.get() ) );\n             \n             default :\n-                Iterator<Value> vals = getAll();\n+                Iterator<Value<?>> vals = getAll();\n                 \n                 while ( vals.hasNext() )\n                 {\n-                    Value val = vals.next();\n+                    Value<?> val = vals.next();\n                     \n                     if ( !attr.contains( val ) )\n                     {\n@@ -909,7 +914,7 @@ public String toString()\n             default :\n                 boolean isFirst = true;\n             \n-                for ( Value value:values )\n+                for ( Value<?> value:values )\n                 {\n                     if ( !isFirst )\n                     {",
                "additions": 39,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerAttributeImpl.java",
                "status": "modified",
                "changes": 73,
                "deletions": 34,
                "sha": "9dd3a4f7d3f62130a83c3340cd55b819fd421b70",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerAttributeImpl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerAttributeImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerAttributeImpl.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -71,7 +71,22 @@\n      * \n      * @return a deep copy of this <code>Attributes</code> instance\n      */\n-    Object clone();\n+    ServerEntry clone();\n+\n+\n+    /**\n+     * Places a non-null attribute in the attribute collection. If there is\n+     * already an attribute with the same OID as the new attribute, the old one\n+     * is removed from the collection and is returned by this method. If there\n+     * was no attribute with the same OID the return value is <code>null</code>.\n+     * \n+     * This method clone the attribute.\n+     * \n+     * @param attribute the attribute to be copied\n+     * @return the old attribute with the same OID, if exists; otherwise\n+     *         <code>null</code>\n+     */\n+    ServerAttribute copy( ServerAttribute attr );\n \n \n     /**\n@@ -150,7 +165,7 @@\n      *         <code>null</code>\n      * @throws NamingException If the oid is null.\n      */\n-    ServerAttribute put( OID oid, Value val ) throws NamingException;\n+    ServerAttribute put( OID oid, Value<?> val ) throws NamingException;\n     \n \n     /**",
                "additions": 17,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerEntry.java",
                "status": "modified",
                "changes": 19,
                "deletions": 2,
                "sha": "10bd83796833272c54ff3e273e1931913bdac157",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerEntry.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerEntry.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerEntry.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -106,7 +106,7 @@ public void clear()\n      * \n      * @return a deep copy of this <code>Attributes</code> instance\n      */\n-    public Object clone()\n+    public ServerEntry clone()\n     {\n         try\n         {\n@@ -137,6 +137,29 @@ public Object clone()\n     }\n \n \n+    /**\n+     * Places a non-null attribute in the attribute collection. If there is\n+     * already an attribute with the same OID as the new attribute, the old one\n+     * is removed from the collection and is returned by this method. If there\n+     * was no attribute with the same OID the return value is <code>null</code>.\n+     * \n+     * This method clone the attribute.\n+     * \n+     * @param attribute the attribute to be copied\n+     * @return the old attribute with the same OID, if exists; otherwise\n+     *         <code>null</code>\n+     */\n+    public ServerAttribute copy( ServerAttribute attr )\n+    {\n+        if ( attr == null )\n+        {\n+            return null;\n+        }\n+        \n+        return put( attr.clone() );\n+    }\n+    \n+    \n     /**\n      * Returns the attribute with the specified OID. The return value\n      * is <code>null</code> if no match is found.\n@@ -390,7 +413,7 @@ public ServerAttribute put( ServerAttribute attr )\n      *         <code>null</code>\n      * @throws NamingException If the oid is null.\n      */\n-    public ServerAttribute put( OID oid, Value val ) throws NamingException\n+    public ServerAttribute put( OID oid, Value<?> val ) throws NamingException\n     {\n         return put( new ServerAttributeImpl( oid, val ) );\n     }",
                "additions": 25,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerEntryImpl.java",
                "status": "modified",
                "changes": 27,
                "deletions": 2,
                "sha": "4fe459b1bad88fd6bb9291ba9fc91dfd2f2f6382",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerEntryImpl.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerEntryImpl.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/common/ServerEntryImpl.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -88,5 +88,5 @@\n      * @return A non-null copy of the Value.\n      * @throws CloneNotSupportedException if the clone operation is not supported\n      */\n-    Object clone() throws CloneNotSupportedException;\n+    Value<?> clone() throws CloneNotSupportedException;\n }",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/Value.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "72843cb04e1b5efb354040d60b9feb001de27261",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/main/java/org/apache/directory/shared/ldap/common/Value.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/common/Value.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/common/Value.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -70,7 +70,7 @@\n         \n         BinaryValue value = new BinaryValue( bytes );\n         \n-        Value clone = (Value)value.clone();\n+        Value<?> clone = value.clone();\n         \n         assertTrue( clone instanceof BinaryValue );\n         assertTrue( clone.getValue() instanceof byte[] );",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/test/java/org/apache/directory/shared/ldap/common/BinaryValueTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "839f9c1011c84c68edcb6c4c4794de9a76bc89e8",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/test/java/org/apache/directory/shared/ldap/common/BinaryValueTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/common/BinaryValueTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/common/BinaryValueTest.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -115,7 +115,7 @@\n         assertEquals( 2, attr.size() );\n         assertEquals( \"test1\", attr.get().getValue() );\n         \n-        Iterator<Value> vals = attr.getAll();\n+        Iterator<Value<?>> vals = attr.getAll();\n         int i = 1;\n         \n         while ( vals.hasNext() )\n@@ -140,7 +140,7 @@\n         assertEquals( 2, attr.size() );\n         assertTrue( Arrays.equals( b1, (byte[])attr.get().getValue() ) );\n         \n-        Iterator<Value> vals = attr.getAll();\n+        Iterator<Value<?>> vals = attr.getAll();\n         int i = 1;\n         \n         while ( vals.hasNext() )\n@@ -280,7 +280,7 @@\n     {\n         ServerAttribute attr1 = new ServerAttributeImpl( \"test\", \"test1\" );\n         \n-        Value v = attr1.get();\n+        Value<?> v = attr1.get();\n         assertEquals( \"test1\", v.getValue() );\n \n         attr1.add( \"test2\" );\n@@ -369,12 +369,12 @@ public Object normalize( Object value ) throws NamingException\n         String[] expectedLC = new String[]{ \"test1\", \"test2\", null };\n         String[] expectedUC = new String[]{ \"TEST1\", \"TEST2\", null };\n         \n-        Iterator<Value> iter = attr.getAll();\n+        Iterator<Value<?>> iter = attr.getAll();\n         int i = 0;\n         \n         while ( iter.hasNext() )\n         {\n-            Value v = iter.next();\n+            Value<?> v = iter.next();\n             assertEquals( expectedLC[i], v.getNormValue() );\n             assertEquals( expectedUC[i], v.getValue() );\n             \n@@ -485,7 +485,7 @@ public Object normalize( Object value ) throws NamingException\n         \n         assertNotSame( clone, attr );\n         assertEquals( 3, clone.size() );\n-        Value v = clone.get();\n+        Value<?> v = clone.get();\n         assertEquals( \"TEST1\", v.getValue() );\n         assertEquals( \"test1\", v.getNormValue() );\n         assertEquals( oid, clone.getOid() );\n@@ -501,14 +501,14 @@ public Object normalize( Object value ) throws NamingException\n         attr.add(  \"test2\" );\n         attr.add( (String)null );\n         \n-        Iterator<Value> iter = attr.getAll();\n+        Iterator<Value<?>> iter = attr.getAll();\n         assertNotNull( iter );\n         \n         int i = 0;\n         \n         while ( iter.hasNext() )\n         {\n-            Value v = iter.next();\n+            Value<?> v = iter.next();\n             \n             assertNotNull( v );\n             i++;",
                "additions": 8,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/test/java/org/apache/directory/shared/ldap/common/ServerAttributeImplTest.java",
                "status": "modified",
                "changes": 16,
                "deletions": 8,
                "sha": "16a6c91293374e60adea2c701007f3a15e9a9948",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/test/java/org/apache/directory/shared/ldap/common/ServerAttributeImplTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/common/ServerAttributeImplTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/common/ServerAttributeImplTest.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -30,13 +30,9 @@\n import org.apache.directory.shared.ldap.name.LdapDN;\n import org.apache.directory.shared.ldap.util.StringTools;\n import org.junit.Test;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.fail;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertNotSame;\n \n /**\n  * A class to test ServerEntry\n@@ -210,4 +206,117 @@\n         \n         assertEquals( dn, entry2.getDN() );\n     }\n+    \n+\n+\n+\n+    /**\n+     * Test the getOIDs method\n+     */\n+    @Test public void testGetOIDs() throws InvalidNameException, DecoderException, NamingException\n+    {\n+        LdapDN dn = new LdapDN( \"dc=example, dc=org\" );\n+        \n+        ServerEntry entry = new ServerEntryImpl( dn );\n+        \n+        OID oid1 = new OID( \"1.2.3\" ); \n+        OID oid2 = new OID( \"1.2.4\" ); \n+        OID oid3 = new OID( \"1.2.5\" );\n+        \n+        OID[] expectedOIDs = new OID[]{ oid1, oid2, oid3 };\n+        \n+        ServerAttribute attr1 = new ServerAttributeImpl( oid1, oid1.toString() );\n+        ServerAttribute attr2 = new ServerAttributeImpl( oid2, oid2.toString() );\n+\n+        entry.put( attr1 );\n+        entry.put( attr2 );\n+        entry.put( oid3, oid3.toString() );\n+        \n+        Iterator<OID> iterOids = entry.getOIDs();\n+        int i = 0;\n+        \n+        while ( iterOids.hasNext() )\n+        {\n+            OID oid = iterOids.next();\n+            assertEquals( expectedOIDs[i], oid );\n+            i++;\n+        }\n+    }\n+\n+    \n+    /**\n+     * Test the clear method\n+     */\n+    @Test public void testClear() throws InvalidNameException, DecoderException, NamingException\n+    {\n+        LdapDN dn = new LdapDN( \"dc=example, dc=org\" );\n+        \n+        ServerEntry entry = new ServerEntryImpl( dn );\n+        \n+        OID oid1 = new OID( \"1.2.3\" ); \n+        OID oid2 = new OID( \"1.2.4\" ); \n+        OID oid3 = new OID( \"1.2.5\" );\n+        \n+        entry.put( oid1, oid1.toString() );\n+        entry.put( oid2, oid2.toString() );\n+        entry.put( oid3, oid3.toString() );\n+     \n+        assertEquals( 3, entry.size() );\n+\n+        // Now, clear the entry\n+        entry.clear();\n+        \n+        assertEquals( 0, entry.size() );\n+        assertNull( entry.remove( oid2 ) );\n+    }\n+\n+    /**\n+     * Test the clone method\n+     */\n+    @Test public void testClone() throws InvalidNameException, DecoderException, NamingException\n+    {\n+        LdapDN dn = new LdapDN( \"dc=example, dc=org\" );\n+        \n+        ServerEntry entry = new ServerEntryImpl( dn );\n+        \n+        OID oid1 = new OID( \"1.2.3\" ); \n+        OID oid2 = new OID( \"1.2.4\" ); \n+        OID oid3 = new OID( \"1.2.5\" );\n+        \n+        // Create three attributes : two StringValues and one BinaryValue\n+        ServerAttribute attr1 = new ServerAttributeImpl( oid1, oid1.toString() );\n+        ServerAttribute attr2 = new ServerAttributeImpl( oid2, StringTools.getBytesUtf8( \"test\" ) );\n+        ServerAttribute attr3 = new ServerAttributeImpl( oid3, oid2.toString() );\n+        \n+        entry.put( attr1 );\n+        entry.put( attr2 );\n+        entry.put( attr3 );\n+     \n+        assertEquals( 3, entry.size() );\n+\n+        // Now, clone the entry\n+        ServerEntry clone = (ServerEntry)entry.clone();\n+        \n+        assertEquals( 3, clone.size() );\n+        assertEquals( attr1, clone.get( oid1 ) );\n+        assertEquals( attr2, clone.get( oid2 ) );\n+        assertEquals( attr3, clone.get( oid3 ) );\n+        \n+        // Modify the inital attribute\n+        entry.remove( oid1 );\n+        assertNull( entry.get( oid1 ) );\n+        assertEquals( attr1, clone.get( oid1 ) );\n+        \n+        // modify the clone\n+        clone.remove( oid3 );\n+        assertNull( clone.get( oid3 ) );\n+        assertEquals( attr3, entry.get( oid3 ) );\n+        \n+        // Modify an attribute : the clone should not change\n+        ServerAttribute attr = entry.get( oid2 );\n+        ServerAttribute clonedAttr = (ServerAttribute)attr.clone();\n+        attr.clear();\n+        \n+        assertEquals( clonedAttr, clone.get( oid2 ) );\n+    }    \n }",
                "additions": 113,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/test/java/org/apache/directory/shared/ldap/common/ServerEntryTest.java",
                "status": "modified",
                "changes": 117,
                "deletions": 4,
                "sha": "32ddebce0ef9ab472d57c4e8ce5a07a7389a46a1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/test/java/org/apache/directory/shared/ldap/common/ServerEntryTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/common/ServerEntryTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/common/ServerEntryTest.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            },
            {
                "patch": "@@ -63,7 +63,7 @@\n     {\n         StringValue value = new StringValue( \"Test1\" );\n         \n-        Value clone = (Value)value.clone();\n+        Value<?> clone = value.clone();\n         \n         assertTrue( clone instanceof StringValue );\n         assertTrue( clone.getValue() instanceof String );",
                "additions": 1,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/test/java/org/apache/directory/shared/ldap/common/StringValueTest.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "2168f6302cb0a836ddbf502dbd20bcc14c595116",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/563ff71ce683b7b9c45f7e49e05a6f449c83b29f/ldap/src/test/java/org/apache/directory/shared/ldap/common/StringValueTest.java",
                "filename": "ldap/src/test/java/org/apache/directory/shared/ldap/common/StringValueTest.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/test/java/org/apache/directory/shared/ldap/common/StringValueTest.java?ref=563ff71ce683b7b9c45f7e49e05a6f449c83b29f"
            }
        ],
        "bug_id": "directory-ldap-api_87",
        "parent": "https://github.com/apache/directory-ldap-api/commit/e6af6f292aaa684c820525baa1a56c7374211940",
        "message": "- Removed warnings by adding <?> to Value\n- Removed a warning using @SuppressWarnings unchecked\n- Added some tests in ServerEntryTest\n- Fixed some potential NPE is ServerAttributeImpl getClonedValue() method\n- Fixed some bad code in ServerAttributeImpl.add() method : we were testing the value nullity, not the content of the value nullity.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/branches/bigbang@581271 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/c91c58045a49ef7204f0eb045e4f820822541582",
        "file": [
            {
                "patch": "@@ -49,18 +49,22 @@\n      */\n     public int compare( Object obj1, Object obj2 )\n     {\n-        if ( obj1 == null )\n-        {\n-            throw new IllegalArgumentException( \"Argument 'obj1' is null\" );\n-        }\n-\n-        if ( obj2 == null )\n-        {\n-            throw new IllegalArgumentException( \"Argument 'obj2' is null\" );\n-        }\n-\n-        Long long1 = (Long)obj1;\n-        Long long2 = (Long)obj2;\n-        return long1.compareTo( long2 );\n+    \ttry\n+    \t{\n+            Long long1 = (Long)obj1;\n+            Long long2 = (Long)obj2;\n+            return long1 < long2 ? -1 : long1 == long2 ? 0 : -1 ;\n+    \t}\n+    \tcatch ( NullPointerException npe )\n+    \t{\n+\t        if ( obj1 == null )\n+\t        {\n+\t            throw new IllegalArgumentException( \"Argument 'obj1' is null\" );\n+\t        }\n+\t        else\n+\t        {\n+\t            throw new IllegalArgumentException( \"Argument 'obj2' is null\" );\n+\t        }\n+    \t}\n     }\n }",
                "additions": 17,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/c91c58045a49ef7204f0eb045e4f820822541582/ldap/src/main/java/org/apache/directory/shared/ldap/util/LongComparator.java",
                "status": "modified",
                "changes": 30,
                "deletions": 13,
                "sha": "ebccb5a7e796775974ff7539a92fe0c193d6807d",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/c91c58045a49ef7204f0eb045e4f820822541582/ldap/src/main/java/org/apache/directory/shared/ldap/util/LongComparator.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/util/LongComparator.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/util/LongComparator.java?ref=c91c58045a49ef7204f0eb045e4f820822541582"
            }
        ],
        "bug_id": "directory-ldap-api_88",
        "parent": "https://github.com/apache/directory-ldap-api/commit/18279465bad3cc87de32466efde3f165a581f827",
        "message": "Modified the compare method so that the exception are tested only\nif we get a NPE (which is hopefully not something we will ever get !).\nDon't call the Long.compareTo(Long) method, instead do the direct\ncomputation in this method.\n\nThe modified method is 20% fatser than the previous one.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@537482 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    },
    {
        "commit": "https://github.com/apache/directory-ldap-api/commit/bf2cc56fae81203072dcdceb737801a17a079b80",
        "file": [
            {
                "patch": "@@ -141,6 +141,11 @@ public void removeSchema( Schema schema )\n \n     protected Schema getSchema( Entry entry ) throws Exception\n     {\n+        if ( entry == null )\n+        {\n+            throw new NullPointerException( I18n.err( I18n.ERR_04261 ) );\n+        }\n+\n         EntryAttribute objectClasses = entry.get( SchemaConstants.OBJECT_CLASS_AT );\n         boolean isSchema = false;\n \n@@ -163,11 +168,6 @@ protected Schema getSchema( Entry entry ) throws Exception\n         String[] dependencies = StringTools.EMPTY_STRINGS;\n         boolean isDisabled = false;\n \n-        if ( entry == null )\n-        {\n-            throw new NullPointerException( I18n.err( I18n.ERR_04261 ) );\n-        }\n-\n         if ( entry.get( SchemaConstants.CN_AT ) == null )\n         {\n             throw new NullPointerException( I18n.err( I18n.ERR_04262 ) );",
                "additions": 5,
                "raw_url": "https://github.com/apache/directory-ldap-api/raw/bf2cc56fae81203072dcdceb737801a17a079b80/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "status": "modified",
                "changes": 10,
                "deletions": 5,
                "sha": "5afc2b8260bfb27e5f900415d3837291b20659b1",
                "blob_url": "https://github.com/apache/directory-ldap-api/blob/bf2cc56fae81203072dcdceb737801a17a079b80/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "filename": "ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java",
                "contents_url": "https://api.github.com/repos/apache/directory-ldap-api/contents/ldap/src/main/java/org/apache/directory/shared/ldap/schema/registries/AbstractSchemaLoader.java?ref=bf2cc56fae81203072dcdceb737801a17a079b80"
            }
        ],
        "bug_id": "directory-ldap-api_89",
        "parent": "https://github.com/apache/directory-ldap-api/commit/f4039e0a557609a59e580f981d17efda4db58d4a",
        "message": "Make sure NPOE is thrown with the wanted params.\n\nFrom Findbugs\nRCN: Nullcheck of value previously dereferenced (RCN_REDUNDANT_NULLCHECK_WOULD_HAVE_BEEN_A_NPE)\n\nA value is checked here to see whether it is null, but this value can't be null because it was previously dereferenced and if it were null a null pointer exception would have occurred at the earlier dereference. Essentially, this code and the previous dereference disagree as to whether this value is allowed to be null. Either the check is redundant or the previous dereference is erroneous.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/shared/trunk@944579 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "directory-ldap-api"
    }
]