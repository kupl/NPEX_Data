{
    "sling-org-apache-sling-servlets-resolver_557ad87": {
        "repo": "sling-org-apache-sling-servlets-resolver",
        "message": "SLING-7456 : FlushCache in SlingServletResolver can throw an NPE",
        "commit": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/557ad87545020a656564441715b4a10c464505b3",
        "parent": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/c6a623a9ce142d422febb3f850330717da96a6ba",
        "bug_id": "sling-org-apache-sling-servlets-resolver_557ad87",
        "file": [
            {
                "sha": "f29f08ced3e3d847c40e99cad3ea0d95393b58b3",
                "filename": "src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/blob/557ad87545020a656564441715b4a10c464505b3/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/raw/557ad87545020a656564441715b4a10c464505b3/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "status": "modified",
                "changes": 55,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-servlets-resolver/contents/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java?ref=557ad87545020a656564441715b4a10c464505b3",
                "patch": "@@ -96,9 +96,9 @@\n import org.osgi.framework.Constants;\n import org.osgi.framework.ServiceReference;\n import org.osgi.framework.ServiceRegistration;\n-import org.osgi.service.component.ComponentContext;\n import org.osgi.service.component.annotations.Activate;\n import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n import org.osgi.service.component.annotations.Reference;\n import org.osgi.service.component.annotations.ReferenceCardinality;\n import org.osgi.service.component.annotations.ReferencePolicy;\n@@ -202,7 +202,7 @@\n     private final List<PendingServlet> pendingServlets = new ArrayList<>();\n \n     /** The bundle context. */\n-    private BundleContext context;\n+    private volatile BundleContext context;\n \n     private ServletResourceProviderFactory servletResourceProviderFactory;\n \n@@ -215,7 +215,7 @@\n     private Servlet fallbackErrorServlet;\n \n     /** The script resolution cache. */\n-    private Map<AbstractResourceCollector, Servlet> cache;\n+    private volatile Map<AbstractResourceCollector, Servlet> cache;\n \n     /** The cache size. */\n     private int cacheSize;\n@@ -653,7 +653,9 @@ private Servlet resolveServletInternal(final SlingHttpServletRequest request,\n     private Servlet getServletInternal(final AbstractResourceCollector locationUtil,\n             final SlingHttpServletRequest request,\n             final ResourceResolver resolver) {\n-        final Servlet scriptServlet = (this.cache != null ? this.cache.get(locationUtil) : null);\n+        // use local variable to avoid race condition with activate\n+        final Map<AbstractResourceCollector, Servlet> localCache = this.cache;\n+        final Servlet scriptServlet = (localCache != null ? localCache.get(locationUtil) : null);\n         if (scriptServlet != null) {\n             if ( LOGGER.isDebugEnabled() ) {\n                 LOGGER.debug(\"Using cached servlet {}\", RequestUtil.getServletName(scriptServlet));\n@@ -683,9 +685,9 @@ private Servlet getServletInternal(final AbstractResourceCollector locationUtil,\n                 final boolean isOptingServlet = candidate instanceof OptingServlet;\n                 boolean servletAcceptsRequest = !isOptingServlet || (request != null && ((OptingServlet) candidate).accepts(request));\n                 if (servletAcceptsRequest) {\n-                    if (!hasOptingServlet && !isOptingServlet && this.cache != null) {\n-                        if ( this.cache.size() < this.cacheSize ) {\n-                            this.cache.put(locationUtil, candidate);\n+                    if (!hasOptingServlet && !isOptingServlet && localCache != null) {\n+                        if ( localCache.size() < this.cacheSize ) {\n+                            localCache.put(locationUtil, candidate);\n                         } else if ( this.logCacheSizeWarning ) {\n                             this.logCacheSizeWarning = false;\n                             LOGGER.warn(\"Script cache has reached its limit of {}. You might want to increase the cache size for the servlet resolver.\",\n@@ -864,7 +866,7 @@ protected void activate(final BundleContext context, final Config config) throws\n         // and finally register as event listener if we need to flush the cache\n         if ( this.cache != null ) {\n \n-    \t\tfinal Dictionary<String, Object> props = new Hashtable<>();\n+    \t\t    final Dictionary<String, Object> props = new Hashtable<>();\n             props.put(\"event.topics\", new String[] {\"javax/script/ScriptEngineFactory/*\",\n                 \"org/apache/sling/api/adapter/AdapterFactory/*\",\"org/apache/sling/scripting/core/BindingsValuesProvider/*\" });\n             props.put(ResourceChangeListener.PATHS, \"/\");\n@@ -876,7 +878,7 @@ protected void activate(final BundleContext context, final Config config) throws\n         }\n \n         this.plugin = new ServletResolverWebConsolePlugin(context);\n-        if (this.cacheSize > 0) {\n+        if ( this.cache != null ) {\n             try {\n                 Dictionary<String, String> mbeanProps = new Hashtable<>();\n                 mbeanProps.put(\"jmx.objectname\", \"org.apache.sling:type=servletResolver,service=SlingServletResolverCache\");\n@@ -891,17 +893,22 @@ protected void activate(final BundleContext context, final Config config) throws\n     }\n \n     private void updateScriptEngineExtensions() {\n-        List<String> scriptEnginesExtensions = new ArrayList<>();\n-        for (ScriptEngineFactory factory : scriptEngineManager.getEngineFactories()) {\n-            scriptEnginesExtensions.addAll(factory.getExtensions());\n+        final ScriptEngineManager localScriptEngineManager = scriptEngineManager;\n+        // use local variable to avoid racing with deactivate\n+        if ( localScriptEngineManager != null ) {\n+            final List<String> scriptEnginesExtensions = new ArrayList<>();\n+            for (ScriptEngineFactory factory : localScriptEngineManager.getEngineFactories()) {\n+                scriptEnginesExtensions.addAll(factory.getExtensions());\n+            }\n+            this.scriptEnginesExtensions = Collections.unmodifiableList(scriptEnginesExtensions);\n         }\n-        this.scriptEnginesExtensions = Collections.unmodifiableList(scriptEnginesExtensions);\n     }\n \n     /**\n      * Deactivate this component.\n      */\n-    protected void deactivate(final ComponentContext context) {\n+    @Deactivate\n+    protected void deactivate() {\n         // stop registering of servlets immediately\n         this.context = null;\n \n@@ -1114,13 +1121,21 @@ private void destroyServlet(final ServiceReference<Servlet> reference) {\n      */\n     @Override\n     public void handleEvent(final Event event) {\n+        // return immediately if already deactivated\n+        if ( this.context == null ) {\n+            return;\n+        }\n         flushCache();\n         updateScriptEngineExtensions();\n     }\n \n     private void flushCache() {\n-        this.cache.clear();\n-        this.logCacheSizeWarning = true;\n+        // use local variable to avoid racing with deactivate\n+        final Map<AbstractResourceCollector, Servlet> localCache = this.cache;\n+        if ( localCache != null ) {\n+            localCache.clear();\n+            this.logCacheSizeWarning = true;\n+        }\n     }\n \n     /** The list of property names checked by {@link #getName(ServiceReference)} */\n@@ -1431,7 +1446,9 @@ private void titleHtml(final PrintWriter pw, final String title, final String de\n \n         @Override\n         public int getCacheSize() {\n-            return cache != null ? cache.size() : 0;\n+            // use local variable to avoid racing with deactivate\n+            final Map<AbstractResourceCollector, Servlet> localCache = cache;\n+            return localCache != null ? localCache.size() : 0;\n         }\n \n         @Override\n@@ -1448,6 +1465,10 @@ public int getMaximumCacheSize() {\n \n     @Override\n \tpublic void onChange(final List<ResourceChange> changes) {\n+        // return immediately if already deactivated\n+        if ( context == null ) {\n+            return;\n+        }\n         boolean flushCache = false;\n         for(final ResourceChange change : changes){\n             // if the path of the event is a sub path of a search path",
                "deletions": 17
            }
        ],
        "patched_files": [
            "SlingServletResolver.java"
        ],
        "unit_tests": [
            "SlingServletResolverTest.java"
        ]
    },
    "sling-org-apache-sling-servlets-resolver_22a6a92": {
        "repo": "sling-org-apache-sling-servlets-resolver",
        "message": "SLING-7265 : NPE on activation of SlingServletResolver",
        "commit": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/22a6a92f52a84e77c9269c4780cc347963620078",
        "parent": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/814c14873352717eae58d1fe240840ad377ca4f7",
        "bug_id": "sling-org-apache-sling-servlets-resolver_22a6a92",
        "file": [
            {
                "sha": "4e1e6f4fe804dd76e99573988781e5ce31228a09",
                "filename": "src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/blob/22a6a92f52a84e77c9269c4780cc347963620078/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/raw/22a6a92f52a84e77c9269c4780cc347963620078/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "status": "modified",
                "changes": 46,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-servlets-resolver/contents/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java?ref=22a6a92f52a84e77c9269c4780cc347963620078",
                "patch": "@@ -89,6 +89,7 @@\n import org.apache.sling.servlets.resolver.internal.resource.ServletResourceProviderFactory;\n import org.apache.sling.servlets.resolver.jmx.SlingServletResolverCacheMBean;\n import org.apache.sling.spi.resource.provider.ResourceProvider;\n+import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleContext;\n import org.osgi.framework.Constants;\n import org.osgi.framework.ServiceReference;\n@@ -1007,22 +1008,39 @@ private boolean createServlet(final Servlet servlet, final ServiceReference<Serv\n             return false;\n         }\n \n-        final BundleContext bundleContext = reference.getBundle().getBundleContext();\n-        final List<ServiceRegistration<ResourceProvider<Object>>> regs = new ArrayList<>();\n-        for(final String root : provider.getServletPaths()) {\n-            @SuppressWarnings(\"unchecked\")\n-            final ServiceRegistration<ResourceProvider<Object>> reg = (ServiceRegistration<ResourceProvider<Object>>) bundleContext.registerService(\n-                ResourceProvider.class.getName(),\n-                provider,\n-                createServiceProperties(reference, provider, root));\n-            regs.add(reg);\n-        }\n-        if ( LOGGER.isDebugEnabled() ) {\n-            LOGGER.debug(\"Registered {}\", provider);\n+        boolean registered = false;\n+        final Bundle bundle = reference.getBundle();\n+        if ( bundle != null ) {\n+            final BundleContext bundleContext = bundle.getBundleContext();\n+            if ( bundleContext != null ) {\n+                final List<ServiceRegistration<ResourceProvider<Object>>> regs = new ArrayList<>();\n+                try {\n+                    for(final String root : provider.getServletPaths()) {\n+                        @SuppressWarnings(\"unchecked\")\n+                        final ServiceRegistration<ResourceProvider<Object>> reg = (ServiceRegistration<ResourceProvider<Object>>) bundleContext.registerService(\n+                            ResourceProvider.class.getName(),\n+                            provider,\n+                            createServiceProperties(reference, provider, root));\n+                        regs.add(reg);\n+                    }\n+                    registered = true;\n+                } catch ( final IllegalStateException ise ) {\n+                    // bundle context not valid anymore - ignore and continue without this\n+                }\n+                if ( registered ) {\n+                    if ( LOGGER.isDebugEnabled() ) {\n+                        LOGGER.debug(\"Registered {}\", provider);\n+                    }\n+                    synchronized (this.servletsByReference) {\n+                        servletsByReference.put(reference, new ServletReg(servlet, regs));\n+                    }\n+                }\n+            }\n         }\n-        synchronized (this.servletsByReference) {\n-            servletsByReference.put(reference, new ServletReg(servlet, regs));\n+        if ( !registered ) {\n+            LOGGER.debug(\"bindServlet: servlet has been unregistered in the meantime. Ignoring {}\", name);\n         }\n+\n         return true;\n     }\n ",
                "deletions": 14
            }
        ],
        "patched_files": [
            "SlingServletResolver.java"
        ],
        "unit_tests": [
            "SlingServletResolverTest.java"
        ]
    },
    "sling-org-apache-sling-servlets-resolver_5eee9aa": {
        "repo": "sling-org-apache-sling-servlets-resolver",
        "message": "SLING-2099 - fixing NPE in SlingServletResolver \n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1144175 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/5eee9aad2ff9009d24aad1a90f219e2246555788",
        "parent": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/01908c51f9ff3de9e589f869626e1d112770f365",
        "bug_id": "sling-org-apache-sling-servlets-resolver_5eee9aa",
        "file": [
            {
                "sha": "a85bd32ae41f8e2ad52206f3c30dd3b1d43d7d5e",
                "filename": "src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/blob/5eee9aad2ff9009d24aad1a90f219e2246555788/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/raw/5eee9aad2ff9009d24aad1a90f219e2246555788/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-servlets-resolver/contents/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java?ref=5eee9aad2ff9009d24aad1a90f219e2246555788",
                "patch": "@@ -162,7 +162,7 @@\n      * @scr.property values=\"html\"\n      */\n     public static final String PROP_DEFAULT_EXTENSIONS = \"servletresolver.defaultExtensions\";\n-    \n+\n     private static final String[] DEFAULT_DEFAULT_EXTENSIONS = new String[] {\"html\"};\n \n     /** @scr.reference */\n@@ -225,7 +225,7 @@\n      * The allowed execution paths.\n      */\n     private String[] executionPaths;\n-    \n+\n     /**\n      * The default extensions\n      */\n@@ -587,7 +587,7 @@ private Servlet resolveServlet(final SlingHttpServletRequest request,\n             final ResourceCollector locationUtil = ResourceCollector.create(request, workspaceName, this.executionPaths, this.defaultExtensions);\n             servlet = getServlet(locationUtil, request, resolver);\n \n-            if (log.isDebugEnabled()) {\n+            if (servlet != null && log.isDebugEnabled()) {\n                 log.debug(\"getServlet returns servlet {}\", RequestUtil.getServletName(servlet));\n             }\n         }",
                "deletions": 3
            }
        ],
        "patched_files": [
            "SlingServletResolver.java"
        ],
        "unit_tests": [
            "SlingServletResolverTest.java"
        ]
    },
    "sling-org-apache-sling-servlets-resolver_44c95b3": {
        "repo": "sling-org-apache-sling-servlets-resolver",
        "message": "SLING-5070 : ServletResolverCacheMBeanImpl throws NPE when cache is diabled. Apply patch from Dirk Rudolph\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1705708 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/44c95b370e4a59dd175311097e92d05b2daeff96",
        "parent": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/73ef6da92e90f0f93ad09631a4838f7acd0a61b6",
        "bug_id": "sling-org-apache-sling-servlets-resolver_44c95b3",
        "file": [
            {
                "sha": "f082a5b34d7d9cd682436e0d77ae1e34e23b58cd",
                "filename": "src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/blob/44c95b370e4a59dd175311097e92d05b2daeff96/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/raw/44c95b370e4a59dd175311097e92d05b2daeff96/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "status": "modified",
                "changes": 29,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-servlets-resolver/contents/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java?ref=44c95b370e4a59dd175311097e92d05b2daeff96",
                "patch": "@@ -222,6 +222,7 @@\n     /**\n      * @see org.apache.sling.api.servlets.ServletResolver#resolveServlet(org.apache.sling.api.SlingHttpServletRequest)\n      */\n+    @Override\n     public Servlet resolveServlet(final SlingHttpServletRequest request) {\n         final Resource resource = request.getResource();\n \n@@ -272,6 +273,7 @@ public Servlet resolveServlet(final SlingHttpServletRequest request) {\n     /**\n      * @see org.apache.sling.api.servlets.ServletResolver#resolveServlet(org.apache.sling.api.resource.Resource, java.lang.String)\n      */\n+    @Override\n     public Servlet resolveServlet(final Resource resource, final String scriptName) {\n         if ( resource == null ) {\n             throw new IllegalArgumentException(\"Resource must not be null\");\n@@ -298,6 +300,7 @@ public Servlet resolveServlet(final Resource resource, final String scriptName)\n     /**\n      * @see org.apache.sling.api.servlets.ServletResolver#resolveServlet(org.apache.sling.api.resource.ResourceResolver, java.lang.String)\n      */\n+    @Override\n     public Servlet resolveServlet(final ResourceResolver resolver, final String scriptName) {\n         if ( resolver == null ) {\n             throw new IllegalArgumentException(\"Resource resolver must not be null\");\n@@ -346,6 +349,7 @@ private Servlet getServlet(final Resource scriptResource) {\n     /**\n      * @see org.apache.sling.api.scripting.SlingScriptResolver#findScript(org.apache.sling.api.resource.ResourceResolver, java.lang.String)\n      */\n+    @Override\n     public SlingScript findScript(final ResourceResolver resourceResolver, final String name)\n     throws SlingException {\n \n@@ -393,6 +397,7 @@ public SlingScript findScript(final ResourceResolver resourceResolver, final Str\n      * @see org.apache.sling.engine.servlets.ErrorHandler#handleError(int,\n      *      String, SlingHttpServletRequest, SlingHttpServletResponse)\n      */\n+    @Override\n     public void handleError(final int status,\n             final String message,\n             final SlingHttpServletRequest request,\n@@ -449,6 +454,7 @@ public void handleError(final int status,\n     /**\n      * @see org.apache.sling.engine.servlets.ErrorHandler#handleError(java.lang.Throwable, org.apache.sling.api.SlingHttpServletRequest, org.apache.sling.api.SlingHttpServletResponse)\n      */\n+    @Override\n     public void handleError(final Throwable throwable, final SlingHttpServletRequest request, final SlingHttpServletResponse response)\n     throws IOException {\n         // do not handle, if already handling ....\n@@ -519,6 +525,7 @@ private ResourceResolver getScriptResourceResolver() {\n     /**\n      * @see org.apache.sling.api.request.SlingRequestListener#onEvent(org.apache.sling.api.request.SlingRequestEvent)\n      */\n+    @Override\n     public void onEvent(final SlingRequestEvent event) {\n         if ( event.getType() == SlingRequestEvent.EventType.EVENT_INIT ) {\n             try {\n@@ -855,14 +862,16 @@ protected void activate(final ComponentContext context) throws LoginException {\n \n         this.plugin = new ServletResolverWebConsolePlugin(context.getBundleContext());\n \n-        try {\n-            Dictionary<String, String> mbeanProps = new Hashtable<String, String>();\n-            mbeanProps.put(\"jmx.objectname\", \"org.apache.sling:type=servletResolver,service=SlingServletResolverCache\");\n+        if (this.cacheSize > 0) {\n+            try {\n+                Dictionary<String, String> mbeanProps = new Hashtable<String, String>();\n+                mbeanProps.put(\"jmx.objectname\", \"org.apache.sling:type=servletResolver,service=SlingServletResolverCache\");\n \n-            ServletResolverCacheMBeanImpl mbean = new ServletResolverCacheMBeanImpl();\n-            mbeanRegistration = context.getBundleContext().registerService(SlingServletResolverCacheMBean.class.getName(), mbean, mbeanProps);\n-        } catch (Throwable t) {\n-            LOGGER.debug(\"Unable to register mbean\");\n+                ServletResolverCacheMBeanImpl mbean = new ServletResolverCacheMBeanImpl();\n+                mbeanRegistration = context.getBundleContext().registerService(SlingServletResolverCacheMBean.class.getName(), mbean, mbeanProps);\n+            } catch (Throwable t) {\n+                LOGGER.debug(\"Unable to register mbean\");\n+            }\n         }\n     }\n \n@@ -1053,6 +1062,7 @@ private void destroyServlet(final ServiceReference reference) {\n     /**\n      * @see org.osgi.service.event.EventHandler#handleEvent(org.osgi.service.event.Event)\n      */\n+    @Override\n     public void handleEvent(final Event event) {\n         if (this.cache != null) {\n             boolean flushCache = false;\n@@ -1386,14 +1396,17 @@ private void titleHtml(final PrintWriter pw, final String title, final String de\n             super(SlingServletResolverCacheMBean.class);\n         }\n \n+        @Override\n         public int getCacheSize() {\n-            return cache.size();\n+            return cache != null ? cache.size() : 0;\n         }\n \n+        @Override\n         public void flushCache() {\n             SlingServletResolver.this.flushCache();\n         }\n \n+        @Override\n         public int getMaximumCacheSize() {\n             return cacheSize;\n         }",
                "deletions": 8
            }
        ],
        "patched_files": [
            "SlingServletResolver.java"
        ],
        "unit_tests": [
            "SlingServletResolverTest.java"
        ]
    },
    "sling-org-apache-sling-servlets-resolver_01908c5": {
        "repo": "sling-org-apache-sling-servlets-resolver",
        "message": "SLING-2099 - fixing NPE in SlingServletResolver (thanks Alex for the patch)\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1141352 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/01908c51f9ff3de9e589f869626e1d112770f365",
        "parent": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/commit/ffb1d2c3aba63132526d17d3d245e756f6279dce",
        "bug_id": "sling-org-apache-sling-servlets-resolver_01908c5",
        "file": [
            {
                "sha": "6d89af671d5d96ecb7bb0f8131ebc8a263611b41",
                "filename": "src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/blob/01908c51f9ff3de9e589f869626e1d112770f365/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-servlets-resolver/raw/01908c51f9ff3de9e589f869626e1d112770f365/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-servlets-resolver/contents/src/main/java/org/apache/sling/servlets/resolver/internal/SlingServletResolver.java?ref=01908c51f9ff3de9e589f869626e1d112770f365",
                "patch": "@@ -368,7 +368,7 @@ private Servlet resolveServlet(final ResourceResolver resolver,\n             final NamedScriptResourceCollector locationUtil = NamedScriptResourceCollector.create(scriptName, resource, this.executionPaths);\n             servlet = getServlet(locationUtil, null, resolver);\n \n-            if (log.isDebugEnabled()) {\n+            if (log.isDebugEnabled() && servlet != null) {\n                 log.debug(\"resolveServlet returns servlet {}\", RequestUtil.getServletName(servlet));\n             }\n         }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "SlingServletResolver.java"
        ],
        "unit_tests": [
            "SlingServletResolverTest.java"
        ]
    }
}