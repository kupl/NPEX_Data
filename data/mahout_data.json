[
    {
        "commit": "https://github.com/apache/mahout/commit/eeca175c3a838a8aaa821cbbcd8d0376bd17939d",
        "file": [
            {
                "patch": "@@ -2,6 +2,8 @@ Mahout Change Log\n \n Release 0.10.0 - unreleased\n \n+  MAHOUT-1612: NullPointerException happens during JSON output format for clusterdumper (smarthi, Manoj Awasthi)\n+\n   MAHOUT-1652: Java 7 update (smarthi)\n \n   MAHOUT-1639: Streaming kmeans doesn't properly validate estimatedNumMapClusters -km (smarthi)",
                "additions": 2,
                "raw_url": "https://github.com/apache/mahout/raw/eeca175c3a838a8aaa821cbbcd8d0376bd17939d/CHANGELOG",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "600ed9b9d9b095fe0a943b350c975168c6209dd2",
                "blob_url": "https://github.com/apache/mahout/blob/eeca175c3a838a8aaa821cbbcd8d0376bd17939d/CHANGELOG",
                "filename": "CHANGELOG",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/CHANGELOG?ref=eeca175c3a838a8aaa821cbbcd8d0376bd17939d"
            },
            {
                "patch": "@@ -18,13 +18,14 @@\n \n import java.io.IOException;\n import java.io.Writer;\n+import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.regex.Pattern;\n \n-import com.google.common.collect.Maps;\n import org.apache.mahout.clustering.AbstractCluster;\n import org.apache.mahout.clustering.Cluster;\n import org.apache.mahout.clustering.classify.WeightedPropertyVectorWritable;\n@@ -36,8 +37,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.google.common.collect.Lists;\n-\n /**\n  * Dump cluster info to JSON formatted lines. Heavily inspired by\n  * ClusterDumperWriter.java and CSVClusterWriter.java\n@@ -48,8 +47,7 @@\n   private final int numTopFeatures;\n   private final ObjectMapper jxn;\n \n-  private static final Logger log = LoggerFactory\n-      .getLogger(JsonClusterWriter.class);\n+  private static final Logger log = LoggerFactory.getLogger(JsonClusterWriter.class);\n   private static final Pattern VEC_PATTERN = Pattern.compile(\"\\\\{|\\\\:|\\\\,|\\\\}\");\n \n   public JsonClusterWriter(Writer writer,\n@@ -67,22 +65,32 @@ public JsonClusterWriter(Writer writer,\n    */\n   @Override\n   public void write(ClusterWritable clusterWritable) throws IOException {\n-    Map<String, Object> res = Maps.newHashMap();\n+    Map<String, Object> res = new HashMap<>();\n \n     // get top terms\n-    List<Object> topTerms = getTopFeaturesList(clusterWritable.getValue()\n-        .getCenter(), dictionary, numTopFeatures);\n-    res.put(\"top_terms\", topTerms);\n+    if (dictionary != null) {\n+      List<Object> topTerms = getTopFeaturesList(clusterWritable.getValue()\n+          .getCenter(), dictionary, numTopFeatures);\n+      res.put(\"top_terms\", topTerms);\n+    } else {\n+      res.put(\"top_terms\", new ArrayList<>());\n+    }\n \n     // get human-readable cluster representation\n     Cluster cluster = clusterWritable.getValue();\n-    Map<String,Object> fmtStr = cluster.asJson(dictionary);\n     res.put(\"cluster_id\", cluster.getId());\n-    res.put(\"cluster\", fmtStr);\n \n-    // get points\n-    List<Object> points = getPoints(cluster, dictionary);\n-    res.put(\"points\", points);\n+    if (dictionary != null) {\n+      Map<String,Object> fmtStr = cluster.asJson(dictionary);\n+      res.put(\"cluster\", fmtStr);\n+\n+      // get points\n+      List<Object> points = getPoints(cluster, dictionary);\n+      res.put(\"points\", points);\n+    } else {\n+      res.put(\"cluster\", new HashMap<>());\n+      res.put(\"points\", new ArrayList<>());\n+    }\n \n     // write JSON\n     Writer writer = getWriter();\n@@ -97,7 +105,7 @@ public void write(ClusterWritable clusterWritable) throws IOException {\n   public List<Object> getTopFeaturesList(Vector vector, String[] dictionary,\n       int numTerms) {\n \n-    List<TermIndexWeight> vectorTerms = Lists.newArrayList();\n+    List<TermIndexWeight> vectorTerms = new ArrayList<>();\n \n     for (Vector.Element elt : vector.nonZeroes()) {\n       vectorTerms.add(new TermIndexWeight(elt.index(), elt.get()));\n@@ -111,7 +119,7 @@ public int compare(TermIndexWeight one, TermIndexWeight two) {\n       }\n     });\n \n-    List<Object> topTerms = Lists.newLinkedList();\n+    List<Object> topTerms = new ArrayList<>();\n \n     for (int i = 0; i < vectorTerms.size() && i < numTerms; i++) {\n       int index = vectorTerms.get(i).index;\n@@ -120,7 +128,7 @@ public int compare(TermIndexWeight one, TermIndexWeight two) {\n         log.error(\"Dictionary entry missing for {}\", index);\n         continue;\n       }\n-      Map<String, Object> term_entry = Maps.newHashMap();\n+      Map<String, Object> term_entry = new HashMap<>();\n       term_entry.put(dictTerm, vectorTerms.get(i).weight);\n       topTerms.add(term_entry);\n     }\n@@ -134,13 +142,13 @@ public int compare(TermIndexWeight one, TermIndexWeight two) {\n    * @return List<Object>\n    */\n   public List<Object> getPoints(Cluster cluster, String[] dictionary) {\n-    List<Object> vectorObjs = Lists.newLinkedList();\n+    List<Object> vectorObjs = new ArrayList<>();\n     List<WeightedPropertyVectorWritable> points = getClusterIdToPoints().get(\n         cluster.getId());\n \n     if (points != null) {\n       for (WeightedPropertyVectorWritable point : points) {\n-        Map<String, Object> entry = Maps.newHashMap();\n+        Map<String, Object> entry = new HashMap<>();\n         Vector theVec = point.getVector();\n         if (theVec instanceof NamedVector) {\n           entry.put(\"vector_name\", ((NamedVector) theVec).getName());",
                "additions": 27,
                "raw_url": "https://github.com/apache/mahout/raw/eeca175c3a838a8aaa821cbbcd8d0376bd17939d/integration/src/main/java/org/apache/mahout/utils/clustering/JsonClusterWriter.java",
                "status": "modified",
                "changes": 46,
                "deletions": 19,
                "sha": "d564a73ace06e281dc5f8d6edbe184d56eff9e19",
                "blob_url": "https://github.com/apache/mahout/blob/eeca175c3a838a8aaa821cbbcd8d0376bd17939d/integration/src/main/java/org/apache/mahout/utils/clustering/JsonClusterWriter.java",
                "filename": "integration/src/main/java/org/apache/mahout/utils/clustering/JsonClusterWriter.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/main/java/org/apache/mahout/utils/clustering/JsonClusterWriter.java?ref=eeca175c3a838a8aaa821cbbcd8d0376bd17939d"
            }
        ],
        "bug_id": "mahout_1",
        "parent": "https://github.com/apache/mahout/commit/f5f54a1560c708913c30d460bec361eb71ab0bd7",
        "message": "Mahout-1612: NullPointerException happens during JSON output format for clusterdumper",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/4de8c58624556983a6745a8841c50fb2a380e0b5",
        "file": [
            {
                "patch": "@@ -83,7 +83,6 @@ public void write(ClusterWritable clusterWritable) throws IOException {\n     if (dictionary != null) {\n       Map<String,Object> fmtStr = cluster.asJson(dictionary);\n       res.put(\"cluster\", fmtStr);\n-\n       // get points\n       List<Object> points = getPoints(cluster, dictionary);\n       res.put(\"points\", points);",
                "additions": 0,
                "raw_url": "https://github.com/apache/mahout/raw/4de8c58624556983a6745a8841c50fb2a380e0b5/integration/src/main/java/org/apache/mahout/utils/clustering/JsonClusterWriter.java",
                "status": "modified",
                "changes": 1,
                "deletions": 1,
                "sha": "63399b5cb0bc8d99ddd9288ab17bda75b0fe5f16",
                "blob_url": "https://github.com/apache/mahout/blob/4de8c58624556983a6745a8841c50fb2a380e0b5/integration/src/main/java/org/apache/mahout/utils/clustering/JsonClusterWriter.java",
                "filename": "integration/src/main/java/org/apache/mahout/utils/clustering/JsonClusterWriter.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/main/java/org/apache/mahout/utils/clustering/JsonClusterWriter.java?ref=4de8c58624556983a6745a8841c50fb2a380e0b5"
            }
        ],
        "bug_id": "mahout_2",
        "parent": "https://github.com/apache/mahout/commit/eeca175c3a838a8aaa821cbbcd8d0376bd17939d",
        "message": "Mahout-1612: NullPointerException happens during JSON output format for clusterdumper, this closes #55 and closes #85",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/37201275a452d3f906eac6e10e5e6cd740b5ec0a",
        "file": [
            {
                "patch": "@@ -2,7 +2,7 @@ Mahout Change Log\n \n Release 0.9 - unreleased\n \n-  MAHOUT-1312: LocalitySensitiveHashSearch does not limit search results (sslavic)\n+  MAHOUT-1367: WikipediaXmlSplitter --> Exception in thread \"main\" java.lang.NullPointerException (smarthi)\n \n   MAHOUT-1362: Remove examples/bin/build-reuters.sh (smarthi)\n \n@@ -24,7 +24,9 @@ Release 0.9 - unreleased\n \n   MAHOUT-1314: StreamingKMeansReducer throws NullPointerException when REDUCE_STREAMING_KMEANS is set to true (smarthi)\n \n-  MAHOUT-1313: Fixed unwanted integral division bug in RowSimilarityJob downsampling code where precision should have been retained (sslavic) \n+  MAHOUT-1313: Fixed unwanted integral division bug in RowSimilarityJob downsampling code where precision should have been retained (sslavic)\n+\n+  MAHOUT-1312: LocalitySensitiveHashSearch does not limit search results (sslavic)\n \n   MAHOUT-1308: Cannot extend CandidateItemsStrategy due to restricted visibility (David Geiger, smarthi)\n ",
                "additions": 4,
                "raw_url": "https://github.com/apache/mahout/raw/37201275a452d3f906eac6e10e5e6cd740b5ec0a/CHANGELOG",
                "status": "modified",
                "changes": 6,
                "deletions": 2,
                "sha": "f9bbc430f93d24c29866783c0b500461c51de620",
                "blob_url": "https://github.com/apache/mahout/blob/37201275a452d3f906eac6e10e5e6cd740b5ec0a/CHANGELOG",
                "filename": "CHANGELOG",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/CHANGELOG?ref=37201275a452d3f906eac6e10e5e6cd740b5ec0a"
            }
        ],
        "bug_id": "mahout_3",
        "parent": "https://github.com/apache/mahout/commit/09b4ef12001f21f55089baf36a8a4281641cdd27",
        "message": "MAHOUT-1367: WikipediaXmlSplitter --> Exception in thread main java.lang.NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1546807 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/c06c89ae80b6279ffe78156ddc650e329bcb6441",
        "file": [
            {
                "patch": "@@ -245,7 +245,9 @@ protected double scale(VectorWritable v) {\n \n     @Override\n     public void close() throws IOException {\n-      out.collect(NullWritable.get(), new VectorWritable(outputVector));\n+      if (out != null) {\n+        out.collect(NullWritable.get(), new VectorWritable(outputVector));\n+      }\n     }\n \n   }",
                "additions": 3,
                "raw_url": "https://github.com/apache/mahout/raw/c06c89ae80b6279ffe78156ddc650e329bcb6441/core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "01f7e67f15f06921484d2f8b76d18d4ce6a7c55f",
                "blob_url": "https://github.com/apache/mahout/blob/c06c89ae80b6279ffe78156ddc650e329bcb6441/core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java",
                "filename": "core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/math/hadoop/TimesSquaredJob.java?ref=c06c89ae80b6279ffe78156ddc650e329bcb6441"
            }
        ],
        "bug_id": "mahout_4",
        "parent": "https://github.com/apache/mahout/commit/b8a553b5a1e7e58dc27a47d4860b7f8106a566d7",
        "message": "MAHOUT-819 NullPointerException in matrix vector multiplication in TimesSquaredJob\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1176380 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/09b4ef12001f21f55089baf36a8a4281641cdd27",
        "file": [
            {
                "patch": "@@ -71,20 +71,20 @@\n  * </ol>\n  */\n public final class WikipediaXmlSplitter {\n-  \n+\n   private static final Logger log = LoggerFactory.getLogger(WikipediaXmlSplitter.class);\n-  \n+\n   private WikipediaXmlSplitter() { }\n-  \n+\n   public static void main(String[] args) throws IOException {\n     DefaultOptionBuilder obuilder = new DefaultOptionBuilder();\n     ArgumentBuilder abuilder = new ArgumentBuilder();\n     GroupBuilder gbuilder = new GroupBuilder();\n-    \n+\n     Option dumpFileOpt = obuilder.withLongName(\"dumpFile\").withRequired(true).withArgument(\n       abuilder.withName(\"dumpFile\").withMinimum(1).withMaximum(1).create()).withDescription(\n       \"The path to the wikipedia dump file (.bz2 or uncompressed)\").withShortName(\"d\").create();\n-    \n+\n     Option outputDirOpt = obuilder.withLongName(\"outputDir\").withRequired(true).withArgument(\n       abuilder.withName(\"outputDir\").withMinimum(1).withMaximum(1).create()).withDescription(\n       \"The output directory to place the splits in:\\n\"\n@@ -94,14 +94,14 @@ public static void main(String[] args) throws IOException {\n           + \"AWS S3 (native files):\\n\\ts3n://bucket-name/wikipedia-xml-chunks\\n\")\n \n     .withShortName(\"o\").create();\n-    \n+\n     Option s3IdOpt = obuilder.withLongName(\"s3ID\").withRequired(false).withArgument(\n       abuilder.withName(\"s3Id\").withMinimum(1).withMaximum(1).create()).withDescription(\"Amazon S3 ID key\")\n         .withShortName(\"i\").create();\n     Option s3SecretOpt = obuilder.withLongName(\"s3Secret\").withRequired(false).withArgument(\n       abuilder.withName(\"s3Secret\").withMinimum(1).withMaximum(1).create()).withDescription(\n       \"Amazon S3 secret key\").withShortName(\"s\").create();\n-    \n+\n     Option chunkSizeOpt = obuilder.withLongName(\"chunkSize\").withRequired(true).withArgument(\n       abuilder.withName(\"chunkSize\").withMinimum(1).withMaximum(1).create()).withDescription(\n       \"The Size of the chunk, in megabytes\").withShortName(\"c\").create();\n@@ -114,7 +114,7 @@ public static void main(String[] args) throws IOException {\n         .withShortName(\"n\").create();\n     Group group = gbuilder.withName(\"Options\").withOption(dumpFileOpt).withOption(outputDirOpt).withOption(\n       chunkSizeOpt).withOption(numChunksOpt).withOption(s3IdOpt).withOption(s3SecretOpt).create();\n-    \n+\n     Parser parser = new Parser();\n     parser.setGroup(group);\n     CommandLine cmdLine;\n@@ -125,11 +125,11 @@ public static void main(String[] args) throws IOException {\n       CommandLineUtil.printHelp(group);\n       return;\n     }\n-    \n+\n     Configuration conf = new Configuration();\n     String dumpFilePath = (String) cmdLine.getValue(dumpFileOpt);\n     String outputDirPath = (String) cmdLine.getValue(outputDirOpt);\n-    \n+\n     if (cmdLine.hasOption(s3IdOpt)) {\n       String id = (String) cmdLine.getValue(s3IdOpt);\n       conf.set(\"fs.s3n.awsAccessKeyId\", id);\n@@ -143,14 +143,14 @@ public static void main(String[] args) throws IOException {\n     // do not compute crc file when using local FS\n     conf.set(\"fs.file.impl\", \"org.apache.hadoop.fs.RawLocalFileSystem\");\n     FileSystem fs = FileSystem.get(URI.create(outputDirPath), conf);\n-    \n+\n     int chunkSize = 1024 * 1024 * Integer.parseInt((String) cmdLine.getValue(chunkSizeOpt));\n-    \n+\n     int numChunks = Integer.MAX_VALUE;\n     if (cmdLine.hasOption(numChunksOpt)) {\n       numChunks = Integer.parseInt((String) cmdLine.getValue(numChunksOpt));\n     }\n-    \n+\n     String header = \"<mediawiki xmlns=\\\"http://www.mediawiki.org/xml/export-0.3/\\\" \"\n                     + \"xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \"\n                     + \"xsi:schemaLocation=\\\"http://www.mediawiki.org/xml/export-0.3/ \"\n@@ -178,11 +178,18 @@ public static void main(String[] args) throws IOException {\n                     + \"      <namespace key=\\\"100\\\">Portal</namespace>\\n\"\n                     + \"      <namespace key=\\\"101\\\">Portal talk</namespace>\\n\" + \"    </namespaces>\\n\"\n                     + \"  </siteinfo>\\n\";\n-    \n+\n     StringBuilder content = new StringBuilder();\n     content.append(header);\n     NumberFormat decimalFormatter = new DecimalFormat(\"0000\");\n     File dumpFile = new File(dumpFilePath);\n+\n+    // If the specified path for the input file is incorrect, return immediately\n+    if (!dumpFile.exists()) {\n+      log.error(\"Input file path {} doesn't exist\", dumpFilePath);\n+      return;\n+    }\n+\n     FileLineIterator it;\n     if (dumpFilePath.endsWith(\".bz2\")) {\n       // default compression format from http://download.wikimedia.org\n@@ -192,7 +199,7 @@ public static void main(String[] args) throws IOException {\n       // assume the user has previously de-compressed the dump file\n       it = new FileLineIterator(dumpFile);\n     }\n-    int filenumber = 0;\n+    int fileNumber = 0;\n     while (it.hasNext()) {\n       String thisLine = it.next();\n       if (thisLine.trim().startsWith(\"<page>\")) {\n@@ -207,19 +214,19 @@ public static void main(String[] args) throws IOException {\n           }\n         }\n         content.append(thisLine).append('\\n');\n-        \n+\n         if (content.length() > chunkSize || end) {\n           content.append(\"</mediawiki>\");\n-          filenumber++;\n-          String filename = outputDirPath + \"/chunk-\" + decimalFormatter.format(filenumber) + \".xml\";\n+          fileNumber++;\n+          String filename = outputDirPath + \"/chunk-\" + decimalFormatter.format(fileNumber) + \".xml\";\n           BufferedWriter chunkWriter =\n               new BufferedWriter(new OutputStreamWriter(fs.create(new Path(filename)), \"UTF-8\"));\n           try {\n             chunkWriter.write(content.toString(), 0, content.length());\n           } finally {\n             Closeables.close(chunkWriter, false);\n           }\n-          if (filenumber >= numChunks) {\n+          if (fileNumber >= numChunks) {\n             break;\n           }\n           content = new StringBuilder();",
                "additions": 26,
                "raw_url": "https://github.com/apache/mahout/raw/09b4ef12001f21f55089baf36a8a4281641cdd27/integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaXmlSplitter.java",
                "status": "modified",
                "changes": 45,
                "deletions": 19,
                "sha": "c9a54e9050b1bf2af74631d367734e364de1419a",
                "blob_url": "https://github.com/apache/mahout/blob/09b4ef12001f21f55089baf36a8a4281641cdd27/integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaXmlSplitter.java",
                "filename": "integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaXmlSplitter.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/main/java/org/apache/mahout/text/wikipedia/WikipediaXmlSplitter.java?ref=09b4ef12001f21f55089baf36a8a4281641cdd27"
            }
        ],
        "bug_id": "mahout_5",
        "parent": "https://github.com/apache/mahout/commit/62766057cc02d6550f854f13d77dc0a6629a7ac7",
        "message": "MAHOUT-1367: Exception in thread \"main\" java.lang.NullPointerException, caused by not validating the input path.\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1546806 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/0c1b4a1e07fa6be269615c08a3813af04a71d46e",
        "file": [
            {
                "patch": "@@ -10,6 +10,8 @@ Release 0.9 - unreleased\n \n   MAHOUT-1333: Fixed examples bin directory permissions in distribution archives (Mike Percy via sslavic)\n \n+  MAHOUT-1314: StreamingKMeansReducer throws NullPointerException when REDUCE_STREAMING_KMEANS is set to true (smarthi)\n+\n   MAHOUT-1313: Fixed unwanted integral division bug in RowSimilarityJob downsampling code where precision should have been retained (sslavic) \n \n   MAHOUT-1301: toString() method of SequentialAccessSparseVector has excess comma at the end (Alexander Senov, smarthi)",
                "additions": 2,
                "raw_url": "https://github.com/apache/mahout/raw/0c1b4a1e07fa6be269615c08a3813af04a71d46e/CHANGELOG",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "e36729e22477192ae0c172588f841024aab7837a",
                "blob_url": "https://github.com/apache/mahout/blob/0c1b4a1e07fa6be269615c08a3813af04a71d46e/CHANGELOG",
                "filename": "CHANGELOG",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/CHANGELOG?ref=0c1b4a1e07fa6be269615c08a3813af04a71d46e"
            },
            {
                "patch": "@@ -31,8 +31,13 @@\n import org.apache.mahout.common.commandline.DefaultOptionCreator;\n import org.apache.mahout.math.Centroid;\n import org.apache.mahout.math.Vector;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class StreamingKMeansReducer extends Reducer<IntWritable, CentroidWritable, IntWritable, CentroidWritable> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(StreamingKMeansReducer.class);\n+\n   /**\n    * Configuration for the MapReduce job.\n    */\n@@ -57,7 +62,7 @@ public void reduce(IntWritable key, Iterable<CentroidWritable> centroids,\n             @Override\n             public Centroid apply(CentroidWritable input) {\n               Preconditions.checkNotNull(input);\n-              return input.getCentroid();\n+              return input.getCentroid().clone();\n             }\n           }), conf).call());\n     } else {\n@@ -66,7 +71,7 @@ public Centroid apply(CentroidWritable input) {\n \n     int index = 0;\n     for (Vector centroid : getBestCentroids(intermediateCentroids, conf)) {\n-      context.write(new IntWritable(index), new CentroidWritable((Centroid)centroid));\n+      context.write(new IntWritable(index), new CentroidWritable((Centroid) centroid));\n       ++index;\n     }\n   }\n@@ -84,6 +89,11 @@ public Centroid apply(CentroidWritable input) {\n   }\n \n   public static Iterable<Vector> getBestCentroids(List<Centroid> centroids, Configuration conf) {\n+\n+    if (log.isInfoEnabled()) {\n+      log.info(\"Number of Centroids: {}\", centroids.size());\n+    }\n+\n     int numClusters = conf.getInt(DefaultOptionCreator.NUM_CLUSTERS_OPTION, 1);\n     int maxNumIterations = conf.getInt(StreamingKMeansDriver.MAX_NUM_ITERATIONS, 10);\n     float trimFraction = conf.getFloat(StreamingKMeansDriver.TRIM_FRACTION, 0.9f);\n@@ -92,8 +102,8 @@ public Centroid apply(CentroidWritable input) {\n     float testProbability = conf.getFloat(StreamingKMeansDriver.TEST_PROBABILITY, 0.1f);\n     int numRuns = conf.getInt(StreamingKMeansDriver.NUM_BALLKMEANS_RUNS, 3);\n \n-    BallKMeans clusterer = new BallKMeans(StreamingKMeansUtilsMR.searcherFromConfiguration(conf),\n+    BallKMeans ballKMeansCluster = new BallKMeans(StreamingKMeansUtilsMR.searcherFromConfiguration(conf),\n         numClusters, maxNumIterations, trimFraction, kMeansPlusPlusInit, correctWeights, testProbability, numRuns);\n-    return clusterer.cluster(centroids);\n+    return ballKMeansCluster.cluster(centroids);\n   }\n }",
                "additions": 14,
                "raw_url": "https://github.com/apache/mahout/raw/0c1b4a1e07fa6be269615c08a3813af04a71d46e/core/src/main/java/org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansReducer.java",
                "status": "modified",
                "changes": 18,
                "deletions": 4,
                "sha": "2b78acc2092d28df9377175141c8047e531483d6",
                "blob_url": "https://github.com/apache/mahout/blob/0c1b4a1e07fa6be269615c08a3813af04a71d46e/core/src/main/java/org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansReducer.java",
                "filename": "core/src/main/java/org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansReducer.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/clustering/streaming/mapreduce/StreamingKMeansReducer.java?ref=0c1b4a1e07fa6be269615c08a3813af04a71d46e"
            }
        ],
        "bug_id": "mahout_6",
        "parent": "https://github.com/apache/mahout/commit/e1bb0027ba261e3822d379914ab3ab4bcf7b8aeb",
        "message": "MAHOUt-1314:StreamingKMeansReducer throws NullPointerException when REDUCE_STREAMING_KMEANS is set to true\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1542944 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/1ab159a766ee7c0219c0bd9a5b3ee914c280fdff",
        "file": [
            {
                "patch": "@@ -52,15 +52,13 @@ public static File getRatings(String[] args) throws OptionException {\n     ArgumentBuilder abuilder = new ArgumentBuilder();\n     GroupBuilder gbuilder = new GroupBuilder();\n     \n-    Option inputOpt = obuilder.withLongName(\"input\").withRequired(false)\n-    .withShortName(\"i\").withArgument(\n-      abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create())\n-      .withDescription(\"The Path for input data directory.\").create();\n+    Option inputOpt = obuilder.withLongName(\"input\").withRequired(false).withShortName(\"i\")\n+        .withArgument(abuilder.withName(\"input\").withMinimum(1).withMaximum(1).create())\n+        .withDescription(\"The Path for input data directory.\").create();\n     \n     Option helpOpt = DefaultOptionCreator.helpOption();\n     \n-    Group group = gbuilder.withName(\"Options\").withOption(inputOpt).withOption(\n-      helpOpt).create();\n+    Group group = gbuilder.withName(\"Options\").withOption(inputOpt).withOption(helpOpt).create();\n     \n     Parser parser = new Parser();\n     parser.setGroup(group);\n@@ -70,9 +68,8 @@ public static File getRatings(String[] args) throws OptionException {\n       CommandLineUtil.printHelp(group);\n       return null;\n     }\n-    \n-    String prefsFile = cmdLine.getValue(inputOpt).toString();\n-    return new File(prefsFile);\n+\n+    return cmdLine.hasOption(inputOpt) ? new File(cmdLine.getValue(inputOpt).toString()) : null;\n   }\n   \n }",
                "additions": 6,
                "raw_url": "https://github.com/apache/mahout/raw/1ab159a766ee7c0219c0bd9a5b3ee914c280fdff/examples/src/main/java/org/apache/mahout/cf/taste/example/TasteOptionParser.java",
                "status": "modified",
                "changes": 15,
                "deletions": 9,
                "sha": "6392b9ff9c7e44ab94c9d28d50ae17ebb0cb23bc",
                "blob_url": "https://github.com/apache/mahout/blob/1ab159a766ee7c0219c0bd9a5b3ee914c280fdff/examples/src/main/java/org/apache/mahout/cf/taste/example/TasteOptionParser.java",
                "filename": "examples/src/main/java/org/apache/mahout/cf/taste/example/TasteOptionParser.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/examples/src/main/java/org/apache/mahout/cf/taste/example/TasteOptionParser.java?ref=1ab159a766ee7c0219c0bd9a5b3ee914c280fdff"
            }
        ],
        "bug_id": "mahout_7",
        "parent": "https://github.com/apache/mahout/commit/515a414a4ee0bc872621fd0af360d7669e6806a1",
        "message": "Fix an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1005716 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/2cd3ea39e3dc70f1ffcffae92cb0901894bed63b",
        "file": [
            {
                "patch": "@@ -612,7 +612,7 @@ public void setConf(Configuration conf) {\n     // If running in an Oozie workflow as a Java action, need to add the\n     // Configuration resource provided by Oozie to this job's config.\n     String oozieActionConfXml = System.getProperty(\"oozie.action.conf.xml\");\n-    if (oozieActionConfXml != null) {\n+    if (oozieActionConfXml != null && conf != null) {\n       conf.addResource(new Path(\"file:///\", oozieActionConfXml));\n       log.info(\"Added Oozie action Configuration resource {0} to the Hadoop Configuration\", oozieActionConfXml);\n     }      ",
                "additions": 1,
                "raw_url": "https://github.com/apache/mahout/raw/2cd3ea39e3dc70f1ffcffae92cb0901894bed63b/core/src/main/java/org/apache/mahout/common/AbstractJob.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "fb18b59ddf4a92a22094c1607dd6576bc23759d7",
                "blob_url": "https://github.com/apache/mahout/blob/2cd3ea39e3dc70f1ffcffae92cb0901894bed63b/core/src/main/java/org/apache/mahout/common/AbstractJob.java",
                "filename": "core/src/main/java/org/apache/mahout/common/AbstractJob.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/common/AbstractJob.java?ref=2cd3ea39e3dc70f1ffcffae92cb0901894bed63b"
            }
        ],
        "bug_id": "mahout_8",
        "parent": "https://github.com/apache/mahout/commit/1608f61a2092a021a28b37b1d06fbaedf8049a5a",
        "message": "MAHOUT-1033 avoid NPE on null conf\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1352837 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/408e57bb224d5fbf276eba7ca5056e681623d219",
        "file": [
            {
                "patch": "@@ -119,16 +119,18 @@ public int run(String[] args) throws Exception {\n         }\n         writer.append(\"Count: \").append(String.valueOf(count)).append('\\n');\n       }\n-      List<String> keyList = new ArrayList<String>(facets.size());\n+      if (facets != null) {\n+        List<String> keyList = new ArrayList<String>(facets.size());\n \n-      IntArrayList valueList = new IntArrayList(facets.size());\n-      facets.pairsSortedByKey(keyList, valueList);\n-      int i = 0;\n-      writer.append(\"-----Facets---\\n\");\n-      writer.append(\"Key\\t\\tCount\\n\");\n-      for (String key : keyList) {\n-        writer.append(key).append(\"\\t\\t\").append(String.valueOf(valueList.get(i++))).append('\\n');\n+        IntArrayList valueList = new IntArrayList(facets.size());\n+        facets.pairsSortedByKey(keyList, valueList);\n+        int i = 0;\n+        writer.append(\"-----Facets---\\n\");\n+        writer.append(\"Key\\t\\tCount\\n\");\n+        for (String key : keyList) {\n+          writer.append(key).append(\"\\t\\t\").append(String.valueOf(valueList.get(i++))).append('\\n');\n \n+        }\n       }\n       writer.flush();\n ",
                "additions": 10,
                "raw_url": "https://github.com/apache/mahout/raw/408e57bb224d5fbf276eba7ca5056e681623d219/integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java",
                "status": "modified",
                "changes": 18,
                "deletions": 8,
                "sha": "dac431605f609297fe4e306cb796b4d015d95d54",
                "blob_url": "https://github.com/apache/mahout/blob/408e57bb224d5fbf276eba7ca5056e681623d219/integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java",
                "filename": "integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/main/java/org/apache/mahout/utils/SequenceFileDumper.java?ref=408e57bb224d5fbf276eba7ca5056e681623d219"
            }
        ],
        "bug_id": "mahout_9",
        "parent": "https://github.com/apache/mahout/commit/2ead329cb23df8561510b4e3ca191cc77a6605cf",
        "message": "fix NPE in seq file\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1207860 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/793a170399de40ec7da6bffa15e8aeb9368fbead",
        "file": [
            {
                "patch": "@@ -113,8 +113,11 @@ public int run(String[] args) throws Exception {\n     DistanceMeasure measure = ccl.loadClass(measureClass).asSubclass(DistanceMeasure.class).newInstance();\n \n     if (hasOption(DefaultOptionCreator.NUM_CLUSTERS_OPTION)) {\n-      clusters = RandomSeedGenerator.buildRandom(getConf(), input, clusters, Integer.parseInt(parseArguments(args)\n-          .get(DefaultOptionCreator.NUM_CLUSTERS_OPTION)), measure);\n+      clusters = RandomSeedGenerator.buildRandom(getConf(),\n+                                                 input,\n+                                                 clusters,\n+                                                 Integer.parseInt(getOption(DefaultOptionCreator.NUM_CLUSTERS_OPTION)),\n+                                                 measure);\n     }\n     boolean runClustering = hasOption(DefaultOptionCreator.CLUSTERING_OPTION);\n     boolean runSequential = getOption(DefaultOptionCreator.METHOD_OPTION).equalsIgnoreCase(",
                "additions": 5,
                "raw_url": "https://github.com/apache/mahout/raw/793a170399de40ec7da6bffa15e8aeb9368fbead/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java",
                "status": "modified",
                "changes": 7,
                "deletions": 2,
                "sha": "f3c9d5eb1aa6d5b045bf8a819272d0c8ac6ab30c",
                "blob_url": "https://github.com/apache/mahout/blob/793a170399de40ec7da6bffa15e8aeb9368fbead/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java",
                "filename": "core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/clustering/fuzzykmeans/FuzzyKMeansDriver.java?ref=793a170399de40ec7da6bffa15e8aeb9368fbead"
            }
        ],
        "bug_id": "mahout_10",
        "parent": "https://github.com/apache/mahout/commit/e4e7947ccb3b5260732ce044b7d0334b7547bef3",
        "message": "MAHOUT-723 fix NPE in fuzzy k-means driver\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1132440 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/ff31f377268456d212763b9c60d9205acd3ab1ba",
        "file": [
            {
                "patch": "@@ -114,7 +114,7 @@ public static void main(String[] args) throws IOException {\n       output.printf(Locale.ENGLISH, \"%d\\n\", lmp.getNumFeatures());\n       output.printf(Locale.ENGLISH, \"%s ~ \", lmp.getTargetVariable());\n       String sep = \"\";\n-      for (String v : csv.getPredictors()) {\n+      for (String v : csv.getTraceDictionary().keySet()) {\n         double weight = predictorWeight(lr, 0, csv, v);\n         if (weight != 0) {\n           output.printf(Locale.ENGLISH, \"%s%.3f*%s\", sep, weight, v);",
                "additions": 1,
                "raw_url": "https://github.com/apache/mahout/raw/ff31f377268456d212763b9c60d9205acd3ab1ba/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "05fe973bba388b482002e5155f8c4d9127405e61",
                "blob_url": "https://github.com/apache/mahout/blob/ff31f377268456d212763b9c60d9205acd3ab1ba/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java",
                "filename": "examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/examples/src/main/java/org/apache/mahout/classifier/sgd/TrainLogistic.java?ref=ff31f377268456d212763b9c60d9205acd3ab1ba"
            }
        ],
        "bug_id": "mahout_11",
        "parent": "https://github.com/apache/mahout/commit/8049eff6dd48dc2621219c51e1eef97dd62165c8",
        "message": "MAHOUT-674 fix NPE by using right map key\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1094764 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/0b04779565a30f0e1e6debb6c2ce846fb1df1447",
        "file": [
            {
                "patch": "@@ -91,20 +91,20 @@ public void addInstance(String correctLabel, String classifiedLabel) {\n   }\n   \n   public int getCount(String correctLabel, String classifiedLabel) {\n-    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)\n-        || labelMap.containsKey(classifiedLabel)\n-        || defaultLabel.equals(classifiedLabel),\n-        \"Label not found \" + correctLabel + ' ' + classifiedLabel);\n+    Preconditions.checkArgument(labelMap.containsKey(correctLabel),\n+                                \"Label not found: \" + correctLabel);\n+    Preconditions.checkArgument(labelMap.containsKey(classifiedLabel),\n+                                \"Label not found: \" + classifiedLabel);\n     int correctId = labelMap.get(correctLabel);\n     int classifiedId = labelMap.get(classifiedLabel);\n     return confusionMatrix[correctId][classifiedId];\n   }\n   \n   public void putCount(String correctLabel, String classifiedLabel, int count) {\n-    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)\n-        || labelMap.containsKey(classifiedLabel)\n-        || defaultLabel.equals(classifiedLabel),\n-        \"Label not found \" + correctLabel + ' ' + classifiedLabel);\n+    Preconditions.checkArgument(labelMap.containsKey(correctLabel),\n+                                \"Label not found: \" + correctLabel);\n+    Preconditions.checkArgument(labelMap.containsKey(classifiedLabel),\n+                                \"Label not found: \" + classifiedLabel);\n     int correctId = labelMap.get(correctLabel);\n     int classifiedId = labelMap.get(classifiedLabel);\n     confusionMatrix[correctId][classifiedId] = count;",
                "additions": 8,
                "raw_url": "https://github.com/apache/mahout/raw/0b04779565a30f0e1e6debb6c2ce846fb1df1447/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "status": "modified",
                "changes": 16,
                "deletions": 8,
                "sha": "7a6ea940b573c6fda441315276ef39da98bc877b",
                "blob_url": "https://github.com/apache/mahout/blob/0b04779565a30f0e1e6debb6c2ce846fb1df1447/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "filename": "core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java?ref=0b04779565a30f0e1e6debb6c2ce846fb1df1447"
            }
        ],
        "bug_id": "mahout_12",
        "parent": "https://github.com/apache/mahout/commit/75d18373ebd5ebf291ffcd58f2d51fc1ca2fe358",
        "message": "MAHOUT-604 avoid an NPE by updating Preconditions check\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1070798 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/74735db0c1b9f01eb7fc39376e9de26278b3d5b6",
        "file": [
            {
                "patch": "@@ -46,7 +46,7 @@\n   \n   private HTable table;\n   \n-  private ThreadLocal<HBaseConfiguration> hBconf;\n+  private ThreadLocal<HBaseConfiguration> hBconf = new ThreadLocal<HBaseConfiguration>();\n   \n   private boolean useHbase;\n   ",
                "additions": 1,
                "raw_url": "https://github.com/apache/mahout/raw/74735db0c1b9f01eb7fc39376e9de26278b3d5b6/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "50245d4e1652b0ae92f5ef77ede2f92cfa017e7e",
                "blob_url": "https://github.com/apache/mahout/blob/74735db0c1b9f01eb7fc39376e9de26278b3d5b6/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java",
                "filename": "core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerReducer.java?ref=74735db0c1b9f01eb7fc39376e9de26278b3d5b6"
            }
        ],
        "bug_id": "mahout_13",
        "parent": "https://github.com/apache/mahout/commit/f63257710f2caeb697f47522abe70b67296d4b2d",
        "message": "MAHOUT-431 Fixes NPE problem in CBayes(Jeremy)\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@959189 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/2ebfee75b9e21e8819fe8782fe978dc3ad3b0539",
        "file": [
            {
                "patch": "@@ -107,7 +107,9 @@ public int run(String[] args) throws IOException {\n     recommenderConf.set(RecommenderMapper.COOCCURRENCE_PATH, cooccurrencePath);\n     recommenderConf.set(RecommenderMapper.ITEMID_INDEX_PATH, itemIDIndexPath);\n     recommenderConf.setInt(RecommenderMapper.RECOMMENDATIONS_PER_USER, recommendationsPerUser);\n-    recommenderConf.set(RecommenderMapper.USERS_FILE, usersFile);\n+    if (usersFile != null) {\n+      recommenderConf.set(RecommenderMapper.USERS_FILE, usersFile);\n+    }\n     recommenderConf.setClass(\"mapred.output.compression.codec\", GzipCodec.class, CompressionCodec.class);\n     JobClient.runJob(recommenderConf);\n     return 0;",
                "additions": 3,
                "raw_url": "https://github.com/apache/mahout/raw/2ebfee75b9e21e8819fe8782fe978dc3ad3b0539/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java",
                "status": "modified",
                "changes": 4,
                "deletions": 1,
                "sha": "4b7872533acf3dcfc74bad35610c53bc678096b5",
                "blob_url": "https://github.com/apache/mahout/blob/2ebfee75b9e21e8819fe8782fe978dc3ad3b0539/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java",
                "filename": "core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderJob.java?ref=2ebfee75b9e21e8819fe8782fe978dc3ad3b0539"
            }
        ],
        "bug_id": "mahout_14",
        "parent": "https://github.com/apache/mahout/commit/53d3cc8acccf0fea554d0a197f09207b22c1adec",
        "message": "Avoid NPE with no users file\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@929067 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/8c539d2b051ce7f9ac6a9b13256708935b6ad44a",
        "file": [
            {
                "patch": "@@ -80,12 +80,16 @@ public static String buildJson(Iterable<Pair<String, Double>> iterable, StringBu\n   }\n \n   public static List<Pair<Integer, Double>> topEntries(Vector vector, int maxEntries) {\n+\n     // Get the size of nonZero elements in the input vector\n     int sizeOfNonZeroElementsInVector = Iterables.size(vector.nonZeroes());\n-    // If the sizeOfNonZeroElementsInVector < maxEntries then set maxEntries to sizeOfNonZeroElementsInVector\n-    // else the call to queue.pop() returns a Pair(null, null) and the subsequent\n-    // call to pair.getFirst() throws a NullPointerException\n-    maxEntries = (sizeOfNonZeroElementsInVector < maxEntries) ? sizeOfNonZeroElementsInVector : maxEntries;\n+\n+    // If the sizeOfNonZeroElementsInVector < maxEntries then set maxEntries = sizeOfNonZeroElementsInVector\n+    // otherwise the call to queue.pop() returns a Pair(null, null) and the subsequent call\n+    // to pair.getFirst() throws a NullPointerException\n+    if (sizeOfNonZeroElementsInVector < maxEntries)\n+      maxEntries = sizeOfNonZeroElementsInVector;\n+\n     PriorityQueue<Pair<Integer, Double>> queue = new TDoublePQ<Integer>(-1, maxEntries);\n     for (Element e : vector.nonZeroes()) {\n       queue.insertWithOverflow(Pair.of(e.index(), e.get()));",
                "additions": 8,
                "raw_url": "https://github.com/apache/mahout/raw/8c539d2b051ce7f9ac6a9b13256708935b6ad44a/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java",
                "status": "modified",
                "changes": 12,
                "deletions": 4,
                "sha": "ef4e47a65359de71e18e1c94ae5c98147cb0bf1d",
                "blob_url": "https://github.com/apache/mahout/blob/8c539d2b051ce7f9ac6a9b13256708935b6ad44a/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java",
                "filename": "integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java?ref=8c539d2b051ce7f9ac6a9b13256708935b6ad44a"
            },
            {
                "patch": "@@ -63,10 +63,11 @@ public void testTopEntries() throws Exception {\n     v.set(1, 0.0);\n     v.set(3, 0.0);\n     v.set(8, 2.7);\n+    // check if sizeOFNonZeroElementsInVector = maxEntries\n     assertEquals(6, VectorHelper.topEntries(v, 6).size());\n-    // when sizeOfNonZeroElementsInVector < maxEntries\n+    // check if sizeOfNonZeroElementsInVector < maxEntries\n     assertTrue(VectorHelper.topEntries(v, 9).size() < 9);\n-    // when sizeOfNonZeroElementsInVector > maxEntries\n+    // check if sizeOfNonZeroElementsInVector > maxEntries\n     assertTrue(VectorHelper.topEntries(v, 5).size() < Iterables.size(v.nonZeroes()));\n   }\n \n@@ -83,5 +84,4 @@ public void testTopEntriesWhenAllZeros() throws Exception {\n     v.set(8, 0.0);\n     assertEquals(0, VectorHelper.topEntries(v, 6).size());\n   }\n-\n }",
                "additions": 3,
                "raw_url": "https://github.com/apache/mahout/raw/8c539d2b051ce7f9ac6a9b13256708935b6ad44a/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "9b125a2643b93e149c7e821d32453bb2e396564c",
                "blob_url": "https://github.com/apache/mahout/blob/8c539d2b051ce7f9ac6a9b13256708935b6ad44a/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "filename": "integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java?ref=8c539d2b051ce7f9ac6a9b13256708935b6ad44a"
            }
        ],
        "bug_id": "mahout_15",
        "parent": "https://github.com/apache/mahout/commit/aeb8c72aec0ad5be73d94eb21ad4b90517e7b00b",
        "message": "MAHOUT-1232: VectorHelper.topEntries() throws a NPE when number of NonZero elements in vector < maxEntries - added code comments\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1488007 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/cfc31552094358301ab5d31d932620d599d29723",
        "file": [
            {
                "patch": "@@ -2,6 +2,8 @@ Mahout Change Log\n \n Release 0.8 - unreleased\n \n+  MAHOUT-1232: VectorHelper.topEntries() throws a NPE when number of NonZero elements in vector < maxEntries (smarthi)\n+\n   MAHOUT-1229: Conf directory content from Mahout distribution archives cannot be unpacked (Stevo Slavic via smarthi)\n   \n   MAHOUT-1213: SSVD job doesn't clean it's temp dir, and fails when seeing it again (smarthi)",
                "additions": 2,
                "raw_url": "https://github.com/apache/mahout/raw/cfc31552094358301ab5d31d932620d599d29723/CHANGELOG",
                "status": "modified",
                "changes": 2,
                "deletions": 0,
                "sha": "13c952e9d03f3cb79e55f0f162867c9004804b6f",
                "blob_url": "https://github.com/apache/mahout/blob/cfc31552094358301ab5d31d932620d599d29723/CHANGELOG",
                "filename": "CHANGELOG",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/CHANGELOG?ref=cfc31552094358301ab5d31d932620d599d29723"
            },
            {
                "patch": "@@ -251,7 +251,7 @@ public int run(String[] args) throws Exception {\n       writer.flush();\n     } finally {\n       if (shouldClose) {\n-        Closeables.closeQuietly(writer);\n+        Closeables.close(writer, true);\n       }\n     }\n ",
                "additions": 1,
                "raw_url": "https://github.com/apache/mahout/raw/cfc31552094358301ab5d31d932620d599d29723/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "a7736bbcd9313450ff3de3bf19b4933e7b8ccb13",
                "blob_url": "https://github.com/apache/mahout/blob/cfc31552094358301ab5d31d932620d599d29723/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java",
                "filename": "integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/main/java/org/apache/mahout/utils/vectors/VectorDumper.java?ref=cfc31552094358301ab5d31d932620d599d29723"
            },
            {
                "patch": "@@ -19,6 +19,7 @@\n \n import com.google.common.base.Function;\n import com.google.common.collect.Collections2;\n+import com.google.common.collect.Iterables;\n import com.google.common.collect.Lists;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.Path;\n@@ -79,6 +80,12 @@ public static String buildJson(Iterable<Pair<String, Double>> iterable, StringBu\n   }\n \n   public static List<Pair<Integer, Double>> topEntries(Vector vector, int maxEntries) {\n+    // Get the size of nonZero elements in the input vector\n+    int sizeOfNonZeroElementsInVector = Iterables.size(vector.nonZeroes());\n+    // If the sizeOfNonZeroElementsInVector < maxEntries then set maxEntries to sizeOfNonZeroElementsInVector\n+    // else the call to queue.pop() returns a Pair(null, null) and the subsequent\n+    // call to pair.getFirst() throws a NullPointerException\n+    maxEntries = (sizeOfNonZeroElementsInVector < maxEntries) ? sizeOfNonZeroElementsInVector : maxEntries;\n     PriorityQueue<Pair<Integer, Double>> queue = new TDoublePQ<Integer>(-1, maxEntries);\n     for (Element e : vector.nonZeroes()) {\n       queue.insertWithOverflow(Pair.of(e.index(), e.get()));",
                "additions": 7,
                "raw_url": "https://github.com/apache/mahout/raw/cfc31552094358301ab5d31d932620d599d29723/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java",
                "status": "modified",
                "changes": 7,
                "deletions": 0,
                "sha": "26946dc8695aeb3b0f9242bf6cb7c6a6e181d014",
                "blob_url": "https://github.com/apache/mahout/blob/cfc31552094358301ab5d31d932620d599d29723/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java",
                "filename": "integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/main/java/org/apache/mahout/utils/vectors/VectorHelper.java?ref=cfc31552094358301ab5d31d932620d599d29723"
            },
            {
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.mahout.utils.vectors;\n \n+import com.google.common.collect.Iterables;\n import org.apache.mahout.math.SequentialAccessSparseVector;\n import org.apache.mahout.math.Vector;\n import org.apache.mahout.utils.MahoutTestCase;\n@@ -51,4 +52,22 @@ public void testJsonFormatting() throws Exception {\n         VectorHelper.vectorToJson(v, dictionary, 2, false));\n   }\n \n+  @Test\n+  public void testTopEntries() throws Exception {\n+    Vector v = new SequentialAccessSparseVector(10);\n+    v.set(2, 3.1);\n+    v.set(4, 1.0);\n+    v.set(6, 8.1);\n+    v.set(7, -100);\n+    v.set(9, 12.2);\n+    v.set(1, 0.0);\n+    v.set(3, 0.0);\n+    v.set(8, 2.7);\n+    assertEquals(6, VectorHelper.topEntries(v, 6).size());\n+    // when sizeOfNonZeroElementsInVector < maxEntries\n+    assertTrue(VectorHelper.topEntries(v, 9).size() < 9);\n+    // when sizeOfNonZeroElementsInVector > maxEntries\n+    assertTrue(VectorHelper.topEntries(v, 5).size() < Iterables.size(v.nonZeroes()));\n+  }\n+\n }",
                "additions": 19,
                "raw_url": "https://github.com/apache/mahout/raw/cfc31552094358301ab5d31d932620d599d29723/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "status": "modified",
                "changes": 19,
                "deletions": 0,
                "sha": "b193bda01639662798978a8d25cdcfe23dda8858",
                "blob_url": "https://github.com/apache/mahout/blob/cfc31552094358301ab5d31d932620d599d29723/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "filename": "integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java?ref=cfc31552094358301ab5d31d932620d599d29723"
            }
        ],
        "bug_id": "mahout_16",
        "parent": "https://github.com/apache/mahout/commit/754fd18bd52d198518ce0ac3882581427593ece1",
        "message": "MAHOUT-1232: VectorHelper.topEntries() throws a NPE when number of NonZero elements in vector < maxEntries\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1487279 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/ac28cf4841459c785e4beee061cc350ce97c9838",
        "file": [
            {
                "patch": "@@ -175,7 +175,8 @@ public static void writeVector(DataOutput out, Vector vector, boolean laxPrecisi\n       }\n     }\n     if (named) {\n-      out.writeUTF(((NamedVector) vector).getName());\n+      String name = ((NamedVector) vector).getName();\n+      out.writeUTF(name == null ? \"\" : name);\n     }\n   }\n ",
                "additions": 2,
                "raw_url": "https://github.com/apache/mahout/raw/ac28cf4841459c785e4beee061cc350ce97c9838/core/src/main/java/org/apache/mahout/math/VectorWritable.java",
                "status": "modified",
                "changes": 3,
                "deletions": 1,
                "sha": "07b8acdd20b648e3c184689c7cd3915e3fe4c88f",
                "blob_url": "https://github.com/apache/mahout/blob/ac28cf4841459c785e4beee061cc350ce97c9838/core/src/main/java/org/apache/mahout/math/VectorWritable.java",
                "filename": "core/src/main/java/org/apache/mahout/math/VectorWritable.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/math/VectorWritable.java?ref=ac28cf4841459c785e4beee061cc350ce97c9838"
            },
            {
                "patch": "@@ -36,7 +36,7 @@ public NamedVector(NamedVector other) {\n   }\n \n   public NamedVector(Vector delegate, String name) {\n-    if (delegate == null) {\n+    if (delegate == null || name == null) {\n       throw new IllegalArgumentException();\n     }\n     this.delegate = delegate;",
                "additions": 1,
                "raw_url": "https://github.com/apache/mahout/raw/ac28cf4841459c785e4beee061cc350ce97c9838/math/src/main/java/org/apache/mahout/math/NamedVector.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "827a555fa179fe2d1208512e9d77bba6d5601a4c",
                "blob_url": "https://github.com/apache/mahout/blob/ac28cf4841459c785e4beee061cc350ce97c9838/math/src/main/java/org/apache/mahout/math/NamedVector.java",
                "filename": "math/src/main/java/org/apache/mahout/math/NamedVector.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/math/src/main/java/org/apache/mahout/math/NamedVector.java?ref=ac28cf4841459c785e4beee061cc350ce97c9838"
            }
        ],
        "bug_id": "mahout_17",
        "parent": "https://github.com/apache/mahout/commit/5d64fbce6cd194a90e26ca35f90f61c88e75135b",
        "message": "Partial fix for MAHOUT-546; avoid proximate cause which is an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1130212 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/41b0a8bc33964f7a1e5e186fd125cc53f1de2b52",
        "file": [
            {
                "patch": "@@ -93,17 +93,13 @@ private MahoutDriver() {\n \n   public static void main(String[] args) throws Throwable {\n     ProgramDriver programDriver = new ProgramDriver();\n-    Properties mainClasses = new Properties();\n-    InputStream propsStream = Thread.currentThread()\n-                                    .getContextClassLoader()\n-                                    .getResourceAsStream(\"driver.classes.props\");\n \n-    try {\n-      mainClasses.load(propsStream);\n-    } catch (IOException e) {\n-      //try getting the default one\n-      propsStream = Thread.currentThread().getContextClassLoader().getResourceAsStream(\"driver.classes.default.props\");\n-      mainClasses.load(propsStream);\n+    Properties mainClasses = loadProperties(\"driver.classes.props\");\n+    if (mainClasses == null) {\n+      mainClasses = loadProperties(\"driver.classes.default.props\");\n+    }\n+    if (mainClasses == null) {\n+      throw new IOException(\"Can't load any properties file?\");\n     }\n \n     boolean foundShortName = false;\n@@ -123,15 +119,10 @@ public static void main(String[] args) throws Throwable {\n     }\n     shift(args);\n \n-    InputStream defaultsStream = Thread.currentThread()\n-                                       .getContextClassLoader()\n-                                       .getResourceAsStream(progName + \".props\");\n-\n-    Properties mainProps = new Properties();\n-    if (defaultsStream != null) { // can't find props file, use empty props.\n-      mainProps.load(defaultsStream);\n-    } else {\n+    Properties mainProps = loadProperties(progName + \".props\");\n+    if (mainProps == null) {\n       log.warn(\"No \" + progName + \".props found on classpath, will use command-line arguments only\");\n+      mainProps = new Properties();\n     }\n     Map<String,String[]> argMap = new HashMap<String,String[]>();\n     int i = 0;\n@@ -187,6 +178,24 @@ public static void main(String[] args) throws Throwable {\n     }\n   }\n \n+  private static Properties loadProperties(String resource) throws IOException {\n+    InputStream propsStream =\n+        Thread.currentThread().getContextClassLoader().getResourceAsStream(\"driver.classes.props\");\n+    if (propsStream != null) {\n+      try {\n+        Properties properties = new Properties();\n+        properties.load(propsStream);\n+        return properties;\n+      } catch (IOException ioe) {\n+        log.warn(\"Error while loading {}\", resource, ioe);\n+        // Continue\n+      } finally {\n+        propsStream.close();\n+      }\n+    }\n+    return null;\n+  }\n+\n   private static String[] shift(String[] args) {\n     System.arraycopy(args, 1, args, 0, args.length - 1);\n     args[args.length - 1] = null;",
                "additions": 27,
                "raw_url": "https://github.com/apache/mahout/raw/41b0a8bc33964f7a1e5e186fd125cc53f1de2b52/core/src/main/java/org/apache/mahout/driver/MahoutDriver.java",
                "status": "modified",
                "changes": 45,
                "deletions": 18,
                "sha": "5cbb81d197f0107776d5e66599545d6b4bc54d86",
                "blob_url": "https://github.com/apache/mahout/blob/41b0a8bc33964f7a1e5e186fd125cc53f1de2b52/core/src/main/java/org/apache/mahout/driver/MahoutDriver.java",
                "filename": "core/src/main/java/org/apache/mahout/driver/MahoutDriver.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/driver/MahoutDriver.java?ref=41b0a8bc33964f7a1e5e186fd125cc53f1de2b52"
            }
        ],
        "bug_id": "mahout_18",
        "parent": "https://github.com/apache/mahout/commit/76da194b25659aab6bc5ac1ae0787376132c950e",
        "message": "MAHOUT-584 Avoid NPE when main props file can't be found\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1059891 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/76da194b25659aab6bc5ac1ae0787376132c950e",
        "file": [
            {
                "patch": "@@ -18,7 +18,9 @@\n package org.apache.mahout.classifier;\n \n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n@@ -32,17 +34,12 @@\n  * See http://en.wikipedia.org/wiki/Confusion_matrix for background\n  */\n public class ConfusionMatrix implements Summarizable {\n-  \n-  private final Collection<String> labels;\n-  \n-  private final Map<String,Integer> labelMap = new HashMap<String,Integer>();\n-  \n+\n+  private final Map<String,Integer> labelMap = new LinkedHashMap<String,Integer>();\n   private final int[][] confusionMatrix;\n-  \n   private String defaultLabel = \"unknown\";\n   \n   public ConfusionMatrix(Collection<String> labels, String defaultLabel) {\n-    this.labels = labels;\n     confusionMatrix = new int[labels.size() + 1][labels.size() + 1];\n     this.defaultLabel = defaultLabel;\n     for (String label : labels) {\n@@ -56,14 +53,14 @@ public ConfusionMatrix(Collection<String> labels, String defaultLabel) {\n   }\n   \n   public Collection<String> getLabels() {\n-    return labels;\n+    return Collections.unmodifiableCollection(labelMap.keySet());\n   }\n   \n   public double getAccuracy(String label) {\n     int labelId = labelMap.get(label);\n     int labelTotal = 0;\n     int correct = 0;\n-    for (int i = 0; i < labels.size(); i++) {\n+    for (int i = 0; i < labelMap.size(); i++) {\n       labelTotal += confusionMatrix[labelId][i];\n       if (i == labelId) {\n         correct = confusionMatrix[labelId][i];\n@@ -80,7 +77,7 @@ public int getCorrect(String label) {\n   public double getTotal(String label) {\n     int labelId = labelMap.get(label);\n     int labelTotal = 0;\n-    for (int i = 0; i < labels.size(); i++) {\n+    for (int i = 0; i < labelMap.size(); i++) {\n       labelTotal += confusionMatrix[labelId][i];\n     }\n     return labelTotal;\n@@ -95,8 +92,8 @@ public void addInstance(String correctLabel, String classifiedLabel) {\n   }\n   \n   public int getCount(String correctLabel, String classifiedLabel) {\n-    Preconditions.checkArgument(!labels.contains(correctLabel)\n-        || labels.contains(classifiedLabel)\n+    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)\n+        || labelMap.containsKey(classifiedLabel)\n         || defaultLabel.equals(classifiedLabel),\n         \"Label not found \" + correctLabel + ' ' + classifiedLabel);\n     int correctId = labelMap.get(correctLabel);\n@@ -105,8 +102,8 @@ public int getCount(String correctLabel, String classifiedLabel) {\n   }\n   \n   public void putCount(String correctLabel, String classifiedLabel, int count) {\n-    Preconditions.checkArgument(!labels.contains(correctLabel)\n-        || labels.contains(classifiedLabel)\n+    Preconditions.checkArgument(!labelMap.containsKey(correctLabel)\n+        || labelMap.containsKey(classifiedLabel)\n         || defaultLabel.equals(classifiedLabel),\n         \"Label not found \" + correctLabel + ' ' + classifiedLabel);\n     int correctId = labelMap.get(correctLabel);\n@@ -123,9 +120,9 @@ public void incrementCount(String correctLabel, String classifiedLabel) {\n   }\n   \n   public ConfusionMatrix merge(ConfusionMatrix b) {\n-    Preconditions.checkArgument(labels.size() == b.getLabels().size(), \"The label sizes do not match\");\n-    for (String correctLabel : this.labels) {\n-      for (String classifiedLabel : this.labels) {\n+    Preconditions.checkArgument(labelMap.size() == b.getLabels().size(), \"The label sizes do not match\");\n+    for (String correctLabel : this.labelMap.keySet()) {\n+      for (String classifiedLabel : this.labelMap.keySet()) {\n         incrementCount(correctLabel, classifiedLabel, b.getCount(correctLabel, classifiedLabel));\n       }\n     }\n@@ -139,16 +136,15 @@ public String summarize() {\n     returnString.append(\"Confusion Matrix\\n\");\n     returnString.append(\"-------------------------------------------------------\").append('\\n');\n     \n-    for (String correctLabel : this.labels) {\n-      returnString.append(StringUtils.rightPad(getSmallLabel(labelMap.get(correctLabel)), 5))\n-          .append('\\t');\n+    for (String correctLabel : this.labelMap.keySet()) {\n+      returnString.append(StringUtils.rightPad(getSmallLabel(labelMap.get(correctLabel)), 5)).append('\\t');\n     }\n     \n     returnString.append(\"<--Classified as\").append('\\n');\n     \n-    for (String correctLabel : this.labels) {\n+    for (String correctLabel : this.labelMap.keySet()) {\n       int labelTotal = 0;\n-      for (String classifiedLabel : this.labels) {\n+      for (String classifiedLabel : this.labelMap.keySet()) {\n         returnString.append(\n           StringUtils.rightPad(Integer.toString(getCount(correctLabel, classifiedLabel)), 5)).append('\\t');\n         labelTotal += getCount(correctLabel, classifiedLabel);",
                "additions": 18,
                "raw_url": "https://github.com/apache/mahout/raw/76da194b25659aab6bc5ac1ae0787376132c950e/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "status": "modified",
                "changes": 40,
                "deletions": 22,
                "sha": "e332bec6315d888febab789719bc96a7acfe4a31",
                "blob_url": "https://github.com/apache/mahout/blob/76da194b25659aab6bc5ac1ae0787376132c950e/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "filename": "core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/ConfusionMatrix.java?ref=76da194b25659aab6bc5ac1ae0787376132c950e"
            }
        ],
        "bug_id": "mahout_19",
        "parent": "https://github.com/apache/mahout/commit/5baba6ec444157370bc9c999d3b8f374d9d7aea1",
        "message": "MAHOUT-569 Fix a certain NPE because labels/labelsMap go out of sync somehow\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1059847 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/b7ef42cb0afc1ecc8ca280e10c6d84be4e1d42f3",
        "file": [
            {
                "patch": "@@ -136,6 +136,7 @@ public int run(String[] args) throws Exception {\n     if (hasOption(NUM_WORDS_OPTION)) {\n       setNumTopFeatures(Integer.parseInt(getOption(NUM_WORDS_OPTION)));\n     }\n+    init();\n     printClusters(null);\n     return 0;\n   }",
                "additions": 1,
                "raw_url": "https://github.com/apache/mahout/raw/b7ef42cb0afc1ecc8ca280e10c6d84be4e1d42f3/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "3888e731852c9329e155522db2c23c16f79b454a",
                "blob_url": "https://github.com/apache/mahout/blob/b7ef42cb0afc1ecc8ca280e10c6d84be4e1d42f3/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java",
                "filename": "utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/utils/src/main/java/org/apache/mahout/utils/clustering/ClusterDumper.java?ref=b7ef42cb0afc1ecc8ca280e10c6d84be4e1d42f3"
            }
        ],
        "bug_id": "mahout_20",
        "parent": "https://github.com/apache/mahout/commit/b64eb1cc7459f94a0140304e658e6faf97191b7f",
        "message": "MAHOUT-167 MAHOUT-427: Fixed NPE in ClusterDumper due to missing call to init() in ClusterDumper.run(String[]);\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@967309 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/bad696f525d524170087a01dadcdee0ff829d411",
        "file": [
            {
                "patch": "@@ -164,12 +164,16 @@ private CooccurrenceCache(MapFilesMap<IntWritable,VectorWritable> map) {\n     \n     @Override\n     public Vector get(IntWritable key) throws TasteException {\n-      Vector value;\n+      VectorWritable writable;\n       try {\n-        value = map.get(key, columnVector).get();\n+        writable = map.get(key, columnVector);\n       } catch (IOException ioe) {\n         throw new TasteException(ioe);\n       }\n+      if (writable == null) {\n+        return null;\n+      }\n+      Vector value = writable.get();\n       if (value == null) {\n         return null;\n       }",
                "additions": 6,
                "raw_url": "https://github.com/apache/mahout/raw/bad696f525d524170087a01dadcdee0ff829d411/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderMapper.java",
                "status": "modified",
                "changes": 8,
                "deletions": 2,
                "sha": "b9d26294c4f4eafd6b0d98cd1a17e9f7a608c2b7",
                "blob_url": "https://github.com/apache/mahout/blob/bad696f525d524170087a01dadcdee0ff829d411/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderMapper.java",
                "filename": "core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderMapper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/cf/taste/hadoop/item/RecommenderMapper.java?ref=bad696f525d524170087a01dadcdee0ff829d411"
            }
        ],
        "bug_id": "mahout_21",
        "parent": "https://github.com/apache/mahout/commit/2ebfee75b9e21e8819fe8782fe978dc3ad3b0539",
        "message": "MAHOUT-353: first step, avoid an NPE but may still be some issue here\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@929193 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/2dc63b9dc2eda7825b92653a6f3b0ef80075da65",
        "file": [
            {
                "patch": "@@ -86,8 +86,8 @@ public void configure(JobConf job) {\n       String labelWeightSumString = mapStringifier.toString(labelWeightSumTemp);\n       labelWeightSumString = job.get(\"cnaivebayes.sigma_k\", labelWeightSumString);\n       labelWeightSumTemp = mapStringifier.fromString(labelWeightSumString);\n-      for (String key : labelWeightSumTemp.keySet()) {\n-        this.labelWeightSum.put(key, labelWeightSumTemp.get(key));\n+      for (Map.Entry<String, Double> stringDoubleEntry : labelWeightSumTemp.entrySet()) {\n+        this.labelWeightSum.put(stringDoubleEntry.getKey(), stringDoubleEntry.getValue());\n       }\n       DefaultStringifier<Double> stringifier = new DefaultStringifier<Double>(job, GenericsUtil\n           .getClass(sigmaJSigmaK));",
                "additions": 2,
                "raw_url": "https://github.com/apache/mahout/raw/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "8c322fc12934de135993001024e3256a50b39984",
                "blob_url": "https://github.com/apache/mahout/blob/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java",
                "filename": "core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/bayes/BayesThetaNormalizerMapper.java?ref=2dc63b9dc2eda7825b92653a6f3b0ef80075da65"
            },
            {
                "patch": "@@ -115,8 +115,8 @@ public void configure(JobConf job) {\n       String labelWeightSumString = mapStringifier.toString(labelWeightSumTemp);\n       labelWeightSumString = job.get(\"cnaivebayes.sigma_k\", labelWeightSumString);\n       labelWeightSumTemp = mapStringifier.fromString(labelWeightSumString);\n-      for (String key : labelWeightSumTemp.keySet()) {\n-        this.labelWeightSum.put(key, labelWeightSumTemp.get(key));\n+      for (Map.Entry<String, Double> stringDoubleEntry : labelWeightSumTemp.entrySet()) {\n+        this.labelWeightSum.put(stringDoubleEntry.getKey(), stringDoubleEntry.getValue());\n       }\n       \n       DefaultStringifier<Double> stringifier = new DefaultStringifier<Double>(job, GenericsUtil",
                "additions": 2,
                "raw_url": "https://github.com/apache/mahout/raw/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "1eb287a0a338f1129ba1c44cd8824a7b64bf515b",
                "blob_url": "https://github.com/apache/mahout/blob/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java",
                "filename": "core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/cbayes/CBayesThetaNormalizerMapper.java?ref=2dc63b9dc2eda7825b92653a6f3b0ef80075da65"
            },
            {
                "patch": "@@ -99,8 +99,8 @@ public void configure(JobConf job) {\n       labelDocumentCountString = job.get(\"cnaivebayes.labelDocumentCounts\", labelDocumentCountString);\n       \n       labelDocCountTemp = mapStringifier.fromString(labelDocumentCountString);\n-      for (String key : labelDocCountTemp.keySet()) {\n-        this.labelDocumentCounts.put(key, labelDocCountTemp.get(key));\n+      for (Map.Entry<String, Double> stringDoubleEntry : labelDocCountTemp.entrySet()) {\n+        this.labelDocumentCounts.put(stringDoubleEntry.getKey(), stringDoubleEntry.getValue());\n       }\n       \n     } catch (IOException ex) {",
                "additions": 2,
                "raw_url": "https://github.com/apache/mahout/raw/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfMapper.java",
                "status": "modified",
                "changes": 4,
                "deletions": 2,
                "sha": "28ad85752be6074a8f1b05d72e9ddfd0eae274fc",
                "blob_url": "https://github.com/apache/mahout/blob/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfMapper.java",
                "filename": "core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfMapper.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/bayes/mapreduce/common/BayesTfIdfMapper.java?ref=2dc63b9dc2eda7825b92653a6f3b0ef80075da65"
            },
            {
                "patch": "@@ -15,7 +15,7 @@\n   \n   private double convergenceDelta = 0;\n   // the next canopyId to be allocated\n-  private int nextCanopyId = 0;\n+  //private int nextCanopyId = 0;\n   // the T1 distance threshold\n   private double t1;\n   // the T2 distance threshold\n@@ -57,7 +57,7 @@ public void configure(JobConf job) {\n     } catch (InstantiationException e) {\n       throw new IllegalStateException(e);\n     }\n-    nextCanopyId = 0;\n+    //nextCanopyId = 0; // never read?\n     t1 = Double.parseDouble(job.get(MeanShiftCanopyConfigKeys.T1_KEY));\n     t2 = Double.parseDouble(job.get(MeanShiftCanopyConfigKeys.T2_KEY));\n     convergenceDelta = Double.parseDouble(job.get(MeanShiftCanopyConfigKeys.CLUSTER_CONVERGENCE_KEY));\n@@ -70,7 +70,7 @@ public void configure(JobConf job) {\n    *          the convergence criteria\n    */\n   public void config(DistanceMeasure aMeasure, double aT1, double aT2, double aDelta) {\n-    nextCanopyId = 100; // so canopyIds will sort properly\n+    //nextCanopyId = 100; // so canopyIds will sort properly  // never read?\n     measure = aMeasure;\n     t1 = aT1;\n     t2 = aT2;",
                "additions": 3,
                "raw_url": "https://github.com/apache/mahout/raw/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyClusterer.java",
                "status": "modified",
                "changes": 6,
                "deletions": 3,
                "sha": "1e722137cf2681f15293704018975800eecc194c",
                "blob_url": "https://github.com/apache/mahout/blob/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyClusterer.java",
                "filename": "core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyClusterer.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/clustering/meanshift/MeanShiftCanopyClusterer.java?ref=2dc63b9dc2eda7825b92653a6f3b0ef80075da65"
            },
            {
                "patch": "@@ -187,7 +187,7 @@ protected static void processOutput(JobConf job,\n     }\n     \n     // make sure we got all the keys/values\n-    if (index != keys.length) {\n+    if (keys != null && index != keys.length) {\n       throw new IllegalStateException();\n     }\n   }",
                "additions": 1,
                "raw_url": "https://github.com/apache/mahout/raw/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/df/mapred/partial/PartialBuilder.java",
                "status": "modified",
                "changes": 2,
                "deletions": 1,
                "sha": "eb362062ad8e516f06ab3ce74e451f3fda22aa78",
                "blob_url": "https://github.com/apache/mahout/blob/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/df/mapred/partial/PartialBuilder.java",
                "filename": "core/src/main/java/org/apache/mahout/df/mapred/partial/PartialBuilder.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/df/mapred/partial/PartialBuilder.java?ref=2dc63b9dc2eda7825b92653a6f3b0ef80075da65"
            },
            {
                "patch": "@@ -143,9 +143,10 @@ protected void parseOutput(JobConf job, PredictionCallback callback) throws IOEx\n     int numTrees = Builder.getNbTrees(job);\n     \n     // compute the total number of output values\n-    int total = 0;\n+    //int total = 0;\n     for (int partition = 0; partition < numMaps; partition++) {\n-      total += Step2Mapper.nbConcerned(numMaps, numTrees, partition);\n+      //total += Step2Mapper.nbConcerned(numMaps, numTrees, partition);\n+      Step2Mapper.nbConcerned(numMaps, numTrees, partition);\n     }\n     \n     int[] firstIds = Step0Output.extractFirstIds(partitions);",
                "additions": 3,
                "raw_url": "https://github.com/apache/mahout/raw/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/df/mapred/partial/Step2Job.java",
                "status": "modified",
                "changes": 5,
                "deletions": 2,
                "sha": "a85d7b95803ee44c643c92059ca673423c809ea8",
                "blob_url": "https://github.com/apache/mahout/blob/2dc63b9dc2eda7825b92653a6f3b0ef80075da65/core/src/main/java/org/apache/mahout/df/mapred/partial/Step2Job.java",
                "filename": "core/src/main/java/org/apache/mahout/df/mapred/partial/Step2Job.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/df/mapred/partial/Step2Job.java?ref=2dc63b9dc2eda7825b92653a6f3b0ef80075da65"
            }
        ],
        "bug_id": "mahout_22",
        "parent": "https://github.com/apache/mahout/commit/a0a39da35a85bbccd5764f99fd5a4944f3b5a974",
        "message": "FindBugs changes: one minor possible NPE fix, Map.Entry iteration improvement, dead store removal\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/mahout/trunk@910569 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/aeb8c72aec0ad5be73d94eb21ad4b90517e7b00b",
        "file": [
            {
                "patch": "@@ -70,4 +70,18 @@ public void testTopEntries() throws Exception {\n     assertTrue(VectorHelper.topEntries(v, 5).size() < Iterables.size(v.nonZeroes()));\n   }\n \n+  @Test\n+  public void testTopEntriesWhenAllZeros() throws Exception {\n+    Vector v = new SequentialAccessSparseVector(10);\n+    v.set(2, 0.0);\n+    v.set(4, 0.0);\n+    v.set(6, 0.0);\n+    v.set(7, 0);\n+    v.set(9, 0.0);\n+    v.set(1, 0.0);\n+    v.set(3, 0.0);\n+    v.set(8, 0.0);\n+    assertEquals(0, VectorHelper.topEntries(v, 6).size());\n+  }\n+\n }",
                "additions": 14,
                "raw_url": "https://github.com/apache/mahout/raw/aeb8c72aec0ad5be73d94eb21ad4b90517e7b00b/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "status": "modified",
                "changes": 14,
                "deletions": 0,
                "sha": "6c0a208178c66ad8a651b7457a48aa0b269d6946",
                "blob_url": "https://github.com/apache/mahout/blob/aeb8c72aec0ad5be73d94eb21ad4b90517e7b00b/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "filename": "integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/integration/src/test/java/org/apache/mahout/utils/vectors/VectorHelperTest.java?ref=aeb8c72aec0ad5be73d94eb21ad4b90517e7b00b"
            }
        ],
        "bug_id": "mahout_23",
        "parent": "https://github.com/apache/mahout/commit/096d686486fb30a2dbce9c4e33ecc9875a2c0fa8",
        "message": "MAHOUT-1232: VectorHelper.topEntries() throws a NPE when number of NonZero elements in vector < maxEntries - Adding a unit test to address the scenario when the input vector has all zero elements.\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1487645 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/cc8070905f4a9556fdd54cb7e9cf9ecc2c898d95",
        "file": [
            {
                "patch": "@@ -24,18 +24,22 @@\n import java.util.Random;\n \n /**\n- * Provides a stochastic mixture of ranking updates and normal logistic updates. This uses a\n+ * <p>Provides a stochastic mixture of ranking updates and normal logistic updates. This uses a\n  * combination of AUC driven learning to improve ranking performance and traditional log-loss driven\n- * learning to improve log-likelihood.\n- * <p/>\n- * See www.eecs.tufts.edu/~dsculley/papers/combined-ranking-and-regression.pdf\n+ * learning to improve log-likelihood.</p>\n+ *\n+ * <p>See www.eecs.tufts.edu/~dsculley/papers/combined-ranking-and-regression.pdf</p>\n+ *\n+ * <p>This implementation only makes sense for the binomial case.</p>\n  */\n public class MixedGradient implements Gradient {\n \n   private final double alpha;\n   private final RankingGradient rank;\n   private final Gradient basic;\n   private final Random random = RandomUtils.getRandom();\n+  private boolean hasZero;\n+  private boolean hasOne;\n \n   public MixedGradient(double alpha, int window) {\n     this.alpha = alpha;\n@@ -47,8 +51,13 @@ public MixedGradient(double alpha, int window) {\n   public Vector apply(String groupKey, int actual, Vector instance, AbstractVectorClassifier classifier) {\n     if (random.nextDouble() < alpha) {\n       // one option is to apply a ranking update relative to our recent history\n+      if (!hasZero || !hasOne) {\n+        throw new IllegalStateException();\n+      }\n       return rank.apply(groupKey, actual, instance, classifier);\n     } else {\n+      hasZero |= actual == 0;\n+      hasOne |= actual == 1;\n       // the other option is a normal update, but we have to update our history on the way\n       rank.addToHistory(actual, instance);\n       return basic.apply(groupKey, actual, instance, classifier);",
                "additions": 13,
                "raw_url": "https://github.com/apache/mahout/raw/cc8070905f4a9556fdd54cb7e9cf9ecc2c898d95/core/src/main/java/org/apache/mahout/classifier/sgd/MixedGradient.java",
                "status": "modified",
                "changes": 17,
                "deletions": 4,
                "sha": "a290b226dc08b76a5110542beb1f045e3a2275c0",
                "blob_url": "https://github.com/apache/mahout/blob/cc8070905f4a9556fdd54cb7e9cf9ecc2c898d95/core/src/main/java/org/apache/mahout/classifier/sgd/MixedGradient.java",
                "filename": "core/src/main/java/org/apache/mahout/classifier/sgd/MixedGradient.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/classifier/sgd/MixedGradient.java?ref=cc8070905f4a9556fdd54cb7e9cf9ecc2c898d95"
            }
        ],
        "bug_id": "mahout_24",
        "parent": "https://github.com/apache/mahout/commit/48612cb8a4081a4c70e78fb84a255a59041f021e",
        "message": "MAHOUT-678 commit reasonable band-aid proposed in the patch to resolve the proximate issue: no more NPE when not running on binomial data\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@1160069 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    },
    {
        "commit": "https://github.com/apache/mahout/commit/88c5af99ce20151ca2a8f4fb476db9db0f8a1708",
        "file": [
            {
                "patch": "@@ -10,6 +10,7 @@ org.apache.mahout.clustering.dirichlet.DirichletDriver = dirichlet : Dirichlet C\n org.apache.mahout.clustering.meanshift.MeanShiftCanopyDriver = meanshift : Mean Shift clustering\n org.apache.mahout.clustering.canopy.CanopyDriver = canopy : Canopy clustering\n org.apache.mahout.math.hadoop.TransposeJob = transpose : Take the transpose of a matrix\n+org.apache.mahout.math.hadoop.MatrixMultiplicationJob = matrixmult : Take the produc of two matrices\n org.apache.mahout.utils.vectors.lucene.Driver = lucene.vector : Generate Vectors from a Lucene index\n org.apache.mahout.text.SequenceFilesFromDirectory = seqdirectory : Generate sequence files (of Text) from a directory\n org.apache.mahout.text.SparseVectorsFromSequenceFiles = seq2sparse: Sparse Vector generation from Text sequence files",
                "additions": 1,
                "raw_url": "https://github.com/apache/mahout/raw/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/conf/driver.classes.props",
                "status": "modified",
                "changes": 1,
                "deletions": 0,
                "sha": "1472a9ec2f3639053d9de0778bff81f6e2ba7a9f",
                "blob_url": "https://github.com/apache/mahout/blob/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/conf/driver.classes.props",
                "filename": "conf/driver.classes.props",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/conf/driver.classes.props?ref=88c5af99ce20151ca2a8f4fb476db9db0f8a1708"
            },
            {
                "patch": "@@ -0,0 +1,6 @@\n+#nra|numRowsA = \n+#nca|numColsA =\n+#nrb|numRowsB = \n+#ncb|numColsB =\n+#ia|inputPathA = \n+#ib|inputPathB = ",
                "additions": 6,
                "raw_url": "https://github.com/apache/mahout/raw/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/conf/matrixmult.props",
                "status": "added",
                "changes": 6,
                "deletions": 0,
                "sha": "95218b3f19959062b1004ccf1a4283c47f1aca88",
                "blob_url": "https://github.com/apache/mahout/blob/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/conf/matrixmult.props",
                "filename": "conf/matrixmult.props",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/conf/matrixmult.props?ref=88c5af99ce20151ca2a8f4fb476db9db0f8a1708"
            },
            {
                "patch": "@@ -79,6 +79,9 @@ public int run(String[] strings) throws Exception {\n     addOption(\"inputPathB\", \"ib\", \"Path to the second input matrix\");\n \n     Map<String, String> argMap = parseArguments(strings);\n+    if(argMap == null) {\n+      return -1;\n+    }\n \n     DistributedRowMatrix a = new DistributedRowMatrix(argMap.get(\"--inputPathA\"),\n                                                       argMap.get(\"--tempDir\"),",
                "additions": 3,
                "raw_url": "https://github.com/apache/mahout/raw/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java",
                "status": "modified",
                "changes": 3,
                "deletions": 0,
                "sha": "cb2c4e293a56b45b2f37a4a6be4971e5ce728b58",
                "blob_url": "https://github.com/apache/mahout/blob/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java",
                "filename": "core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/math/hadoop/MatrixMultiplicationJob.java?ref=88c5af99ce20151ca2a8f4fb476db9db0f8a1708"
            },
            {
                "patch": "@@ -17,7 +17,6 @@\n \n package org.apache.mahout.math.hadoop.decomposer;\n \n-import org.apache.commons.cli2.Option;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.fs.FileSystem;\n import org.apache.hadoop.fs.Path;\n@@ -74,18 +73,28 @@ public int run(String[] strings) throws Exception {\n     int numCols = Integer.parseInt(parsedArgs.get(\"--numCols\"));\n     boolean isSymmetric = Boolean.parseBoolean(parsedArgs.get(\"--symmetric\"));\n     int desiredRank = Integer.parseInt(parsedArgs.get(\"--rank\"));\n+    return run(inputPathString, outputTmpPathString, numRows, numCols, isSymmetric, desiredRank);\n+  }\n+\n+  public int run(String inputPathString,\n+                 String outputTmpPathString,\n+                 int numRows,\n+                 int numCols,\n+                 boolean isSymmetric,\n+                 int desiredRank) throws Exception {\n+    Configuration originalConfig = getConf();\n     Matrix eigenVectors = new DenseMatrix(desiredRank, numCols);\n     List<Double> eigenValues = new ArrayList<Double>();\n     String outputEigenVectorPath =  originalConfig.get(\"mapred.output.dir\");\n-    \n+\n     DistributedRowMatrix matrix = new DistributedRowMatrix(inputPathString,\n                                                            outputTmpPathString,\n                                                            numRows,\n                                                            numCols);\n     matrix.configure(new JobConf(originalConfig));\n     solve(matrix, desiredRank, eigenVectors, eigenValues, isSymmetric);\n \n-    serializeOutput(eigenVectors, eigenValues, outputEigenVectorPath);  \n+    serializeOutput(eigenVectors, eigenValues, outputEigenVectorPath);\n     return 0;\n   }\n ",
                "additions": 12,
                "raw_url": "https://github.com/apache/mahout/raw/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java",
                "status": "modified",
                "changes": 15,
                "deletions": 3,
                "sha": "293e776ecda294fd7cd24dc3f8aced4582d0a849",
                "blob_url": "https://github.com/apache/mahout/blob/88c5af99ce20151ca2a8f4fb476db9db0f8a1708/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java",
                "filename": "core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java",
                "contents_url": "https://api.github.com/repos/apache/mahout/contents/core/src/main/java/org/apache/mahout/math/hadoop/decomposer/DistributedLanczosSolver.java?ref=88c5af99ce20151ca2a8f4fb476db9db0f8a1708"
            }
        ],
        "bug_id": "mahout_25",
        "parent": "https://github.com/apache/mahout/commit/964db4a8ae51fb0d896dcd03836c6056ff317898",
        "message": "Add MatrixMultiplication job back to the possibly choices of the mahout driver, and stop throwing NPE upon $MAHOUT_HOME/bin/mahout (svd|matrixmult) -h\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/mahout/trunk@953484 13f79535-47bb-0310-9956-ffa450edef68",
        "repo": "mahout"
    }
]