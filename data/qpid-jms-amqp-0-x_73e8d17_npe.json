[
    {
        "repo": "qpid-jms-amqp-0-x",
        "commit": "https://github.com/apache/qpid-jms-amqp-0-x/commit/73e8d1729db9b28a9b95738a988996fb9e23c4aa",
        "bug_id": "qpid-jms-amqp-0-x_73e8d17",
        "message": "QPID-5785: [Java Broker] Fix NPE when a topic exchange is closed after a message filter has been added to an existing binding.\n\nThis corrects a regression introduced by QPID-5709 that was causing a NPE to appear in the test log for QueueBindingTest.",
        "parent": "https://github.com/apache/qpid-jms-amqp-0-x/commit/f15a62a7603959080faa9eb7b1bf12eec479bf40",
        "patched_files": [
            "TopicExchange.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 15,
                "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/73e8d1729db9b28a9b95738a988996fb9e23c4aa/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java?ref=73e8d1729db9b28a9b95738a988996fb9e23c4aa",
                "filename": "broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java",
                "deletions": 4,
                "sha": "3e5d7dedb4c4be78f3c39f7e1057f70487a31b3e",
                "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/73e8d1729db9b28a9b95738a988996fb9e23c4aa/broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java",
                "patch": "@@ -76,8 +76,10 @@ protected synchronized void onBindingUpdated(final BindingImpl binding, final Ma\n         assert queue != null;\n         assert bindingKey != null;\n \n-        _logger.debug(\"Updating binding of queue \" + queue.getName() + \" with routing key \" + bindingKey);\n-\n+        if (_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"Updating binding of queue \" + queue.getName() + \" with routing key \" + bindingKey);\n+        }\n \n         String routingKey = TopicNormalizer.normalize(bindingKey);\n \n@@ -87,6 +89,7 @@ protected synchronized void onBindingUpdated(final BindingImpl binding, final Ma\n             if (_bindings.containsKey(binding))\n             {\n                 Map<String, Object> oldArgs = _bindings.get(binding);\n+                _bindings.put(binding, args);\n                 TopicExchangeResult result = _topicExchangeResults.get(routingKey);\n \n                 if (FilterSupport.argumentsContainFilter(args))\n@@ -136,8 +139,10 @@ protected synchronized void registerQueue(final BindingImpl binding) throws AMQI\n         assert queue != null;\n         assert bindingKey != null;\n \n-        _logger.debug(\"Registering queue \" + queue.getName() + \" with routing key \" + bindingKey);\n-\n+        if (_logger.isDebugEnabled())\n+        {\n+            _logger.debug(\"Registering queue \" + queue.getName() + \" with routing key \" + bindingKey);\n+        }\n \n         String routingKey = TopicNormalizer.normalize(bindingKey);\n \n@@ -252,6 +257,12 @@ private synchronized boolean deregisterQueue(final BindingImpl binding)\n         if(_bindings.containsKey(binding))\n         {\n             Map<String,Object> bindingArgs = _bindings.remove(binding);\n+\n+            if (_logger.isDebugEnabled())\n+            {\n+                _logger.debug(\"deregisterQueue \" + bindingArgs);\n+            }\n+\n             String bindingKey = TopicNormalizer.normalize(binding.getBindingKey());\n             TopicExchangeResult result = _topicExchangeResults.get(bindingKey);\n ",
                "changes": 19
            },
            {
                "status": "modified",
                "additions": 170,
                "raw_url": "https://github.com/apache/qpid-jms-amqp-0-x/raw/73e8d1729db9b28a9b95738a988996fb9e23c4aa/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms-amqp-0-x/contents/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java?ref=73e8d1729db9b28a9b95738a988996fb9e23c4aa",
                "filename": "broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java",
                "deletions": 38,
                "sha": "d7779390b16e051f08f02fb42a8ca3da79df216d",
                "blob_url": "https://github.com/apache/qpid-jms-amqp-0-x/blob/73e8d1729db9b28a9b95738a988996fb9e23c4aa/broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java",
                "patch": "@@ -20,9 +20,11 @@\n  */\n package org.apache.qpid.server.exchange;\n \n+import static org.apache.qpid.common.AMQPFilterTypes.*;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -31,6 +33,7 @@\n import org.junit.Assert;\n \n import org.apache.qpid.server.binding.BindingImpl;\n+import org.apache.qpid.server.message.AMQMessageHeader;\n import org.apache.qpid.server.message.InstanceProperties;\n import org.apache.qpid.server.message.MessageReference;\n import org.apache.qpid.server.message.ServerMessage;\n@@ -64,6 +67,7 @@ public void setUp() throws Exception\n         attributes.put(Exchange.DURABLE, false);\n \n         _exchange = new TopicExchange(attributes, _vhost);\n+        _exchange.open();\n     }\n \n     @Override\n@@ -94,7 +98,7 @@ public void tearDown() throws Exception\n     public void testNoRoute() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a*#b\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\", 0l);\n@@ -105,7 +109,7 @@ public void testNoRoute() throws Exception\n     public void testDirectMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"ab\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\",0l);\n@@ -127,7 +131,7 @@ public void testDirectMatch() throws Exception\n     public void testStarMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a*\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b\",0l);\n@@ -158,7 +162,7 @@ public void testStarMatch() throws Exception\n     public void testHashMatch() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.#\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.#\", queue, _exchange, null);\n \n \n         routeMessage(\"a.b.c\",0l);\n@@ -209,7 +213,7 @@ public void testHashMatch() throws Exception\n     public void testMidHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b\", queue, _exchange, null);\n \n         routeMessage(\"a.c.d.b\",0l);\n \n@@ -234,7 +238,7 @@ public void testMidHash() throws Exception\n     public void testMatchAfterHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.*.#.b.c\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.*.#.b.c\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a.c.b.b\",0l);\n@@ -272,11 +276,11 @@ public void testMatchAfterHash() throws Exception\n     public void testHashAfterHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(),\n-                                                              \"a.*.#.b.c.#.d\",\n-                                                              queue,\n-                                                              _exchange,\n-                                                              null));\n+        createBinding(UUID.randomUUID(),\n+                      \"a.*.#.b.c.#.d\",\n+                      queue,\n+                      _exchange,\n+                      null);\n \n         int queueCount = routeMessage(\"a.c.b.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -297,7 +301,7 @@ public void testHashAfterHash() throws Exception\n     public void testHashHash() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a#\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.#.*.#.d\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.#.*.#.d\", queue, _exchange, null);\n \n         int queueCount = routeMessage(\"a.c.b.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -318,7 +322,7 @@ public void testHashHash() throws Exception\n     public void testSubMatchFails() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b.c.d\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b.c.d\", queue, _exchange, null);\n \n         int queueCount = routeMessage(\"a.b.c\",0l);\n         Assert.assertEquals(\"Message should not route to any queues\", 0, queueCount);\n@@ -327,27 +331,10 @@ public void testSubMatchFails() throws Exception\n \n     }\n \n-    private int routeMessage(String routingKey, long messageNumber)\n-    {\n-        ServerMessage message = mock(ServerMessage.class);\n-        when(message.getInitialRoutingAddress()).thenReturn(routingKey);\n-        List<? extends BaseQueue> queues = _exchange.route(message, routingKey, InstanceProperties.EMPTY);\n-        MessageReference ref = mock(MessageReference.class);\n-        when(ref.getMessage()).thenReturn(message);\n-        when(message.newReference()).thenReturn(ref);\n-        when(message.getMessageNumber()).thenReturn(messageNumber);\n-        for(BaseQueue q : queues)\n-        {\n-            q.enqueue(message, null);\n-        }\n-\n-        return queues.size();\n-    }\n-\n     public void testMoreRouting() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+       createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a.b.c\",0l);\n@@ -360,7 +347,7 @@ public void testMoreRouting() throws Exception\n     public void testMoreQueue() throws Exception\n     {\n         AMQQueue<?> queue = createQueue(\"a\");\n-        _exchange.registerQueue(createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null));\n+        createBinding(UUID.randomUUID(), \"a.b\", queue, _exchange, null);\n \n \n         int queueCount = routeMessage(\"a\",0l);\n@@ -370,11 +357,119 @@ public void testMoreQueue() throws Exception\n \n     }\n \n-    private static BindingImpl createBinding(UUID id,\n-                                                final String bindingKey,\n-                                                final AMQQueue queue,\n-                                                final ExchangeImpl exchange,\n-                                                final Map<String, Object> arguments)\n+    public void testRouteWithJMSSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"bindingKey\";\n+\n+        Map<String, Object> bindArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 5\");\n+        createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, bindArgs);\n+\n+        ServerMessage matchMsg1 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader1 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        when(matchMsg1.getMessageHeader()).thenReturn(msgHeader1);\n+        routeMessage(matchMsg1, bindingKey, 1);\n+        Assert.assertEquals(\"First message should be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage nonmatchMsg2 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 5));\n+        when(nonmatchMsg2.getMessageHeader()).thenReturn(msgHeader2);\n+        routeMessage(nonmatchMsg2, bindingKey, 2);\n+        Assert.assertEquals(\"Second message should not be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage nonmatchMsg3 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader3 = createMessageHeader(Collections.<String, Object>emptyMap());\n+        when(nonmatchMsg3.getMessageHeader()).thenReturn(msgHeader3);\n+        routeMessage(nonmatchMsg3, bindingKey, 3);\n+        Assert.assertEquals(\"Third message should not be routed to queue\", 1, queue.getQueueDepthMessages());\n+\n+        ServerMessage matchMsg4 = mock(ServerMessage.class);\n+        AMQMessageHeader msgHeader4 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        when(matchMsg4.getMessageHeader()).thenReturn(msgHeader4);\n+        routeMessage(matchMsg4, bindingKey, 4);\n+        Assert.assertEquals(\"First message should be routed to queue\", 2, queue.getQueueDepthMessages());\n+\n+    }\n+\n+    public void testUpdateBindingReplacingSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"a\";\n+\n+        Map<String, Object> originalArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 5\");\n+        createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, originalArgs);\n+\n+        AMQMessageHeader mgsHeader1 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg1 = mock(ServerMessage.class);\n+        when(msg1.getMessageHeader()).thenReturn(mgsHeader1);\n+\n+        routeMessage(msg1, bindingKey, 1);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Update the binding\n+        Map<String, Object> newArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 6\");\n+        _exchange.replaceBinding(bindingKey, queue, newArgs);\n+\n+        // Message that would have matched the original selector but not the new\n+        AMQMessageHeader mgsHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg2 = mock(ServerMessage.class);\n+        when(msg2.getMessageHeader()).thenReturn(mgsHeader2);\n+\n+        routeMessage(msg2, bindingKey, 2);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Message that matches only the second\n+        AMQMessageHeader mgsHeader3 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        ServerMessage msg3 = mock(ServerMessage.class);\n+        when(msg3.getMessageHeader()).thenReturn(mgsHeader3);\n+\n+        routeMessage(msg3, bindingKey, 2);\n+        Assert.assertEquals(2, queue.getQueueDepthMessages());\n+\n+    }\n+\n+    // This demonstrates QPID-5785.  Deleting the exchange after this combination of binding\n+    // updates generated a NPE\n+    public void testUpdateBindingAddingSelector() throws Exception\n+    {\n+        AMQQueue<?> queue = createQueue(\"queue1\");\n+        final String bindingKey = \"a\";\n+\n+        BindingImpl binding = createBinding(UUID.randomUUID(), bindingKey, queue, _exchange, null);\n+\n+        ServerMessage msg1 = mock(ServerMessage.class);\n+\n+        routeMessage(msg1, bindingKey, 1);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Update the binding adding selector\n+        Map<String, Object> newArgs = Collections.<String, Object>singletonMap(JMS_SELECTOR.toString(), \"arg > 6\");\n+        _exchange.replaceBinding(bindingKey, queue, newArgs);\n+\n+        // Message that does not match the new selector\n+        AMQMessageHeader mgsHeader2 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 6));\n+        ServerMessage msg2 = mock(ServerMessage.class);\n+        when(msg2.getMessageHeader()).thenReturn(mgsHeader2);\n+\n+        routeMessage(msg2, bindingKey, 2);\n+        Assert.assertEquals(1, queue.getQueueDepthMessages());\n+\n+        // Message that matches the selector\n+        AMQMessageHeader mgsHeader3 = createMessageHeader(Collections.<String, Object>singletonMap(\"arg\", 7));\n+        ServerMessage msg3 = mock(ServerMessage.class);\n+        when(msg3.getMessageHeader()).thenReturn(mgsHeader3);\n+\n+        routeMessage(msg3, bindingKey, 2);\n+        Assert.assertEquals(2, queue.getQueueDepthMessages());\n+\n+        _exchange.delete();\n+    }\n+\n+    private BindingImpl createBinding(UUID id,\n+                                      String bindingKey,\n+                                      AMQQueue queue,\n+                                      ExchangeImpl exchange,\n+                                      Map<String, Object> arguments)\n     {\n         Map<String, Object> attributes = new HashMap<String, Object>();\n         attributes.put(Binding.NAME, bindingKey);\n@@ -383,10 +478,47 @@ private static BindingImpl createBinding(UUID id,\n             attributes.put(Binding.ARGUMENTS, arguments);\n         }\n         attributes.put(Binding.ID, id);\n-        BindingImpl binding = new BindingImpl(attributes, queue, exchange);\n+\n+        BindingImpl binding = (BindingImpl) _vhost.getObjectFactory().create(Binding.class, attributes, queue, exchange);\n         binding.open();\n         return binding;\n     }\n \n+    private int routeMessage(String routingKey, long messageNumber)\n+    {\n+        ServerMessage message = mock(ServerMessage.class);\n+        return routeMessage(message, routingKey, messageNumber);\n+    }\n+\n+    private int routeMessage(ServerMessage message, String routingKey, long messageNumber)\n+    {\n+        when(message.getInitialRoutingAddress()).thenReturn(routingKey);\n+        List<? extends BaseQueue> queues = _exchange.route(message, routingKey, InstanceProperties.EMPTY);\n+        MessageReference ref = mock(MessageReference.class);\n+        when(ref.getMessage()).thenReturn(message);\n+        when(message.newReference()).thenReturn(ref);\n+        when(message.getMessageNumber()).thenReturn(messageNumber);\n+        for(BaseQueue q : queues)\n+        {\n+            q.enqueue(message, null);\n+        }\n+\n+        return queues.size();\n+    }\n+\n+    private AMQMessageHeader createMessageHeader(Map<String, Object> headers)\n+    {\n+        AMQMessageHeader messageHeader = mock(AMQMessageHeader.class);\n+        for(Map.Entry<String, Object> entry : headers.entrySet())\n+        {\n+            String key = entry.getKey();\n+            Object value = entry.getValue();\n+\n+            when(messageHeader.containsHeader(key)).thenReturn(true);\n+            when(messageHeader.getHeader(key)).thenReturn(value);\n+        }\n+        return messageHeader;\n+    }\n+\n \n }",
                "changes": 208
            }
        ],
        "unit_tests": [
            "TopicExchangeTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "broker-core/src/test/java/org/apache/qpid/server/exchange/TopicExchangeTest.java",
        "buggy_files": [
            "broker-core/src/main/java/org/apache/qpid/server/exchange/TopicExchange.java"
        ],
        "fixed": true
    }
]