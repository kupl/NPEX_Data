[{"commit": "https://github.com/apache/geronimo-xbean/commit/5a7ee535445d001d4b72778e37314d46cba6bf6e", "parent": "https://github.com/apache/geronimo-xbean/commit/236c6e7b88f4b5b337d63e7114815c42d40ab6fe", "message": "XBEAN-76 fix NPE, eliminate intellij warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@511967 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "geronimo-xbean_1", "file": [{"additions": 36, "raw_url": "https://github.com/apache/geronimo-xbean/raw/5a7ee535445d001d4b72778e37314d46cba6bf6e/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/5a7ee535445d001d4b72778e37314d46cba6bf6e/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java", "sha": "5e123695ef6189a480b9328aeb6d1ec1b996abc0", "changes": 69, "status": "modified", "deletions": 33, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java?ref=5a7ee535445d001d4b72778e37314d46cba6bf6e", "patch": "@@ -59,11 +59,11 @@\n  * @version $Rev$ $Date$\n  */\n public class ClassFinder {\n-    private final Map<String, List<Info>> annotated = new HashMap();\n-    private final List<ClassInfo> classInfos = new ArrayList();\n+    private final Map<String, List<Info>> annotated = new HashMap<String, List<Info>>();\n+    private final List<ClassInfo> classInfos = new ArrayList<ClassInfo>();\n \n     private final ClassLoader classLoader;\n-    private final List<String> classesNotLoaded = new ArrayList();\n+    private final List<String> classesNotLoaded = new ArrayList<String>();\n \n     /**\n      * Creates a ClassFinder that will search the urls in the specified classloader\n@@ -77,8 +77,8 @@\n      *\n      *    new ClassFinder(classLoader, classLoader.getParent().getParent());\n      *\n-     * @param classLoader\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @throws Exception if something goes wrong\n      */\n     public ClassFinder(ClassLoader classLoader) throws Exception {\n         this(classLoader, true);\n@@ -87,9 +87,9 @@ public ClassFinder(ClassLoader classLoader) throws Exception {\n     /**\n      * Creates a ClassFinder that will search the urls in the specified classloader.\n      *\n-     * @param classLoader\n-     * @param excludeParent\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @param excludeParent Allegedly excludes classes from parent classloader, whatever that might mean\n+     * @throws Exception if something goes wrong.\n      */\n     public ClassFinder(ClassLoader classLoader, boolean excludeParent) throws Exception {\n         this(classLoader, getUrls(classLoader, excludeParent));\n@@ -99,22 +99,22 @@ public ClassFinder(ClassLoader classLoader, boolean excludeParent) throws Except\n      * Creates a ClassFinder that will search the urls in the specified classloader excluding\n      * the urls in the 'exclude' classloader.\n      *\n-     * @param classLoader\n-     * @param exclude\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @param exclude source of classes to exclude from scanning\n+     * @throws Exception if something goes wrong\n      */\n     public ClassFinder(ClassLoader classLoader, ClassLoader exclude) throws Exception {\n         this(classLoader, getUrls(classLoader, exclude));\n     }\n \n     public ClassFinder(ClassLoader classLoader, URL url) {\n-        this(classLoader, Arrays.asList(new URL[]{url}));\n+        this(classLoader, Arrays.asList(url));\n     }\n \n     public ClassFinder(ClassLoader classLoader, Collection<URL> urls) {\n         this.classLoader = classLoader;\n \n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n         for (URL location : urls) {\n             try {\n                 if (location.getProtocol().equals(\"jar\")) {\n@@ -146,8 +146,8 @@ public ClassFinder(Class... classes){\n \n     public ClassFinder(List<Class> classes){\n         this.classLoader = null;\n-        List<Info> infos = new ArrayList();\n-        List<Package> packages = new ArrayList();\n+        List<Info> infos = new ArrayList<Info>();\n+        List<Package> packages = new ArrayList<Package>();\n         for (Class clazz : classes) {\n \n             Package aPackage = clazz.getPackage();\n@@ -191,10 +191,11 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n      * The list will only contain entries of classes whose byte code matched the requirements\n      * of last invoked find* method, but were unable to be loaded and included in the results.\n      * <p/>\n-     * The list returned is unmodifiable and the results of this method will change\n-     * after each invocation of a findAnnotated* method.\n+     * The list returned is unmodifiable.  Once obtained, the returned list will be a live view of the\n+     * results from the last findAnnotated* method call.\n      * <p/>\n      * This method is not thread safe.\n+     * @return an unmodifiable live view of classes that could not be loaded in previous findAnnotated* call.\n      */\n     public List<String> getClassesNotLoaded() {\n         return Collections.unmodifiableList(classesNotLoaded);\n@@ -331,7 +332,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n \n     public List<Class> findClassesInPackage(String packageName, boolean recursive) {\n         classesNotLoaded.clear();\n-        List<Class> classes = new ArrayList();\n+        List<Class> classes = new ArrayList<Class>();\n         for (ClassInfo classInfo : classInfos) {\n             try {\n                 if (recursive && classInfo.getPackageName().startsWith(packageName)){\n@@ -364,7 +365,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n     }\n \n     private static Map<String, URL> toMap(Enumeration<URL> enumeration) {\n-        Map<String, URL> urls = new HashMap();\n+        Map<String, URL> urls = new HashMap<String, URL>();\n         while (enumeration.hasMoreElements()) {\n             URL url = enumeration.nextElement();\n             urls.put(url.toExternalForm(), url);\n@@ -373,7 +374,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n     }\n \n     private List<String> file(URL location) {\n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n         File dir = new File(location.getPath());\n         if (dir.getName().equals(\"META-INF\")) {\n             dir = dir.getParentFile(); // Scrape \"META-INF\" off\n@@ -413,7 +414,7 @@ private void scanDir(File dir, List<String> classNames, String packageName) {\n     }\n \n     private List<String> jar(JarInputStream jarStream) throws IOException {\n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n \n         JarEntry entry;\n         while ((entry = jarStream.getNextJarEntry()) != null) {\n@@ -430,7 +431,7 @@ private void scanDir(File dir, List<String> classNames, String packageName) {\n     }\n \n     public class Annotatable {\n-        private final List<AnnotationInfo> annotations = new ArrayList();\n+        private final List<AnnotationInfo> annotations = new ArrayList<AnnotationInfo>();\n \n         public Annotatable(AnnotatedElement element) {\n             for (Annotation annotation : element.getAnnotations()) {\n@@ -482,11 +483,11 @@ public Package get() throws ClassNotFoundException {\n \n     public class ClassInfo extends Annotatable implements Info {\n         private final String name;\n-        private final List<MethodInfo> methods = new ArrayList();\n-        private final List<MethodInfo> constructors = new ArrayList();\n+        private final List<MethodInfo> methods = new ArrayList<MethodInfo>();\n+        private final List<MethodInfo> constructors = new ArrayList<MethodInfo>();\n         private final String superType;\n-        private final List<String> interfaces = new ArrayList();\n-        private final List<FieldInfo> fields = new ArrayList();\n+        private final List<String> interfaces = new ArrayList<String>();\n+        private final List<FieldInfo> fields = new ArrayList<FieldInfo>();\n         private Class<?> clazz;\n         private ClassNotFoundException notFound;\n \n@@ -553,7 +554,7 @@ public String toString() {\n         private final ClassInfo declaringClass;\n         private final String returnType;\n         private final String name;\n-        private final List<List<AnnotationInfo>> parameterAnnotations = new ArrayList();\n+        private final List<List<AnnotationInfo>> parameterAnnotations = new ArrayList<List<AnnotationInfo>>();\n \n         public MethodInfo(ClassInfo info, Constructor constructor){\n             super(constructor);\n@@ -663,14 +664,14 @@ public String getName() {\n         }\n \n         public String toString() {\n-            return name.toString();\n+            return name;\n         }\n     }\n \n     private List<Info> getAnnotationInfos(String name) {\n         List<Info> infos = annotated.get(name);\n         if (infos == null) {\n-            infos = new ArrayList();\n+            infos = new ArrayList<Info>();\n             annotated.put(name, infos);\n         }\n         return infos;\n@@ -680,16 +681,18 @@ private void readClassDef(String className) {\n         if (!className.endsWith(\".class\")) {\n             className = className.replace('.', '/') + \".class\";\n         }\n-        ClassReader classReader = null;\n         try {\n             URL resource = classLoader.getResource(className);\n-            classReader = new ClassReader(resource.openStream());\n+            if (resource != null) {\n+                ClassReader classReader = new ClassReader(resource.openStream());\n+                classReader.accept(new InfoBuildingVisitor(), true);\n+            } else {\n+                new Exception(\"Could not load \" + className).printStackTrace();\n+            }\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n \n-//        classReader.accept(new ASMifierClassVisitor(new PrintWriter(System.out)), true);\n-        classReader.accept(new InfoBuildingVisitor(), true);\n     }\n \n     public class InfoBuildingVisitor extends EmptyVisitor {", "filename": "xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java"}], "repo": "geronimo-xbean"}, {"commit": "https://github.com/apache/geronimo-xbean/commit/c9869d3bebd3fb3f814342e6ce8c944d8426d50a", "parent": "https://github.com/apache/geronimo-xbean/commit/ad0cdf20a996a4939bcb1f51eb1effbf7b4d619a", "message": "Prevent NPEs for elements which don't have read properties.\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@380521 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "geronimo-xbean_2", "file": [{"additions": 7, "raw_url": "https://github.com/apache/geronimo-xbean/raw/c9869d3bebd3fb3f814342e6ce8c944d8426d50a/spring/src/main/java/org/xbean/spring/generator/QdoxMappingLoader.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/c9869d3bebd3fb3f814342e6ce8c944d8426d50a/spring/src/main/java/org/xbean/spring/generator/QdoxMappingLoader.java", "sha": "e18449845ef7ef54e0160d9ca580c6d320721717", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/spring/src/main/java/org/xbean/spring/generator/QdoxMappingLoader.java?ref=c9869d3bebd3fb3f814342e6ce8c944d8426d50a", "patch": "@@ -176,11 +176,13 @@ private ElementMapping loadElement(JavaClass javaClass) {\n                     attributesByPropertyName.put(attributeMapping.getPropertyName(), attributeMapping);\n                 }\n                 JavaMethod acc = beanProperty.getAccessor();\n-                DocletTag mapTag = acc.getTagByName(MAP_ANNOTATION);\n-                if (mapTag != null) {\n-                    MapMapping mm = new MapMapping(mapTag.getNamedParameter(\"entryName\"), \n-                            mapTag.getNamedParameter(\"keyName\"));\n-                    mapsByPropertyName.put(beanProperty.getName(), mm);\n+                if (acc != null) {\n+                    DocletTag mapTag = acc.getTagByName(MAP_ANNOTATION);\n+                    if (mapTag != null) {\n+                        MapMapping mm = new MapMapping(mapTag.getNamedParameter(\"entryName\"), \n+                                mapTag.getNamedParameter(\"keyName\"));\n+                        mapsByPropertyName.put(beanProperty.getName(), mm);\n+                    }\n                 }\n             }\n         }", "filename": "spring/src/main/java/org/xbean/spring/generator/QdoxMappingLoader.java"}], "repo": "geronimo-xbean"}, {"commit": "https://github.com/apache/geronimo-xbean/commit/7aefc79bab6c2fcfbc4fd52754e4f36f5daf79f5", "parent": "https://github.com/apache/geronimo-xbean/commit/09b93b5d088b00e0705c29137183d6398441b806", "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@380492 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "geronimo-xbean_3", "file": [{"additions": 4, "raw_url": "https://github.com/apache/geronimo-xbean/raw/7aefc79bab6c2fcfbc4fd52754e4f36f5daf79f5/spring/src/main/java/org/xbean/spring/context/impl/QNameHelper.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/7aefc79bab6c2fcfbc4fd52754e4f36f5daf79f5/spring/src/main/java/org/xbean/spring/context/impl/QNameHelper.java", "sha": "710ebbf9db1f927c82699cf6e81eb9eaca09b027", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/spring/src/main/java/org/xbean/spring/context/impl/QNameHelper.java?ref=7aefc79bab6c2fcfbc4fd52754e4f36f5daf79f5", "patch": "@@ -84,6 +84,10 @@ public static void coerceQNamePropertyValues(QNameReflectionParams params) {\n     \n     public static void coerceNamespaceAwarePropertyValues(AbstractBeanDefinition bd, Element element, PropertyDescriptor[] descriptors, int i) {\n         PropertyDescriptor descriptor = descriptors[i];\n+        // When the property is an indexed property, the getPropertyType can return null.\n+        if (descriptor.getPropertyType() == null) {\n+            return;\n+        }\n         if (descriptor.getPropertyType().isAssignableFrom(QName.class)) {\n             String name = descriptor.getName();\n             MutablePropertyValues propertyValues = bd.getPropertyValues();", "filename": "spring/src/main/java/org/xbean/spring/context/impl/QNameHelper.java"}], "repo": "geronimo-xbean"}, {"commit": "https://github.com/apache/geronimo-xbean/commit/11b2e88df77c701c44467e7ff7d8d535c9a32bf3", "parent": "https://github.com/apache/geronimo-xbean/commit/d0ecaf77422f9bf33471ceba66a7b5102f90be31", "message": "XBEAN-267 javadoc for 267 and fix for XBEAN-263 creating ClassInfo for an annotated Class object throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@1596328 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "geronimo-xbean_4", "file": [{"additions": 6, "raw_url": "https://github.com/apache/geronimo-xbean/raw/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/main/java/org/apache/xbean/finder/AnnotationFinder.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/main/java/org/apache/xbean/finder/AnnotationFinder.java", "sha": "84bf6470eb2649de11d47e80fee451a2c6dc39a4", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/main/java/org/apache/xbean/finder/AnnotationFinder.java?ref=11b2e88df77c701c44467e7ff7d8d535c9a32bf3", "patch": "@@ -1698,8 +1698,12 @@ public AnnotationInfo(Class<? extends Annotation> annotation) {\n         }\n \n         public AnnotationInfo(String name) {\n-            name = Type.getType(name).getClassName();\n-            this.name = name.intern();\n+            final Type type = Type.getType(name);\n+            name = type.getClassName();\n+            if (name == null) {\n+                name = type.getDescriptor(); // name was already a class name\n+            }\n+            this.name = name;\n         }\n \n         public String getName() {", "filename": "xbean-finder/src/main/java/org/apache/xbean/finder/AnnotationFinder.java"}, {"additions": 5, "raw_url": "https://github.com/apache/geronimo-xbean/raw/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/main/java/org/apache/xbean/finder/AsynchronousInheritanceAnnotationFinder.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/main/java/org/apache/xbean/finder/AsynchronousInheritanceAnnotationFinder.java", "sha": "7c17b63a8b1f33688cdaeb661ced8d9b2e16a56e", "changes": 9, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/main/java/org/apache/xbean/finder/AsynchronousInheritanceAnnotationFinder.java?ref=11b2e88df77c701c44467e7ff7d8d535c9a32bf3", "patch": "@@ -29,6 +29,7 @@\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+// designed to trigger asynchronism from a single thread\n public class AsynchronousInheritanceAnnotationFinder extends AnnotationFinder {\n     private ExecutorService executor = null;\n     private CountDownLatch subclassesLatch = null;\n@@ -43,7 +44,7 @@ public AsynchronousInheritanceAnnotationFinder(final Archive archive) {\n         super(archive);\n     }\n \n-    @Override\n+    @Override // should be called from main thread\n     public AnnotationFinder enableFindImplementations() {\n         if (implementationsLatch == null) {\n             enableFindSubclasses();\n@@ -65,7 +66,7 @@ public void run() {\n         return this;\n     }\n \n-    @Override\n+    @Override  // should be called from main thread\n     public AnnotationFinder enableFindSubclasses() {\n         if (subclassesLatch == null) {\n             subclassesLatch = new CountDownLatch(1);\n@@ -80,7 +81,7 @@ public void run() {\n         return this;\n     }\n \n-    @Override\n+    @Override  // should be called from main thread\n     public <T> List<Class<? extends T>> findSubclasses(final Class<T> clazz) {\n         if (subclassesLatch == null) {\n             enableFindSubclasses();\n@@ -89,7 +90,7 @@ public void run() {\n         return super.findSubclasses(clazz);\n     }\n \n-    @Override\n+    @Override  // should be called from main thread\n     public <T> List<Class<? extends T>> findImplementations(final Class<T> clazz) {\n         if (implementationsLatch == null) {\n             enableFindImplementations();", "filename": "xbean-finder/src/main/java/org/apache/xbean/finder/AsynchronousInheritanceAnnotationFinder.java"}, {"additions": 18, "raw_url": "https://github.com/apache/geronimo-xbean/raw/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/test/java/org/apache/xbean/finder/ClassFinderDepthTest.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/test/java/org/apache/xbean/finder/ClassFinderDepthTest.java", "sha": "20202608be5a2f3e73298c8044de39d3425aab03", "changes": 19, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/test/java/org/apache/xbean/finder/ClassFinderDepthTest.java?ref=11b2e88df77c701c44467e7ff7d8d535c9a32bf3", "patch": "@@ -20,13 +20,16 @@\n import org.apache.xbean.finder.archive.ClassesArchive;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n /**\n  * @version $Rev$ $Date$\n  */\n public class ClassFinderDepthTest extends TestCase {\n-\n+    @Deprecated\n+    public static abstract class TargetImpl implements java.lang.annotation.Target {\n+    }\n \n     public static interface Hue<T> {\n     }\n@@ -74,6 +77,20 @@ public void testFindSubclassesIncomplete() throws Exception {\n         }\n     }\n \n+    public void testFindAnnotatedInterfaceImplementationsAfterGet() {\n+        for (int i = 0; i < 10; i++) {\n+                final ClassesArchive archive = new ClassesArchive(TargetImpl.class);\n+                for (final AnnotationFinder finder : new AnnotationFinder[] {\n+                            new AnnotationFinder(archive),\n+                            new AsynchronousInheritanceAnnotationFinder(archive)\n+                                }) {\n+                        assertEquals(Collections.singletonList(TargetImpl.class), finder.findAnnotatedClasses(Deprecated.class));\n+                        finder.link();\n+                        assertImplementations(finder, java.lang.annotation.Target.class, TargetImpl.class);\n+                    }\n+            }\n+    }\n+\n     public void testFindImplementations() throws Exception {\n         for (int i = 0; i < 10; i++) { // try to avoid AsynchronousInheritanceAnnotationFinder \"luck\" issues\n             for (final AnnotationFinder finder : new AnnotationFinder[] {", "filename": "xbean-finder/src/test/java/org/apache/xbean/finder/ClassFinderDepthTest.java"}], "repo": "geronimo-xbean"}, {"commit": "https://github.com/apache/geronimo-xbean/commit/11df53b59b983bed2ad4569b2462495157cef4ff", "parent": "https://github.com/apache/geronimo-xbean/commit/351cdaedb0077ac82e6b9e2e03699fd8b28118fb", "message": "XBEAN-39: NPE in XBeanHelper.createBeanDefinitionReader with some Classloaders\nPatch submitted by Stefan Kleineikenscheidt\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@430840 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "geronimo-xbean_5", "file": [{"additions": 10, "raw_url": "https://github.com/apache/geronimo-xbean/raw/11df53b59b983bed2ad4569b2462495157cef4ff/xbean-spring-common/src/main/java/org/apache/xbean/spring/context/impl/XBeanHelper.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/11df53b59b983bed2ad4569b2462495157cef4ff/xbean-spring-common/src/main/java/org/apache/xbean/spring/context/impl/XBeanHelper.java", "sha": "adca90b0682e1b2512a4cc095767f1c8199e997f", "changes": 12, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-spring-common/src/main/java/org/apache/xbean/spring/context/impl/XBeanHelper.java?ref=11df53b59b983bed2ad4569b2462495157cef4ff", "patch": "@@ -6,15 +6,23 @@\n import org.apache.xbean.spring.context.SpringApplicationContext;\r\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;\r\n import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\r\n-import org.springframework.core.SpringVersion;\r\n \r\n public class XBeanHelper {\r\n \r\n     public static XmlBeanDefinitionReader createBeanDefinitionReader(\r\n                     SpringApplicationContext applicationContext,\r\n                     BeanDefinitionRegistry registry,\r\n                     List xmlPreprocessors) {\r\n-        String version = SpringVersion.getVersion();\r\n+        \r\n+        String version = \"2.0\";\r\n+        \r\n+        try {\r\n+            Class spring20Clazz = Class.forName(\"org.springframework.core.AttributeAccessorSupport\");\r\n+            version = \"2.0\";\r\n+        } catch(ClassNotFoundException e) {\r\n+            version = \"1.2.8\";\r\n+        }\r\n+        \r\n         String className = \"org.apache.xbean.spring.context.v\" + version.charAt(0) + \".XBeanXmlBeanDefinitionReader\";\r\n         try {\r\n             Class cl = Class.forName(className);\r", "filename": "xbean-spring-common/src/main/java/org/apache/xbean/spring/context/impl/XBeanHelper.java"}, {"additions": 11, "raw_url": "https://github.com/apache/geronimo-xbean/raw/11df53b59b983bed2ad4569b2462495157cef4ff/xbean-spring-v1/src/main/java/org/apache/xbean/spring/context/v1/XBeanXmlBeanDefinitionParser.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/11df53b59b983bed2ad4569b2462495157cef4ff/xbean-spring-v1/src/main/java/org/apache/xbean/spring/context/v1/XBeanXmlBeanDefinitionParser.java", "sha": "ef7eedc04eae183cb399515b802bb8eb11db697f", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-spring-v1/src/main/java/org/apache/xbean/spring/context/v1/XBeanXmlBeanDefinitionParser.java?ref=11df53b59b983bed2ad4569b2462495157cef4ff", "patch": "@@ -23,6 +23,9 @@\n import java.beans.PropertyDescriptor;\n import java.beans.PropertyEditor;\n import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Arrays;\n@@ -685,6 +688,14 @@ protected MappingMetaData findNamespaceProperties(String namespaceURI, String lo\n      * Loads the resource from the given URI\n      */\n     protected InputStream loadResource(String uri) {\n+        if (System.getProperty(\"xbean.dir\") != null) {\n+            File f = new File(System.getProperty(\"xbean.dir\") + uri);\n+            try {\n+                return new FileInputStream(f);\n+            } catch (FileNotFoundException e) {\n+                // Ignore\n+            }\n+        }\n         // lets try the thread context class loader first\n         InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(uri);\n         if (in == null) {", "filename": "xbean-spring-v1/src/main/java/org/apache/xbean/spring/context/v1/XBeanXmlBeanDefinitionParser.java"}, {"additions": 11, "raw_url": "https://github.com/apache/geronimo-xbean/raw/11df53b59b983bed2ad4569b2462495157cef4ff/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanNamespaceHandler.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/11df53b59b983bed2ad4569b2462495157cef4ff/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanNamespaceHandler.java", "sha": "bfad15a15a48a759a5bd050c815d5b3b25798fbd", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanNamespaceHandler.java?ref=11df53b59b983bed2ad4569b2462495157cef4ff", "patch": "@@ -21,6 +21,9 @@\n import java.beans.PropertyDescriptor;\n import java.beans.PropertyEditor;\n import java.io.ByteArrayInputStream;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n import java.lang.reflect.Method;\n@@ -713,6 +716,14 @@ protected MappingMetaData findNamespaceProperties(String namespaceURI, String lo\n      * Loads the resource from the given URI\n      */\n     protected InputStream loadResource(String uri) {\n+        if (System.getProperty(\"xbean.dir\") != null) {\n+            File f = new File(System.getProperty(\"xbean.dir\") + uri);\n+            try {\n+                return new FileInputStream(f);\n+            } catch (FileNotFoundException e) {\n+                // Ignore\n+            }\n+        }\n         // lets try the thread context class loader first\n         InputStream in = Thread.currentThread().getContextClassLoader().getResourceAsStream(uri);\n         if (in == null) {", "filename": "xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanNamespaceHandler.java"}], "repo": "geronimo-xbean"}, {"commit": "https://github.com/apache/geronimo-xbean/commit/f928aaa9360ba5b158895a3fe89fcdc01438749b", "parent": "https://github.com/apache/geronimo-xbean/commit/fdb0590edf1e9ea7a9644de488b6a79a9740a293", "message": "XBEAN-30: NPE using XBeanHelper.createBeanDefinitionReader and spring 2.0-rc2\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@427307 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "geronimo-xbean_6", "file": [{"additions": 8, "raw_url": "https://github.com/apache/geronimo-xbean/raw/f928aaa9360ba5b158895a3fe89fcdc01438749b/xbean-spring-itests/core/src/main/java/org/apache/xbean/spring/context/RestaurantUsingXBeanTest.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/f928aaa9360ba5b158895a3fe89fcdc01438749b/xbean-spring-itests/core/src/main/java/org/apache/xbean/spring/context/RestaurantUsingXBeanTest.java", "sha": "f3fc38961f813b89de99cea7a1c6b5efcc990a81", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-spring-itests/core/src/main/java/org/apache/xbean/spring/context/RestaurantUsingXBeanTest.java?ref=f928aaa9360ba5b158895a3fe89fcdc01438749b", "patch": "@@ -20,8 +20,10 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.springframework.context.support.AbstractXmlApplicationContext;\n+import org.springframework.core.io.ClassPathResource;\n import org.apache.xbean.spring.example.RestaurantService;\n import org.apache.xbean.spring.example.PizzaService;\n+import org.apache.xbean.spring.context.impl.XBeanXmlBeanFactory;\n \n import javax.xml.namespace.QName;\n \n@@ -89,4 +91,10 @@ public void testPizza() throws Exception {\n     protected AbstractXmlApplicationContext createApplicationContext() {\n         return new ClassPathXmlApplicationContext(\"org/apache/xbean/spring/context/restaurant-xbean.xml\");\n     }\n+    \n+     public void testCreateXBeanXmlBeanFactory() throws Exception {\n+        XBeanXmlBeanFactory factory = new XBeanXmlBeanFactory(new ClassPathResource(\"org/apache/xbean/spring/context/restaurant-xbean.xml\"));\n+        assertNotNull(factory);\n+    }\n+ \n }", "filename": "xbean-spring-itests/core/src/main/java/org/apache/xbean/spring/context/RestaurantUsingXBeanTest.java"}, {"additions": 4, "raw_url": "https://github.com/apache/geronimo-xbean/raw/f928aaa9360ba5b158895a3fe89fcdc01438749b/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanXmlBeanDefinitionReader.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/f928aaa9360ba5b158895a3fe89fcdc01438749b/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanXmlBeanDefinitionReader.java", "sha": "1dbf72359168e25372fa62920e939dd45f8140e8", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanXmlBeanDefinitionReader.java?ref=f928aaa9360ba5b158895a3fe89fcdc01438749b", "patch": "@@ -56,8 +56,10 @@ public XBeanXmlBeanDefinitionReader(SpringApplicationContext applicationContext,\n         this.xmlPreprocessors = xmlPreprocessors;\n         setNamespaceAware(true);\n         setValidationMode(VALIDATION_NONE);\n-        setResourceLoader(applicationContext);\n-        setEntityResolver(new ResourceEntityResolver(applicationContext));\n+        if (applicationContext != null) {\n+            setResourceLoader(applicationContext);\n+            setEntityResolver(new ResourceEntityResolver(applicationContext));\n+        }\n         setDocumentReaderClass(XBeanBeanDefinitionDocumentReader.class);\n     }\n ", "filename": "xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanXmlBeanDefinitionReader.java"}], "repo": "geronimo-xbean"}, {"commit": "https://github.com/apache/geronimo-xbean/commit/0316595ac42b91de2477f43af228d72dc1949e7a", "parent": "https://github.com/apache/geronimo-xbean/commit/e4e36a01d4bc7a35fc839e4eb95b73bc13086a5a", "message": "Fix XBEAN-13: NPE when using <classpath><location> tag with non existing locations\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@412229 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "geronimo-xbean_7", "file": [{"additions": 5, "raw_url": "https://github.com/apache/geronimo-xbean/raw/0316595ac42b91de2477f43af228d72dc1949e7a/xbean-server/src/main/java/org/apache/xbean/server/spring/configuration/ClassLoaderXmlPreprocessor.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/0316595ac42b91de2477f43af228d72dc1949e7a/xbean-server/src/main/java/org/apache/xbean/server/spring/configuration/ClassLoaderXmlPreprocessor.java", "sha": "dbc39df23c0d90a971fd01a9d2da3adfa458c0ef", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-server/src/main/java/org/apache/xbean/server/spring/configuration/ClassLoaderXmlPreprocessor.java?ref=0316595ac42b91de2477f43af228d72dc1949e7a", "patch": "@@ -88,7 +88,11 @@ public void preprocess(SpringApplicationContext applicationContext, XmlBeanDefin\n             URL[] urls = new URL[classpath.size()];\n             for (ListIterator iterator = classpath.listIterator(); iterator.hasNext();) {\n                 String location = (String) iterator.next();\n-                urls[iterator.previousIndex()] = repository.getResource(location);\n+                URL url = repository.getResource(location);\n+                if (url == null) {\n+                    throw new FatalBeanException(\"Unable to resolve classpath location \" + location);\n+                }\n+                urls[iterator.previousIndex()] = url;\n             }\n \n             // create the classloader", "filename": "xbean-server/src/main/java/org/apache/xbean/server/spring/configuration/ClassLoaderXmlPreprocessor.java"}], "repo": "geronimo-xbean"}, {"commit": "https://github.com/apache/geronimo-xbean/commit/3749e2f6b04483af8bc69aea60764a8eb0f5fa8e", "parent": "https://github.com/apache/geronimo-xbean/commit/227c83d18cfbe79f85d49d9591cac934279f7a54", "message": "XBEAN-153: Avoid NPE by explicitely checking if passed class is java.lang.Object (classReader.getSuperName() returns null if class is java.lang.Object)\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@982402 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "geronimo-xbean_8", "file": [{"additions": 12, "raw_url": "https://github.com/apache/geronimo-xbean/raw/3749e2f6b04483af8bc69aea60764a8eb0f5fa8e/xbean-finder/src/main/java/org/apache/xbean/finder/BundleAssignableClassFinder.java", "blob_url": "https://github.com/apache/geronimo-xbean/blob/3749e2f6b04483af8bc69aea60764a8eb0f5fa8e/xbean-finder/src/main/java/org/apache/xbean/finder/BundleAssignableClassFinder.java", "sha": "16313221e0516ea6b5b90e5df2b48b89fefde842", "changes": 21, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/main/java/org/apache/xbean/finder/BundleAssignableClassFinder.java?ref=3749e2f6b04483af8bc69aea60764a8eb0f5fa8e", "patch": "@@ -189,11 +189,12 @@ private boolean isInterfaceAssignable(String interfaceName) {\n             logger.warn(\"Unable to check the interface \" + interfaceName, e);\n             return false;\n         } finally {\n-            if (in != null)\n+            if (in != null) {\n                 try {\n                     in.close();\n                 } catch (Exception e) {\n                 }\n+            }\n         }\n     }\n \n@@ -205,7 +206,10 @@ private boolean isInterfaceAssignable(String interfaceName) {\n     private boolean isSuperClassAssignable(String superClassName) {\n         if (targetClassNames.contains(superClassName)) {\n             return true;\n+        } else if (superClassName.equals(\"java/lang/Object\")) {\n+            return false;\n         }\n+        \n         //Check parent class\n         URL url = bundle.getResource(\"/\" + superClassName + \".class\");\n         if (url == null) {\n@@ -216,28 +220,27 @@ private boolean isSuperClassAssignable(String superClassName) {\n         try {\n             in = url.openStream();\n             ClassReader classReader = new ClassReader(in);\n-            String[] superInterfaceNames = classReader.getInterfaces();\n+            \n             //Check interfaces\n+            String[] superInterfaceNames = classReader.getInterfaces();            \n             for (String superInterfaceName : superInterfaceNames) {\n                 if (isInterfaceAssignable(superInterfaceName)) {\n                     return true;\n-                }\n+                }                \n             }\n+            \n             //Check className\n-            if (classReader.getSuperName().equals(\"java/lang/Object\")) {\n-                return targetClassNames.contains(\"java/lang/Object\");\n-            } else {\n-                return isSuperClassAssignable(classReader.getSuperName());\n-            }\n+            return isSuperClassAssignable(classReader.getSuperName());            \n         } catch (IOException e) {\n             logger.warn(\"Unable to check the super class  \" + superClassName, e);\n             return false;\n         } finally {\n-            if (in != null)\n+            if (in != null) {\n                 try {\n                     in.close();\n                 } catch (Exception e) {\n                 }\n+            }\n         }\n     }\n ", "filename": "xbean-finder/src/main/java/org/apache/xbean/finder/BundleAssignableClassFinder.java"}], "repo": "geronimo-xbean"}]
