[
    {
        "repo": "hive",
        "commit": "https://github.com/apache/hive/commit/509308f642f4af8eb44a9fb7f0f105198df9fac6",
        "bug_id": "hive_509308f",
        "message": "HIVE-16788: ODBC call SQLForeignKeys leads to NPE if you use PK arguments rather than FK arguments (Jesus Camacho Rodriguez, reviewed by Ashutosh Chauhan)",
        "parent": "https://github.com/apache/hive/commit/8aee8d4f2b124fcfa093724b4de0a54287a8084f",
        "patched_files": [
            "ObjectStore.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 11,
                "raw_url": "https://github.com/apache/hive/raw/509308f642f4af8eb44a9fb7f0f105198df9fac6/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java?ref=509308f642f4af8eb44a9fb7f0f105198df9fac6",
                "filename": "metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "deletions": 1,
                "sha": "4676e15942d72b0db56bedf0ff30aa60964c28d8",
                "blob_url": "https://github.com/apache/hive/blob/509308f642f4af8eb44a9fb7f0f105198df9fac6/metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java",
                "patch": "@@ -8539,7 +8539,17 @@ private String getPrimaryKeyConstraintName(String db_name, String tbl_name) thro\n     final String parent_tbl_name = parent_tbl_name_input;\n     final String foreign_db_name = foreign_db_name_input;\n     final String foreign_tbl_name = foreign_tbl_name_input;\n-    return new GetListHelper<SQLForeignKey>(foreign_db_name, foreign_tbl_name, allowSql, allowJdo) {\n+    final String db_name;\n+    final String tbl_name;\n+    if (foreign_tbl_name == null) {\n+      // The FK table name might be null if we are retrieving the constraint from the PK side\n+      db_name = parent_db_name_input;\n+      tbl_name = parent_tbl_name_input;\n+    } else {\n+      db_name = foreign_db_name_input;\n+      tbl_name = foreign_tbl_name_input;\n+    }\n+    return new GetListHelper<SQLForeignKey>(db_name, tbl_name, allowSql, allowJdo) {\n \n       @Override\n       protected List<SQLForeignKey> getSqlResult(GetHelper<List<SQLForeignKey>> ctx) throws MetaException {",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 46,
                "raw_url": "https://github.com/apache/hive/raw/509308f642f4af8eb44a9fb7f0f105198df9fac6/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java",
                "contents_url": "https://api.github.com/repos/apache/hive/contents/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java?ref=509308f642f4af8eb44a9fb7f0f105198df9fac6",
                "filename": "metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java",
                "deletions": 3,
                "sha": "b28ea7359357406fcd0ffc01a864ff572ab5f278",
                "blob_url": "https://github.com/apache/hive/blob/509308f642f4af8eb44a9fb7f0f105198df9fac6/metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java",
                "patch": "@@ -63,6 +63,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import com.google.common.collect.ImmutableList;\n+\n import javax.jdo.Query;\n \n public class TestObjectStore {\n@@ -204,22 +206,63 @@ public void testDatabaseOps() throws MetaException, InvalidObjectException, NoSu\n   public void testTableOps() throws MetaException, InvalidObjectException, NoSuchObjectException, InvalidInputException {\n     Database db1 = new Database(DB1, \"description\", \"locationurl\", null);\n     objectStore.createDatabase(db1);\n-    StorageDescriptor sd = new StorageDescriptor(null, \"location\", null, null, false, 0, new SerDeInfo(\"SerDeName\", \"serializationLib\", null), null, null, null);\n+    StorageDescriptor sd1 = new StorageDescriptor(ImmutableList.of(new FieldSchema(\"pk_col\", \"double\", null)),\n+            \"location\", null, null, false, 0, new SerDeInfo(\"SerDeName\", \"serializationLib\", null),\n+            null, null, null);\n     HashMap<String,String> params = new HashMap<String,String>();\n     params.put(\"EXTERNAL\", \"false\");\n-    Table tbl1 = new Table(TABLE1, DB1, \"owner\", 1, 2, 3, sd, null, params, null, null, \"MANAGED_TABLE\");\n+    Table tbl1 = new Table(TABLE1, DB1, \"owner\", 1, 2, 3, sd1, null, params, null, null, \"MANAGED_TABLE\");\n     objectStore.createTable(tbl1);\n \n     List<String> tables = objectStore.getAllTables(DB1);\n     Assert.assertEquals(1, tables.size());\n     Assert.assertEquals(TABLE1, tables.get(0));\n \n-    Table newTbl1 = new Table(\"new\" + TABLE1, DB1, \"owner\", 1, 2, 3, sd, null, params, null, null, \"MANAGED_TABLE\");\n+    StorageDescriptor sd2 = new StorageDescriptor(ImmutableList.of(new FieldSchema(\"fk_col\", \"double\", null)),\n+            \"location\", null, null, false, 0, new SerDeInfo(\"SerDeName\", \"serializationLib\", null),\n+            null, null, null);\n+    Table newTbl1 = new Table(\"new\" + TABLE1, DB1, \"owner\", 1, 2, 3, sd2, null, params, null, null, \"MANAGED_TABLE\");\n     objectStore.alterTable(DB1, TABLE1, newTbl1);\n     tables = objectStore.getTables(DB1, \"new*\");\n     Assert.assertEquals(1, tables.size());\n     Assert.assertEquals(\"new\" + TABLE1, tables.get(0));\n \n+    objectStore.createTable(tbl1);\n+    tables = objectStore.getAllTables(DB1);\n+    Assert.assertEquals(2, tables.size());\n+\n+    List<SQLForeignKey> foreignKeys = objectStore.getForeignKeys(DB1, TABLE1, null, null);\n+    Assert.assertEquals(0, foreignKeys.size());\n+\n+    SQLPrimaryKey pk = new SQLPrimaryKey(DB1, TABLE1, \"pk_col\", 1,\n+            \"pk_const_1\", false, false, false);\n+    objectStore.addPrimaryKeys(ImmutableList.of(pk));\n+    SQLForeignKey fk = new SQLForeignKey(DB1, TABLE1, \"pk_col\",\n+            DB1, \"new\" + TABLE1, \"fk_col\", 1,\n+            0, 0, \"fk_const_1\", \"pk_const_1\", false, false, false);\n+    objectStore.addForeignKeys(ImmutableList.of(fk));\n+\n+    // Retrieve from PK side\n+    foreignKeys = objectStore.getForeignKeys(null, null, DB1, \"new\" + TABLE1);\n+    Assert.assertEquals(1, foreignKeys.size());\n+\n+    List<SQLForeignKey> fks = objectStore.getForeignKeys(null, null, DB1, \"new\" + TABLE1);\n+    if (fks != null) {\n+      for (SQLForeignKey fkcol : fks) {\n+        objectStore.dropConstraint(fkcol.getFktable_db(), fkcol.getFktable_name(), fkcol.getFk_name());\n+      }\n+    }\n+    // Retrieve from FK side\n+    foreignKeys = objectStore.getForeignKeys(DB1, TABLE1, null, null);\n+    Assert.assertEquals(0, foreignKeys.size());\n+    // Retrieve from PK side\n+    foreignKeys = objectStore.getForeignKeys(null, null, DB1, \"new\" + TABLE1);\n+    Assert.assertEquals(0, foreignKeys.size());\n+\n+    objectStore.dropTable(DB1, TABLE1);\n+    tables = objectStore.getAllTables(DB1);\n+    Assert.assertEquals(1, tables.size());\n+\n     objectStore.dropTable(DB1, \"new\" + TABLE1);\n     tables = objectStore.getAllTables(DB1);\n     Assert.assertEquals(0, tables.size());",
                "changes": 49
            }
        ],
        "unit_tests": [
            "TestObjectStore.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "metastore/src/test/org/apache/hadoop/hive/metastore/TestObjectStore.java",
        "buggy_files": [
            "metastore/src/java/org/apache/hadoop/hive/metastore/ObjectStore.java"
        ],
        "fixed": true
    }
]