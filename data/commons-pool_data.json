[{"commit": "https://github.com/apache/commons-pool/commit/d867d8d1a9a19c50f55b74683fe7627929cde336", "parent": "https://github.com/apache/commons-pool/commit/fb70d419c6dee2cfb8a17d88e939bada07d23d9d", "message": "Fix possible NPE if forced creation fails\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/pool/trunk@1102622 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-pool_1", "file": [{"additions": 1, "raw_url": "https://github.com/apache/commons-pool/raw/d867d8d1a9a19c50f55b74683fe7627929cde336/src/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java", "blob_url": "https://github.com/apache/commons-pool/blob/d867d8d1a9a19c50f55b74683fe7627929cde336/src/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java", "sha": "57abf5c7b6ad1b6e0831fc0def73ce3d579a1fe9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java?ref=d867d8d1a9a19c50f55b74683fe7627929cde336", "patch": "@@ -1074,7 +1074,7 @@ public T borrowObject(K key) throws Exception {\n                     create = true;\n                     p = create(key, true);\n                 }\n-                if (!p.allocate()) {\n+                if (p != null && !p.allocate()) {\n                     p = null;\n                 }\n             }", "filename": "src/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java"}], "repo": "commons-pool"}, {"commit": "https://github.com/apache/commons-pool/commit/44c914a2648699722fe8082aeaa247a2e7ff8288", "parent": "https://github.com/apache/commons-pool/commit/ffcfc6b3b856ac017f7e3486a2abb1cb9b8e4660", "message": "No further read locks required but a few places where an NPE may occur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/pool/trunk@1333153 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-pool_2", "file": [{"additions": 15, "raw_url": "https://github.com/apache/commons-pool/raw/44c914a2648699722fe8082aeaa247a2e7ff8288/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java", "blob_url": "https://github.com/apache/commons-pool/blob/44c914a2648699722fe8082aeaa247a2e7ff8288/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java", "sha": "fa563a2b6f7c3c378e1d629d9d96a9ab81faaabf", "changes": 22, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/commons-pool/contents/src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java?ref=44c914a2648699722fe8082aeaa247a2e7ff8288", "patch": "@@ -712,12 +712,17 @@ public void clearOldest() {\n         final Map<PooledObject<T>, K> map = new TreeMap<PooledObject<T>, K>();\n \n         for (K k : poolMap.keySet()) {\n-            final LinkedBlockingDeque<PooledObject<T>> idleObjects =\n-                poolMap.get(k).getIdleObjects();\n-            for (PooledObject<T> p : idleObjects) {\n-                // each item into the map using the PooledObject object as the\n-                // key. It then gets sorted based on the idle time\n-                map.put(p, k);\n+            ObjectDeque<T> queue = poolMap.get(k);\n+            // Protect against possible NPE if key has been removed in another\n+            // thread. Not worth locking the keys while this loop completes.\n+            if (queue != null) {\n+                final LinkedBlockingDeque<PooledObject<T>> idleObjects =\n+                    queue.getIdleObjects();\n+                for (PooledObject<T> p : idleObjects) {\n+                    // each item into the map using the PooledObject object as the\n+                    // key. It then gets sorted based on the idle time\n+                    map.put(p, k);\n+                }\n             }\n         }\n \n@@ -1051,7 +1056,6 @@ private boolean destroy(K key, PooledObject<T> toDestroy, boolean always)\n     private void deregister(K k) {\n         ObjectDeque<T> objectDeque;\n \n-        // TODO Think carefully about when a read lock is required\n         objectDeque = poolMap.get(k);\n         long numInterested = objectDeque.getNumInterested().decrementAndGet();\n         if (numInterested == 0 && objectDeque.getCreateCount().get() == 0) {\n@@ -1088,6 +1092,10 @@ void ensureMinIdle() throws Exception {\n     private void ensureMinIdle(K key) throws Exception {\n         // Calculate current pool objects\n         ObjectDeque<T> objectDeque = poolMap.get(key);\n+        // Protect against NPEs in case the key has been removed\n+        if (objectDeque == null) {\n+            return;\n+        }\n \n         // this method isn't synchronized so the\n         // calculateDeficit is done at the beginning", "filename": "src/main/java/org/apache/commons/pool2/impl/GenericKeyedObjectPool.java"}], "repo": "commons-pool"}]
