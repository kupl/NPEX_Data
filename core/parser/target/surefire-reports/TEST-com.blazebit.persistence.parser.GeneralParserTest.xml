<?xml version="1.0" encoding="UTF-8"?>
<testsuite xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://maven.apache.org/surefire/maven-surefire-plugin/xsd/surefire-test-report.xsd" name="com.blazebit.persistence.parser.GeneralParserTest" time="0.489" tests="127" errors="0" skipped="3" failures="0">
  <properties>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64"/>
    <property name="java.vm.version" value="25.252-b09"/>
    <property name="java.vm.vendor" value="Private Build"/>
    <property name="maven.multiModuleProjectDirectory" value="/media/4tb/npex/npex_data/benchmarks-bears/Bears-156-buggy"/>
    <property name="java.vendor.url" value="http://java.oracle.com/"/>
    <property name="path.separator" value=":"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="skip.gulp" value="true"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="file.encoding.pkg" value="sun.io"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="sun.os.patch.level" value="unknown"/>
    <property name="findbugs.skip" value="true"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/media/4tb/npex/npex_data/benchmarks-bears/Bears-156-buggy"/>
    <property name="checkstyle.skip" value="true"/>
    <property name="java.runtime.version" value="1.8.0_252-8u252-b09-1~18.04-b09"/>
    <property name="java.awt.graphicsenv" value="sun.awt.X11GraphicsEnvironment"/>
    <property name="skip.npm" value="true"/>
    <property name="java.endorsed.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/endorsed"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="gpg.skip" value="true"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="cobertura.skip" value="true"/>
    <property name="os.name" value="Linux"/>
    <property name="classworlds.conf" value="/usr/share/maven/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib/amd64:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/>
    <property name="license.skip" value="true"/>
    <property name="maven.conf" value="/usr/share/maven/conf"/>
    <property name="java.class.version" value="52.0"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="skip.bower" value="true"/>
    <property name="os.version" value="4.15.0-106-generic"/>
    <property name="library.jansi.path" value="/usr/share/maven/lib/jansi-native"/>
    <property name="user.home" value="/home/junhee"/>
    <property name="user.timezone" value="Asia/Seoul"/>
    <property name="java.awt.printerjob" value="sun.print.PSPrinterJob"/>
    <property name="java.specification.version" value="1.8"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="user.name" value="junhee"/>
    <property name="java.class.path" value="/usr/share/maven/boot/plexus-classworlds-2.x.jar"/>
    <property name="java.vm.specification.version" value="1.8"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="java.home" value="/usr/lib/jvm/java-8-openjdk-amd64/jre"/>
    <property name="sun.java.command" value="org.codehaus.plexus.classworlds.launcher.Launcher clean test -V -B -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -Drat.skip=true -Dlicense.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="user.language" value="en"/>
    <property name="awt.toolkit" value="sun.awt.X11.XToolkit"/>
    <property name="java.vm.info" value="mixed mode"/>
    <property name="java.version" value="1.8.0_252"/>
    <property name="java.ext.dirs" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/ext:/usr/java/packages/lib/ext"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="sun.boot.class.path" value="/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/resources.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/rt.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/sunrsasign.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jsse.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jce.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/charsets.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/lib/jfr.jar:/usr/lib/jvm/java-8-openjdk-amd64/jre/classes"/>
    <property name="java.vendor" value="Private Build"/>
    <property name="enforcer.skip" value="true"/>
    <property name="rat.skip" value="true"/>
    <property name="maven.home" value="/usr/share/maven"/>
    <property name="file.separator" value="/"/>
    <property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/>
    <property name="sun.cpu.endian" value="little"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.isalist" value=""/>
  </properties>
  <testcase name="testSoftKeywordsTypeAsSimplePath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testParserArithmeticNoHiddenTokens" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testTreatJoinTreated" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testBetweenArithmetic" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.008"/>
  <testcase name="testArrayInTheMiddle" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testIsNotNull" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testSoftKeywordsMultipleKeywordsAsSimplePath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testSoftKeywordsTypeAsSimpleUpperPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testTypeFunctionParameter" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testBooleanCompare" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.007"/>
  <testcase name="testKeyMapDereferenceExpression" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testTypeFunctionSingleElementPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testBetweenString" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testPathExpressionParsingPositive" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testConditionalCaseWhen" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.04"/>
  <testcase name="testSingleElementArrayIndexPath1" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testSingleElementArrayIndexPath2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testSingleElementArrayIndexPath3" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testSingleElementArrayIndexPath4" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testSingleElementArrayIndexPath5" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testMemberOfInvalidUse" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testOrderBy" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testPathExpressionParsingNegative" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testDeepTreatJoinTreated" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testMultipleArrayExpressions" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testCompositeOuter" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.002"/>
  <testcase name="testAggregateExpressionSinglePath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.003"/>
  <testcase name="testSoftKeywordsTypeAsFunction" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testMacro" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.003"/>
  <testcase name="testOuter" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testSoftKeywordsMultipleKeywordsAsPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testParser2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testParser3" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testLike" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.007"/>
  <testcase name="testNot1" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.034"/>
  <testcase name="testNot2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.02"/>
  <testcase name="testNot3" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.045"/>
  <testcase name="testSize" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testArrayIndexArithmetic" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0">
    <skipped message="#210"/>
  </testcase>
  <testcase name="testValueFunctionArray" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testArrayStringLiteralIndex" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testInParameter" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testDateFunctions" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.014"/>
  <testcase name="testFunctionInvocation" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.004"/>
  <testcase name="testParameterSignumInvert" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testInNumericLiterals" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testLikeEscapeLiteral" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testInParameterNoParanthesis" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testParameterArrayIndex1" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testParameterArrayIndex2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testParameterArrayIndex3" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testParameterArrayIndex4" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testParameterArrayIndex5" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testNestedCaseWhenBooleanLiteral" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.04"/>
  <testcase name="testAggregateExpressionMultiplePath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testKeyFunctionArray" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testArrayIndexArithmeticLiteral" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0">
    <skipped message="#210"/>
  </testcase>
  <testcase name="testTreatSubpathPathMultipleDerference" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testCoalesce" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.007"/>
  <testcase name="testParserArithmetic1" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testParserArithmetic2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testParserArithmetic3" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testInvalidOrderBy1" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testInvalidOrderBy2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testInvalidTreatSubpathPathOnly" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testLikeEscapeParameter" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testArrayIndexArithmeticMixed" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0">
    <skipped message="#210"/>
  </testcase>
  <testcase name="testSimpleCaseWhen" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testJoinTreated" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testNullLiteralInCaseWhenExpression" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testCaseWhenSwitchTrue" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.007"/>
  <testcase name="testMemberOf" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testTreatRootPathMultipleDerference" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testTreatSubpathPathDerference" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testArrayWithInvalidParameterIndex" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testCaseWhenAndOr" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.018"/>
  <testcase name="testCountIdExpression" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.002"/>
  <testcase name="testSoftKeywordsMultipleKeywordsAsUpperPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testArrayIndexPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testKeyMapExpression" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testEntityTypeCompare1" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testEntityTypeCompare2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testCaseWhenMultipleWhenClauses" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.011"/>
  <testcase name="testTreatJoinDeep" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testArrayExpression" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testSoftKeywordsMultipleKeywordsAsSimpleUpperPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testTreatJoin" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testTreatDeepSubpathPathDerference" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testNotBetweenCharacter" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testEnumCompare" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.009"/>
  <testcase name="testTreatDeepSubpathPathMultipleDerference" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testDeepJoinTreated" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testSoftKeywordsTypeAsUpperFunction" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testNullIfExpression" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.002"/>
  <testcase name="testSoftKeywordsTypeAsPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testArrayWithParameterIndex" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testEntryFunctionPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testBetweenDate" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testTreatRootPathDerference" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testComplexCaseWhen" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.018"/>
  <testcase name="testNullLiteralExpression" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testInvalidTreatRootPathOnly" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testNotBetweenString" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testIsNull" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testSoftKeywordsTypeAsUpperPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testTypeFunctionPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testValueFunctionPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testInCharacterLiterals" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testKeyFunctionPath" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testBetweenCharacter" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testLength" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testCaseWhenSize" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testInvalidOuter" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testTreatDeepSubpathPathOnly" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testMultiElementArrayIndexPath1" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testMultiElementArrayIndexPath2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testMultiElementArrayIndexPath3" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testMultiElementArrayIndexPath4" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.002"/>
  <testcase name="testMultiElementArrayIndexPath5" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testNotBetweenArithmetic" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testEntityCompare" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testNotLike" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testInMultipleParameterAndLiteral" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.005"/>
  <testcase name="testEntryFunctionArray" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0"/>
  <testcase name="testNotBetweenDate" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.006"/>
  <testcase name="testTreatPredicate1" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.001"/>
  <testcase name="testTreatPredicate2" classname="com.blazebit.persistence.parser.GeneralParserTest" time="0.002"/>
</testsuite>